1
00:00:00,080 --> 00:00:01,439
In this course, I'm going to take you

2
00:00:01,439 --> 00:00:03,280
from a complete beginner to building

3
00:00:03,280 --> 00:00:05,680
powerful noode AI agents. I don't have

4
00:00:05,680 --> 00:00:07,279
any coding experience, and you don't

5
00:00:07,279 --> 00:00:08,559
need any either. In the past eight

6
00:00:08,559 --> 00:00:10,080
months, I've made over half a million

7
00:00:10,080 --> 00:00:12,000
dollars in revenue by building and

8
00:00:12,000 --> 00:00:14,000
teaching people how to build AI agents.

9
00:00:14,000 --> 00:00:15,200
In this video together, we're going to

10
00:00:15,200 --> 00:00:17,600
set up your 2e free and end trial. We're

11
00:00:17,600 --> 00:00:18,960
going to set up credentials together and

12
00:00:18,960 --> 00:00:20,720
walk through step-by-step builds. And by

13
00:00:20,720 --> 00:00:22,560
the end, you'll have over 15 AI

14
00:00:22,560 --> 00:00:24,240
automations ready to take advantage of

15
00:00:24,240 --> 00:00:25,760
this opportunity. All right, so here is

16
00:00:25,760 --> 00:00:27,519
a quick look at the highle course

17
00:00:27,519 --> 00:00:29,279
agenda. Keep in mind everything will be

18
00:00:29,279 --> 00:00:31,119
timestamped below so you can jump around

19
00:00:31,119 --> 00:00:32,640
to where you need. But I definitely

20
00:00:32,640 --> 00:00:34,399
recommend saving this for later. As you

21
00:00:34,399 --> 00:00:35,440
can see, this is extremely

22
00:00:35,440 --> 00:00:37,040
comprehensive, packed with a ton of

23
00:00:37,040 --> 00:00:38,879
value, so you can come back to this

24
00:00:38,879 --> 00:00:40,239
later when you want to explore different

25
00:00:40,239 --> 00:00:42,079
chapters. But what we're going to do is

26
00:00:42,079 --> 00:00:43,680
start off with talking about AI agents

27
00:00:43,680 --> 00:00:45,440
and the opportunity that we are all

28
00:00:45,440 --> 00:00:47,120
living in right now. Then we'll move

29
00:00:47,120 --> 00:00:49,280
into Foundations. I'll set up a free

30
00:00:49,280 --> 00:00:51,600
twoe trial with you guys. I will talk

31
00:00:51,600 --> 00:00:53,280
about the UI. We'll get familiar with it

32
00:00:53,280 --> 00:00:54,879
and go over some foundational knowledge

33
00:00:54,879 --> 00:00:56,640
you'll need. From there, we'll move into

34
00:00:56,640 --> 00:00:58,399
step-by-step workflows where we're

35
00:00:58,399 --> 00:00:59,680
actually using that knowledge and

36
00:00:59,680 --> 00:01:01,440
connecting to different integrations and

37
00:01:01,440 --> 00:01:03,199
setting up some pretty cool automations

38
00:01:03,199 --> 00:01:05,040
right away. Then, we'll talk about APIs

39
00:01:05,040 --> 00:01:07,200
and HTTP request. We'll set up a few

40
00:01:07,200 --> 00:01:08,799
common examples together, and you'll see

41
00:01:08,799 --> 00:01:10,240
it's not that difficult. Then, moving

42
00:01:10,240 --> 00:01:11,760
into the back half of the course, we'll

43
00:01:11,760 --> 00:01:14,000
talk about AI agent tools and memory. We

44
00:01:14,000 --> 00:01:16,320
will discuss multi-agent architectures.

45
00:01:16,320 --> 00:01:18,240
I'll talk about prompting, do a live

46
00:01:18,240 --> 00:01:19,840
example, and some other cool tips that I

47
00:01:19,840 --> 00:01:20,960
want to share with you guys that could

48
00:01:20,960 --> 00:01:23,200
be helpful. We will look at web hooks,

49
00:01:23,200 --> 00:01:24,640
what those really mean. And then we'll

50
00:01:24,640 --> 00:01:26,479
look at a few example workflows where

51
00:01:26,479 --> 00:01:28,159
we've triggered them with web hooks.

52
00:01:28,159 --> 00:01:30,159
I'll talk about MCP servers, what that

53
00:01:30,159 --> 00:01:32,000
really is, and we'll do a step-by-step

54
00:01:32,000 --> 00:01:33,920
self-hosted setup of Naden and connect

55
00:01:33,920 --> 00:01:36,159
to some MCP servers. And finally, we'll

56
00:01:36,159 --> 00:01:38,400
close off with lessons from my first 6

57
00:01:38,400 --> 00:01:40,720
months of building AI agents. So, if

58
00:01:40,720 --> 00:01:42,400
that all sounds good to you guys, let's

59
00:01:42,400 --> 00:01:44,960
go ahead and get

60
00:01:46,520 --> 00:01:48,880
started. All right, so AI agents,

61
00:01:48,880 --> 00:01:50,720
artificial intelligence, whatever it is,

62
00:01:50,720 --> 00:01:51,920
there is definitely a lot of hype.

63
00:01:51,920 --> 00:01:53,439
There's no denying that. And so the

64
00:01:53,439 --> 00:01:55,040
purpose of this section is just to make

65
00:01:55,040 --> 00:01:56,640
sure we can cut through all of that and

66
00:01:56,640 --> 00:01:58,799
actually understand what is an AI agent

67
00:01:58,799 --> 00:02:01,439
at its core. What can they do and why do

68
00:02:01,439 --> 00:02:03,439
we need them? You probably heard you

69
00:02:03,439 --> 00:02:05,280
know digital employee or virtual

70
00:02:05,280 --> 00:02:07,040
assistant all this kind of stuff. But we

71
00:02:07,040 --> 00:02:08,720
need to understand what that actually

72
00:02:08,720 --> 00:02:11,120
means and what powers them. So at this

73
00:02:11,120 --> 00:02:12,640
point I'm sure we are all familiar with

74
00:02:12,640 --> 00:02:15,200
something like chatbt which is a large

75
00:02:15,200 --> 00:02:16,879
language model at its core. And so we're

76
00:02:16,879 --> 00:02:18,400
looking at right here is a very simple

77
00:02:18,400 --> 00:02:20,160
visualization of how a large language

78
00:02:20,160 --> 00:02:22,319
model works. Meaning right here in green

79
00:02:22,319 --> 00:02:23,680
we have a large language model. Let's

80
00:02:23,680 --> 00:02:26,480
say it's chatbt and we the user give it

81
00:02:26,480 --> 00:02:28,160
some sort of input. So maybe that's like

82
00:02:28,160 --> 00:02:30,879
hey help me write an email to John. The

83
00:02:30,879 --> 00:02:33,360
LLM would then take our input process

84
00:02:33,360 --> 00:02:35,200
this. It would basically just create an

85
00:02:35,200 --> 00:02:36,959
email for us and then it would spit that

86
00:02:36,959 --> 00:02:39,680
out as an output and that's it. This LLM

87
00:02:39,680 --> 00:02:41,760
at its core cannot take any action. It's

88
00:02:41,760 --> 00:02:43,680
really not that practical. It just kind

89
00:02:43,680 --> 00:02:45,599
of helps you be more productive because

90
00:02:45,599 --> 00:02:47,040
at the end of the process, we'd have to

91
00:02:47,040 --> 00:02:49,040
take this output and copy and paste it

92
00:02:49,040 --> 00:02:50,640
into something that actually can take

93
00:02:50,640 --> 00:02:52,959
action like Gmail. And so the power of

94
00:02:52,959 --> 00:02:54,640
these large language models really comes

95
00:02:54,640 --> 00:02:56,480
into play when we start to expose them

96
00:02:56,480 --> 00:02:58,640
to different tools. And tools just means

97
00:02:58,640 --> 00:03:00,160
any of these integrations that we use

98
00:03:00,160 --> 00:03:02,000
every single day within our work that

99
00:03:02,000 --> 00:03:03,840
let us actually do something. So whether

100
00:03:03,840 --> 00:03:06,080
that's send an email or update a row in

101
00:03:06,080 --> 00:03:09,280
our CRM or look at a database or Air

102
00:03:09,280 --> 00:03:11,840
Table, whatever it is, even Outlook,

103
00:03:11,840 --> 00:03:13,519
that's a tool. It just means connecting

104
00:03:13,519 --> 00:03:16,080
to an actual platform that we use to do

105
00:03:16,080 --> 00:03:18,159
something. So now instead of having the

106
00:03:18,159 --> 00:03:19,840
LLM help us write an email that we would

107
00:03:19,840 --> 00:03:22,640
copy and paste or us exporting a Google

108
00:03:22,640 --> 00:03:24,080
sheet and giving it to an LLM to

109
00:03:24,080 --> 00:03:25,840
analyze, it can basically just interact

110
00:03:25,840 --> 00:03:27,360
with any of its tools that we give it

111
00:03:27,360 --> 00:03:30,959
access to. So when we add an LLM to

112
00:03:30,959 --> 00:03:33,040
tools, we basically can get two

113
00:03:33,040 --> 00:03:34,640
different things and that is either an

114
00:03:34,640 --> 00:03:38,159
AI workflow or an AI agent. So right

115
00:03:38,159 --> 00:03:39,360
away you can already tell what the

116
00:03:39,360 --> 00:03:40,879
difference is, but you can also see some

117
00:03:40,879 --> 00:03:42,959
similarities. So, let's break it down.

118
00:03:42,959 --> 00:03:44,480
Starting with an AI workflow, we can see

119
00:03:44,480 --> 00:03:46,480
that we have an input similar to like we

120
00:03:46,480 --> 00:03:48,879
did up top with our LLM. But now,

121
00:03:48,879 --> 00:03:51,280
instead of just going input, LLM,

122
00:03:51,280 --> 00:03:54,239
output, we can work in those tools right

123
00:03:54,239 --> 00:03:56,640
into the actual AI workflow itself. So,

124
00:03:56,640 --> 00:03:58,000
here is an example of what an AI

125
00:03:58,000 --> 00:03:59,920
workflow could practically look like.

126
00:03:59,920 --> 00:04:01,280
First of all, we have a tool which is

127
00:04:01,280 --> 00:04:02,560
HubSpot, and that's going to be the

128
00:04:02,560 --> 00:04:04,239
input for this workflow. This will

129
00:04:04,239 --> 00:04:06,000
basically pass over a new lead that has

130
00:04:06,000 --> 00:04:08,400
been inserted into our CRM. Then we're

131
00:04:08,400 --> 00:04:10,159
hitting another tool which is Perplexity

132
00:04:10,159 --> 00:04:11,760
which helps us do research. So we're

133
00:04:11,760 --> 00:04:13,680
going to do research on that lead. From

134
00:04:13,680 --> 00:04:15,280
there, after we get that research, we're

135
00:04:15,280 --> 00:04:17,040
going to hit an LLM, which is where this

136
00:04:17,040 --> 00:04:18,959
whole AI powered workflow terminology

137
00:04:18,959 --> 00:04:21,199
comes in, because we're using that LLM

138
00:04:21,199 --> 00:04:23,360
to then take the research, draft a

139
00:04:23,360 --> 00:04:25,280
personalized email, and then it can use

140
00:04:25,280 --> 00:04:26,960
another tool to actually send that

141
00:04:26,960 --> 00:04:28,880
email. And the reason that we do this as

142
00:04:28,880 --> 00:04:30,800
a workflow is because this is going to

143
00:04:30,800 --> 00:04:32,880
happen in the same four steps in that

144
00:04:32,880 --> 00:04:35,199
order every time. new lead comes in,

145
00:04:35,199 --> 00:04:37,440
research, write the personalized email,

146
00:04:37,440 --> 00:04:39,680
send the email. And so whenever we know

147
00:04:39,680 --> 00:04:41,759
a process is linear or sequential or

148
00:04:41,759 --> 00:04:43,440
it's going to follow that order every

149
00:04:43,440 --> 00:04:45,360
time, it's much much better to do an

150
00:04:45,360 --> 00:04:47,120
actual workflow rather than send that

151
00:04:47,120 --> 00:04:49,040
off to an AI agent where we have an

152
00:04:49,040 --> 00:04:51,280
input, we have the LLM, which is the AI

153
00:04:51,280 --> 00:04:52,560
agent. This is the brain of the whole

154
00:04:52,560 --> 00:04:54,400
operation and it has access to all of

155
00:04:54,400 --> 00:04:56,400
the different tools it can use and then

156
00:04:56,400 --> 00:04:59,040
it has an output. So yes, it is true

157
00:04:59,040 --> 00:05:00,880
that this AI agent down here could do

158
00:05:00,880 --> 00:05:02,880
the exact same job as this AI workflow.

159
00:05:02,880 --> 00:05:04,800
We could also over here with an AI agent

160
00:05:04,800 --> 00:05:07,280
get a new form and have a new row in our

161
00:05:07,280 --> 00:05:09,120
CRM. The agent could then think about it

162
00:05:09,120 --> 00:05:10,080
and decide, okay, I'm going to use

163
00:05:10,080 --> 00:05:12,080
perplexity to do research and then after

164
00:05:12,080 --> 00:05:13,680
that I'm going to send an email with my

165
00:05:13,680 --> 00:05:15,520
email tool. But it's not the most

166
00:05:15,520 --> 00:05:16,720
effective way to do it because it's

167
00:05:16,720 --> 00:05:18,160
going to be more expensive. It's going

168
00:05:18,160 --> 00:05:20,120
to be slower and it's going to be more

169
00:05:20,120 --> 00:05:22,240
errorprone. So basically the whole idea

170
00:05:22,240 --> 00:05:25,120
is AI agents can make decisions and act

171
00:05:25,120 --> 00:05:27,360
autonomously based on different inputs.

172
00:05:27,360 --> 00:05:29,199
AI workflows follow the guardrails that

173
00:05:29,199 --> 00:05:31,039
we put in place. there's no way they can

174
00:05:31,039 --> 00:05:32,639
deviate off the path that we chose for

175
00:05:32,639 --> 00:05:34,240
them. So, a big part of building

176
00:05:34,240 --> 00:05:36,080
effective systems is understanding,

177
00:05:36,080 --> 00:05:37,840
okay, do I need to build an AI workflow

178
00:05:37,840 --> 00:05:39,680
or am I going to build an AI agent? Is

179
00:05:39,680 --> 00:05:41,199
this process deterministic or

180
00:05:41,199 --> 00:05:43,039
nondeterministic? Or in other words, is

181
00:05:43,039 --> 00:05:45,520
it predictable or is it unpredictable?

182
00:05:45,520 --> 00:05:46,880
If something's unpredictable, that's

183
00:05:46,880 --> 00:05:48,320
when we're going to use an AI agent with

184
00:05:48,320 --> 00:05:50,000
a brain and with different tools to

185
00:05:50,000 --> 00:05:51,440
actually do the job. And that's where

186
00:05:51,440 --> 00:05:53,680
the whole autonomy comes into play. And

187
00:05:53,680 --> 00:05:54,880
I don't want to dive too deep into the

188
00:05:54,880 --> 00:05:56,240
weeds of this right now. We'll cover

189
00:05:56,240 --> 00:05:58,160
this later in a different section. But

190
00:05:58,160 --> 00:06:00,160
real quick, four main pros of AI

191
00:06:00,160 --> 00:06:02,320
workflows over AI agents. Reliability

192
00:06:02,320 --> 00:06:05,120
and consistency, cost efficiency, easier

193
00:06:05,120 --> 00:06:06,680
debugging and maintenance, and

194
00:06:06,680 --> 00:06:08,880
scalability. Once again, we have a whole

195
00:06:08,880 --> 00:06:10,960
section dedicated to this idea and we're

196
00:06:10,960 --> 00:06:12,240
going to dive into it after we've built

197
00:06:12,240 --> 00:06:14,160
out a few AI workflows, but I wanted you

198
00:06:14,160 --> 00:06:15,680
guys to understand this because

199
00:06:15,680 --> 00:06:16,960
obviously the whole purpose you probably

200
00:06:16,960 --> 00:06:18,479
came here was to learn how to build AI

201
00:06:18,479 --> 00:06:20,639
agents. But before we build AI agents,

202
00:06:20,639 --> 00:06:22,000
we're going to learn how to build AI

203
00:06:22,000 --> 00:06:24,160
workflows. It's the whole concept of

204
00:06:24,160 --> 00:06:26,560
crawl, walk, run. you wouldn't just

205
00:06:26,560 --> 00:06:28,400
start running right away. And trust me,

206
00:06:28,400 --> 00:06:29,600
after you've built out a few AI

207
00:06:29,600 --> 00:06:30,880
workflows, it's going to make a lot more

208
00:06:30,880 --> 00:06:32,319
sense when you hop into building some

209
00:06:32,319 --> 00:06:34,639
more complex agentic systems. But just

210
00:06:34,639 --> 00:06:36,240
to give you that quick fix of AI agent

211
00:06:36,240 --> 00:06:37,680
knowledge, and we'll revisit this later

212
00:06:37,680 --> 00:06:39,199
when we actually build our first agent

213
00:06:39,199 --> 00:06:41,840
together. What is the anatomy of an AI

214
00:06:41,840 --> 00:06:43,120
agent? What are the different parts that

215
00:06:43,120 --> 00:06:44,960
make one up? So, here's a simple diagram

216
00:06:44,960 --> 00:06:47,199
that I think illustrates AI agents as

217
00:06:47,199 --> 00:06:49,600
simple as possible. We have an input, we

218
00:06:49,600 --> 00:06:51,440
have our LLM, and we have our output

219
00:06:51,440 --> 00:06:53,280
like we talked about earlier. But then

220
00:06:53,280 --> 00:06:55,280
inside the AI agent you can see two main

221
00:06:55,280 --> 00:06:57,240
things. We have a brain and we have

222
00:06:57,240 --> 00:06:59,120
instructions. So the first thing is a

223
00:06:59,120 --> 00:07:00,960
brain. This comes in the form of a large

224
00:07:00,960 --> 00:07:03,599
language model and also memory. So first

225
00:07:03,599 --> 00:07:05,360
off the large language model this is an

226
00:07:05,360 --> 00:07:07,199
AI chat model that we'll choose whether

227
00:07:07,199 --> 00:07:09,360
that's an open AI model or an anthropic

228
00:07:09,360 --> 00:07:11,599
model or a Google model. This is going

229
00:07:11,599 --> 00:07:13,680
to be what powers the AI agent to make

230
00:07:13,680 --> 00:07:16,319
decisions to reason to generate outputs

231
00:07:16,319 --> 00:07:17,919
that sort of stuff. And then we also

232
00:07:17,919 --> 00:07:19,599
have the memory. So this can come in the

233
00:07:19,599 --> 00:07:21,120
form of long-term memory as well as

234
00:07:21,120 --> 00:07:22,800
short-term memory. But basically, we

235
00:07:22,800 --> 00:07:23,840
want to make sure that if we're

236
00:07:23,840 --> 00:07:25,599
conversating with our agent, it's not

237
00:07:25,599 --> 00:07:28,000
going to forget what we're talking about

238
00:07:28,000 --> 00:07:29,599
after every single sentence. It's going

239
00:07:29,599 --> 00:07:31,599
to retain that context window, and it

240
00:07:31,599 --> 00:07:33,039
can also remember things that we talked

241
00:07:33,039 --> 00:07:35,360
about a while back. And then the other

242
00:07:35,360 --> 00:07:37,199
piece is the instructions for the AI

243
00:07:37,199 --> 00:07:38,960
agent, which is also kind of referred to

244
00:07:38,960 --> 00:07:40,960
as a system prompt. And this is really

245
00:07:40,960 --> 00:07:42,400
important because this is telling this

246
00:07:42,400 --> 00:07:45,280
AI agent, you know, here's your role,

247
00:07:45,280 --> 00:07:47,120
here's what you do, here are the tools

248
00:07:47,120 --> 00:07:49,280
you have. This is basically like your

249
00:07:49,280 --> 00:07:51,440
job description. So, the same way you

250
00:07:51,440 --> 00:07:53,360
wouldn't expect a new hire to hop into

251
00:07:53,360 --> 00:07:54,879
the company and just start using its

252
00:07:54,879 --> 00:07:56,720
different tools and knowing what to do,

253
00:07:56,720 --> 00:07:58,479
you would have to give it basically some

254
00:07:58,479 --> 00:08:01,039
pretty specific training on this is

255
00:08:01,039 --> 00:08:02,479
basically your end goal. Here are the

256
00:08:02,479 --> 00:08:03,919
tools you have and here's when you use

257
00:08:03,919 --> 00:08:06,319
each one to get the job done. And the

258
00:08:06,319 --> 00:08:07,919
system prompt is different than the

259
00:08:07,919 --> 00:08:09,680
input, which is kind of referred to as a

260
00:08:09,680 --> 00:08:11,759
user prompt. And think of it like this.

261
00:08:11,759 --> 00:08:13,360
when you're talking to chatbt in your

262
00:08:13,360 --> 00:08:15,120
browser and every single message that

263
00:08:15,120 --> 00:08:17,680
you're typing and sending off to it is a

264
00:08:17,680 --> 00:08:19,919
user message because that input changes

265
00:08:19,919 --> 00:08:22,319
every time. It's dynamic, but the system

266
00:08:22,319 --> 00:08:23,840
prompt is typically going to say the

267
00:08:23,840 --> 00:08:25,280
same over the course of this agent's

268
00:08:25,280 --> 00:08:27,360
life unless its role or actual

269
00:08:27,360 --> 00:08:29,120
instructions are going to change. But

270
00:08:29,120 --> 00:08:30,720
anyways, let's say the input is, hey,

271
00:08:30,720 --> 00:08:32,719
can you help me send an email to John?

272
00:08:32,719 --> 00:08:34,000
What's going to happen is the agent's

273
00:08:34,000 --> 00:08:35,519
going to use its brain to understand the

274
00:08:35,519 --> 00:08:37,440
input. It's going to check its memory to

275
00:08:37,440 --> 00:08:38,719
see if there's any other interactions

276
00:08:38,719 --> 00:08:40,958
that would help with this current input.

277
00:08:40,958 --> 00:08:42,479
Then it will look at its instructions

278
00:08:42,479 --> 00:08:44,240
and see, okay, how do I actually send an

279
00:08:44,240 --> 00:08:46,000
email to John? And then it will call on

280
00:08:46,000 --> 00:08:48,720
its tool to actually send an email. So

281
00:08:48,720 --> 00:08:50,560
at a high level, that is the anatomy of

282
00:08:50,560 --> 00:08:52,800
an AI agent. And I hope that that helps

283
00:08:52,800 --> 00:08:54,480
paint a clear picture in your mind.

284
00:08:54,480 --> 00:08:55,680
Cool. So now that we've talked about

285
00:08:55,680 --> 00:08:57,440
what an AI agent is and what a workflow

286
00:08:57,440 --> 00:08:59,120
is and why we want to walk before we

287
00:08:59,120 --> 00:09:01,279
run, let's actually get into Naden and

288
00:09:01,279 --> 00:09:03,399
start building some

289
00:09:03,399 --> 00:09:05,279
stuff. All right. Right. So, before we

290
00:09:05,279 --> 00:09:07,200
dive into actually building AI agents, I

291
00:09:07,200 --> 00:09:08,880
want to share some eyeopening research

292
00:09:08,880 --> 00:09:10,560
that underscores exactly why you're

293
00:09:10,560 --> 00:09:11,920
making such a valuable investment in

294
00:09:11,920 --> 00:09:13,760
yourself today. This research report

295
00:09:13,760 --> 00:09:14,800
that I'm going to be walking through

296
00:09:14,800 --> 00:09:16,560
real quick will be available for free in

297
00:09:16,560 --> 00:09:17,839
my school community if you want to go

298
00:09:17,839 --> 00:09:19,200
ahead and take a look at it. It's got a

299
00:09:19,200 --> 00:09:21,120
total of 48 sources that are all from

300
00:09:21,120 --> 00:09:22,720
within the past year. So, you know it's

301
00:09:22,720 --> 00:09:24,399
real, you know it's relevant, and it was

302
00:09:24,399 --> 00:09:25,600
completely generated for me using

303
00:09:25,600 --> 00:09:27,600
Perplexity, which is an awesome AI tool.

304
00:09:27,600 --> 00:09:29,680
So, just a year ago, AI was still

305
00:09:29,680 --> 00:09:31,440
considered experimental technology for

306
00:09:31,440 --> 00:09:33,600
most businesses. Now, it's become the

307
00:09:33,600 --> 00:09:35,440
core driver of competitive advantage

308
00:09:35,440 --> 00:09:37,680
across every industry and business size.

309
00:09:37,680 --> 00:09:39,279
What we're witnessing isn't just another

310
00:09:39,279 --> 00:09:42,760
tech trend. It's a fundamental business

311
00:09:42,760 --> 00:09:44,399
transformation. Let me start with

312
00:09:44,399 --> 00:09:46,240
something that might surprise you. 75%

313
00:09:46,240 --> 00:09:48,560
of small businesses now use AI tools.

314
00:09:48,560 --> 00:09:50,399
That's right. This isn't just enterprise

315
00:09:50,399 --> 00:09:52,160
technology anymore. In fact, the

316
00:09:52,160 --> 00:09:53,760
adoption rates are climbing fastest

317
00:09:53,760 --> 00:09:55,760
among companies generating just over a

318
00:09:55,760 --> 00:09:58,080
million dollars in revenue at 86%.

319
00:09:58,080 --> 00:09:59,519
What's truly remarkable is the

320
00:09:59,519 --> 00:10:01,600
investment threshold. The median annual

321
00:10:01,600 --> 00:10:03,519
AI investment for small businesses is

322
00:10:03,519 --> 00:10:06,080
just 1,800. That's less than 150 bucks

323
00:10:06,080 --> 00:10:08,320
per month to access technology that was

324
00:10:08,320 --> 00:10:10,920
science fiction just a few years

325
00:10:10,920 --> 00:10:13,120
ago. Now, I know some of you might be

326
00:10:13,120 --> 00:10:15,279
skeptical about AI's practical value.

327
00:10:15,279 --> 00:10:16,800
Let's look at concrete outcomes

328
00:10:16,800 --> 00:10:18,240
businesses are achieving. Marketing

329
00:10:18,240 --> 00:10:20,800
teams are seeing a 22% increase in ROI

330
00:10:20,800 --> 00:10:23,200
for AIdriven campaigns. Customer service

331
00:10:23,200 --> 00:10:25,519
AI agents have reduced response time by

332
00:10:25,519 --> 00:10:28,160
60% while resolving 80% of inquiries

333
00:10:28,160 --> 00:10:29,760
without human intervention. Supply

334
00:10:29,760 --> 00:10:31,600
chains optimized with AI have cut

335
00:10:31,600 --> 00:10:34,000
transportation costs by 5 to 10% through

336
00:10:34,000 --> 00:10:35,839
better routing and demand forecasting.

337
00:10:35,839 --> 00:10:37,600
These are actual measured results from

338
00:10:37,600 --> 00:10:39,600
implementations over the past year. Now,

339
00:10:39,600 --> 00:10:40,720
for those of you from small

340
00:10:40,720 --> 00:10:42,560
organizations, consider these examples.

341
00:10:42,560 --> 00:10:44,720
Henry's House of Coffee used AIdriven

342
00:10:44,720 --> 00:10:46,560
SEO tools to improve their product

343
00:10:46,560 --> 00:10:48,560
descriptions, resulting in a 200%

344
00:10:48,560 --> 00:10:51,200
improvement in search rankings and 25%

345
00:10:51,200 --> 00:10:53,440
revenue increase. Vanisec insurance

346
00:10:53,440 --> 00:10:55,279
implemented custom chat bots that cut

347
00:10:55,279 --> 00:10:57,440
client query resolution time from 48

348
00:10:57,440 --> 00:10:59,839
hours to just 15 minutes. Small

349
00:10:59,839 --> 00:11:01,760
businesses using Zapier automations

350
00:11:01,760 --> 00:11:04,160
saved 10 to 15 hours weekly on routine

351
00:11:04,160 --> 00:11:06,480
data entry and CRM updates. What's

352
00:11:06,480 --> 00:11:08,079
revolutionary here is that none of these

353
00:11:08,079 --> 00:11:09,760
companies needed to hire AI specialists

354
00:11:09,760 --> 00:11:12,440
or data scientists to achieve these

355
00:11:12,440 --> 00:11:15,200
results. The economic case for AI skills

356
00:11:15,200 --> 00:11:17,600
is compelling. 54% of small and medium

357
00:11:17,600 --> 00:11:19,360
businesses plan to increase AI spending

358
00:11:19,360 --> 00:11:21,519
this year. 83% of enterprises now

359
00:11:21,519 --> 00:11:23,680
prioritize AI literacy in their hiring

360
00:11:23,680 --> 00:11:25,920
decisions. Organizations with AI trained

361
00:11:25,920 --> 00:11:27,839
teams are seeing 5 to 8% higher

362
00:11:27,839 --> 00:11:29,760
profitability than their peers. But

363
00:11:29,760 --> 00:11:31,839
perhaps most telling is this. Small

364
00:11:31,839 --> 00:11:34,640
businesses using AI report 91% higher

365
00:11:34,640 --> 00:11:37,680
revenue growth than nonAI adopters. That

366
00:11:37,680 --> 00:11:39,600
gap is only widening. So the opportunity

367
00:11:39,600 --> 00:11:42,160
ahead. The truth is mastering AI is no

368
00:11:42,160 --> 00:11:43,760
longer optional. It's becoming the price

369
00:11:43,760 --> 00:11:45,120
of entry for modern business

370
00:11:45,120 --> 00:11:46,880
competitiveness. those who delay risk

371
00:11:46,880 --> 00:11:48,560
irrelevance while early adopters are

372
00:11:48,560 --> 00:11:49,920
already reaping the benefits of

373
00:11:49,920 --> 00:11:52,480
efficiency, innovation, and market share

374
00:11:52,480 --> 00:11:54,240
gains. Now, the good news is that we're

375
00:11:54,240 --> 00:11:56,240
still in the early stages. By developing

376
00:11:56,240 --> 00:11:57,760
these skills now, you're positioning

377
00:11:57,760 --> 00:11:59,120
yourself at the forefront of this

378
00:11:59,120 --> 00:12:00,800
transformation and going to be in

379
00:12:00,800 --> 00:12:02,399
extremely high demand over the next

380
00:12:02,399 --> 00:12:04,560
decade. So, let's get started building

381
00:12:04,560 --> 00:12:07,199
your first AI

382
00:12:08,920 --> 00:12:10,959
agent. All right, so here we are on

383
00:12:10,959 --> 00:12:12,639
Naden's website. You can get here using

384
00:12:12,639 --> 00:12:14,079
the link in the description. And what

385
00:12:14,079 --> 00:12:15,279
I'm going to do is go ahead and sign up

386
00:12:15,279 --> 00:12:17,440
for a free trial with you guys. And this

387
00:12:17,440 --> 00:12:18,639
is exactly the process you're going to

388
00:12:18,639 --> 00:12:19,920
take. And you're going to get two weeks

389
00:12:19,920 --> 00:12:22,000
of free playing around. And like I said,

390
00:12:22,000 --> 00:12:23,279
by the end of those two weeks, you're

391
00:12:23,279 --> 00:12:24,720
already going to have automations up and

392
00:12:24,720 --> 00:12:26,560
running and tons of templates imported

393
00:12:26,560 --> 00:12:28,079
into your workflows. And I'm not going

394
00:12:28,079 --> 00:12:29,279
to spend too much time here, but

395
00:12:29,279 --> 00:12:31,279
basically Nitn just lets you automate

396
00:12:31,279 --> 00:12:33,200
anything. Any business process that you

397
00:12:33,200 --> 00:12:35,120
have, you can automate it visually with

398
00:12:35,120 --> 00:12:37,600
no code, which is why I love it. So here

399
00:12:37,600 --> 00:12:39,200
you can see NIDN lets you automate

400
00:12:39,200 --> 00:12:40,880
business processes without limits on

401
00:12:40,880 --> 00:12:42,959
your logic. It's a very visual builder.

402
00:12:42,959 --> 00:12:44,959
We have a ton of different integrations.

403
00:12:44,959 --> 00:12:46,880
We have the ability to use code if you

404
00:12:46,880 --> 00:12:48,959
want to. Lots of native nodes to do data

405
00:12:48,959 --> 00:12:50,720
transformation. And we have tons of

406
00:12:50,720 --> 00:12:52,240
different triggers, tons of different AI

407
00:12:52,240 --> 00:12:53,760
nodes. And we're going to dive into this

408
00:12:53,760 --> 00:12:55,120
so you can understand what's all going

409
00:12:55,120 --> 00:12:56,800
on. But there's also hundreds of

410
00:12:56,800 --> 00:12:58,480
templates to get you started. Not only

411
00:12:58,480 --> 00:13:00,480
on the end website itself, but also in

412
00:13:00,480 --> 00:13:02,160
my free school community. I have almost

413
00:13:02,160 --> 00:13:03,680
100 templates in there that you can plug

414
00:13:03,680 --> 00:13:05,440
in right away. Anyways, let's scroll

415
00:13:05,440 --> 00:13:06,880
back up to the top and let's get started

416
00:13:06,880 --> 00:13:08,240
here with a new account. All right. All

417
00:13:08,240 --> 00:13:09,839
right. So, I put in my name, my email,

418
00:13:09,839 --> 00:13:11,519
password, and I give my account a name,

419
00:13:11,519 --> 00:13:13,279
which will basically be up in the top

420
00:13:13,279 --> 00:13:16,040
search bar. It'll be like nate

421
00:13:16,040 --> 00:13:17,600
herkdemo.app.n.cloud. So, that's what

422
00:13:17,600 --> 00:13:19,440
your account name means. And you can see

423
00:13:19,440 --> 00:13:20,720
I'm going to go ahead and start our

424
00:13:20,720 --> 00:13:22,880
14-day free trial. Just have to do some

425
00:13:22,880 --> 00:13:24,560
quick little onboarding. So, it asks us

426
00:13:24,560 --> 00:13:26,000
what type of team are we on. I'm just

427
00:13:26,000 --> 00:13:27,920
going to put product and design. It asks

428
00:13:27,920 --> 00:13:29,519
us the size of our company. It's going

429
00:13:29,519 --> 00:13:30,959
to ask us which of these things do we

430
00:13:30,959 --> 00:13:32,320
feel most comfortable doing. These are

431
00:13:32,320 --> 00:13:33,680
all pretty technical. I just want to put

432
00:13:33,680 --> 00:13:35,279
none of them, and that's fine. And how

433
00:13:35,279 --> 00:13:36,720
did you hear about any? Let's go ahead

434
00:13:36,720 --> 00:13:39,279
with YouTube and submit that off. And

435
00:13:39,279 --> 00:13:40,560
now you have the option to invite other

436
00:13:40,560 --> 00:13:42,000
members to your workspace if you want to

437
00:13:42,000 --> 00:13:43,600
collaborate and share some credentials.

438
00:13:43,600 --> 00:13:44,880
For now, I'm just going to go ahead and

439
00:13:44,880 --> 00:13:46,560
skip that option. So from here, our

440
00:13:46,560 --> 00:13:48,079
workspace is already ready. There's a

441
00:13:48,079 --> 00:13:49,279
little quick start guide you could watch

442
00:13:49,279 --> 00:13:50,800
from Eniden's YouTube channel, but I'm

443
00:13:50,800 --> 00:13:52,240
just going to go ahead and click on

444
00:13:52,240 --> 00:13:53,839
start automating. All right, so here we

445
00:13:53,839 --> 00:13:55,440
are. This is what Eniden looks like. And

446
00:13:55,440 --> 00:13:57,040
let's just familiarize with this

447
00:13:57,040 --> 00:13:58,880
dashboard a little bit real quick. So up

448
00:13:58,880 --> 00:14:00,399
in the top left, we can see we have 14

449
00:14:00,399 --> 00:14:02,240
days left in our free trial and we've

450
00:14:02,240 --> 00:14:05,279
used zero out of a,000 executions. An

451
00:14:05,279 --> 00:14:07,120
execution just basically means when you

452
00:14:07,120 --> 00:14:09,040
run a workflow from end to end that's

453
00:14:09,040 --> 00:14:10,880
going to be an execution. So we can see

454
00:14:10,880 --> 00:14:12,720
on the lefth hand side we have overview.

455
00:14:12,720 --> 00:14:14,560
We have like a personal set of projects.

456
00:14:14,560 --> 00:14:15,680
We have things that have been shared

457
00:14:15,680 --> 00:14:17,519
with us. We have the ability to add a

458
00:14:17,519 --> 00:14:19,120
project. We have the ability to go to

459
00:14:19,120 --> 00:14:20,800
our admin panel where we can upgrade our

460
00:14:20,800 --> 00:14:23,040
instance of nodn. We can turn it off.

461
00:14:23,040 --> 00:14:24,959
That sort of stuff. So here's my admin

462
00:14:24,959 --> 00:14:26,480
panel. You can see how many executions I

463
00:14:26,480 --> 00:14:28,160
have, how many active workflows I have,

464
00:14:28,160 --> 00:14:29,360
which I'll explain what that means

465
00:14:29,360 --> 00:14:30,959
later. We have the ability to go ahead

466
00:14:30,959 --> 00:14:33,279
and manage our nen versions. And this is

467
00:14:33,279 --> 00:14:34,720
where you could kind of upgrade your

468
00:14:34,720 --> 00:14:36,240
plan and change your billing

469
00:14:36,240 --> 00:14:37,920
information, stuff like that. But you'll

470
00:14:37,920 --> 00:14:39,199
notice that I didn't even have to put

471
00:14:39,199 --> 00:14:41,040
any billing details to get started with

472
00:14:41,040 --> 00:14:43,040
my twoe free trial. But then if I want

473
00:14:43,040 --> 00:14:44,320
to get back into my workspace, I'm just

474
00:14:44,320 --> 00:14:45,519
going to click on open right here. And

475
00:14:45,519 --> 00:14:47,040
that will send us right back into this

476
00:14:47,040 --> 00:14:49,760
dashboard that we were just on. Cool. So

477
00:14:49,760 --> 00:14:51,040
right here we can see we can either

478
00:14:51,040 --> 00:14:53,120
start from scratch, a new workflow, or

479
00:14:53,120 --> 00:14:54,959
we can test a simple AI agent example.

480
00:14:54,959 --> 00:14:56,480
So let's just click into here real quick

481
00:14:56,480 --> 00:14:58,399
and break down what is actually going on

482
00:14:58,399 --> 00:15:00,079
here. So, in order for us to actually

483
00:15:00,079 --> 00:15:01,519
access this demo where we're going to

484
00:15:01,519 --> 00:15:03,360
just talk to this AI agent, it says that

485
00:15:03,360 --> 00:15:05,279
we have to start by saying hi. So,

486
00:15:05,279 --> 00:15:06,800
there's an open chat button down here.

487
00:15:06,800 --> 00:15:08,800
I'm going to click on open chat and I'm

488
00:15:08,800 --> 00:15:11,279
just going to type in here, hi. And what

489
00:15:11,279 --> 00:15:13,600
happens is our AI agent fails because

490
00:15:13,600 --> 00:15:15,279
this is basically the brain that it

491
00:15:15,279 --> 00:15:16,880
needs to use in order to think about our

492
00:15:16,880 --> 00:15:18,639
message and respond to us. And what

493
00:15:18,639 --> 00:15:19,920
happens is we can see there's an error

494
00:15:19,920 --> 00:15:21,279
message. So, because these things are

495
00:15:21,279 --> 00:15:23,519
red, I can click into it and I can see

496
00:15:23,519 --> 00:15:25,440
what is the error. It says error in

497
00:15:25,440 --> 00:15:28,160
subnode OpenAI model. So that would be

498
00:15:28,160 --> 00:15:29,519
this node down here which is called

499
00:15:29,519 --> 00:15:31,519
OpenAI model. I would click into this

500
00:15:31,519 --> 00:15:33,199
node and we can basically see that the

501
00:15:33,199 --> 00:15:35,760
error is there is no credentials. So

502
00:15:35,760 --> 00:15:38,079
when you're in NADN what happens is in

503
00:15:38,079 --> 00:15:40,160
order to access any sort of API which

504
00:15:40,160 --> 00:15:41,839
we'll talk about later but in order to

505
00:15:41,839 --> 00:15:43,720
access something like your Gmail or

506
00:15:43,720 --> 00:15:47,040
OpenAI or your CRM you always need to

507
00:15:47,040 --> 00:15:48,720
import some sort of credential which is

508
00:15:48,720 --> 00:15:50,880
just a fancy word for a password in

509
00:15:50,880 --> 00:15:52,880
order to actually like get into that

510
00:15:52,880 --> 00:15:54,800
information. So right here we can see

511
00:15:54,800 --> 00:15:56,399
there's 100 free credits from OpenAI.

512
00:15:56,399 --> 00:15:58,079
I'm going to click on claim credits. And

513
00:15:58,079 --> 00:15:59,680
now we just are using our NEN free

514
00:15:59,680 --> 00:16:02,160
OpenAI API credits and we're fine on

515
00:16:02,160 --> 00:16:03,920
this front. But don't worry, later in

516
00:16:03,920 --> 00:16:05,440
this video I'm going to cover how we can

517
00:16:05,440 --> 00:16:07,680
actually go to OpenAI and get an API key

518
00:16:07,680 --> 00:16:10,000
and create our own password in here. But

519
00:16:10,000 --> 00:16:11,440
for now, we've claimed 100 free credits,

520
00:16:11,440 --> 00:16:13,040
which is great. And what I'm going to do

521
00:16:13,040 --> 00:16:14,720
is just go ahead and resend this message

522
00:16:14,720 --> 00:16:16,639
that says hi. So I can actually go to

523
00:16:16,639 --> 00:16:18,880
this hi text and I can just click on

524
00:16:18,880 --> 00:16:20,720
this button which says repost message.

525
00:16:20,720 --> 00:16:21,839
And that's just going to send it off

526
00:16:21,839 --> 00:16:23,360
again. And now our agent's going to

527
00:16:23,360 --> 00:16:24,880
actually be able to use its brain and

528
00:16:24,880 --> 00:16:27,120
respond to us. So what it says here is

529
00:16:27,120 --> 00:16:28,959
welcome to NINDN. Let's start with the

530
00:16:28,959 --> 00:16:30,880
first step to give me memory. Click the

531
00:16:30,880 --> 00:16:32,480
plus button on the agent that says

532
00:16:32,480 --> 00:16:34,240
memory and choose simple memory. Just

533
00:16:34,240 --> 00:16:36,399
tell me once you've done that. So sure,

534
00:16:36,399 --> 00:16:37,759
why not? Let's click on the plus button

535
00:16:37,759 --> 00:16:39,680
under memory. And we'll click on simple

536
00:16:39,680 --> 00:16:41,839
memory real quick. And we're already set

537
00:16:41,839 --> 00:16:43,199
up. Good to go. So now I'm just going to

538
00:16:43,199 --> 00:16:46,000
come down here and say done. Now we can

539
00:16:46,000 --> 00:16:47,440
see that our agent was able to use its

540
00:16:47,440 --> 00:16:49,600
memory and its brain in order to respond

541
00:16:49,600 --> 00:16:52,320
to us. So now it can prompt us to add

542
00:16:52,320 --> 00:16:54,399
tools. It can do this other stuff, but

543
00:16:54,399 --> 00:16:55,680
we're going to break that down later in

544
00:16:55,680 --> 00:16:57,920
this video. Just wanted to show you real

545
00:16:57,920 --> 00:17:00,560
quick demo of how this works. So, what I

546
00:17:00,560 --> 00:17:01,920
would do is up in the top right, I can

547
00:17:01,920 --> 00:17:03,680
click on save just to make sure that the

548
00:17:03,680 --> 00:17:05,119
what we've done is actually going to be

549
00:17:05,119 --> 00:17:07,119
saved. And then to get back out to the

550
00:17:07,119 --> 00:17:08,160
main screen, I'm going to click on

551
00:17:08,160 --> 00:17:10,640
either overview or personal. But if I

552
00:17:10,640 --> 00:17:11,919
click on overview, that just takes us

553
00:17:11,919 --> 00:17:13,839
back to that home screen. But now, let's

554
00:17:13,839 --> 00:17:15,119
talk about some other stuff that happens

555
00:17:15,119 --> 00:17:17,439
in a workflow. So, up in the top right,

556
00:17:17,439 --> 00:17:19,359
I'm going to click on create workflow.

557
00:17:19,359 --> 00:17:20,959
You can see now this opens up a new

558
00:17:20,959 --> 00:17:22,400
blank page. And then you have the option

559
00:17:22,400 --> 00:17:24,319
up here in the top left to name it. So

560
00:17:24,319 --> 00:17:26,559
I'm just going to call this one demo.

561
00:17:26,559 --> 00:17:28,160
Now we have this new workflow that's

562
00:17:28,160 --> 00:17:31,280
saved in our N environment called demo.

563
00:17:31,280 --> 00:17:32,640
So a couple things before we actually

564
00:17:32,640 --> 00:17:34,400
drag in any nodes is up here. You can

565
00:17:34,400 --> 00:17:36,000
see where is this saved. If you have

566
00:17:36,000 --> 00:17:37,200
different projects, you can save

567
00:17:37,200 --> 00:17:39,280
workflows in those projects. If you want

568
00:17:39,280 --> 00:17:40,799
to tag them, you can tag different

569
00:17:40,799 --> 00:17:42,880
things like if you have one for customer

570
00:17:42,880 --> 00:17:45,200
support or you have stuff for marketing,

571
00:17:45,200 --> 00:17:46,720
you can give your workflows different

572
00:17:46,720 --> 00:17:48,720
tags just to keep everything organized.

573
00:17:48,720 --> 00:17:51,280
But anyways, every single workflow has

574
00:17:51,280 --> 00:17:53,120
to start off with some sort of trigger.

575
00:17:53,120 --> 00:17:54,960
So when I click on add first step, it

576
00:17:54,960 --> 00:17:56,400
opens up this panel on the right that

577
00:17:56,400 --> 00:17:58,240
says what triggers this workflow. So we

578
00:17:58,240 --> 00:18:00,000
can have a manual trigger. We can have a

579
00:18:00,000 --> 00:18:01,600
certain event like a new message in

580
00:18:01,600 --> 00:18:04,400
Telegram or a new row in our CRM. We can

581
00:18:04,400 --> 00:18:05,840
have a schedule, meaning we can set this

582
00:18:05,840 --> 00:18:08,000
to run at 6 a.m. every single day. We

583
00:18:08,000 --> 00:18:09,520
can have a web hook call, form

584
00:18:09,520 --> 00:18:11,520
submission, chat message like we saw

585
00:18:11,520 --> 00:18:13,200
earlier. There's tons of ways to

586
00:18:13,200 --> 00:18:15,440
actually trigger a workflow. So for this

587
00:18:15,440 --> 00:18:16,559
example, let's just say I'm going to

588
00:18:16,559 --> 00:18:18,160
click on trigger manually, which

589
00:18:18,160 --> 00:18:19,600
literally just gives us this button

590
00:18:19,600 --> 00:18:21,840
where if we click test workflow, it goes

591
00:18:21,840 --> 00:18:24,400
ahead and executes. Cool. So this is a

592
00:18:24,400 --> 00:18:26,480
workflow and this is a node, but this is

593
00:18:26,480 --> 00:18:28,240
a trigger node. What happens after a

594
00:18:28,240 --> 00:18:29,919
trigger node is different types of

595
00:18:29,919 --> 00:18:31,600
nodes, whether that's like an action

596
00:18:31,600 --> 00:18:34,080
node or a data transformation node or an

597
00:18:34,080 --> 00:18:37,440
AI node, some sort of node. So what I

598
00:18:37,440 --> 00:18:39,280
would do is if I want to link up a node

599
00:18:39,280 --> 00:18:41,200
to this trigger, I would click on the

600
00:18:41,200 --> 00:18:42,880
plus button right here. And this pulls

601
00:18:42,880 --> 00:18:44,559
up a little panel on the right that says

602
00:18:44,559 --> 00:18:46,080
what happens next. Do you want to take

603
00:18:46,080 --> 00:18:47,360
action with AI? Do you want to take

604
00:18:47,360 --> 00:18:48,960
action within a certain app? Do you want

605
00:18:48,960 --> 00:18:50,640
to do data transformation? There's all

606
00:18:50,640 --> 00:18:52,240
these other different types of nodes.

607
00:18:52,240 --> 00:18:53,600
And what's cool is let's say we wanted

608
00:18:53,600 --> 00:18:55,280
to take action within an app. If I

609
00:18:55,280 --> 00:18:57,120
clicked on this, we can see all of the

610
00:18:57,120 --> 00:18:58,720
different native integrations that Nin

611
00:18:58,720 --> 00:19:00,160
has. And once again, in order to connect

612
00:19:00,160 --> 00:19:02,240
to any of these tons of different tools

613
00:19:02,240 --> 00:19:04,400
that we have here, you always need to

614
00:19:04,400 --> 00:19:06,320
get some sort of password. So let's say

615
00:19:06,320 --> 00:19:07,919
Google Drive. Now that I've clicked into

616
00:19:07,919 --> 00:19:09,200
Google Drive, there's tons of different

617
00:19:09,200 --> 00:19:10,640
actions that we can take and they're all

618
00:19:10,640 --> 00:19:12,080
very intuitive. you know would you want

619
00:19:12,080 --> 00:19:14,320
to copy a file would you want to share a

620
00:19:14,320 --> 00:19:16,080
file do you want to create a shared

621
00:19:16,080 --> 00:19:18,320
drive it's all very natural language and

622
00:19:18,320 --> 00:19:19,919
let's say for example I want to copy a

623
00:19:19,919 --> 00:19:22,280
file in order for nitn to tell Google

624
00:19:22,280 --> 00:19:24,880
drive which file do we want to copy we

625
00:19:24,880 --> 00:19:26,080
first of all have to provide a

626
00:19:26,080 --> 00:19:27,520
credential so every app you'll have to

627
00:19:27,520 --> 00:19:29,520
provide some sort of credential and then

628
00:19:29,520 --> 00:19:31,280
you have basically like a configuration

629
00:19:31,280 --> 00:19:32,880
panel right here in the middle which

630
00:19:32,880 --> 00:19:34,960
would be saying what is the resource you

631
00:19:34,960 --> 00:19:36,880
want what do you want to do what is the

632
00:19:36,880 --> 00:19:38,880
file all this kind of stuff so whenever

633
00:19:38,880 --> 00:19:40,720
you're in a node in nen what you're

634
00:19:40,720 --> 00:19:42,080
going to have is on the left you have an

635
00:19:42,080 --> 00:19:44,080
input panel which is basically any data

636
00:19:44,080 --> 00:19:45,679
that's going to be feeding into this

637
00:19:45,679 --> 00:19:47,760
current node. In the middle you'll have

638
00:19:47,760 --> 00:19:49,440
your configuration which is like the

639
00:19:49,440 --> 00:19:50,480
different settings and the different

640
00:19:50,480 --> 00:19:52,320
little levers you can tweak in order to

641
00:19:52,320 --> 00:19:54,400
do different things. And then on the

642
00:19:54,400 --> 00:19:56,080
right is going to be the output panel of

643
00:19:56,080 --> 00:19:58,320
what actually comes out of this node

644
00:19:58,320 --> 00:20:00,320
based on the way that you configured it.

645
00:20:00,320 --> 00:20:01,679
So every time you're looking at a node

646
00:20:01,679 --> 00:20:03,280
you're going to have three main places

647
00:20:03,280 --> 00:20:06,320
input configuration and output. So,

648
00:20:06,320 --> 00:20:07,760
let's just do a quick example where I'm

649
00:20:07,760 --> 00:20:09,120
going to delete this Google Drive node

650
00:20:09,120 --> 00:20:10,960
by clicking on the delete button. I'm

651
00:20:10,960 --> 00:20:12,640
going to add an AI node because there's

652
00:20:12,640 --> 00:20:14,000
a ton of different AI actions we can

653
00:20:14,000 --> 00:20:15,760
take as well. And all I'm going to do is

654
00:20:15,760 --> 00:20:17,840
I'm just going to talk to OpenAI's kind

655
00:20:17,840 --> 00:20:20,160
of like chatbt. So, I'll click on that

656
00:20:20,160 --> 00:20:21,600
and I'm just going to click on message a

657
00:20:21,600 --> 00:20:23,600
model. So, once that pulls up, we're

658
00:20:23,600 --> 00:20:25,679
going to be using our NEN free OpenAI

659
00:20:25,679 --> 00:20:27,840
credits that we got earlier. And as you

660
00:20:27,840 --> 00:20:30,720
can see, we have to configure this node.

661
00:20:30,720 --> 00:20:32,400
What do we want to do? The resource is

662
00:20:32,400 --> 00:20:34,320
going to be text. It could be image,

663
00:20:34,320 --> 00:20:36,559
audio, assistant, whatever we want. The

664
00:20:36,559 --> 00:20:38,080
operation we're taking is we want to

665
00:20:38,080 --> 00:20:41,200
just message a model. And then of

666
00:20:41,200 --> 00:20:42,799
course, because we're messaging a model,

667
00:20:42,799 --> 00:20:44,720
we have to choose from this list of

668
00:20:44,720 --> 00:20:47,440
OpenAI models that we have access to.

669
00:20:47,440 --> 00:20:49,520
And actually, it looks like this N free

670
00:20:49,520 --> 00:20:51,520
credits only actually give us access to

671
00:20:51,520 --> 00:20:53,280
a chat model. And this is a bit

672
00:20:53,280 --> 00:20:54,799
different. Not exactly sure why.

673
00:20:54,799 --> 00:20:55,840
Probably just because they're free

674
00:20:55,840 --> 00:20:57,360
credits. So, what we're going to do real

675
00:20:57,360 --> 00:20:59,919
quick is head over to OpenAI and get a

676
00:20:59,919 --> 00:21:01,520
credential so I can just show you guys

677
00:21:01,520 --> 00:21:03,840
how this works with input configuration

678
00:21:03,840 --> 00:21:05,960
and output. So, basically, you'd go to

679
00:21:05,960 --> 00:21:08,000
openai.com. You'd come in here and you'd

680
00:21:08,000 --> 00:21:09,039
create an account if you don't already

681
00:21:09,039 --> 00:21:11,360
have one. If you have a chat GBT account

682
00:21:11,360 --> 00:21:12,880
and you're on like maybe the 20 bucks a

683
00:21:12,880 --> 00:21:14,799
month plan, that is different than

684
00:21:14,799 --> 00:21:16,960
creating an OpenAI API account. So,

685
00:21:16,960 --> 00:21:18,799
you'd come in here and create an OpenAI

686
00:21:18,799 --> 00:21:20,880
account. As you see up here, we have the

687
00:21:20,880 --> 00:21:23,679
option for Chatbt login or API platform

688
00:21:23,679 --> 00:21:25,200
login, which is what we're looking for

689
00:21:25,200 --> 00:21:26,960
here. So, now that you've created an

690
00:21:26,960 --> 00:21:29,600
account with OpenAI's API, what you're

691
00:21:29,600 --> 00:21:31,440
going to do is come up to your dashboard

692
00:21:31,440 --> 00:21:34,159
and you're going to go to your API keys.

693
00:21:34,159 --> 00:21:35,280
And then all you'd have to do is click

694
00:21:35,280 --> 00:21:38,240
on create new key. Name this one

695
00:21:38,240 --> 00:21:39,760
whatever you want. And then you have a

696
00:21:39,760 --> 00:21:42,080
new secret key. But keep in mind, in

697
00:21:42,080 --> 00:21:43,679
order for this key to work, you have to

698
00:21:43,679 --> 00:21:45,760
have put in some billing information in

699
00:21:45,760 --> 00:21:47,919
your OpenAI account. So, throw in a few

700
00:21:47,919 --> 00:21:49,440
bucks. They'll go a lot longer than you

701
00:21:49,440 --> 00:21:50,880
may think. And then you're going to take

702
00:21:50,880 --> 00:21:52,799
that key that we just copied, come back

703
00:21:52,799 --> 00:21:54,799
into Nitn, and under the credential

704
00:21:54,799 --> 00:21:56,000
section, we're going to click on create

705
00:21:56,000 --> 00:21:58,159
new credential. All I had to do now was

706
00:21:58,159 --> 00:22:00,000
paste in that API key right there. And

707
00:22:00,000 --> 00:22:01,280
then you have the option to name this

708
00:22:01,280 --> 00:22:02,480
credential if you have a ton of

709
00:22:02,480 --> 00:22:03,840
different ones. So I can just say, you

710
00:22:03,840 --> 00:22:07,360
know, like demo on May 21st. And now I

711
00:22:07,360 --> 00:22:10,000
have my credential saved and named

712
00:22:10,000 --> 00:22:11,200
because now we can tell the difference

713
00:22:11,200 --> 00:22:13,520
between our demo credential and our NAN

714
00:22:13,520 --> 00:22:15,840
free OpenAI credits credential. And now

715
00:22:15,840 --> 00:22:16,960
hopefully we have the ability to

716
00:22:16,960 --> 00:22:18,799
actually choose a model from the list.

717
00:22:18,799 --> 00:22:21,200
So, as you can see, we can access chat

718
00:22:21,200 --> 00:22:25,200
GBT for latest, 3.5 Turbo, 4, 4.1 mini,

719
00:22:25,200 --> 00:22:26,240
all this kind of stuff. I'm going to

720
00:22:26,240 --> 00:22:28,880
choose 4.1 mini, but as you can see, you

721
00:22:28,880 --> 00:22:30,080
can come back and change this whenever

722
00:22:30,080 --> 00:22:31,679
you want. And I'm going to keep this

723
00:22:31,679 --> 00:22:33,280
really simple. In the prompt, I'm just

724
00:22:33,280 --> 00:22:35,919
going to type in, tell me a joke. So

725
00:22:35,919 --> 00:22:38,320
now, when this node executes, it's

726
00:22:38,320 --> 00:22:39,840
basically just going to be sending this

727
00:22:39,840 --> 00:22:42,440
message to OpenAI's model, which is

728
00:22:42,440 --> 00:22:44,720
GBT4.1 Mini, and it's just going to say,

729
00:22:44,720 --> 00:22:46,320
"Tell me a joke." And then what we're

730
00:22:46,320 --> 00:22:48,559
going to get on the output panel is the

731
00:22:48,559 --> 00:22:50,559
actual joke. So what I can do is come up

732
00:22:50,559 --> 00:22:52,640
right here and click on test step. This

733
00:22:52,640 --> 00:22:54,559
is going to run this node and then we

734
00:22:54,559 --> 00:22:56,720
get an output over here. And as you can

735
00:22:56,720 --> 00:22:59,280
see both with the input and the output

736
00:22:59,280 --> 00:23:00,799
we have three options of how we want to

737
00:23:00,799 --> 00:23:03,360
view our data. We can click on schema,

738
00:23:03,360 --> 00:23:05,600
we can click on table or we can click on

739
00:23:05,600 --> 00:23:07,679
JSON. And this is all the exact same

740
00:23:07,679 --> 00:23:09,360
data. It's just like a different way to

741
00:23:09,360 --> 00:23:11,520
actually look at it. I typically like to

742
00:23:11,520 --> 00:23:13,120
look at schema. I think it just looks

743
00:23:13,120 --> 00:23:15,440
the most simple and natural language.

744
00:23:15,440 --> 00:23:17,200
But what you can see here is the message

745
00:23:17,200 --> 00:23:19,120
that we got back from this open AAI

746
00:23:19,120 --> 00:23:21,760
model was sure here's a joke for you.

747
00:23:21,760 --> 00:23:23,520
Why don't scientists trust atoms?

748
00:23:23,520 --> 00:23:25,360
Because they make up everything. And

749
00:23:25,360 --> 00:23:27,120
what's cool about schemas is that this

750
00:23:27,120 --> 00:23:29,039
is all drag and drop. So now once we

751
00:23:29,039 --> 00:23:30,640
have this output, we could basically

752
00:23:30,640 --> 00:23:32,640
just use it however we want. So if I

753
00:23:32,640 --> 00:23:34,640
click out of here and I open up another

754
00:23:34,640 --> 00:23:36,320
node after this, and for now I'm just

755
00:23:36,320 --> 00:23:37,840
going to grab a set node just to show

756
00:23:37,840 --> 00:23:39,919
you guys how we can drag and drop. What

757
00:23:39,919 --> 00:23:41,600
I would do is let's say we wanted to add

758
00:23:41,600 --> 00:23:43,280
a new field and I'm just going to call

759
00:23:43,280 --> 00:23:47,440
this open AI's response. So we're

760
00:23:47,440 --> 00:23:48,960
creating a field called open AI's

761
00:23:48,960 --> 00:23:50,640
response. And as you can see it says

762
00:23:50,640 --> 00:23:52,640
drag an input field from the left to use

763
00:23:52,640 --> 00:23:54,720
it here. So as we know every node we

764
00:23:54,720 --> 00:23:57,440
have input configuration output on the

765
00:23:57,440 --> 00:23:59,120
input we can basically choose which one

766
00:23:59,120 --> 00:24:00,960
of these things do we want to use. I

767
00:24:00,960 --> 00:24:02,559
just want to reference this content

768
00:24:02,559 --> 00:24:04,159
which is the actual thing that OpenAI

769
00:24:04,159 --> 00:24:06,400
said to us. So I would drag this from

770
00:24:06,400 --> 00:24:08,799
here right into the value. And now we

771
00:24:08,799 --> 00:24:10,880
can see that we have what's called a

772
00:24:10,880 --> 00:24:12,559
variable. So anything that's going to be

773
00:24:12,559 --> 00:24:14,240
wrapped in these two curly braces and

774
00:24:14,240 --> 00:24:16,320
it's going to be green is a variable.

775
00:24:16,320 --> 00:24:18,679
And it's coming through as JSON

776
00:24:18,679 --> 00:24:20,720
message.content which is basically just

777
00:24:20,720 --> 00:24:22,559
something that represents whatever is

778
00:24:22,559 --> 00:24:24,480
coming from the previous node in the

779
00:24:24,480 --> 00:24:26,159
field called content. So we can see

780
00:24:26,159 --> 00:24:29,200
right here JSON message.content we have

781
00:24:29,200 --> 00:24:30,960
message. Within message we have

782
00:24:30,960 --> 00:24:33,360
basically a subfolder called content and

783
00:24:33,360 --> 00:24:35,120
that's where we access this actual

784
00:24:35,120 --> 00:24:37,760
result this real text. And you can see

785
00:24:37,760 --> 00:24:39,200
if I click into this variable, if I make

786
00:24:39,200 --> 00:24:41,279
it full screen, we have an expression

787
00:24:41,279 --> 00:24:43,360
which is our JSON variable. And then we

788
00:24:43,360 --> 00:24:45,039
have our result, which is the actual

789
00:24:45,039 --> 00:24:48,000
text that we want back. So now if I go

790
00:24:48,000 --> 00:24:49,840
ahead and test this step, we can see

791
00:24:49,840 --> 00:24:52,640
that we only get output to us OpenAI's

792
00:24:52,640 --> 00:24:54,799
response, which is the text we want.

793
00:24:54,799 --> 00:24:56,480
Okay, so this would basically be a

794
00:24:56,480 --> 00:24:58,640
workflow because we have a trigger and

795
00:24:58,640 --> 00:25:00,159
then we have our nodes that are going to

796
00:25:00,159 --> 00:25:02,320
execute when we hit test workflow. So if

797
00:25:02,320 --> 00:25:03,760
I hit test workflow, it's going to run

798
00:25:03,760 --> 00:25:05,200
the whole thing. And as you can see,

799
00:25:05,200 --> 00:25:07,440
super visual. We saw that OpenAI was

800
00:25:07,440 --> 00:25:09,200
thinking and then we come over here and

801
00:25:09,200 --> 00:25:11,120
we get our final output which was the

802
00:25:11,120 --> 00:25:12,960
actual joke. And now let me show you one

803
00:25:12,960 --> 00:25:14,799
more example of how we can map our

804
00:25:14,799 --> 00:25:16,640
different variables without using a

805
00:25:16,640 --> 00:25:18,159
manual trigger. So let's say we don't

806
00:25:18,159 --> 00:25:19,279
want a manual trigger. I'm just going to

807
00:25:19,279 --> 00:25:21,360
delete that. But now we have no way to

808
00:25:21,360 --> 00:25:22,720
run this workflow because there's no

809
00:25:22,720 --> 00:25:24,320
sort of trigger. So I'm just going to

810
00:25:24,320 --> 00:25:25,679
come back in here and grab a chat

811
00:25:25,679 --> 00:25:27,520
trigger just so we can talk to this

812
00:25:27,520 --> 00:25:29,919
workflow in Naden. I'm going to hook it

813
00:25:29,919 --> 00:25:31,520
up right here. I would just basically

814
00:25:31,520 --> 00:25:33,360
drag this plus into the node that I

815
00:25:33,360 --> 00:25:35,440
want. So I just drag it into OpenAI. And

816
00:25:35,440 --> 00:25:37,520
now these two things are connected. So

817
00:25:37,520 --> 00:25:39,919
if I went into the chat and I said

818
00:25:39,919 --> 00:25:41,440
hello, it's going to run the whole

819
00:25:41,440 --> 00:25:43,039
workflow, but it's not really going to

820
00:25:43,039 --> 00:25:44,720
make sense because I said hello and now

821
00:25:44,720 --> 00:25:46,320
it's telling me a joke about why don't

822
00:25:46,320 --> 00:25:48,400
scientists trust atoms. So what I would

823
00:25:48,400 --> 00:25:50,480
want to do is I'd want to come into this

824
00:25:50,480 --> 00:25:52,640
OpenAI node right here. And I'm just

825
00:25:52,640 --> 00:25:54,320
going to change the actual prompt. So

826
00:25:54,320 --> 00:25:56,240
rather than asking it to tell me a joke,

827
00:25:56,240 --> 00:25:58,559
what I would do is I'd just delete this.

828
00:25:58,559 --> 00:26:00,559
And what I want to do is I want OpenAI

829
00:26:00,559 --> 00:26:02,960
to go ahead and process whatever I type

830
00:26:02,960 --> 00:26:05,200
in this chat. same way it would work if

831
00:26:05,200 --> 00:26:07,360
we were in chatbt in our browser and

832
00:26:07,360 --> 00:26:10,080
whatever we type OpenAI responds to. So

833
00:26:10,080 --> 00:26:12,159
all I would have to do to do that is I

834
00:26:12,159 --> 00:26:14,480
would grab the chat input variable right

835
00:26:14,480 --> 00:26:16,880
here. I would drag that into the prompt

836
00:26:16,880 --> 00:26:20,080
section. And now if I open this up, it's

837
00:26:20,080 --> 00:26:21,640
looking at the expression called

838
00:26:21,640 --> 00:26:23,679
JSON.input because this field right here

839
00:26:23,679 --> 00:26:25,520
is called chat input. And then the

840
00:26:25,520 --> 00:26:27,679
result is going to be whatever we type

841
00:26:27,679 --> 00:26:29,520
anytime. even if it's different 100

842
00:26:29,520 --> 00:26:30,960
times in a row, it's always going to

843
00:26:30,960 --> 00:26:32,640
come back as a result that's different,

844
00:26:32,640 --> 00:26:34,000
but it's always going to be referenced

845
00:26:34,000 --> 00:26:36,799
as the same exact expression. So, just

846
00:26:36,799 --> 00:26:38,559
to actually show you guys this, let's

847
00:26:38,559 --> 00:26:40,159
save this workflow. And I'm going to

848
00:26:40,159 --> 00:26:42,120
say, "My name is

849
00:26:42,120 --> 00:26:46,520
Nate. I like to eat ice

850
00:26:46,520 --> 00:26:51,279
cream. Make up a funny story about me."

851
00:26:51,279 --> 00:26:53,200
Okay, so we'll send this off and the

852
00:26:53,200 --> 00:26:55,200
response that we should get will be one

853
00:26:55,200 --> 00:26:57,279
that is actually about me and it's going

854
00:26:57,279 --> 00:26:59,039
to have some sort of element of a story

855
00:26:59,039 --> 00:27:00,799
with ice cream. So let's take a look. So

856
00:27:00,799 --> 00:27:02,159
it said, "Sure, Nate, here's a funny

857
00:27:02,159 --> 00:27:03,840
story for you." And actually, because

858
00:27:03,840 --> 00:27:05,279
we're setting it, it's coming through a

859
00:27:05,279 --> 00:27:06,400
little weird. So let's actually click

860
00:27:06,400 --> 00:27:08,159
into here to look at it. Okay, so here

861
00:27:08,159 --> 00:27:09,440
is the story. Let me just make this a

862
00:27:09,440 --> 00:27:10,799
little bigger. I can go ahead and drag

863
00:27:10,799 --> 00:27:12,559
the configuration panel around by doing

864
00:27:12,559 --> 00:27:14,559
this. I can also make it larger or

865
00:27:14,559 --> 00:27:16,559
smaller if I do this. So let's just make

866
00:27:16,559 --> 00:27:17,760
it small. We'll move it all the way to

867
00:27:17,760 --> 00:27:20,799
the left and let's read the story. So,

868
00:27:20,799 --> 00:27:22,320
it said, "Sure, Nate. Here's a funny

869
00:27:22,320 --> 00:27:24,159
story just for you. Once upon a time,

870
00:27:24,159 --> 00:27:25,679
there was a guy named Nate who loved ice

871
00:27:25,679 --> 00:27:26,799
cream more than anything else in the

872
00:27:26,799 --> 00:27:28,720
world. One day, Nate decided to invent

873
00:27:28,720 --> 00:27:31,520
the ultimate ice cream. A flavor so

874
00:27:31,520 --> 00:27:32,799
amazing that it would make the entire

875
00:27:32,799 --> 00:27:34,880
town go crazy." So, let's skip ahead to

876
00:27:34,880 --> 00:27:36,799
the bottom. Basically, what happens is

877
00:27:36,799 --> 00:27:38,480
from that day on, Nate's stand became

878
00:27:38,480 --> 00:27:40,000
the funniest spot in town. A place where

879
00:27:40,000 --> 00:27:41,760
you never knew if you'd get a sweet,

880
00:27:41,760 --> 00:27:43,760
savory, or plain silly ice cream. And

881
00:27:43,760 --> 00:27:45,600
Nate, he became the legendary ice cream

882
00:27:45,600 --> 00:27:47,520
wizard. That sounds awesome. So that's

883
00:27:47,520 --> 00:27:49,200
exactly how you guys can see what

884
00:27:49,200 --> 00:27:52,480
happened was in this OpenAI node. We

885
00:27:52,480 --> 00:27:54,399
have a dynamic input which was us

886
00:27:54,399 --> 00:27:56,799
talking to this thing in a chat trigger.

887
00:27:56,799 --> 00:27:58,960
We drag in that variable that represents

888
00:27:58,960 --> 00:28:01,520
what we type into the user prompt. And

889
00:28:01,520 --> 00:28:03,440
this is going to get sent to OpenAI's

890
00:28:03,440 --> 00:28:06,320
model of GPT 4.1 Mini because we

891
00:28:06,320 --> 00:28:08,720
configured this node to do so. And the

892
00:28:08,720 --> 00:28:09,840
reason we were able to actually

893
00:28:09,840 --> 00:28:11,760
successfully do that is because we put

894
00:28:11,760 --> 00:28:15,080
in our API key or our password for

895
00:28:15,080 --> 00:28:17,360
OpenAI. And then on the right we get

896
00:28:17,360 --> 00:28:18,960
this output which we can look at either

897
00:28:18,960 --> 00:28:22,240
in schema view, table view or JSON view.

898
00:28:22,240 --> 00:28:24,480
But they all represent the same data. As

899
00:28:24,480 --> 00:28:26,240
you can see, this is the exact story we

900
00:28:26,240 --> 00:28:28,000
just read. Something I wanted to talk

901
00:28:28,000 --> 00:28:29,279
about real quick that is going to be

902
00:28:29,279 --> 00:28:30,880
super helpful for the rest of this

903
00:28:30,880 --> 00:28:32,480
course is just understanding what is

904
00:28:32,480 --> 00:28:35,039
JSON. And JSON stands for JavaScript

905
00:28:35,039 --> 00:28:37,440
object notation. And it's just a way to

906
00:28:37,440 --> 00:28:39,279
identify things. And the reason why it's

907
00:28:39,279 --> 00:28:40,880
so important to talk about is because

908
00:28:40,880 --> 00:28:42,240
over here, right, we all kind of know

909
00:28:42,240 --> 00:28:43,919
what schema is. It's just kind of like

910
00:28:43,919 --> 00:28:45,760
the way something's broken down. And as

911
00:28:45,760 --> 00:28:47,200
you can see, we have different drill

912
00:28:47,200 --> 00:28:48,640
downs over here. And we have different

913
00:28:48,640 --> 00:28:50,480
things to reference. Then we all

914
00:28:50,480 --> 00:28:51,919
understand what a table is. It's kind of

915
00:28:51,919 --> 00:28:53,760
like a table view of different objects

916
00:28:53,760 --> 00:28:55,120
with different things within them. Kind

917
00:28:55,120 --> 00:28:56,880
of like the subfolders. And once again,

918
00:28:56,880 --> 00:28:58,399
you can also drag and drop from table

919
00:28:58,399 --> 00:29:00,799
view as well. And then we have JSON,

920
00:29:00,799 --> 00:29:02,640
which also you can drag and drop. Don't

921
00:29:02,640 --> 00:29:04,080
worry, you can drag and drop pretty much

922
00:29:04,080 --> 00:29:05,679
this whole platform, which is why it's

923
00:29:05,679 --> 00:29:08,080
awesome. But this may look a little more

924
00:29:08,080 --> 00:29:10,240
cody or intimidating, but I want to talk

925
00:29:10,240 --> 00:29:13,440
about why it is not. So, first of all,

926
00:29:13,440 --> 00:29:15,760
JSON is so so important because

927
00:29:15,760 --> 00:29:17,279
everything that we do is pretty much

928
00:29:17,279 --> 00:29:19,520
going to be built on top of JSON. Even

929
00:29:19,520 --> 00:29:20,960
the workflows that you're going to

930
00:29:20,960 --> 00:29:22,720
download later when you'll see like,

931
00:29:22,720 --> 00:29:24,080
hey, you can download this template for

932
00:29:24,080 --> 00:29:26,000
free. When you download that, it's going

933
00:29:26,000 --> 00:29:28,240
to be a JSON file, which means the whole

934
00:29:28,240 --> 00:29:30,640
workflow in NN is basically represented

935
00:29:30,640 --> 00:29:32,640
as JSON. And so, hopefully that doesn't

936
00:29:32,640 --> 00:29:35,600
confuse you guys, but what it is is it's

937
00:29:35,600 --> 00:29:38,960
literally just key value pairs. So what

938
00:29:38,960 --> 00:29:41,679
I mean by that is like over here the key

939
00:29:41,679 --> 00:29:44,559
is index and index equals zero and then

940
00:29:44,559 --> 00:29:46,320
we have like the role of the openi

941
00:29:46,320 --> 00:29:48,480
assistant and that's the key and the

942
00:29:48,480 --> 00:29:51,120
value of the role is assistant. So it's

943
00:29:51,120 --> 00:29:52,559
very very natural language if you really

944
00:29:52,559 --> 00:29:54,240
break it down. What is the content that

945
00:29:54,240 --> 00:29:55,679
we're looking at? The content that we're

946
00:29:55,679 --> 00:29:58,000
looking at is this actual content over

947
00:29:58,000 --> 00:29:59,919
here. But like I said the great thing

948
00:29:59,919 --> 00:30:01,360
about that is that pretty much every

949
00:30:01,360 --> 00:30:03,279
single large language model or like chat

950
00:30:03,279 --> 00:30:06,559
gbt cloud 3.5 they're all trained on

951
00:30:06,559 --> 00:30:08,399
JSON and they all understand it. So,

952
00:30:08,399 --> 00:30:10,159
well, because it's universal. So, right

953
00:30:10,159 --> 00:30:11,600
here on the left, we're looking at JSON.

954
00:30:11,600 --> 00:30:13,760
If I was to just copy this entire JSON,

955
00:30:13,760 --> 00:30:17,080
go into ChatgBT and say, "Hey, help me

956
00:30:17,080 --> 00:30:19,679
understand this JSON." And then I just

957
00:30:19,679 --> 00:30:21,520
basically pasted that in there, it's

958
00:30:21,520 --> 00:30:22,960
going to be able to tell us exactly like

959
00:30:22,960 --> 00:30:24,559
which keys are in here and what those

960
00:30:24,559 --> 00:30:26,720
values are. So, it says this JSON

961
00:30:26,720 --> 00:30:28,399
represents the response from an AI model

962
00:30:28,399 --> 00:30:30,799
like chatbt in a structured format. Let

963
00:30:30,799 --> 00:30:32,559
me break it down for you. So, basically,

964
00:30:32,559 --> 00:30:34,399
it's going to explain what each part of

965
00:30:34,399 --> 00:30:36,559
this JSON means. We can see the index is

966
00:30:36,559 --> 00:30:37,760
zero. That means it's the first

967
00:30:37,760 --> 00:30:39,679
response. We can see the role equals

968
00:30:39,679 --> 00:30:41,520
assistant. We can see that the content

969
00:30:41,520 --> 00:30:44,080
is the funny story about Nate. We can

970
00:30:44,080 --> 00:30:45,600
see all this stuff and it basically is

971
00:30:45,600 --> 00:30:48,240
able to not only break it down for us,

972
00:30:48,240 --> 00:30:50,880
but let's say we need to make JSON. We

973
00:30:50,880 --> 00:30:52,320
could say, "Hey, I have this natural

974
00:30:52,320 --> 00:30:54,000
language. Can you make that into JSON

975
00:30:54,000 --> 00:30:55,919
for me?" Hey, can you help me make a

976
00:30:55,919 --> 00:31:00,159
JSON body where my name is Nate? I'm 23

977
00:31:00,159 --> 00:31:02,559
years old. I went to the University of

978
00:31:02,559 --> 00:31:06,399
Iowa. I like to play pickle ball. We'll

979
00:31:06,399 --> 00:31:08,320
send that off and basically it will be

980
00:31:08,320 --> 00:31:10,960
able to turn that into JSON for us. So

981
00:31:10,960 --> 00:31:13,520
here you go. We can see name Nate, age

982
00:31:13,520 --> 00:31:16,640
23, education, University of Iowa,

983
00:31:16,640 --> 00:31:18,559
interest pickle ball. And so don't let

984
00:31:18,559 --> 00:31:20,399
it overwhelm you. If you ever need help

985
00:31:20,399 --> 00:31:22,320
either making JSON or understanding

986
00:31:22,320 --> 00:31:24,640
JSON, throw it into chat and it will do

987
00:31:24,640 --> 00:31:26,640
a phenomenal job for you. And actually,

988
00:31:26,640 --> 00:31:27,919
just to show you guys that I'm not

989
00:31:27,919 --> 00:31:29,840
lying, let's just copy this JSON that

990
00:31:29,840 --> 00:31:32,240
chat gave us. Go back into our workflow

991
00:31:32,240 --> 00:31:33,520
and I'm just going to add a set field

992
00:31:33,520 --> 00:31:35,120
just to show you guys. And instead of

993
00:31:35,120 --> 00:31:36,559
manual mapping, I'm just going to set

994
00:31:36,559 --> 00:31:38,640
some data using JSON. So I'm going to

995
00:31:38,640 --> 00:31:41,360
delete this, paste in exactly what chat

996
00:31:41,360 --> 00:31:43,360
gave me. Hit test step. And what do we

997
00:31:43,360 --> 00:31:44,880
see over here? We see the name of

998
00:31:44,880 --> 00:31:46,559
someone named Nate. We see their age. We

999
00:31:46,559 --> 00:31:47,919
see their education. And we see their

1000
00:31:47,919 --> 00:31:51,440
interest in either schema table or JSON

1001
00:31:51,440 --> 00:31:53,279
view. So hopefully that gives you guys

1002
00:31:53,279 --> 00:31:55,440
some reassurance. And just once again,

1003
00:31:55,440 --> 00:31:57,360
JSON's super important. And it's not

1004
00:31:57,360 --> 00:32:00,399
even code. That is just a really quick

1005
00:32:00,399 --> 00:32:02,960
foundational understanding of a trigger,

1006
00:32:02,960 --> 00:32:05,600
different nodes, action nodes, AI nodes.

1007
00:32:05,600 --> 00:32:08,000
You have a ton to play with. And that's

1008
00:32:08,000 --> 00:32:09,840
kind of like the whole most overwhelming

1009
00:32:09,840 --> 00:32:12,480
part about NIN is you know what you need

1010
00:32:12,480 --> 00:32:14,480
to do in your brain, but you don't know

1011
00:32:14,480 --> 00:32:16,480
maybe which is the best nen node to

1012
00:32:16,480 --> 00:32:18,240
actually get that job done. So that's

1013
00:32:18,240 --> 00:32:19,760
kind of the tough part is it's a lot of

1014
00:32:19,760 --> 00:32:21,679
just getting the reps in, understanding

1015
00:32:21,679 --> 00:32:24,240
what node is best for what. But I assure

1016
00:32:24,240 --> 00:32:25,919
you by the time your twoe trial is up,

1017
00:32:25,919 --> 00:32:27,200
you'll have mastered pretty much all

1018
00:32:27,200 --> 00:32:29,039
that. All right, but something else I

1019
00:32:29,039 --> 00:32:30,880
want to show you guys is now what we're

1020
00:32:30,880 --> 00:32:32,559
looking at is called the editor. So if

1021
00:32:32,559 --> 00:32:34,080
you look at the top middle right here,

1022
00:32:34,080 --> 00:32:35,600
we have an editor. And this is where we

1023
00:32:35,600 --> 00:32:37,200
can, you know, zoom out, we can move

1024
00:32:37,200 --> 00:32:39,200
around, we can basically edit our

1025
00:32:39,200 --> 00:32:41,120
workflow right here. And it moves from

1026
00:32:41,120 --> 00:32:42,880
left to right, as you guys saw, the same

1027
00:32:42,880 --> 00:32:46,159
way we we read from left to right. And

1028
00:32:46,159 --> 00:32:48,080
now, because we've done a few runs and

1029
00:32:48,080 --> 00:32:49,679
we've tested out these different nodes,

1030
00:32:49,679 --> 00:32:52,480
what we'll click into is executions. And

1031
00:32:52,480 --> 00:32:53,679
this will basically show us the

1032
00:32:53,679 --> 00:32:55,600
different times we've ran this workflow.

1033
00:32:55,600 --> 00:32:57,440
And what's cool about this is it will

1034
00:32:57,440 --> 00:32:59,519
show us the data that has moved through.

1035
00:32:59,519 --> 00:33:01,120
So let's say you set up a workflow that

1036
00:33:01,120 --> 00:33:02,480
every time you get an email, it's going

1037
00:33:02,480 --> 00:33:04,320
to send some sort of automated response.

1038
00:33:04,320 --> 00:33:06,000
You could come into this workflow, you

1039
00:33:06,000 --> 00:33:07,760
could click on executions, and you could

1040
00:33:07,760 --> 00:33:09,840
go look at what time they happened, what

1041
00:33:09,840 --> 00:33:11,519
actually came through, what email was

1042
00:33:11,519 --> 00:33:13,519
sent, all that kind of stuff. So if I go

1043
00:33:13,519 --> 00:33:15,039
all the way down to this third

1044
00:33:15,039 --> 00:33:17,279
execution, we can remember that what I

1045
00:33:17,279 --> 00:33:19,600
did earlier was I asked this node to

1046
00:33:19,600 --> 00:33:21,919
tell us a joke. We also had a manual

1047
00:33:21,919 --> 00:33:23,760
trigger rather than a chat trigger. And

1048
00:33:23,760 --> 00:33:26,720
we can see this version of the workflow.

1049
00:33:26,720 --> 00:33:28,720
I could now click into this node and I

1050
00:33:28,720 --> 00:33:30,159
could see this is when we had it

1051
00:33:30,159 --> 00:33:32,080
configured to tell us a joke. And we

1052
00:33:32,080 --> 00:33:33,600
could see the actual joke it told us

1053
00:33:33,600 --> 00:33:35,440
which was about scientists not trusting

1054
00:33:35,440 --> 00:33:37,440
atoms. And obviously we can still

1055
00:33:37,440 --> 00:33:39,039
manipulate this stuff, look at schema,

1056
00:33:39,039 --> 00:33:40,559
look at table and do the same thing on

1057
00:33:40,559 --> 00:33:42,880
that left-hand side as well. So I wanted

1058
00:33:42,880 --> 00:33:44,159
to talk about how you can import

1059
00:33:44,159 --> 00:33:46,240
templates into your own NN environment

1060
00:33:46,240 --> 00:33:48,399
because it's super cool and like I said

1061
00:33:48,399 --> 00:33:49,760
they're all kind of built on top of

1062
00:33:49,760 --> 00:33:51,679
JSON. So, I'm going to go to NN's

1063
00:33:51,679 --> 00:33:52,960
website and we're going to go to product

1064
00:33:52,960 --> 00:33:54,240
and we're going to scroll down here to

1065
00:33:54,240 --> 00:33:56,399
templates. And you can see there's over

1066
00:33:56,399 --> 00:33:58,960
2100 workflow automation templates. So,

1067
00:33:58,960 --> 00:34:00,320
let's scroll down. Let's say we want to

1068
00:34:00,320 --> 00:34:02,399
do this one with cloning viral Tik Toks

1069
00:34:02,399 --> 00:34:04,399
with AI avatars. And we can use this one

1070
00:34:04,399 --> 00:34:05,840
for free. So, I'll click on use for

1071
00:34:05,840 --> 00:34:07,440
free. And what's cool is we can either

1072
00:34:07,440 --> 00:34:09,440
copy the template to clipboard or since

1073
00:34:09,440 --> 00:34:10,879
we're in the cloud workspace, we could

1074
00:34:10,879 --> 00:34:12,480
just import it right away. And so, this

1075
00:34:12,480 --> 00:34:14,239
is logged into my other kind of my main

1076
00:34:14,239 --> 00:34:15,440
cloud instance, but I'll still show you

1077
00:34:15,440 --> 00:34:16,800
guys how this works. I would click on

1078
00:34:16,800 --> 00:34:18,320
this button. it would pull up this

1079
00:34:18,320 --> 00:34:19,918
screen where I just get to set up a few

1080
00:34:19,918 --> 00:34:20,960
things. So, there's going to be

1081
00:34:20,960 --> 00:34:22,000
different things we'd have to connect

1082
00:34:22,000 --> 00:34:23,679
to. So, you would basically just select

1083
00:34:23,679 --> 00:34:24,960
your different credentials if you

1084
00:34:24,960 --> 00:34:26,399
already had them set up. If not, you

1085
00:34:26,399 --> 00:34:27,839
could create them right here. And then

1086
00:34:27,839 --> 00:34:30,119
you would just basically be able to hit

1087
00:34:30,119 --> 00:34:32,719
continue. And as this loads up, you see

1088
00:34:32,719 --> 00:34:34,560
we have the exact template right there

1089
00:34:34,560 --> 00:34:36,719
to play with. Or let's say you're

1090
00:34:36,719 --> 00:34:38,320
scrolling on YouTube and you see just a

1091
00:34:38,320 --> 00:34:39,839
phenomenal Nate Herk YouTube video that

1092
00:34:39,839 --> 00:34:41,119
you want to play around with. All you

1093
00:34:41,119 --> 00:34:42,399
have to do is go to my free school

1094
00:34:42,399 --> 00:34:44,320
community and you will come into YouTube

1095
00:34:44,320 --> 00:34:46,239
resources or search for the title of the

1096
00:34:46,239 --> 00:34:47,679
video. And let's say you wanted to play

1097
00:34:47,679 --> 00:34:48,960
with this shorts automation that I

1098
00:34:48,960 --> 00:34:50,480
built. What you'll see right here is a

1099
00:34:50,480 --> 00:34:52,399
JSON file that you'll have to download.

1100
00:34:52,399 --> 00:34:53,679
Once you download that, you'll go back

1101
00:34:53,679 --> 00:34:56,000
into Nitn, create a new workflow, and

1102
00:34:56,000 --> 00:34:57,599
then when you import that from file if

1103
00:34:57,599 --> 00:34:59,440
you click on this button right here, you

1104
00:34:59,440 --> 00:35:01,040
can see the entire workflow comes in.

1105
00:35:01,040 --> 00:35:02,000
And then all you're going to have to do

1106
00:35:02,000 --> 00:35:03,760
is follow the setup guide in order to

1107
00:35:03,760 --> 00:35:05,280
connect your own credentials to these

1108
00:35:05,280 --> 00:35:06,800
different nodes. All right. And then the

1109
00:35:06,800 --> 00:35:08,480
final thing I wanted to talk about is

1110
00:35:08,480 --> 00:35:10,880
inactive versus active workflows. So you

1111
00:35:10,880 --> 00:35:11,920
may have noticed that none of our

1112
00:35:11,920 --> 00:35:13,920
executions actually counted up from

1113
00:35:13,920 --> 00:35:16,000
zero. And the reason is because this is

1114
00:35:16,000 --> 00:35:18,800
counting active workflow executions. And

1115
00:35:18,800 --> 00:35:20,320
if we come up here to the top right, we

1116
00:35:20,320 --> 00:35:21,680
can see that we have the ability to make

1117
00:35:21,680 --> 00:35:24,160
a workflow active, but it has to have a

1118
00:35:24,160 --> 00:35:26,160
trigger node that requires activation.

1119
00:35:26,160 --> 00:35:27,680
So real quick, let's say that we come in

1120
00:35:27,680 --> 00:35:29,680
here and we want a workflow to start

1121
00:35:29,680 --> 00:35:32,240
when we have a schedule trigger. So I

1122
00:35:32,240 --> 00:35:33,680
would go to schedule and I would

1123
00:35:33,680 --> 00:35:35,119
basically say, okay, I want this to go

1124
00:35:35,119 --> 00:35:36,960
off every single day at midnight as we

1125
00:35:36,960 --> 00:35:38,720
have here. And what would happen is

1126
00:35:38,720 --> 00:35:41,119
while this workflow is inactive, it's

1127
00:35:41,119 --> 00:35:42,880
only actually going to run if we hit

1128
00:35:42,880 --> 00:35:45,599
test workflow and then it runs. But if

1129
00:35:45,599 --> 00:35:47,839
we were to flick this on as active now,

1130
00:35:47,839 --> 00:35:49,680
it says your schedule trigger will now

1131
00:35:49,680 --> 00:35:51,520
trigger executions on the schedule you

1132
00:35:51,520 --> 00:35:53,599
have defined. These executions will not

1133
00:35:53,599 --> 00:35:55,200
show up immediately in the editor, but

1134
00:35:55,200 --> 00:35:57,200
you can see them in the execution list.

1135
00:35:57,200 --> 00:35:59,040
So this is basically saying two things.

1136
00:35:59,040 --> 00:36:00,160
It's saying now that we have the

1137
00:36:00,160 --> 00:36:01,760
schedule trigger set up to run at

1138
00:36:01,760 --> 00:36:03,839
midnight, it's actually going to run at

1139
00:36:03,839 --> 00:36:05,760
midnight because it's active. If we left

1140
00:36:05,760 --> 00:36:07,359
this inactive, it would not actually

1141
00:36:07,359 --> 00:36:09,200
run. And all it meant by the second part

1142
00:36:09,200 --> 00:36:11,280
is if we were sitting in this workflow

1143
00:36:11,280 --> 00:36:13,680
at midnight, we wouldn't see it execute

1144
00:36:13,680 --> 00:36:16,160
and go spinning and green and red in

1145
00:36:16,160 --> 00:36:18,800
live real time, but it would still show

1146
00:36:18,800 --> 00:36:20,640
up as an execution. But if it's an

1147
00:36:20,640 --> 00:36:22,079
active workflow, you just don't get to

1148
00:36:22,079 --> 00:36:24,400
see them live visually running and

1149
00:36:24,400 --> 00:36:26,079
spinning anymore. So that's the

1150
00:36:26,079 --> 00:36:27,359
difference between an active workflow

1151
00:36:27,359 --> 00:36:29,280
and an inactive workflow. Let's say you

1152
00:36:29,280 --> 00:36:31,440
have a trigger that's like um let's say

1153
00:36:31,440 --> 00:36:33,680
you have a HubSpot trigger where you

1154
00:36:33,680 --> 00:36:35,839
want this basically to fire off the

1155
00:36:35,839 --> 00:36:37,920
workflow whenever a new contact is

1156
00:36:37,920 --> 00:36:40,560
created. So you'd connect to HubSpot and

1157
00:36:40,560 --> 00:36:42,000
you would make this workflow active so

1158
00:36:42,000 --> 00:36:44,320
that it actually runs if a new contact's

1159
00:36:44,320 --> 00:36:46,800
created. If you left this inactive, even

1160
00:36:46,800 --> 00:36:48,480
though it says it's going to trigger on

1161
00:36:48,480 --> 00:36:50,720
new contact, it would not actually do so

1162
00:36:50,720 --> 00:36:52,400
unless this workflow was active. So

1163
00:36:52,400 --> 00:36:53,760
that's a super important thing to

1164
00:36:53,760 --> 00:36:55,839
remember. All right. And then one last

1165
00:36:55,839 --> 00:36:57,359
thing I want to talk about which we were

1166
00:36:57,359 --> 00:36:58,720
not going to dive into because we'll see

1167
00:36:58,720 --> 00:37:01,200
examples later is there is one more way

1168
00:37:01,200 --> 00:37:03,520
that we can see data rather than schema

1169
00:37:03,520 --> 00:37:05,599
table or JSON and it's something called

1170
00:37:05,599 --> 00:37:08,480
binary. So binary basically just means

1171
00:37:08,480 --> 00:37:11,440
an image or maybe a big PDF or a word

1172
00:37:11,440 --> 00:37:14,160
doc or a PowerPoint file. It's basically

1173
00:37:14,160 --> 00:37:15,599
something that's not explicitly

1174
00:37:15,599 --> 00:37:17,520
textbased. So let me show you exactly

1175
00:37:17,520 --> 00:37:19,280
what that might look like. What I'm

1176
00:37:19,280 --> 00:37:20,400
going to do is I'm going to add another

1177
00:37:20,400 --> 00:37:22,000
trigger under this workflow and I'm

1178
00:37:22,000 --> 00:37:23,760
going to click on tab. And even though

1179
00:37:23,760 --> 00:37:25,359
it doesn't say like what triggers this

1180
00:37:25,359 --> 00:37:26,960
workflow, we can still access different

1181
00:37:26,960 --> 00:37:28,480
triggers. So I'm just going to type in

1182
00:37:28,480 --> 00:37:30,400
form. And this is going to give us a

1183
00:37:30,400 --> 00:37:32,000
form submission that basically is an

1184
00:37:32,000 --> 00:37:34,079
NAND native form. And you can see

1185
00:37:34,079 --> 00:37:35,440
there's an option at the bottom for

1186
00:37:35,440 --> 00:37:36,960
triggers. So I'm going to click on this

1187
00:37:36,960 --> 00:37:38,800
trigger. Now basically what this pulls

1188
00:37:38,800 --> 00:37:40,720
up is another configuration panel, but

1189
00:37:40,720 --> 00:37:42,000
obviously we don't have an input because

1190
00:37:42,000 --> 00:37:43,760
it's a trigger, but we are going to get

1191
00:37:43,760 --> 00:37:46,160
an output. So anyways, let me just set

1192
00:37:46,160 --> 00:37:47,839
up a quick example form. I'm just going

1193
00:37:47,839 --> 00:37:50,240
to say the title of this form is demo.

1194
00:37:50,240 --> 00:37:53,680
The description is binary data. And now

1195
00:37:53,680 --> 00:37:55,280
what happens if I click on test step,

1196
00:37:55,280 --> 00:37:57,200
it's going to pull up this form. And as

1197
00:37:57,200 --> 00:37:58,800
you can see, we haven't set up like any

1198
00:37:58,800 --> 00:38:00,320
fields for people to actually submit

1199
00:38:00,320 --> 00:38:02,800
stuff. So the only option is to submit.

1200
00:38:02,800 --> 00:38:04,240
But when I hit submit, you can see that

1201
00:38:04,240 --> 00:38:06,000
the node has been executed. And now

1202
00:38:06,000 --> 00:38:07,680
there's actually data in here. Submitted

1203
00:38:07,680 --> 00:38:09,920
at with a timestamp. And then we have

1204
00:38:09,920 --> 00:38:11,839
different information right here. So let

1205
00:38:11,839 --> 00:38:13,359
me just show you guys. We can add a form

1206
00:38:13,359 --> 00:38:15,119
element. And when I'm adding a form

1207
00:38:15,119 --> 00:38:16,960
element, we can basically have this be,

1208
00:38:16,960 --> 00:38:18,800
you know, date, it can be a drop down,

1209
00:38:18,800 --> 00:38:20,640
it can be an email, it can be a file, it

1210
00:38:20,640 --> 00:38:22,240
can be text. So, real quick, I'm just

1211
00:38:22,240 --> 00:38:23,359
going to show you an example where,

1212
00:38:23,359 --> 00:38:24,880
let's say we have a form where someone

1213
00:38:24,880 --> 00:38:27,520
has to submit their name. We have the

1214
00:38:27,520 --> 00:38:29,040
option to add a placeholder or make it

1215
00:38:29,040 --> 00:38:30,880
required. And this isn't really the bulk

1216
00:38:30,880 --> 00:38:32,079
of what I'm trying to show you guys. I

1217
00:38:32,079 --> 00:38:34,000
just want to show you binary data. But

1218
00:38:34,000 --> 00:38:35,359
anyways, let's say we're adding another

1219
00:38:35,359 --> 00:38:37,680
field that's going to be a file. I'm

1220
00:38:37,680 --> 00:38:39,599
just going to say file. And this will

1221
00:38:39,599 --> 00:38:41,680
also be required. And now if I go ahead

1222
00:38:41,680 --> 00:38:43,119
and hit test step, it's going to pull up

1223
00:38:43,119 --> 00:38:45,520
a new form for us with a name parameter

1224
00:38:45,520 --> 00:38:47,920
and a file parameter. So what I did is I

1225
00:38:47,920 --> 00:38:49,760
put my name and I put in just a YouTube

1226
00:38:49,760 --> 00:38:51,119
short that I had published. And you can

1227
00:38:51,119 --> 00:38:53,280
see it's an MP4 file. So if I hit

1228
00:38:53,280 --> 00:38:54,720
submit, we're going to get this data

1229
00:38:54,720 --> 00:38:56,320
pulled into N as you can see in the

1230
00:38:56,320 --> 00:38:58,079
background. Just go ahead and watch. The

1231
00:38:58,079 --> 00:39:00,839
form is going to actually capture this

1232
00:39:00,839 --> 00:39:03,280
data. There you go. Form submitted. And

1233
00:39:03,280 --> 00:39:05,520
now what we see right here is binary

1234
00:39:05,520 --> 00:39:07,520
data. So this is interesting, right? We

1235
00:39:07,520 --> 00:39:09,280
still have our schema. We still have our

1236
00:39:09,280 --> 00:39:11,599
table. We still have our JSON, but what

1237
00:39:11,599 --> 00:39:13,200
this is showing us is basically, okay,

1238
00:39:13,200 --> 00:39:15,040
the name that the person submitted was

1239
00:39:15,040 --> 00:39:16,960
Nate. The file, here are some

1240
00:39:16,960 --> 00:39:19,200
information about it as far as the name

1241
00:39:19,200 --> 00:39:21,839
of it, the mime type, and the size, but

1242
00:39:21,839 --> 00:39:23,680
we don't actually access the file

1243
00:39:23,680 --> 00:39:25,760
through table or JSON or schema view.

1244
00:39:25,760 --> 00:39:27,599
The only way we can access a video file

1245
00:39:27,599 --> 00:39:29,359
is through binary. And as you can see,

1246
00:39:29,359 --> 00:39:31,280
if I clicked on view, it's my actual

1247
00:39:31,280 --> 00:39:33,280
video file right here. And so that's all

1248
00:39:33,280 --> 00:39:34,720
I really wanted to show you guys was

1249
00:39:34,720 --> 00:39:36,320
when you're working with PDFs or images

1250
00:39:36,320 --> 00:39:38,000
or videos, a lot of times they're going

1251
00:39:38,000 --> 00:39:39,520
to come through as binary, which is a

1252
00:39:39,520 --> 00:39:41,040
little confusing at first, but it's not

1253
00:39:41,040 --> 00:39:42,800
too bad. And we will cover an example

1254
00:39:42,800 --> 00:39:44,720
later in this tutorial where we look at

1255
00:39:44,720 --> 00:39:47,119
a binary file and we process it. But as

1256
00:39:47,119 --> 00:39:49,119
you can see now, if we were doing a next

1257
00:39:49,119 --> 00:39:52,320
node, we would have schema, table, JSON,

1258
00:39:52,320 --> 00:39:54,240
and binary. So we're still able to work

1259
00:39:54,240 --> 00:39:55,599
with the binary. We're still able to

1260
00:39:55,599 --> 00:39:57,040
reference it. But I just wanted to throw

1261
00:39:57,040 --> 00:39:58,720
out there, when you see binary, don't

1262
00:39:58,720 --> 00:40:00,400
get scared. It just basically means it's

1263
00:40:00,400 --> 00:40:02,280
a different file type. It's not just

1264
00:40:02,280 --> 00:40:04,160
textbased. Okay, so that's going to do

1265
00:40:04,160 --> 00:40:05,520
it for just kind of setting up the

1266
00:40:05,520 --> 00:40:07,119
foundational knowledge and getting

1267
00:40:07,119 --> 00:40:08,960
familiar with the dashboard and the UI a

1268
00:40:08,960 --> 00:40:11,040
little bit. And as you move into these

1269
00:40:11,040 --> 00:40:12,560
next tutorials, which are going to be

1270
00:40:12,560 --> 00:40:14,160
some step by steps, I'm going to walk

1271
00:40:14,160 --> 00:40:15,839
through every single thing with you guys

1272
00:40:15,839 --> 00:40:17,119
setting up different accounts with

1273
00:40:17,119 --> 00:40:19,200
Google and something called Pine Cone.

1274
00:40:19,200 --> 00:40:20,480
And we'll talk about all this stuff step

1275
00:40:20,480 --> 00:40:22,800
by step. But hopefully now it's going to

1276
00:40:22,800 --> 00:40:24,160
be a lot better moving into those

1277
00:40:24,160 --> 00:40:25,920
sections because you've seen, you know,

1278
00:40:25,920 --> 00:40:27,359
some of the input stuff and how you

1279
00:40:27,359 --> 00:40:29,200
configure nodes and just like all this

1280
00:40:29,200 --> 00:40:30,560
terminology that you may not have been

1281
00:40:30,560 --> 00:40:33,640
familiar with like JSON, JavaScript

1282
00:40:33,640 --> 00:40:36,480
variables, workflows, executions, that

1283
00:40:36,480 --> 00:40:38,000
sort of stuff. So, like I said, let's

1284
00:40:38,000 --> 00:40:39,359
move into those actual step-by-step

1285
00:40:39,359 --> 00:40:41,200
builds. And I can assure you guys,

1286
00:40:41,200 --> 00:40:42,079
you're going to feel a lot more

1287
00:40:42,079 --> 00:40:43,760
comfortable after you have built a

1288
00:40:43,760 --> 00:40:46,079
workflow end to end. All right, we're

1289
00:40:46,079 --> 00:40:48,160
going to talk about data types in Nadn

1290
00:40:48,160 --> 00:40:49,359
and what those look like. It's really

1291
00:40:49,359 --> 00:40:50,400
important to get familiar with this

1292
00:40:50,400 --> 00:40:52,160
before we actually start automating

1293
00:40:52,160 --> 00:40:53,520
things and building agents and stuff

1294
00:40:53,520 --> 00:40:55,040
like that. So, what I'm going to do is

1295
00:40:55,040 --> 00:40:56,960
just pull in a set node. As you guys

1296
00:40:56,960 --> 00:40:59,119
know, this just lets us modify, add, or

1297
00:40:59,119 --> 00:41:01,200
remove fields. And it's very, very

1298
00:41:01,200 --> 00:41:02,800
simple. We basically would just click on

1299
00:41:02,800 --> 00:41:05,359
this to add fields. We can add the name

1300
00:41:05,359 --> 00:41:07,359
of the field. We choose the data type,

1301
00:41:07,359 --> 00:41:08,800
and then we set the value, whether

1302
00:41:08,800 --> 00:41:10,800
that's a fixed value, which we'll be

1303
00:41:10,800 --> 00:41:13,040
looking at here, or if we're dragging in

1304
00:41:13,040 --> 00:41:14,240
some sort of variable from the lefth

1305
00:41:14,240 --> 00:41:15,920
hand side. But clearly, right now, we

1306
00:41:15,920 --> 00:41:17,839
have no data incoming. We just have a

1307
00:41:17,839 --> 00:41:20,319
manual trigger. So, what I'm going to do

1308
00:41:20,319 --> 00:41:22,720
is zoom in on the actual browser so we

1309
00:41:22,720 --> 00:41:24,800
can examine this data on the output a

1310
00:41:24,800 --> 00:41:26,160
bit bigger and I don't have to just keep

1311
00:41:26,160 --> 00:41:27,760
cutting back and forth with the editing.

1312
00:41:27,760 --> 00:41:29,200
So, as you can see, there's five main

1313
00:41:29,200 --> 00:41:31,200
data types that we have access to and

1314
00:41:31,200 --> 00:41:33,359
end it in. We have a string, which is

1315
00:41:33,359 --> 00:41:35,520
basically just a fancy name for a word.

1316
00:41:35,520 --> 00:41:36,880
Um, as you can see, it's represented by

1317
00:41:36,880 --> 00:41:40,480
a little a, a letter a. Then we have a

1318
00:41:40,480 --> 00:41:42,240
number, which is represented by a pound

1319
00:41:42,240 --> 00:41:43,680
sign or a hashtag, whatever you want to

1320
00:41:43,680 --> 00:41:44,960
call it. Um, it's pretty

1321
00:41:44,960 --> 00:41:47,200
self-explanatory. Then we have a boolean

1322
00:41:47,200 --> 00:41:48,720
which is basically just going to be true

1323
00:41:48,720 --> 00:41:50,079
or false. That's basically the only

1324
00:41:50,079 --> 00:41:52,000
thing it can be represented by a little

1325
00:41:52,000 --> 00:41:54,319
checkbox. We have an array which is just

1326
00:41:54,319 --> 00:41:56,880
a fancy word for list. And we'll see

1327
00:41:56,880 --> 00:41:58,319
exactly what this looks like. And then

1328
00:41:58,319 --> 00:42:00,240
we have an object which is probably the

1329
00:42:00,240 --> 00:42:01,920
most confusing one which basically means

1330
00:42:01,920 --> 00:42:03,839
it's just this big block which can have

1331
00:42:03,839 --> 00:42:05,920
strings in them, numbers in them. It can

1332
00:42:05,920 --> 00:42:07,119
have booleans in them. It can have

1333
00:42:07,119 --> 00:42:09,040
arrays in them. And it can also have

1334
00:42:09,040 --> 00:42:11,280
nested objects within objects. So we'll

1335
00:42:11,280 --> 00:42:12,560
take a look at that. Let's just start

1336
00:42:12,560 --> 00:42:14,640
off real quick with the string. So let's

1337
00:42:14,640 --> 00:42:17,119
say a string would be a name and that

1338
00:42:17,119 --> 00:42:18,960
would be my name. So if I hit test step

1339
00:42:18,960 --> 00:42:21,040
on the right hand side in the JSON, it

1340
00:42:21,040 --> 00:42:23,040
comes through as key value pair like we

1341
00:42:23,040 --> 00:42:26,599
talked about. Name equals Nate. Super

1342
00:42:26,599 --> 00:42:28,800
simple. You can tell it's a string

1343
00:42:28,800 --> 00:42:30,400
because right here we have two quotes

1344
00:42:30,400 --> 00:42:32,240
around the word Nate. So that represents

1345
00:42:32,240 --> 00:42:34,319
a string. Or you could go to the schema

1346
00:42:34,319 --> 00:42:36,079
and you can see that with name equals

1347
00:42:36,079 --> 00:42:38,400
Nate, there's the little letter A and

1348
00:42:38,400 --> 00:42:39,680
that basically says, okay, this is a

1349
00:42:39,680 --> 00:42:41,160
string. As you see, it matches up right

1350
00:42:41,160 --> 00:42:44,160
here. Cool. So that's a string. Let's

1351
00:42:44,160 --> 00:42:46,319
switch over to a number. Now we'll just

1352
00:42:46,319 --> 00:42:48,319
say we're looking at age and we'll throw

1353
00:42:48,319 --> 00:42:51,119
in the number 50. Hit test step. And now

1354
00:42:51,119 --> 00:42:54,160
we see age equals 50 with the pound sign

1355
00:42:54,160 --> 00:42:55,800
right here as the symbol in the schema

1356
00:42:55,800 --> 00:42:58,480
view. Or if we go to JSON view, we have

1357
00:42:58,480 --> 00:43:01,280
the key value pair age equals 50. But

1358
00:43:01,280 --> 00:43:03,280
now there are no double quotes around

1359
00:43:03,280 --> 00:43:05,440
the actual number. It's green. So that's

1360
00:43:05,440 --> 00:43:07,040
how we know it's not a string. This is a

1361
00:43:07,040 --> 00:43:10,240
number. And um that's where you may run

1362
00:43:10,240 --> 00:43:11,599
into some issues where if you had like

1363
00:43:11,599 --> 00:43:13,520
age coming through as a string, you

1364
00:43:13,520 --> 00:43:15,280
wouldn't be able to like do any

1365
00:43:15,280 --> 00:43:17,359
summarizations or filters, you know,

1366
00:43:17,359 --> 00:43:19,520
like if age is greater than 50, send it

1367
00:43:19,520 --> 00:43:21,119
off this way. If it's less than 50, send

1368
00:43:21,119 --> 00:43:23,040
it that way. In order to do that type of

1369
00:43:23,040 --> 00:43:24,800
filtering and routing, you would need to

1370
00:43:24,800 --> 00:43:26,319
make sure that age is actually a number

1371
00:43:26,319 --> 00:43:30,079
variable type or data type. Cool. So

1372
00:43:30,079 --> 00:43:32,400
there's age. Let's go to a boolean. So

1373
00:43:32,400 --> 00:43:35,040
we're going to basically just say adult.

1374
00:43:35,040 --> 00:43:36,880
And that can only be true or false. You

1375
00:43:36,880 --> 00:43:39,280
see, I don't have the option to type

1376
00:43:39,280 --> 00:43:40,560
anything here. It's only going to be

1377
00:43:40,560 --> 00:43:42,400
false or it's only going to be true. And

1378
00:43:42,400 --> 00:43:44,079
as you can see, it'll come through.

1379
00:43:44,079 --> 00:43:45,680
It'll look like a string, but there's no

1380
00:43:45,680 --> 00:43:47,119
quotes around it. It's green. And that's

1381
00:43:47,119 --> 00:43:49,200
how we know it's a boolean. Or we could

1382
00:43:49,200 --> 00:43:50,400
go to schema, and we can see that

1383
00:43:50,400 --> 00:43:53,040
there's a checkbox rather than the

1384
00:43:53,040 --> 00:43:54,280
letter A

1385
00:43:54,280 --> 00:43:56,160
symbol. Now, we're going to move on to

1386
00:43:56,160 --> 00:43:58,079
an array. And this one's interesting,

1387
00:43:58,079 --> 00:43:59,359
right? So, let's just say we we want to

1388
00:43:59,359 --> 00:44:01,839
have a list of names. So, if I have a

1389
00:44:01,839 --> 00:44:03,760
list of names and I was typing in my

1390
00:44:03,760 --> 00:44:05,680
name and I tried to hit test step, this

1391
00:44:05,680 --> 00:44:07,119
is where you would run into an error

1392
00:44:07,119 --> 00:44:09,119
because it's basically saying, okay, the

1393
00:44:09,119 --> 00:44:10,880
field called names, which we set right

1394
00:44:10,880 --> 00:44:13,359
here, it's expecting to get an array,

1395
00:44:13,359 --> 00:44:15,040
but all we got was Nate, which is

1396
00:44:15,040 --> 00:44:17,359
basically a string. So, to fix this

1397
00:44:17,359 --> 00:44:19,480
error, change the type for the field

1398
00:44:19,480 --> 00:44:21,680
names or you can ignore type

1399
00:44:21,680 --> 00:44:24,079
conversions, whatever. Um, so if we were

1400
00:44:24,079 --> 00:44:25,359
to come down to the option and ignore

1401
00:44:25,359 --> 00:44:27,280
type conversions. So when we hit ignore

1402
00:44:27,280 --> 00:44:29,200
type conversions and tested the step, it

1403
00:44:29,200 --> 00:44:30,560
basically just converted the field

1404
00:44:30,560 --> 00:44:32,400
called names to a string because it just

1405
00:44:32,400 --> 00:44:34,079
could understand that this was a string

1406
00:44:34,079 --> 00:44:35,839
rather than an array. So let's turn that

1407
00:44:35,839 --> 00:44:37,200
back off and let's actually see how we

1408
00:44:37,200 --> 00:44:39,040
could get this to work if we wanted to

1409
00:44:39,040 --> 00:44:42,000
make an array. So like we know an array

1410
00:44:42,000 --> 00:44:44,240
just is a fancy word for a list. And in

1411
00:44:44,240 --> 00:44:45,680
order for us to actually send through an

1412
00:44:45,680 --> 00:44:48,400
end and say, okay, this is a list, we

1413
00:44:48,400 --> 00:44:50,960
have to wrap it in square brackets like

1414
00:44:50,960 --> 00:44:53,440
this. But we also have to wrap each item

1415
00:44:53,440 --> 00:44:55,920
in the list in quotes. So I have to go

1416
00:44:55,920 --> 00:44:58,079
like this and go like that. And now this

1417
00:44:58,079 --> 00:45:00,640
would pass through as a list of a of

1418
00:45:00,640 --> 00:45:02,480
different strings. And those are names.

1419
00:45:02,480 --> 00:45:04,319
And so if I wanted to add another one

1420
00:45:04,319 --> 00:45:06,079
after the first item, I would put a

1421
00:45:06,079 --> 00:45:08,400
comma. I put two quotes. And then inside

1422
00:45:08,400 --> 00:45:10,359
that I could put another name. Hit test

1423
00:45:10,359 --> 00:45:12,480
step. And now you can see we're getting

1424
00:45:12,480 --> 00:45:14,400
this array that's made up of different

1425
00:45:14,400 --> 00:45:15,440
strings and they're all going to be

1426
00:45:15,440 --> 00:45:17,599
different names. So I could expand that.

1427
00:45:17,599 --> 00:45:19,359
I could close it out. Um we could drag

1428
00:45:19,359 --> 00:45:21,280
in different names. And in JSON, what

1429
00:45:21,280 --> 00:45:23,680
that looks like is we have our key and

1430
00:45:23,680 --> 00:45:25,520
then we have two closed brackets, which

1431
00:45:25,520 --> 00:45:27,359
is basically exactly what like right

1432
00:45:27,359 --> 00:45:29,440
here. This is exactly what we typed

1433
00:45:29,440 --> 00:45:30,800
right here. So that's how it's being

1434
00:45:30,800 --> 00:45:32,480
represented within these square brackets

1435
00:45:32,480 --> 00:45:34,800
right here. Okay, cool. So the final one

1436
00:45:34,800 --> 00:45:36,560
we have to talk about is an object. And

1437
00:45:36,560 --> 00:45:38,560
this one's a little more complex. So if

1438
00:45:38,560 --> 00:45:40,319
I was to hit test step here, it's going

1439
00:45:40,319 --> 00:45:42,480
to tell us names expects an object, but

1440
00:45:42,480 --> 00:45:44,480
we got an array. So once again, you

1441
00:45:44,480 --> 00:45:45,680
could come in here, ignore type

1442
00:45:45,680 --> 00:45:46,960
conversions, and then it would just

1443
00:45:46,960 --> 00:45:49,040
basically come through as a string, but

1444
00:45:49,040 --> 00:45:50,880
it's not coming through as an array. So

1445
00:45:50,880 --> 00:45:52,880
that's not how we want to do it. And I

1446
00:45:52,880 --> 00:45:55,359
don't want to mess with the actual like

1447
00:45:55,359 --> 00:45:57,119
schema of typing in an object. So what

1448
00:45:57,119 --> 00:45:58,720
I'm going to do is go to chat. I

1449
00:45:58,720 --> 00:45:59,920
literally just said, give me an example

1450
00:45:59,920 --> 00:46:02,079
JSON object to put into naden. It gives

1451
00:46:02,079 --> 00:46:03,680
me this example JSON object. I'm going

1452
00:46:03,680 --> 00:46:06,319
to copy that. Come into the set node,

1453
00:46:06,319 --> 00:46:07,920
and instead of manual mapping, I'm just

1454
00:46:07,920 --> 00:46:09,920
going to customize it with JSON. Paste

1455
00:46:09,920 --> 00:46:12,079
the one that chat just gave us. And when

1456
00:46:12,079 --> 00:46:14,960
I hit test step, what we now see first

1457
00:46:14,960 --> 00:46:16,960
of all in the schema view is we have one

1458
00:46:16,960 --> 00:46:18,760
item

1459
00:46:18,760 --> 00:46:21,040
with you know this is an object and all

1460
00:46:21,040 --> 00:46:22,720
this different stuff makes it up. So we

1461
00:46:22,720 --> 00:46:24,480
have a string which is name herk. We

1462
00:46:24,480 --> 00:46:26,040
have a string which is email nate

1463
00:46:26,040 --> 00:46:27,920
example.com. We have a string which is

1464
00:46:27,920 --> 00:46:30,480
company true horizon. Then we have an

1465
00:46:30,480 --> 00:46:33,119
array of interests within this object.

1466
00:46:33,119 --> 00:46:34,640
So I could close this out. I could open

1467
00:46:34,640 --> 00:46:36,560
it up. And we have three interests. AI

1468
00:46:36,560 --> 00:46:38,720
automation nadn and YouTube content. And

1469
00:46:38,720 --> 00:46:40,880
this is, you know, chat GBT's long-term

1470
00:46:40,880 --> 00:46:43,119
memory about me making this. And then we

1471
00:46:43,119 --> 00:46:45,440
also have an object within our object

1472
00:46:45,440 --> 00:46:46,520
which is called

1473
00:46:46,520 --> 00:46:48,640
project. And the interesting difference

1474
00:46:48,640 --> 00:46:51,920
here with an object or an array is that

1475
00:46:51,920 --> 00:46:53,440
when you have an array of interests,

1476
00:46:53,440 --> 00:46:54,880
every single item in that array is going

1477
00:46:54,880 --> 00:46:56,079
to be called interest zero, interest

1478
00:46:56,079 --> 00:46:58,319
one, interest two. And by the way, this

1479
00:46:58,319 --> 00:47:00,240
is three interests, but computers start

1480
00:47:00,240 --> 00:47:01,599
counting from zero. So that's why it

1481
00:47:01,599 --> 00:47:04,800
says 0, one, two. But with an object, it

1482
00:47:04,800 --> 00:47:06,160
doesn't all have to be the same thing.

1483
00:47:06,160 --> 00:47:08,640
So you can see in this project object

1484
00:47:08,640 --> 00:47:11,520
project object we have one string called

1485
00:47:11,520 --> 00:47:13,440
title we have one string called called

1486
00:47:13,440 --> 00:47:15,280
called status and we have one string

1487
00:47:15,280 --> 00:47:17,280
called deadline and this all makes up

1488
00:47:17,280 --> 00:47:18,880
its own object. As you can see if we

1489
00:47:18,880 --> 00:47:20,560
went to table view this is literally

1490
00:47:20,560 --> 00:47:22,319
just one item that's really easy to

1491
00:47:22,319 --> 00:47:24,240
read. And you can tell that this is an

1492
00:47:24,240 --> 00:47:26,480
array because it goes 012. And you can

1493
00:47:26,480 --> 00:47:27,760
tell that this is an object because it

1494
00:47:27,760 --> 00:47:29,599
has different fields in it. This is a

1495
00:47:29,599 --> 00:47:31,520
one item. It's one object. It's got

1496
00:47:31,520 --> 00:47:33,839
strings up top. It has no numbers

1497
00:47:33,839 --> 00:47:35,760
actually. So the date right here, this

1498
00:47:35,760 --> 00:47:37,040
is coming through as a string variable

1499
00:47:37,040 --> 00:47:38,560
type. We can tell because it's not

1500
00:47:38,560 --> 00:47:40,800
green. We can tell because it has double

1501
00:47:40,800 --> 00:47:42,160
quotes around it. And we can also tell

1502
00:47:42,160 --> 00:47:43,599
because in schema it comes through with

1503
00:47:43,599 --> 00:47:46,319
the letter A. But this is just how you

1504
00:47:46,319 --> 00:47:47,920
can see there's these different things

1505
00:47:47,920 --> 00:47:50,480
that make up um this object. And you can

1506
00:47:50,480 --> 00:47:52,000
even close them down in JSON view. We

1507
00:47:52,000 --> 00:47:53,440
can see interest is an array that has

1508
00:47:53,440 --> 00:47:55,440
three items. We could open that up. We

1509
00:47:55,440 --> 00:47:57,359
can see project is an object because

1510
00:47:57,359 --> 00:47:59,680
it's wrapped in in um curly braces, not

1511
00:47:59,680 --> 00:48:02,640
not um the closed square brackets as you

1512
00:48:02,640 --> 00:48:05,839
can see. So, there's a difference. And I

1513
00:48:05,839 --> 00:48:08,240
know this wasn't super detailed and it's

1514
00:48:08,240 --> 00:48:09,440
just something really really important

1515
00:48:09,440 --> 00:48:11,200
to know heading into when you actually

1516
00:48:11,200 --> 00:48:12,960
start to build stuff out because you're

1517
00:48:12,960 --> 00:48:13,920
probably going to get some of those

1518
00:48:13,920 --> 00:48:15,440
errors where you're like, you know,

1519
00:48:15,440 --> 00:48:17,680
blank expects an object but got this or

1520
00:48:17,680 --> 00:48:19,280
expects an array and got this. So, just

1521
00:48:19,280 --> 00:48:21,119
wanted to make sure I came in here and

1522
00:48:21,119 --> 00:48:22,960
threw that module at you guys and

1523
00:48:22,960 --> 00:48:24,800
hopefully it'll save you some headaches

1524
00:48:24,800 --> 00:48:26,720
down the road. Real quick, guys, if you

1525
00:48:26,720 --> 00:48:27,839
want to be able to download all the

1526
00:48:27,839 --> 00:48:29,599
resources from this video, they'll be

1527
00:48:29,599 --> 00:48:31,200
available for free in my free school

1528
00:48:31,200 --> 00:48:32,559
community, which will be the link in the

1529
00:48:32,559 --> 00:48:34,319
pinned comment. There'll be a zip file

1530
00:48:34,319 --> 00:48:36,240
in there that has all 23 of these

1531
00:48:36,240 --> 00:48:38,480
workflows, as you can see, and also two

1532
00:48:38,480 --> 00:48:40,319
PDFs at the bottom, which are covered in

1533
00:48:40,319 --> 00:48:41,839
the video. So, like I said, join the

1534
00:48:41,839 --> 00:48:43,520
Free School community. Not only does it

1535
00:48:43,520 --> 00:48:45,119
have all of my YouTube resources, but

1536
00:48:45,119 --> 00:48:46,400
it's also a really quick growing

1537
00:48:46,400 --> 00:48:47,599
community of people who are obsessed

1538
00:48:47,599 --> 00:48:49,760
with AI automation and using ND every

1539
00:48:49,760 --> 00:48:51,200
day. All you'll have to do is search for

1540
00:48:51,200 --> 00:48:53,040
the title of this video using the search

1541
00:48:53,040 --> 00:48:54,240
bar or you can click on YouTube

1542
00:48:54,240 --> 00:48:56,079
resources and find the post associated

1543
00:48:56,079 --> 00:48:57,520
with this video. And then you'll have

1544
00:48:57,520 --> 00:48:59,359
the zip file right here to download

1545
00:48:59,359 --> 00:49:01,680
which once again is going to have all 23

1546
00:49:01,680 --> 00:49:04,880
of these JSON N workflows and two PDFs.

1547
00:49:04,880 --> 00:49:06,240
And there may even be some bonus files

1548
00:49:06,240 --> 00:49:07,359
in here. You'll just have to join the

1549
00:49:07,359 --> 00:49:09,520
free school community to find out. Okay,

1550
00:49:09,520 --> 00:49:11,040
so we talked about AI agents. We talked

1551
00:49:11,040 --> 00:49:12,720
about AI workflows. We've gotten into

1552
00:49:12,720 --> 00:49:14,480
NADN and set up our account. We

1553
00:49:14,480 --> 00:49:16,720
understand workflows, nodes, triggers,

1554
00:49:16,720 --> 00:49:19,280
JSON, stuff like that, and data types.

1555
00:49:19,280 --> 00:49:20,800
Now, it's time to use all that stuff

1556
00:49:20,800 --> 00:49:21,839
that we've talked about and start

1557
00:49:21,839 --> 00:49:22,880
applying it. So, we're going to head

1558
00:49:22,880 --> 00:49:24,240
into this next portion of this course,

1559
00:49:24,240 --> 00:49:25,839
which is going to be about step-by-step

1560
00:49:25,839 --> 00:49:26,880
builds, where I'm going to walk you

1561
00:49:26,880 --> 00:49:29,760
through every single step live, and

1562
00:49:29,760 --> 00:49:30,960
we'll have some pretty cool workflows

1563
00:49:30,960 --> 00:49:32,880
set up by the end. So, let's get into

1564
00:49:32,880 --> 00:49:34,400
it. Today, we're going to be looking at

1565
00:49:34,400 --> 00:49:36,000
three simple AI workflows that you can

1566
00:49:36,000 --> 00:49:37,680
build right now to get started learning

1567
00:49:37,680 --> 00:49:39,040
NAND. We're going to walk through

1568
00:49:39,040 --> 00:49:40,640
everything step by step, including all

1569
00:49:40,640 --> 00:49:42,559
of the credentials and the setups. So,

1570
00:49:42,559 --> 00:49:43,920
let's take a look at the three workflows

1571
00:49:43,920 --> 00:49:45,119
we're going to be building today. All

1572
00:49:45,119 --> 00:49:46,240
right, the first one is going to be a

1573
00:49:46,240 --> 00:49:48,559
rag pipeline and chatbot. And if you

1574
00:49:48,559 --> 00:49:50,000
don't know what rag means, don't worry.

1575
00:49:50,000 --> 00:49:51,359
We're going to explain it all. But at a

1576
00:49:51,359 --> 00:49:52,559
high level, what we're doing is we're

1577
00:49:52,559 --> 00:49:54,319
going to be using Pine Cone as a vector

1578
00:49:54,319 --> 00:49:55,599
database. If you don't know what a

1579
00:49:55,599 --> 00:49:57,599
vector database is, we'll break it down.

1580
00:49:57,599 --> 00:49:58,880
We're going to be using Google Drive.

1581
00:49:58,880 --> 00:50:00,079
We're going to be using Google Docs. And

1582
00:50:00,079 --> 00:50:01,680
then something called Open Router, which

1583
00:50:01,680 --> 00:50:02,960
lets us connect to a bunch of different

1584
00:50:02,960 --> 00:50:05,200
AI models like OpenAI's models or

1585
00:50:05,200 --> 00:50:07,119
Anthropics models. The second workflow

1586
00:50:07,119 --> 00:50:08,400
we're going to look at is a customer

1587
00:50:08,400 --> 00:50:09,760
support workflow that's kind of going to

1588
00:50:09,760 --> 00:50:11,599
be building off of the first one we just

1589
00:50:11,599 --> 00:50:13,119
built. Because in the first workflow,

1590
00:50:13,119 --> 00:50:14,480
we're going to be putting data into a

1591
00:50:14,480 --> 00:50:16,240
Pine Cone vector database. And in this

1592
00:50:16,240 --> 00:50:17,760
one, we're going to use that data in

1593
00:50:17,760 --> 00:50:19,760
there in order to respond to customer

1594
00:50:19,760 --> 00:50:21,599
support related emails. So, we'll

1595
00:50:21,599 --> 00:50:23,040
already have had Pine Cone set up, but

1596
00:50:23,040 --> 00:50:24,079
we're going to set up our credentials

1597
00:50:24,079 --> 00:50:25,680
for Gmail. And then we're also going to

1598
00:50:25,680 --> 00:50:28,240
be using an NAN AI agent as well as Open

1599
00:50:28,240 --> 00:50:30,000
Router once again. And then finally,

1600
00:50:30,000 --> 00:50:31,680
we're going to be doing LinkedIn content

1601
00:50:31,680 --> 00:50:33,200
creation. And in this one, we'll be

1602
00:50:33,200 --> 00:50:35,200
using an NAN AI agent and open router

1603
00:50:35,200 --> 00:50:36,640
once again, but we'll have two new

1604
00:50:36,640 --> 00:50:38,160
credentials to set up. The first one

1605
00:50:38,160 --> 00:50:39,680
being Tavi, which is going to let us

1606
00:50:39,680 --> 00:50:41,440
search the web. And then the second one

1607
00:50:41,440 --> 00:50:42,880
will be Google Sheets where we're going

1608
00:50:42,880 --> 00:50:44,880
to store our content ideas, pull them

1609
00:50:44,880 --> 00:50:47,040
in, and then have the content written

1610
00:50:47,040 --> 00:50:49,119
back to that Google sheet. So by the end

1611
00:50:49,119 --> 00:50:50,079
of this video, you're going to have

1612
00:50:50,079 --> 00:50:51,440
three workflows set up and you're going

1613
00:50:51,440 --> 00:50:52,960
to have a really good foundation to

1614
00:50:52,960 --> 00:50:55,200
continue to learn more about NADN.

1615
00:50:55,200 --> 00:50:56,319
You'll already have gotten a lot of

1616
00:50:56,319 --> 00:50:57,760
credentials set up and understand what

1617
00:50:57,760 --> 00:50:58,960
goes into connecting to different

1618
00:50:58,960 --> 00:51:00,720
services. One of the trickiest being

1619
00:51:00,720 --> 00:51:02,079
Google. So we'll walk through that step

1620
00:51:02,079 --> 00:51:03,119
by step and then you'll have it

1621
00:51:03,119 --> 00:51:04,800
configured and you'll be good. And then

1622
00:51:04,800 --> 00:51:05,760
from there, you'll be able to

1623
00:51:05,760 --> 00:51:07,599
continuously build on top of these three

1624
00:51:07,599 --> 00:51:08,559
workflows that we're going to walk

1625
00:51:08,559 --> 00:51:10,079
through together because there's really

1626
00:51:10,079 --> 00:51:11,359
no such thing as a finished product in

1627
00:51:11,359 --> 00:51:13,200
the space. Different AI models keep

1628
00:51:13,200 --> 00:51:14,319
getting released and keep getting

1629
00:51:14,319 --> 00:51:15,839
better. There's always ways to improve

1630
00:51:15,839 --> 00:51:17,440
your templates. And the cool thing about

1631
00:51:17,440 --> 00:51:19,119
building workflows in NAN is that you

1632
00:51:19,119 --> 00:51:20,880
can make them super customized for

1633
00:51:20,880 --> 00:51:22,559
exactly what you're looking for. So, if

1634
00:51:22,559 --> 00:51:24,000
this sounds good to you, let's hop into

1635
00:51:24,000 --> 00:51:26,160
that first workflow. Okay, so for this

1636
00:51:26,160 --> 00:51:27,680
first workflow, we're building a rag

1637
00:51:27,680 --> 00:51:29,599
pipeline and chatbot. And so if that

1638
00:51:29,599 --> 00:51:31,119
sounds like a bunch of gibberish to you,

1639
00:51:31,119 --> 00:51:33,520
let's quickly understand what rag is and

1640
00:51:33,520 --> 00:51:36,240
what a vector database is. So rag stands

1641
00:51:36,240 --> 00:51:38,480
for retrieval augmented generation. And

1642
00:51:38,480 --> 00:51:40,319
in the simplest terms, let's say you ask

1643
00:51:40,319 --> 00:51:41,839
me a question and I don't actually know

1644
00:51:41,839 --> 00:51:43,760
the answer. I would just kind of Google

1645
00:51:43,760 --> 00:51:45,520
it and then I would get the answer from

1646
00:51:45,520 --> 00:51:47,040
my phone and then I would tell you the

1647
00:51:47,040 --> 00:51:48,800
answer. So in this case, when we're

1648
00:51:48,800 --> 00:51:50,559
building a rag chatbot, we're going to

1649
00:51:50,559 --> 00:51:52,400
be asking the chatbot questions and it's

1650
00:51:52,400 --> 00:51:53,680
not going to know the answer. So it's

1651
00:51:53,680 --> 00:51:54,880
going to look inside our vector

1652
00:51:54,880 --> 00:51:56,880
database, find the answer, and then it's

1653
00:51:56,880 --> 00:51:58,480
going to respond to us. And so when

1654
00:51:58,480 --> 00:52:00,160
we're combining the elements of rag with

1655
00:52:00,160 --> 00:52:02,559
a vector database, here's how it works.

1656
00:52:02,559 --> 00:52:03,760
So the first thing we want to talk about

1657
00:52:03,760 --> 00:52:06,240
is actually what is a vector database.

1658
00:52:06,240 --> 00:52:07,520
So essentially this is what a vector

1659
00:52:07,520 --> 00:52:09,200
database would look like. We're all

1660
00:52:09,200 --> 00:52:11,280
familiar with like an x and yaxis graph

1661
00:52:11,280 --> 00:52:12,880
where you can plot points on there on a

1662
00:52:12,880 --> 00:52:14,559
two dimensional plane. But a vector

1663
00:52:14,559 --> 00:52:17,359
database is a multi-dimensional graph of

1664
00:52:17,359 --> 00:52:19,200
points. So in this case, you can see

1665
00:52:19,200 --> 00:52:20,800
this multi-dimensional space with all

1666
00:52:20,800 --> 00:52:23,440
these different points or vectors. And

1667
00:52:23,440 --> 00:52:25,359
each vector is placed based on the

1668
00:52:25,359 --> 00:52:27,760
actual meaning of the word or words in

1669
00:52:27,760 --> 00:52:29,520
the vector. So over here you can see we

1670
00:52:29,520 --> 00:52:31,680
have wolf, dog and cat. And they're

1671
00:52:31,680 --> 00:52:33,440
placed similarly because the meaning of

1672
00:52:33,440 --> 00:52:35,680
these words are all like animals.

1673
00:52:35,680 --> 00:52:36,960
Whereas over here we have apple and

1674
00:52:36,960 --> 00:52:38,559
banana which the meaning of the words

1675
00:52:38,559 --> 00:52:40,960
are food more likely fruits. And that's

1676
00:52:40,960 --> 00:52:42,800
why they're placed over here together.

1677
00:52:42,800 --> 00:52:44,000
So when we're searching through the

1678
00:52:44,000 --> 00:52:46,559
database, we basically vectorize a

1679
00:52:46,559 --> 00:52:48,480
question the same way we would vectorize

1680
00:52:48,480 --> 00:52:50,079
any of these other points. And in this

1681
00:52:50,079 --> 00:52:51,839
case, we were asking for a kitten. And

1682
00:52:51,839 --> 00:52:53,200
then that query gets placed over here

1683
00:52:53,200 --> 00:52:54,720
near the other animals and then we're

1684
00:52:54,720 --> 00:52:56,160
able to say okay well we have all these

1685
00:52:56,160 --> 00:52:58,160
results now. So what that looks like and

1686
00:52:58,160 --> 00:53:00,160
what we'll see when we get into NAND is

1687
00:53:00,160 --> 00:53:01,599
we have a document that we want to

1688
00:53:01,599 --> 00:53:03,520
vectorize. We have to split the document

1689
00:53:03,520 --> 00:53:05,200
up into chunks because we can't put like

1690
00:53:05,200 --> 00:53:07,839
a 50page PDF as one chunk. So it gets

1691
00:53:07,839 --> 00:53:09,280
split up and then we're going to run it

1692
00:53:09,280 --> 00:53:10,640
through something called an embeddings

1693
00:53:10,640 --> 00:53:12,800
model which basically just turns text

1694
00:53:12,800 --> 00:53:14,960
into numbers. Just as simple as that.

1695
00:53:14,960 --> 00:53:16,240
And as you can see in this case let's

1696
00:53:16,240 --> 00:53:18,000
say we had a document about a company.

1697
00:53:18,000 --> 00:53:20,640
We have company data, finance data, and

1698
00:53:20,640 --> 00:53:22,640
marketing data. And they all get placed

1699
00:53:22,640 --> 00:53:24,559
differently because they mean different

1700
00:53:24,559 --> 00:53:26,640
things. And the the context of those

1701
00:53:26,640 --> 00:53:28,640
chunks are different. And then this

1702
00:53:28,640 --> 00:53:30,079
visual down here is just kind of how an

1703
00:53:30,079 --> 00:53:32,559
LLM or in this case, this agent takes

1704
00:53:32,559 --> 00:53:34,400
our question, turns it into its own

1705
00:53:34,400 --> 00:53:36,480
question. We vectorize that using the

1706
00:53:36,480 --> 00:53:38,000
same embeddings model that we used up

1707
00:53:38,000 --> 00:53:40,319
here to vectorize the original data. And

1708
00:53:40,319 --> 00:53:42,480
then because it gets placed here, it

1709
00:53:42,480 --> 00:53:44,400
just grabs back any vectors that are

1710
00:53:44,400 --> 00:53:46,240
nearest, maybe like the nearest four or

1711
00:53:46,240 --> 00:53:48,079
five, and then it brings it back in

1712
00:53:48,079 --> 00:53:49,839
order to respond to us. So don't want to

1713
00:53:49,839 --> 00:53:51,599
dive too much into this. Don't want to

1714
00:53:51,599 --> 00:53:53,119
over complicate it, but hopefully this

1715
00:53:53,119 --> 00:53:55,440
all makes sense. Cool. So now that we

1716
00:53:55,440 --> 00:53:57,200
understand that, let's actually start

1717
00:53:57,200 --> 00:53:58,800
building this workflow. So what we're

1718
00:53:58,800 --> 00:53:59,920
going to do here is we are going to

1719
00:53:59,920 --> 00:54:01,839
click on add first step because every

1720
00:54:01,839 --> 00:54:03,839
workflow needs a trigger that basically

1721
00:54:03,839 --> 00:54:05,920
starts the workflow. So, I'm going to

1722
00:54:05,920 --> 00:54:08,640
type in Google Drive because what we're

1723
00:54:08,640 --> 00:54:10,559
going to do is we are going to pull in a

1724
00:54:10,559 --> 00:54:12,640
document from our Google Drive in order

1725
00:54:12,640 --> 00:54:14,240
to vectorize it. So, I'm going to choose

1726
00:54:14,240 --> 00:54:15,920
a trigger which is on changes involving

1727
00:54:15,920 --> 00:54:17,680
a specific folder. And what we have to

1728
00:54:17,680 --> 00:54:19,280
do now is connect our account. As you

1729
00:54:19,280 --> 00:54:20,880
can see, I'm already connected, but what

1730
00:54:20,880 --> 00:54:22,160
we're going to do is click on create new

1731
00:54:22,160 --> 00:54:23,920
credential in order to connect our

1732
00:54:23,920 --> 00:54:25,760
Google Drive account. And what we have

1733
00:54:25,760 --> 00:54:28,000
to do is go get a client ID and a

1734
00:54:28,000 --> 00:54:29,920
secret. So, what we want to do is click

1735
00:54:29,920 --> 00:54:31,520
on open docs, which is going to bring us

1736
00:54:31,520 --> 00:54:33,520
to Naden's documents on how to set up

1737
00:54:33,520 --> 00:54:35,599
this credential. We have a prerequisite

1738
00:54:35,599 --> 00:54:37,040
which is creating a Google Cloud

1739
00:54:37,040 --> 00:54:38,559
account. So I'm going to click on Google

1740
00:54:38,559 --> 00:54:40,800
Cloud account and we're going to set up

1741
00:54:40,800 --> 00:54:42,480
a new project. Okay. So I just signed

1742
00:54:42,480 --> 00:54:43,680
into a new account and I'm going to set

1743
00:54:43,680 --> 00:54:45,040
up a whole project and walk through the

1744
00:54:45,040 --> 00:54:46,640
credentials with you guys. You'll click

1745
00:54:46,640 --> 00:54:48,079
up here. You'll probably have something

1746
00:54:48,079 --> 00:54:49,920
up here that says like new project and

1747
00:54:49,920 --> 00:54:51,920
then you'll click into new project. All

1748
00:54:51,920 --> 00:54:54,400
we have to do now is um name it and you

1749
00:54:54,400 --> 00:54:55,520
you'll be able to start for free so

1750
00:54:55,520 --> 00:54:56,640
don't worry about that yet. So I'm just

1751
00:54:56,640 --> 00:54:58,319
going to name this one demo and I'm

1752
00:54:58,319 --> 00:55:00,160
going to create this new project. And

1753
00:55:00,160 --> 00:55:01,440
now up here in the top right you're

1754
00:55:01,440 --> 00:55:02,480
going to see that it's kind of spinning

1755
00:55:02,480 --> 00:55:04,520
up this project. and then we'll move

1756
00:55:04,520 --> 00:55:06,880
forward. Okay, so it's already done and

1757
00:55:06,880 --> 00:55:08,800
now I can select this project. So now

1758
00:55:08,800 --> 00:55:10,240
you can see up here I'm in my new

1759
00:55:10,240 --> 00:55:12,160
project called demo. I'm going to click

1760
00:55:12,160 --> 00:55:14,960
on these three lines in the top left and

1761
00:55:14,960 --> 00:55:16,319
what we're going to do first is go to

1762
00:55:16,319 --> 00:55:18,480
APIs and services and click on enabled

1763
00:55:18,480 --> 00:55:20,640
APIs and services. And what we want to

1764
00:55:20,640 --> 00:55:22,640
do is add the ones we need. And so right

1765
00:55:22,640 --> 00:55:25,960
now all I'm going to do is add Google

1766
00:55:25,960 --> 00:55:27,839
Drive. And you can see it's going to

1767
00:55:27,839 --> 00:55:30,000
come up with Google Drive API. And then

1768
00:55:30,000 --> 00:55:31,599
all we have to do is really simply click

1769
00:55:31,599 --> 00:55:33,839
enable. And there we I just enabled it.

1770
00:55:33,839 --> 00:55:35,119
So you can see here the status is

1771
00:55:35,119 --> 00:55:36,480
enabled. And now we have to set up

1772
00:55:36,480 --> 00:55:37,760
something called our OOTH consent

1773
00:55:37,760 --> 00:55:40,240
screen, which basically is just going to

1774
00:55:40,240 --> 00:55:43,040
let Nadn know that Google Drive and

1775
00:55:43,040 --> 00:55:44,880
Naden are allowed to talk to each other

1776
00:55:44,880 --> 00:55:46,880
and have permissions. So right here, I'm

1777
00:55:46,880 --> 00:55:48,640
going to click on OOTH consent screen.

1778
00:55:48,640 --> 00:55:49,920
We don't have one yet, so I'm going to

1779
00:55:49,920 --> 00:55:51,680
click on get started. I'm going to give

1780
00:55:51,680 --> 00:55:52,960
it a name. So we're just going to call

1781
00:55:52,960 --> 00:55:54,880
this one demo. Once again, I'm going to

1782
00:55:54,880 --> 00:55:56,960
add a support email. I'm going to click

1783
00:55:56,960 --> 00:55:59,280
on next. Because I'm not using a Google

1784
00:55:59,280 --> 00:56:01,280
Workspace account, I'm just using a, you

1785
00:56:01,280 --> 00:56:02,040
know,

1786
00:56:02,040 --> 00:56:03,599
nate88@gmail.com. I'm going to have to

1787
00:56:03,599 --> 00:56:05,359
choose external. I'm going to click on

1788
00:56:05,359 --> 00:56:07,119
next. For contact information, I'm

1789
00:56:07,119 --> 00:56:08,640
putting the same email as I used to

1790
00:56:08,640 --> 00:56:11,040
create this whole project. Click on next

1791
00:56:11,040 --> 00:56:12,720
and then agree to terms. And then we're

1792
00:56:12,720 --> 00:56:15,040
going to create that OOTH consent

1793
00:56:15,040 --> 00:56:17,040
screen. Okay, so we're not done yet. The

1794
00:56:17,040 --> 00:56:18,160
next thing we want to do is we want to

1795
00:56:18,160 --> 00:56:20,079
click on audience. And we're going to

1796
00:56:20,079 --> 00:56:22,079
add ourselves as a test user. So we

1797
00:56:22,079 --> 00:56:23,839
could also make the app published by

1798
00:56:23,839 --> 00:56:25,520
publishing it right here, but I'm just

1799
00:56:25,520 --> 00:56:26,880
going to keep it in test. And when we

1800
00:56:26,880 --> 00:56:28,480
keep it in test mode, we have to add a

1801
00:56:28,480 --> 00:56:30,000
test user. So I'm going to put in that

1802
00:56:30,000 --> 00:56:31,599
same email from before. And this is

1803
00:56:31,599 --> 00:56:32,880
going to be the email of the Google

1804
00:56:32,880 --> 00:56:34,880
Drive we want to access. So I put in my

1805
00:56:34,880 --> 00:56:36,720
email. You can see I saved it down here.

1806
00:56:36,720 --> 00:56:38,640
And then finally, all we need to do is

1807
00:56:38,640 --> 00:56:40,640
come back into here. Go to clients. And

1808
00:56:40,640 --> 00:56:42,559
then we need to create a new client.

1809
00:56:42,559 --> 00:56:45,200
We're going to click on web app. We're

1810
00:56:45,200 --> 00:56:46,640
going to name it whatever we want. Of

1811
00:56:46,640 --> 00:56:47,680
course, I'm just going to call this one

1812
00:56:47,680 --> 00:56:50,079
demo once again. And now we need to

1813
00:56:50,079 --> 00:56:52,880
basically add a redirect URI. So if you

1814
00:56:52,880 --> 00:56:54,880
click back in Nitn, we have one right

1815
00:56:54,880 --> 00:56:57,200
here. So, we're going to copy this, go

1816
00:56:57,200 --> 00:56:58,480
back into cloud, and we're going to add

1817
00:56:58,480 --> 00:57:00,640
a URI and paste it right in there, and

1818
00:57:00,640 --> 00:57:03,000
then hit

1819
00:57:03,000 --> 00:57:05,119
create, and then once that's created,

1820
00:57:05,119 --> 00:57:06,559
it's going to give us an ID and a

1821
00:57:06,559 --> 00:57:08,240
secret. So, all we have to do is copy

1822
00:57:08,240 --> 00:57:10,799
the ID, go back into Nit and paste that

1823
00:57:10,799 --> 00:57:11,799
right

1824
00:57:11,799 --> 00:57:13,920
here. And then we need to go grab our

1825
00:57:13,920 --> 00:57:16,640
secret from Google Cloud, and then paste

1826
00:57:16,640 --> 00:57:18,640
that right in there. And now we have a

1827
00:57:18,640 --> 00:57:19,680
little button that says sign in with

1828
00:57:19,680 --> 00:57:21,680
Google. So, I'm going to open that up.

1829
00:57:21,680 --> 00:57:22,880
It's going to pull up a window to have

1830
00:57:22,880 --> 00:57:24,480
you sign in. Make sure you sign in with

1831
00:57:24,480 --> 00:57:25,920
the same account that you just had

1832
00:57:25,920 --> 00:57:28,079
yourself as a test user. That one. And

1833
00:57:28,079 --> 00:57:30,000
then you'll have to continue. And then

1834
00:57:30,000 --> 00:57:31,760
here is basically saying like what

1835
00:57:31,760 --> 00:57:33,440
permissions do we have? Does anyone have

1836
00:57:33,440 --> 00:57:34,960
to your Google Drive? So I'm just going

1837
00:57:34,960 --> 00:57:36,240
to select all. I'm going to hit

1838
00:57:36,240 --> 00:57:37,920
continue. And then we should be good.

1839
00:57:37,920 --> 00:57:39,760
Connection successful and we are now

1840
00:57:39,760 --> 00:57:41,280
connected. And you may just want to

1841
00:57:41,280 --> 00:57:43,119
rename this credential so you know you

1842
00:57:43,119 --> 00:57:44,960
know which email it is. So now I've

1843
00:57:44,960 --> 00:57:46,960
saved my credential and we should be

1844
00:57:46,960 --> 00:57:48,799
able to access the Google Drive now. So,

1845
00:57:48,799 --> 00:57:49,839
what I'm going to do is I'm going to

1846
00:57:49,839 --> 00:57:50,960
click on this list and it's going to

1847
00:57:50,960 --> 00:57:52,799
show me the folders that I have in

1848
00:57:52,799 --> 00:57:55,119
Google Drive. So, that's awesome. Now,

1849
00:57:55,119 --> 00:57:56,480
for the sake of this video, I'm in my

1850
00:57:56,480 --> 00:57:57,839
Google Drive and I'm going to create a

1851
00:57:57,839 --> 00:57:59,680
new folder. So, new folder. We're going

1852
00:57:59,680 --> 00:58:03,839
to call this one um FAQ. Create this one

1853
00:58:03,839 --> 00:58:05,040
because we're going to be uploading an

1854
00:58:05,040 --> 00:58:07,520
FAQ document into it. So, here's my FAQ

1855
00:58:07,520 --> 00:58:09,839
folder um right here. And then what I

1856
00:58:09,839 --> 00:58:12,000
have is down here I made a policy and

1857
00:58:12,000 --> 00:58:14,160
FAQ document which looks like this. We

1858
00:58:14,160 --> 00:58:15,520
have some store policies and then we

1859
00:58:15,520 --> 00:58:17,680
also have some FAQs at the bottom. So,

1860
00:58:17,680 --> 00:58:19,359
all I'm going to do is I'm going to drag

1861
00:58:19,359 --> 00:58:21,839
in my policy and FAQ document into that

1862
00:58:21,839 --> 00:58:25,240
new FAQ folder. And then if we come into

1863
00:58:25,240 --> 00:58:27,839
NAN, we click on the new folder that we

1864
00:58:27,839 --> 00:58:29,280
just made. So, it's not here yet. I'm

1865
00:58:29,280 --> 00:58:30,400
just going to click on these dots and

1866
00:58:30,400 --> 00:58:32,559
click on refresh list. Now, we should

1867
00:58:32,559 --> 00:58:35,040
see the FAQ folder. There it is. Click

1868
00:58:35,040 --> 00:58:36,640
on it. We're going to click on what are

1869
00:58:36,640 --> 00:58:38,559
we watching this folder for. I'm going

1870
00:58:38,559 --> 00:58:40,799
to be watching for a file created. And

1871
00:58:40,799 --> 00:58:43,000
then, I'm just going to hit fetch test

1872
00:58:43,000 --> 00:58:45,440
event. And now we can see that we did in

1873
00:58:45,440 --> 00:58:47,119
fact get something back. So, let's make

1874
00:58:47,119 --> 00:58:48,880
sure this is the right one. Yep. So,

1875
00:58:48,880 --> 00:58:50,000
there's a lot of nasty information

1876
00:58:50,000 --> 00:58:51,200
coming through. I'm going to switch over

1877
00:58:51,200 --> 00:58:52,799
here on the right hand side. This is

1878
00:58:52,799 --> 00:58:54,000
where we can see the output of every

1879
00:58:54,000 --> 00:58:55,920
node. I'm going to click on table and

1880
00:58:55,920 --> 00:58:57,359
I'm just going to scroll over and there

1881
00:58:57,359 --> 00:59:00,400
should be a field called file name. Here

1882
00:59:00,400 --> 00:59:02,480
it is. Name. And we have policy and FAQ

1883
00:59:02,480 --> 00:59:04,000
document. So, we know we have the right

1884
00:59:04,000 --> 00:59:06,480
document in our Google Drive. Okay. So,

1885
00:59:06,480 --> 00:59:08,079
perfect. Every time we drop in a new

1886
00:59:08,079 --> 00:59:10,240
file into that Google folder, it's going

1887
00:59:10,240 --> 00:59:11,839
to start this workflow. And now we just

1888
00:59:11,839 --> 00:59:13,200
have to configure what happens after the

1889
00:59:13,200 --> 00:59:15,200
workflow starts. So, all we want to do

1890
00:59:15,200 --> 00:59:17,599
really is we want to pull this data into

1891
00:59:17,599 --> 00:59:20,079
n so that we can put it into our pine

1892
00:59:20,079 --> 00:59:22,559
cone database. So, off of this trigger,

1893
00:59:22,559 --> 00:59:24,000
I'm going to add a new node and I'm

1894
00:59:24,000 --> 00:59:26,079
going to grab another Google Drive node

1895
00:59:26,079 --> 00:59:28,319
because what happened is basically we

1896
00:59:28,319 --> 00:59:30,400
have the file ID and the file name, but

1897
00:59:30,400 --> 00:59:32,079
we don't have the contents of the file.

1898
00:59:32,079 --> 00:59:33,680
So, we're going to do a download file

1899
00:59:33,680 --> 00:59:35,520
node from Google Drive. I'm going to

1900
00:59:35,520 --> 00:59:36,799
rename this one and just call it

1901
00:59:36,799 --> 00:59:38,880
download file just to keep ourselves

1902
00:59:38,880 --> 00:59:40,240
organized. We already have our

1903
00:59:40,240 --> 00:59:41,920
credential connected and now it's

1904
00:59:41,920 --> 00:59:43,440
basically saying what file do you want

1905
00:59:43,440 --> 00:59:45,520
to download. We have the ability to

1906
00:59:45,520 --> 00:59:47,200
choose from a list. But if we choose

1907
00:59:47,200 --> 00:59:48,400
from the list, it's going to be this

1908
00:59:48,400 --> 00:59:50,319
file every time we run the workflow. And

1909
00:59:50,319 --> 00:59:52,000
we want to make this dynamic. So we're

1910
00:59:52,000 --> 00:59:54,720
going to change from list to by ID. And

1911
00:59:54,720 --> 00:59:56,000
all we have to do now is we're going to

1912
00:59:56,000 --> 00:59:57,839
look on the lefth hand side for that

1913
00:59:57,839 --> 00:59:59,599
file that we just pulled in. And we're

1914
00:59:59,599 --> 01:00:00,960
going to be looking for the ID of the

1915
01:00:00,960 --> 01:00:02,880
file. So I can see that I found it right

1916
01:00:02,880 --> 01:00:05,040
down here in the spaces array because we

1917
01:00:05,040 --> 01:00:06,319
have the name right here and then we

1918
01:00:06,319 --> 01:00:07,680
have the ID right above it. So, I'm

1919
01:00:07,680 --> 01:00:10,160
going to drag ID, put it right there in

1920
01:00:10,160 --> 01:00:11,839
this folder. It's coming through as a

1921
01:00:11,839 --> 01:00:14,319
variable called JSON ID. And that's just

1922
01:00:14,319 --> 01:00:15,359
basically referencing, you know,

1923
01:00:15,359 --> 01:00:17,680
whenever a file comes through on the the

1924
01:00:17,680 --> 01:00:19,359
Google Drive trigger. I'm going to use

1925
01:00:19,359 --> 01:00:21,520
the variable JSON. ID, which will always

1926
01:00:21,520 --> 01:00:23,599
pull in the files ID. So, then I'm going

1927
01:00:23,599 --> 01:00:24,960
to hit test step and we're going to see

1928
01:00:24,960 --> 01:00:27,040
that we're going to get the binary data

1929
01:00:27,040 --> 01:00:28,799
of this file over here that we could

1930
01:00:28,799 --> 01:00:30,880
download. And this is our policy and FAQ

1931
01:00:30,880 --> 01:00:32,960
document. Okay. So, there's step two. We

1932
01:00:32,960 --> 01:00:35,040
have the file downloaded in NADN. And

1933
01:00:35,040 --> 01:00:37,040
now it's just as simple as putting it

1934
01:00:37,040 --> 01:00:39,280
into pine cone. So before we do that,

1935
01:00:39,280 --> 01:00:41,839
let's head over to pine cone.io. Okay,

1936
01:00:41,839 --> 01:00:43,760
so now we are in pine cone.io, which is

1937
01:00:43,760 --> 01:00:45,440
a vector database provider. You can get

1938
01:00:45,440 --> 01:00:46,880
started for free. And what we're going

1939
01:00:46,880 --> 01:00:48,880
to do is sign up. Okay, so I just got

1940
01:00:48,880 --> 01:00:50,960
logged in. And once you get signed up,

1941
01:00:50,960 --> 01:00:52,480
you should see us a page similar to

1942
01:00:52,480 --> 01:00:54,400
this. It's a get started page. And what

1943
01:00:54,400 --> 01:00:55,599
we want to do is you want to come down

1944
01:00:55,599 --> 01:00:57,920
here and click on, you know, begin setup

1945
01:00:57,920 --> 01:00:59,599
because we need to create an index. So

1946
01:00:59,599 --> 01:01:02,000
I'm going to click on begin setup. We

1947
01:01:02,000 --> 01:01:03,440
have to name our index. So you can call

1948
01:01:03,440 --> 01:01:05,119
this whatever you want. We have to

1949
01:01:05,119 --> 01:01:08,160
choose a configuration for a text model.

1950
01:01:08,160 --> 01:01:09,760
We have to choose a configuration for an

1951
01:01:09,760 --> 01:01:11,280
embeddings model, which is sort of what

1952
01:01:11,280 --> 01:01:13,280
I talked about right in here. This is

1953
01:01:13,280 --> 01:01:15,240
going to turn our text chunks into a

1954
01:01:15,240 --> 01:01:17,440
vector. So what I'm going to do is I'm

1955
01:01:17,440 --> 01:01:19,680
going to choose text embedding three

1956
01:01:19,680 --> 01:01:21,599
small from OpenAI. It's the most cost

1957
01:01:21,599 --> 01:01:23,599
effective OpenAI embedding model. So I'm

1958
01:01:23,599 --> 01:01:25,200
going to choose that. Then I'm going to

1959
01:01:25,200 --> 01:01:26,319
keep scrolling down. I'm going to keep

1960
01:01:26,319 --> 01:01:27,760
mine as serverless. I'm going to keep

1961
01:01:27,760 --> 01:01:29,599
AWS as the cloud provider. I'm going to

1962
01:01:29,599 --> 01:01:31,200
keep this region. And then all I'm going

1963
01:01:31,200 --> 01:01:33,040
to do is hit create index. Once you

1964
01:01:33,040 --> 01:01:34,400
create your index, it'll show up right

1965
01:01:34,400 --> 01:01:36,000
here. But we're not done yet. You're

1966
01:01:36,000 --> 01:01:37,839
going to click into that index. And so I

1967
01:01:37,839 --> 01:01:39,040
already obviously have stuff in my

1968
01:01:39,040 --> 01:01:40,720
vector database. You won't have this.

1969
01:01:40,720 --> 01:01:41,920
What I'm going to do real quick is just

1970
01:01:41,920 --> 01:01:44,000
delete this information out of it. Okay.

1971
01:01:44,000 --> 01:01:45,280
So this is what yours should look like.

1972
01:01:45,280 --> 01:01:46,799
There's nothing in here yet. We have no

1973
01:01:46,799 --> 01:01:48,559
name spaces and we need to get this

1974
01:01:48,559 --> 01:01:51,200
configured. So on the left hand side, go

1975
01:01:51,200 --> 01:01:53,680
over here to API keys and you're going

1976
01:01:53,680 --> 01:01:56,240
to create a new API key. Name it

1977
01:01:56,240 --> 01:01:58,079
whatever you want, of course. Hit create

1978
01:01:58,079 --> 01:02:00,240
key. And then you're going to copy that

1979
01:02:00,240 --> 01:02:02,880
value. Okay, back in NDN, we have our

1980
01:02:02,880 --> 01:02:05,520
API key copied. We're going to add a new

1981
01:02:05,520 --> 01:02:07,760
node after the download file and we're

1982
01:02:07,760 --> 01:02:09,119
going to type in pine cone and we're

1983
01:02:09,119 --> 01:02:10,880
going to grab a pine cone vector store.

1984
01:02:10,880 --> 01:02:12,400
Then we're going to select add documents

1985
01:02:12,400 --> 01:02:14,640
to a vector store and we need to set up

1986
01:02:14,640 --> 01:02:16,960
our credential. So up here, you won't

1987
01:02:16,960 --> 01:02:18,000
have these and you're going to click on

1988
01:02:18,000 --> 01:02:19,520
create new credential. And all we need

1989
01:02:19,520 --> 01:02:21,280
to do here is just an API key. We don't

1990
01:02:21,280 --> 01:02:22,880
have to get a client ID or a secret. So

1991
01:02:22,880 --> 01:02:24,079
you're just going to paste in that API

1992
01:02:24,079 --> 01:02:25,359
key. Once that's pasted in there and

1993
01:02:25,359 --> 01:02:26,960
you've given it a name so you know what

1994
01:02:26,960 --> 01:02:28,799
this means. You'll hit save and it

1995
01:02:28,799 --> 01:02:30,240
should go green and we're connected to

1996
01:02:30,240 --> 01:02:32,640
Pine Cone and you can make sure that

1997
01:02:32,640 --> 01:02:34,640
you're connected by clicking on the

1998
01:02:34,640 --> 01:02:36,400
index and you should have the name of

1999
01:02:36,400 --> 01:02:37,760
the index right there that we just

2000
01:02:37,760 --> 01:02:39,119
created. So I'm going to go ahead and

2001
01:02:39,119 --> 01:02:40,799
choose my index. I'm going to click on

2002
01:02:40,799 --> 01:02:42,319
add option and we're going to be

2003
01:02:42,319 --> 01:02:43,760
basically adding this to a Pine Cone

2004
01:02:43,760 --> 01:02:45,839
namespace which back in here in Pine

2005
01:02:45,839 --> 01:02:48,480
Cone if I go back into my database my

2006
01:02:48,480 --> 01:02:50,720
index and I click in here you can see

2007
01:02:50,720 --> 01:02:51,599
that we have something called

2008
01:02:51,599 --> 01:02:53,440
namespaces. And this basically lets us

2009
01:02:53,440 --> 01:02:55,520
put data into different folders within

2010
01:02:55,520 --> 01:02:57,680
this one index. So if you don't specify

2011
01:02:57,680 --> 01:02:59,119
an index, it'll just come through as

2012
01:02:59,119 --> 01:03:00,799
default and that's going to be fine. But

2013
01:03:00,799 --> 01:03:02,319
we want to get into the habit of having

2014
01:03:02,319 --> 01:03:04,319
our data organized. So I'm going to go

2015
01:03:04,319 --> 01:03:05,599
back into NADN and I'm just going to

2016
01:03:05,599 --> 01:03:07,839
name this name space FAQ because that's

2017
01:03:07,839 --> 01:03:10,240
the type of data we're putting in. And

2018
01:03:10,240 --> 01:03:12,400
now I'm going to click out of this node.

2019
01:03:12,400 --> 01:03:13,520
So you can see the next thing that we

2020
01:03:13,520 --> 01:03:15,200
need to do is connect an embeddings

2021
01:03:15,200 --> 01:03:17,119
model and a document loader. So let's

2022
01:03:17,119 --> 01:03:18,640
start with the embeddings model. I'm

2023
01:03:18,640 --> 01:03:20,240
going to click on the plus and I'm going

2024
01:03:20,240 --> 01:03:22,480
to click on embeddings open AAI. And

2025
01:03:22,480 --> 01:03:23,760
actually, this is one thing I left out

2026
01:03:23,760 --> 01:03:25,599
of the Excalaw is that we also will need

2027
01:03:25,599 --> 01:03:27,760
to go get an OpenAI key. So, as you can

2028
01:03:27,760 --> 01:03:29,280
see, when we need to connect a

2029
01:03:29,280 --> 01:03:30,720
credential, you'll click on create new

2030
01:03:30,720 --> 01:03:32,160
credential and we just need to get an

2031
01:03:32,160 --> 01:03:33,920
API key. So, you're going to type in

2032
01:03:33,920 --> 01:03:36,160
OpenAI API. You'll click on this first

2033
01:03:36,160 --> 01:03:37,760
link here. If you don't have an account

2034
01:03:37,760 --> 01:03:39,680
yet, you'll sign in. And then once you

2035
01:03:39,680 --> 01:03:40,720
sign up, you want to go to your

2036
01:03:40,720 --> 01:03:42,240
dashboard. And then on the lefth hand

2037
01:03:42,240 --> 01:03:44,000
side, very similar thing to Pine Cone,

2038
01:03:44,000 --> 01:03:46,079
you'll click on API keys. And then we're

2039
01:03:46,079 --> 01:03:47,280
just going to create a new key. So you

2040
01:03:47,280 --> 01:03:48,559
can see I have a lot. We're going to

2041
01:03:48,559 --> 01:03:49,599
make a new one. And I'm calling

2042
01:03:49,599 --> 01:03:50,960
everything demo, but this is going to be

2043
01:03:50,960 --> 01:03:53,039
demo number three. Create new secret

2044
01:03:53,039 --> 01:03:54,799
key. And then we have our key. So we're

2045
01:03:54,799 --> 01:03:56,319
going to copy this and we're going to go

2046
01:03:56,319 --> 01:03:58,319
back into Nit. Paste that right here. We

2047
01:03:58,319 --> 01:03:59,920
paste it in our key. We've given in a

2048
01:03:59,920 --> 01:04:01,440
name. And now we'll hit save and we

2049
01:04:01,440 --> 01:04:03,200
should go green. Just keep in mind that

2050
01:04:03,200 --> 01:04:04,880
you may need to top up your account with

2051
01:04:04,880 --> 01:04:06,640
a few credits in order for you to

2052
01:04:06,640 --> 01:04:08,559
actually be able to run this model. Um,

2053
01:04:08,559 --> 01:04:10,079
so just keep that in mind. So then

2054
01:04:10,079 --> 01:04:11,280
what's really important to remember is

2055
01:04:11,280 --> 01:04:13,680
when we set up our pine cone index, we

2056
01:04:13,680 --> 01:04:15,599
use the embedding model text embedding

2057
01:04:15,599 --> 01:04:17,520
three small from OpenAI. So that's why

2058
01:04:17,520 --> 01:04:19,039
we have to make sure this matches right

2059
01:04:19,039 --> 01:04:20,799
here or this automation is going to

2060
01:04:20,799 --> 01:04:22,319
break. Okay, so we're good with the

2061
01:04:22,319 --> 01:04:24,079
embeddings and now we need to add a

2062
01:04:24,079 --> 01:04:25,440
document loader. So I'm going to click

2063
01:04:25,440 --> 01:04:26,960
on this plus right here. I'm going to

2064
01:04:26,960 --> 01:04:29,280
click on default data loader and we have

2065
01:04:29,280 --> 01:04:31,280
to just basically tell Pine Cone the

2066
01:04:31,280 --> 01:04:32,880
type of data we're putting in. And so

2067
01:04:32,880 --> 01:04:35,839
you have two options, JSON or binary. In

2068
01:04:35,839 --> 01:04:37,200
this case, it's really easy because we

2069
01:04:37,200 --> 01:04:39,520
downloaded a a Google Doc, which is on

2070
01:04:39,520 --> 01:04:40,799
the lefth hand side. You can tell it's

2071
01:04:40,799 --> 01:04:42,720
binary because up top right here on the

2072
01:04:42,720 --> 01:04:45,200
input, we can switch between JSON and

2073
01:04:45,200 --> 01:04:47,280
binary. And if we were uploading JSON,

2074
01:04:47,280 --> 01:04:49,760
all we'd be uploading is this gibberish

2075
01:04:49,760 --> 01:04:51,760
nonsense information that we don't need.

2076
01:04:51,760 --> 01:04:53,599
We want to upload the binary, which is

2077
01:04:53,599 --> 01:04:55,920
the actual policy and FAQ document. So,

2078
01:04:55,920 --> 01:04:57,680
I'm just going to switch this to binary.

2079
01:04:57,680 --> 01:04:58,799
I'm going to click out of here. And then

2080
01:04:58,799 --> 01:05:00,160
the last thing we need to do is add a

2081
01:05:00,160 --> 01:05:01,680
text splitter. So, this is where I was

2082
01:05:01,680 --> 01:05:04,160
talking about back in this Excal. we

2083
01:05:04,160 --> 01:05:05,680
have to split the document into

2084
01:05:05,680 --> 01:05:07,119
different chunks. And so that's what

2085
01:05:07,119 --> 01:05:08,160
we're doing here with this text

2086
01:05:08,160 --> 01:05:10,400
splitter. I'm going to choose a

2087
01:05:10,400 --> 01:05:12,079
recursive character text splitter.

2088
01:05:12,079 --> 01:05:13,920
There's three options and I won't dive

2089
01:05:13,920 --> 01:05:15,359
into the difference right now, but

2090
01:05:15,359 --> 01:05:17,039
recursive character text splitter will

2091
01:05:17,039 --> 01:05:18,559
help us keep context of the whole

2092
01:05:18,559 --> 01:05:20,079
document as a whole, even though we're

2093
01:05:20,079 --> 01:05:22,240
splitting it up. So for now, chunk size

2094
01:05:22,240 --> 01:05:23,839
is a th00and. That's just basically how

2095
01:05:23,839 --> 01:05:25,280
many characters am I going to put in

2096
01:05:25,280 --> 01:05:26,880
each chunk? And then is there going to

2097
01:05:26,880 --> 01:05:29,599
be any overlap between our chunks of

2098
01:05:29,599 --> 01:05:30,880
characters? So right now I'm just going

2099
01:05:30,880 --> 01:05:33,839
to leave it default a,000 and zero. So

2100
01:05:33,839 --> 01:05:35,359
that's it. You just built your first

2101
01:05:35,359 --> 01:05:37,440
automation for a rag pipeline. And now

2102
01:05:37,440 --> 01:05:38,400
we're just going to click on the play

2103
01:05:38,400 --> 01:05:40,160
button above the pine cone vector store

2104
01:05:40,160 --> 01:05:42,400
node in order to see it get vectorized.

2105
01:05:42,400 --> 01:05:43,839
So we're going to basically see that we

2106
01:05:43,839 --> 01:05:45,599
have four items that have left this

2107
01:05:45,599 --> 01:05:47,200
node. So this is basically telling us

2108
01:05:47,200 --> 01:05:48,799
that our Google doc that we downloaded

2109
01:05:48,799 --> 01:05:51,359
right here. So this document got turned

2110
01:05:51,359 --> 01:05:53,440
into four different vectors. So if I

2111
01:05:53,440 --> 01:05:54,960
click into the text splitter, we can see

2112
01:05:54,960 --> 01:05:56,799
we have four different responses and

2113
01:05:56,799 --> 01:05:59,119
this is the contents that went into each

2114
01:05:59,119 --> 01:06:01,520
chunk. So we can just verify this by

2115
01:06:01,520 --> 01:06:03,760
heading real quick into Pine Cone, we

2116
01:06:03,760 --> 01:06:05,359
can see we have a new name space that we

2117
01:06:05,359 --> 01:06:07,680
created called FAQ. Number of records is

2118
01:06:07,680 --> 01:06:09,039
four. And if we head over to the

2119
01:06:09,039 --> 01:06:10,480
browser, we can see that we do indeed

2120
01:06:10,480 --> 01:06:12,400
have these four vectors. And then the

2121
01:06:12,400 --> 01:06:13,599
text field right here, as you can see,

2122
01:06:13,599 --> 01:06:15,440
are the characters that were put into

2123
01:06:15,440 --> 01:06:17,359
each chunk. Okay, so that was the first

2124
01:06:17,359 --> 01:06:19,200
part of this workflow, but we're going

2125
01:06:19,200 --> 01:06:21,039
to real quick just make sure that this

2126
01:06:21,039 --> 01:06:22,480
actually works. So we're going to add a

2127
01:06:22,480 --> 01:06:24,480
rag chatbot. Okay. So, what I'm going to

2128
01:06:24,480 --> 01:06:26,400
do now is hit the tab, or I could also

2129
01:06:26,400 --> 01:06:27,599
have just clicked on the plus button

2130
01:06:27,599 --> 01:06:29,599
right here, and I'm going to type in AI

2131
01:06:29,599 --> 01:06:31,680
agent, and that is what we're going to

2132
01:06:31,680 --> 01:06:33,599
grab and pull into this workflow. So, we

2133
01:06:33,599 --> 01:06:35,760
have an AI agent, and let's actually

2134
01:06:35,760 --> 01:06:39,359
just put him right over here. Um, and

2135
01:06:39,359 --> 01:06:41,440
now what we need to do is we need to set

2136
01:06:41,440 --> 01:06:42,720
up how are we actually going to talk to

2137
01:06:42,720 --> 01:06:44,079
this agent. And we're just going to use

2138
01:06:44,079 --> 01:06:46,240
the default N chat window. So, once

2139
01:06:46,240 --> 01:06:47,760
again, I'm going to hit tab. I'm going

2140
01:06:47,760 --> 01:06:49,200
to type in chat. And we have a chat

2141
01:06:49,200 --> 01:06:51,599
trigger. And all I'm going to do is over

2142
01:06:51,599 --> 01:06:53,200
here, I'm going to grab the plus and I'm

2143
01:06:53,200 --> 01:06:54,559
going to drag it into the front of the

2144
01:06:54,559 --> 01:06:56,720
AI agent. So basically now whenever we

2145
01:06:56,720 --> 01:06:58,720
hit open chat and we talk right here,

2146
01:06:58,720 --> 01:07:00,880
the agent will read that chat message.

2147
01:07:00,880 --> 01:07:02,720
And we know this because if I click into

2148
01:07:02,720 --> 01:07:04,880
the agent, we can see the user message

2149
01:07:04,880 --> 01:07:07,039
is looking for one in the connected chat

2150
01:07:07,039 --> 01:07:08,960
trigger node, which we have right here

2151
01:07:08,960 --> 01:07:10,720
connected. Okay, so the first step with

2152
01:07:10,720 --> 01:07:12,319
an AI agent is we need to give it a

2153
01:07:12,319 --> 01:07:14,240
brain. So we need to give it some sort

2154
01:07:14,240 --> 01:07:16,720
of AI model to use. So we're going to

2155
01:07:16,720 --> 01:07:18,240
click on the plus right below chat

2156
01:07:18,240 --> 01:07:20,400
model. And what we could do now is we

2157
01:07:20,400 --> 01:07:22,000
could set up an OpenAI chat model

2158
01:07:22,000 --> 01:07:23,720
because we already have our API key from

2159
01:07:23,720 --> 01:07:25,920
OpenAI. But what I want to do is click

2160
01:07:25,920 --> 01:07:27,920
on open router because this is going to

2161
01:07:27,920 --> 01:07:30,319
allow us to choose from all different

2162
01:07:30,319 --> 01:07:32,559
chat models, not just OpenAIs. So we

2163
01:07:32,559 --> 01:07:33,920
could do Claude, we could do Google, we

2164
01:07:33,920 --> 01:07:35,280
could do Plexity. We have all these

2165
01:07:35,280 --> 01:07:36,559
different models in here which is going

2166
01:07:36,559 --> 01:07:37,920
to be really cool. And in order to get

2167
01:07:37,920 --> 01:07:39,680
an Open Router account, all you have to

2168
01:07:39,680 --> 01:07:42,240
do is go sign up and get an API key. So

2169
01:07:42,240 --> 01:07:43,440
you'll click on create new credential

2170
01:07:43,440 --> 01:07:45,359
and you can see we need an API key. So

2171
01:07:45,359 --> 01:07:47,839
you'll head over to openouter.ai. You'll

2172
01:07:47,839 --> 01:07:49,359
sign up for an account. And then all you

2173
01:07:49,359 --> 01:07:50,640
have to do is in the top right, you're

2174
01:07:50,640 --> 01:07:52,640
going to click on keys. And then once

2175
01:07:52,640 --> 01:07:54,559
again, kind of the same as all all the

2176
01:07:54,559 --> 01:07:55,920
other ones. You're going to create a new

2177
01:07:55,920 --> 01:07:57,839
key. You're going to give it a name.

2178
01:07:57,839 --> 01:07:59,520
You're going to click create. You have a

2179
01:07:59,520 --> 01:08:01,359
secret key. You're going to click copy.

2180
01:08:01,359 --> 01:08:02,880
And then when we go back into NN and

2181
01:08:02,880 --> 01:08:04,240
paste it in here, give it a name. And

2182
01:08:04,240 --> 01:08:05,920
then hit save. And we should go green.

2183
01:08:05,920 --> 01:08:07,760
We've connected to Open Router. And now

2184
01:08:07,760 --> 01:08:09,200
we have access to any of these different

2185
01:08:09,200 --> 01:08:12,720
chat models. So, in this case, let's use

2186
01:08:12,720 --> 01:08:17,640
let's use Claude um 3.5

2187
01:08:17,640 --> 01:08:19,679
Sonnet. And this is just to show you

2188
01:08:19,679 --> 01:08:21,040
guys you can connect to different ones.

2189
01:08:21,040 --> 01:08:22,560
But anyways, now we could click on open

2190
01:08:22,560 --> 01:08:24,080
chat. And actually, let me make sure you

2191
01:08:24,080 --> 01:08:26,719
guys can see him. If we say hello, it's

2192
01:08:26,719 --> 01:08:29,198
going to use its brain claw 3.5 sonnet.

2193
01:08:29,198 --> 01:08:30,880
And now it responded to us. Hi there.

2194
01:08:30,880 --> 01:08:33,120
How can I help you? So, just to validate

2195
01:08:33,120 --> 01:08:34,880
that our information is indeed in the

2196
01:08:34,880 --> 01:08:36,560
Pine Cone vector store, we're going to

2197
01:08:36,560 --> 01:08:38,799
click on a tool under the agent. We're

2198
01:08:38,799 --> 01:08:41,920
going to type in Pine Cone um and grab a

2199
01:08:41,920 --> 01:08:43,759
Pine Cone vector store and we're going

2200
01:08:43,759 --> 01:08:44,799
to grab the account that we just

2201
01:08:44,799 --> 01:08:46,479
selected. So, this was the demo I just

2202
01:08:46,479 --> 01:08:48,319
made. We're going to give it a name. So,

2203
01:08:48,319 --> 01:08:50,238
in this case, I'm just going to say

2204
01:08:50,238 --> 01:08:51,799
knowledge

2205
01:08:51,799 --> 01:08:54,640
base. We're going to give a description.

2206
01:08:54,640 --> 01:08:59,640
Call this tool to access the policy and

2207
01:08:59,640 --> 01:09:02,479
FAQ database. So, we're basically just

2208
01:09:02,479 --> 01:09:03,920
describing to the agent what this tool

2209
01:09:03,920 --> 01:09:06,399
does and when to use it. And then we

2210
01:09:06,399 --> 01:09:08,000
have to select the index and the name

2211
01:09:08,000 --> 01:09:09,920
space for it to look inside of. So the

2212
01:09:09,920 --> 01:09:11,439
index is easy. We only have one. It's

2213
01:09:11,439 --> 01:09:13,679
called sample. But now this is important

2214
01:09:13,679 --> 01:09:14,799
because if you don't give it the right

2215
01:09:14,799 --> 01:09:16,319
name space, it won't find the right

2216
01:09:16,319 --> 01:09:19,120
information. So we called ours FAQ. If

2217
01:09:19,120 --> 01:09:21,439
you remember in um our Pine Cone, we

2218
01:09:21,439 --> 01:09:23,040
have a namespace and we have FAQ right

2219
01:09:23,040 --> 01:09:25,600
here. So that's why we're doing FAQ. And

2220
01:09:25,600 --> 01:09:26,719
now it's going to be looking in the

2221
01:09:26,719 --> 01:09:28,479
right spot. So before we can chat with

2222
01:09:28,479 --> 01:09:30,080
it, we have to add an embeddings model

2223
01:09:30,080 --> 01:09:32,319
to our Pine Cone vector store, which

2224
01:09:32,319 --> 01:09:33,679
same thing as before. We're going to

2225
01:09:33,679 --> 01:09:35,600
grab OpenAI and we're going to use

2226
01:09:35,600 --> 01:09:37,679
embedding3 small and the same credential

2227
01:09:37,679 --> 01:09:39,439
you just made. And now we're going to be

2228
01:09:39,439 --> 01:09:41,839
good to go to chat with our rag agent.

2229
01:09:41,839 --> 01:09:43,359
So looking back in the document, we can

2230
01:09:43,359 --> 01:09:44,880
see we have some different stuff. So I'm

2231
01:09:44,880 --> 01:09:46,319
going to ask this chatbot what the

2232
01:09:46,319 --> 01:09:48,238
warranty policy is. So I'm going to open

2233
01:09:48,238 --> 01:09:51,080
up the chat window and say what is our

2234
01:09:51,080 --> 01:09:54,000
warranty policy? Send that off. And we

2235
01:09:54,000 --> 01:09:55,360
should see that it's going to use its

2236
01:09:55,360 --> 01:09:57,440
brain as well as the vector store in

2237
01:09:57,440 --> 01:09:59,120
order to create an answer for us because

2238
01:09:59,120 --> 01:10:00,920
it didn't know by

2239
01:10:00,920 --> 01:10:03,440
itself. So there we go. just finished up

2240
01:10:03,440 --> 01:10:05,280
and it said based on the information

2241
01:10:05,280 --> 01:10:06,560
from our knowledge base, here's the

2242
01:10:06,560 --> 01:10:08,400
warranty policy. We have one-year

2243
01:10:08,400 --> 01:10:10,560
standard coverage. We have, you know,

2244
01:10:10,560 --> 01:10:12,560
this email for claims processes. You

2245
01:10:12,560 --> 01:10:14,640
must provide proof of purchase and for

2246
01:10:14,640 --> 01:10:16,480
warranty exclusions that aren't covered,

2247
01:10:16,480 --> 01:10:18,320
damage due to misuse, water damage, blah

2248
01:10:18,320 --> 01:10:20,520
blah blah. Back in the policy

2249
01:10:20,520 --> 01:10:22,480
documentation, we can see that that is

2250
01:10:22,480 --> 01:10:24,480
exactly what we have in our knowledge

2251
01:10:24,480 --> 01:10:26,640
base for warranty policy. So, just

2252
01:10:26,640 --> 01:10:27,840
because I don't want this video to go

2253
01:10:27,840 --> 01:10:29,040
too long, I'm not going to do more

2254
01:10:29,040 --> 01:10:30,400
tests, but this is where you can get in

2255
01:10:30,400 --> 01:10:31,840
there and make sure it's working. One

2256
01:10:31,840 --> 01:10:33,280
thing to keep in mind is within the

2257
01:10:33,280 --> 01:10:34,880
agent, we didn't give it a system

2258
01:10:34,880 --> 01:10:36,880
prompt. And what a system prompt is is

2259
01:10:36,880 --> 01:10:38,800
just basically a message that tells the

2260
01:10:38,800 --> 01:10:41,120
agent how to do its job. So what you

2261
01:10:41,120 --> 01:10:42,159
could do is if you're having issues

2262
01:10:42,159 --> 01:10:43,920
here, you could say, you know, like this

2263
01:10:43,920 --> 01:10:45,520
is the name of our tool which is called

2264
01:10:45,520 --> 01:10:47,280
knowledgeb. You could tell the agent and

2265
01:10:47,280 --> 01:10:49,600
in system prompt, hey, like your job is

2266
01:10:49,600 --> 01:10:52,159
to help users answer questions about the

2267
01:10:52,159 --> 01:10:54,560
um you know, our policy database. You

2268
01:10:54,560 --> 01:10:56,719
have a tool called knowledgebase. You

2269
01:10:56,719 --> 01:10:58,080
need to use that in order to help them

2270
01:10:58,080 --> 01:10:59,600
answer their questions. and that will

2271
01:10:59,600 --> 01:11:01,679
help you refine the behavior of how this

2272
01:11:01,679 --> 01:11:03,679
agent acts. All right, so the next one

2273
01:11:03,679 --> 01:11:05,120
that we're doing is a customer support

2274
01:11:05,120 --> 01:11:07,120
workflow. And as always, you have to

2275
01:11:07,120 --> 01:11:08,560
figure out what is the trigger for my

2276
01:11:08,560 --> 01:11:10,239
workflow. In this case, it's going to be

2277
01:11:10,239 --> 01:11:12,880
triggered by a new email received. So

2278
01:11:12,880 --> 01:11:14,480
I'm going to click on add first step.

2279
01:11:14,480 --> 01:11:16,320
I'm going to type in Gmail. Grab that

2280
01:11:16,320 --> 01:11:18,159
node. And we have a trigger, which is on

2281
01:11:18,159 --> 01:11:19,760
message received right here. And we're

2282
01:11:19,760 --> 01:11:21,440
going to click on that. So what we have

2283
01:11:21,440 --> 01:11:23,360
to do now is obviously authorize

2284
01:11:23,360 --> 01:11:25,040
ourselves. So we're going to click on

2285
01:11:25,040 --> 01:11:26,880
create new credential right here. And

2286
01:11:26,880 --> 01:11:28,880
all we have to do here is use OOTH 2. So

2287
01:11:28,880 --> 01:11:30,320
all we have to do is click on sign in.

2288
01:11:30,320 --> 01:11:31,520
But before we can do that, we have to

2289
01:11:31,520 --> 01:11:32,960
come over to our Google Cloud once

2290
01:11:32,960 --> 01:11:34,480
again. And now we have to make sure we

2291
01:11:34,480 --> 01:11:36,800
enable the Gmail API. So we'll click on

2292
01:11:36,800 --> 01:11:38,640
Gmail API. And it'll be really simple.

2293
01:11:38,640 --> 01:11:40,239
We'll just have to click on enable. And

2294
01:11:40,239 --> 01:11:41,760
now we should be able to do that OOTH

2295
01:11:41,760 --> 01:11:43,760
connection and actually sign in. You'll

2296
01:11:43,760 --> 01:11:44,960
click on the account that you want to

2297
01:11:44,960 --> 01:11:46,800
access the Gmail. You'll give it access

2298
01:11:46,800 --> 01:11:49,120
to everything. Click continue. And then

2299
01:11:49,120 --> 01:11:50,400
we're going to be connected as you can

2300
01:11:50,400 --> 01:11:51,679
see. And then you'll want to name this

2301
01:11:51,679 --> 01:11:54,000
credential as always. Okay. So now we're

2302
01:11:54,000 --> 01:11:55,760
using our new credential. And what I'm

2303
01:11:55,760 --> 01:11:57,520
going to do is if I hit fetch test

2304
01:11:57,520 --> 01:11:59,199
event. So now we are seeing an email

2305
01:11:59,199 --> 01:12:01,120
that I just got in this inbox which in

2306
01:12:01,120 --> 01:12:03,360
this case was nencloud was granted

2307
01:12:03,360 --> 01:12:05,120
access to your Google account blah blah

2308
01:12:05,120 --> 01:12:08,000
blah. Um so that's what we just got.

2309
01:12:08,000 --> 01:12:09,440
Okay. So I just sent myself a different

2310
01:12:09,440 --> 01:12:11,280
email and I'm going to fetch that email

2311
01:12:11,280 --> 01:12:13,440
now from this inbox. And we can see that

2312
01:12:13,440 --> 01:12:15,760
the snippet says what is the privacy

2313
01:12:15,760 --> 01:12:17,760
policy? I'm concerned about my data and

2314
01:12:17,760 --> 01:12:19,760
passwords. And what we want to do is we

2315
01:12:19,760 --> 01:12:21,520
want to turn off simplify because what

2316
01:12:21,520 --> 01:12:22,880
this button is doing is it's going to

2317
01:12:22,880 --> 01:12:24,719
take the content of the email and

2318
01:12:24,719 --> 01:12:26,800
basically, you know, cut it off. So in

2319
01:12:26,800 --> 01:12:28,159
this case, it didn't matter, but if

2320
01:12:28,159 --> 01:12:29,440
you're getting long emails, it's going

2321
01:12:29,440 --> 01:12:30,880
to cut off some of the email. So if we

2322
01:12:30,880 --> 01:12:33,120
turn off simplify fetch test event, once

2323
01:12:33,120 --> 01:12:34,800
again, we're now going to get a lot more

2324
01:12:34,800 --> 01:12:36,719
information about this email, but we're

2325
01:12:36,719 --> 01:12:37,920
still going to be able to access the

2326
01:12:37,920 --> 01:12:40,080
actual content, which is right here. We

2327
01:12:40,080 --> 01:12:41,679
have the text, what is privacy policy?

2328
01:12:41,679 --> 01:12:42,800
I'm concerned about my data and

2329
01:12:42,800 --> 01:12:44,560
passwords. Thank you. And then you can

2330
01:12:44,560 --> 01:12:46,239
see we have other data too like what the

2331
01:12:46,239 --> 01:12:48,000
subject was, who the email is coming

2332
01:12:48,000 --> 01:12:49,679
from, what their name is, all this kind

2333
01:12:49,679 --> 01:12:52,000
of stuff. But the idea here is that we

2334
01:12:52,000 --> 01:12:53,920
are going to be creating a workflow

2335
01:12:53,920 --> 01:12:56,320
where if someone sends an email to this

2336
01:12:56,320 --> 01:12:58,000
inbox right here, we are going to

2337
01:12:58,000 --> 01:12:59,280
automatically look up the customer

2338
01:12:59,280 --> 01:13:00,960
support policy and respond back to them

2339
01:13:00,960 --> 01:13:02,800
so we don't have to. Okay. So the first

2340
01:13:02,800 --> 01:13:04,000
thing I'm actually going to do is pin

2341
01:13:04,000 --> 01:13:05,520
this data just so we can keep it here

2342
01:13:05,520 --> 01:13:07,120
for testing. Which basically means

2343
01:13:07,120 --> 01:13:08,880
whenever we rerun this, it's not going

2344
01:13:08,880 --> 01:13:10,560
to go look in our inbox. It's just going

2345
01:13:10,560 --> 01:13:12,320
to keep this email that we pulled in,

2346
01:13:12,320 --> 01:13:14,640
which helps us for testing, right? Okay,

2347
01:13:14,640 --> 01:13:16,159
cool. So, the next step here is we need

2348
01:13:16,159 --> 01:13:19,120
to have AI basically filter to see is

2349
01:13:19,120 --> 01:13:21,280
this email customer support related? If

2350
01:13:21,280 --> 01:13:23,120
yes, then we're going to have a response

2351
01:13:23,120 --> 01:13:24,920
written. If no, we're going to do

2352
01:13:24,920 --> 01:13:27,199
nothing because maybe the use case would

2353
01:13:27,199 --> 01:13:28,640
be okay, we're going to give it an

2354
01:13:28,640 --> 01:13:30,239
access to an inbox where we're only

2355
01:13:30,239 --> 01:13:32,000
getting customer support emails. But

2356
01:13:32,000 --> 01:13:33,840
sometimes maybe that's not the case. And

2357
01:13:33,840 --> 01:13:35,360
let's just say we wanted to create this

2358
01:13:35,360 --> 01:13:36,960
as sort of like an inbox manager where

2359
01:13:36,960 --> 01:13:38,640
we can route off to different logic

2360
01:13:38,640 --> 01:13:40,400
based on the type of email. So that's

2361
01:13:40,400 --> 01:13:41,600
what we're going to do here. So I'm

2362
01:13:41,600 --> 01:13:42,880
going to click on the plus after the

2363
01:13:42,880 --> 01:13:44,400
Gmail trigger and I'm going to search

2364
01:13:44,400 --> 01:13:47,199
for a text classifier node. And what

2365
01:13:47,199 --> 01:13:49,280
this does is it's going to use AI to

2366
01:13:49,280 --> 01:13:50,960
read the incoming email and then

2367
01:13:50,960 --> 01:13:53,679
determine what type of email it is. So

2368
01:13:53,679 --> 01:13:54,880
because we're using AI, the first thing

2369
01:13:54,880 --> 01:13:56,560
we have to do is connect a chat model.

2370
01:13:56,560 --> 01:13:57,840
We already have our open router

2371
01:13:57,840 --> 01:13:59,199
credential set up. So I'm going to

2372
01:13:59,199 --> 01:14:00,480
choose that. I'm going to choose the

2373
01:14:00,480 --> 01:14:01,920
credential and then I'm for this one,

2374
01:14:01,920 --> 01:14:03,920
let's just keep it with 40 mini. And now

2375
01:14:03,920 --> 01:14:07,040
this AI node actually has AI and I'm

2376
01:14:07,040 --> 01:14:08,640
going to click into the text classifier.

2377
01:14:08,640 --> 01:14:09,920
And the first thing we see is that

2378
01:14:09,920 --> 01:14:12,000
there's a text to classify. So all we

2379
01:14:12,000 --> 01:14:13,440
want to do here is we want to grab the

2380
01:14:13,440 --> 01:14:15,600
actual content of the email. So I'm

2381
01:14:15,600 --> 01:14:17,040
going to scroll down. I can see here's

2382
01:14:17,040 --> 01:14:18,960
the text, which is the email content.

2383
01:14:18,960 --> 01:14:20,560
We're going to drag that into this

2384
01:14:20,560 --> 01:14:23,120
field. And now every time a new email

2385
01:14:23,120 --> 01:14:25,360
comes through, the text classifier is

2386
01:14:25,360 --> 01:14:26,880
going to be able to read it because we

2387
01:14:26,880 --> 01:14:28,560
put in a variable which basically

2388
01:14:28,560 --> 01:14:30,800
represents the content of the email. So

2389
01:14:30,800 --> 01:14:32,320
now that it has that, it still doesn't

2390
01:14:32,320 --> 01:14:34,320
know what to classify it as or what its

2391
01:14:34,320 --> 01:14:35,600
options are. So we're going to click on

2392
01:14:35,600 --> 01:14:37,679
add category. The first category is

2393
01:14:37,679 --> 01:14:39,760
going to be customer support. And then

2394
01:14:39,760 --> 01:14:40,880
basically we need to give it a

2395
01:14:40,880 --> 01:14:42,480
description of what a customer support

2396
01:14:42,480 --> 01:14:44,400
email could look like. So I wanted to

2397
01:14:44,400 --> 01:14:46,080
keep this one simple. It's pretty vague,

2398
01:14:46,080 --> 01:14:47,760
but you could make this more detailed,

2399
01:14:47,760 --> 01:14:49,360
of course. And I just sent an email

2400
01:14:49,360 --> 01:14:50,560
that's related to helping out a

2401
01:14:50,560 --> 01:14:52,159
customer. They may be asking questions

2402
01:14:52,159 --> 01:14:54,000
about our policies or questions about

2403
01:14:54,000 --> 01:14:56,159
our products or services. And what we

2404
01:14:56,159 --> 01:14:57,520
can do is we can give it specific

2405
01:14:57,520 --> 01:14:59,520
examples of like here are some past

2406
01:14:59,520 --> 01:15:00,880
customer support emails and here's what

2407
01:15:00,880 --> 01:15:02,159
they've looked like. And that will make

2408
01:15:02,159 --> 01:15:03,679
this thing more accurate. But in this

2409
01:15:03,679 --> 01:15:04,960
case, that's all we're going to do. And

2410
01:15:04,960 --> 01:15:06,320
then I'm going to add one more category

2411
01:15:06,320 --> 01:15:08,239
that's just going to be other. And then

2412
01:15:08,239 --> 01:15:10,239
for now, I'm just going to say any email

2413
01:15:10,239 --> 01:15:14,480
that is not customer support related.

2414
01:15:14,480 --> 01:15:16,480
Okay, cool. So now when we click out of

2415
01:15:16,480 --> 01:15:18,000
here, we can see we have two different

2416
01:15:18,000 --> 01:15:20,000
branches coming off of this node, which

2417
01:15:20,000 --> 01:15:21,840
means when the text classifier decides,

2418
01:15:21,840 --> 01:15:23,280
it's either going to send it off this

2419
01:15:23,280 --> 01:15:24,640
branch or it's going to send it down

2420
01:15:24,640 --> 01:15:27,040
this branch. So let's quickly hit play.

2421
01:15:27,040 --> 01:15:28,560
It's going to be reading the email using

2422
01:15:28,560 --> 01:15:30,480
its brain. And now you can see it has

2423
01:15:30,480 --> 01:15:32,800
outputed in the customer support branch.

2424
01:15:32,800 --> 01:15:34,239
We can also verify by clicking into

2425
01:15:34,239 --> 01:15:35,520
here. And we can see customer support

2426
01:15:35,520 --> 01:15:37,760
branch has one item and other branch has

2427
01:15:37,760 --> 01:15:39,760
no items. And just to keep ourselves

2428
01:15:39,760 --> 01:15:41,120
organized right now, I'm going to click

2429
01:15:41,120 --> 01:15:42,640
on the other branch and I'm just going

2430
01:15:42,640 --> 01:15:44,719
to add an operation that says do nothing

2431
01:15:44,719 --> 01:15:46,239
just so we can see, you know, what would

2432
01:15:46,239 --> 01:15:48,239
happen if it went this way for now. But

2433
01:15:48,239 --> 01:15:49,760
now is where we want to configure the

2434
01:15:49,760 --> 01:15:52,560
logic of having an agent be able to read

2435
01:15:52,560 --> 01:15:55,199
the email, hit the vector database to

2436
01:15:55,199 --> 01:15:56,880
get relevant information and then help

2437
01:15:56,880 --> 01:15:58,640
us write an email. So I'm going to click

2438
01:15:58,640 --> 01:16:00,320
on the plus after the customer support

2439
01:16:00,320 --> 01:16:02,560
branch. I'm going to grab an AI agent.

2440
01:16:02,560 --> 01:16:03,840
So this is going to be very similar to

2441
01:16:03,840 --> 01:16:05,360
the way we set up our AI agent in the

2442
01:16:05,360 --> 01:16:06,400
previous workflow. So, it's kind of

2443
01:16:06,400 --> 01:16:08,800
building on top of each other. And this

2444
01:16:08,800 --> 01:16:10,400
time, if you remember in the previous

2445
01:16:10,400 --> 01:16:12,080
one, we were talking to it with a

2446
01:16:12,080 --> 01:16:13,920
connected chat trigger node. And as you

2447
01:16:13,920 --> 01:16:15,679
can see here, we don't have a connected

2448
01:16:15,679 --> 01:16:17,280
chat trigger node. So, the first thing

2449
01:16:17,280 --> 01:16:18,960
we want to do is change that. We want to

2450
01:16:18,960 --> 01:16:20,719
define below. And this is where you

2451
01:16:20,719 --> 01:16:22,000
would think, okay, what do we actually

2452
01:16:22,000 --> 01:16:23,760
want the agent to read? We want it to

2453
01:16:23,760 --> 01:16:25,280
read the email. So, I'm going to do the

2454
01:16:25,280 --> 01:16:26,800
exact same thing as before. I'm going to

2455
01:16:26,800 --> 01:16:29,040
go into the Gmail trigger node, scroll

2456
01:16:29,040 --> 01:16:30,719
all the way down until we can find the

2457
01:16:30,719 --> 01:16:32,320
actual email content, which is right

2458
01:16:32,320 --> 01:16:34,159
here, and just drag that right in.

2459
01:16:34,159 --> 01:16:35,520
That's all we're going to do. And then

2460
01:16:35,520 --> 01:16:36,719
we definitely want to add a system

2461
01:16:36,719 --> 01:16:39,120
message for this agent. We are going to

2462
01:16:39,120 --> 01:16:40,640
open up the system message and I'm just

2463
01:16:40,640 --> 01:16:42,400
going to click on expression so I can

2464
01:16:42,400 --> 01:16:44,320
expand this up full screen. And we're

2465
01:16:44,320 --> 01:16:46,320
going to write a system prompt. Again,

2466
01:16:46,320 --> 01:16:47,679
for the sake of the video, keeping this

2467
01:16:47,679 --> 01:16:49,520
prompt really concise, but if you want

2468
01:16:49,520 --> 01:16:50,640
to learn more about prompting, then

2469
01:16:50,640 --> 01:16:52,000
definitely check out my communities

2470
01:16:52,000 --> 01:16:53,920
linked down below as well as this video

2471
01:16:53,920 --> 01:16:56,080
up here and all the other tutorials on

2472
01:16:56,080 --> 01:16:58,080
my channel. But anyways, what we said

2473
01:16:58,080 --> 01:16:59,679
here is we gave it an overview and

2474
01:16:59,679 --> 01:17:01,600
instructions. The overview says you are

2475
01:17:01,600 --> 01:17:03,600
a customer support agent for TechHaven.

2476
01:17:03,600 --> 01:17:05,199
Your job is to respond to incoming

2477
01:17:05,199 --> 01:17:06,880
emails with relevant information using

2478
01:17:06,880 --> 01:17:08,880
your knowledgebased tool. And so when we

2479
01:17:08,880 --> 01:17:10,159
do hook up our Pine Cone vector

2480
01:17:10,159 --> 01:17:11,360
database, we're just going to make sure

2481
01:17:11,360 --> 01:17:13,040
to call it knowledgebase because that's

2482
01:17:13,040 --> 01:17:15,520
what the agent thinks it has access to.

2483
01:17:15,520 --> 01:17:17,040
And then for the instructions, I said

2484
01:17:17,040 --> 01:17:18,400
your output should be friendly and use

2485
01:17:18,400 --> 01:17:20,640
emojis and always sign off as Mr.

2486
01:17:20,640 --> 01:17:23,440
Helpful from TechHaven Solutions. And

2487
01:17:23,440 --> 01:17:24,640
then one more thing I forgot to do

2488
01:17:24,640 --> 01:17:26,080
actually is we want to tell it what to

2489
01:17:26,080 --> 01:17:27,760
actually output. So if we didn't tell

2490
01:17:27,760 --> 01:17:29,280
it, it would probably output like a

2491
01:17:29,280 --> 01:17:31,840
subject and a body. But what's going to

2492
01:17:31,840 --> 01:17:33,440
happen is we're going to reply to the

2493
01:17:33,440 --> 01:17:34,640
incoming email. We're not going to

2494
01:17:34,640 --> 01:17:36,080
create a new one. So we don't need a

2495
01:17:36,080 --> 01:17:38,480
subject. So I'm just going to say output

2496
01:17:38,480 --> 01:17:42,640
only the body content of the email. So

2497
01:17:42,640 --> 01:17:44,320
then we'll give it a try and see what

2498
01:17:44,320 --> 01:17:45,600
that prompt looks like. We may have to

2499
01:17:45,600 --> 01:17:47,040
come back and refine it, but for now

2500
01:17:47,040 --> 01:17:49,360
we're good. Um, and as you know, we have

2501
01:17:49,360 --> 01:17:50,960
to connect a chat model and then we have

2502
01:17:50,960 --> 01:17:52,640
to connect our pine cone. So first of

2503
01:17:52,640 --> 01:17:54,480
all, chat model, we're going to use open

2504
01:17:54,480 --> 01:17:56,080
router. And just to show you guys, we

2505
01:17:56,080 --> 01:17:58,159
can use a different type of model here.

2506
01:17:58,159 --> 01:18:00,080
Let's use something else. Okay. So,

2507
01:18:00,080 --> 01:18:01,920
we're going to go with Google Gemini 2.0

2508
01:18:01,920 --> 01:18:03,679
Flash. And then we need to add the Pine

2509
01:18:03,679 --> 01:18:04,880
Cone database. So, I'm going to click on

2510
01:18:04,880 --> 01:18:06,719
the plus under tool. I'm going to search

2511
01:18:06,719 --> 01:18:09,679
for Pine Cone Vector Store. Grab that.

2512
01:18:09,679 --> 01:18:11,520
And we have the operation is going to be

2513
01:18:11,520 --> 01:18:13,760
retrieving documents as a tool for an AI

2514
01:18:13,760 --> 01:18:16,920
agent. We're going to call this

2515
01:18:16,920 --> 01:18:20,000
knowledge capital B. And we're going to

2516
01:18:20,000 --> 01:18:22,840
once again just say call this tool to

2517
01:18:22,840 --> 01:18:27,840
access policy and FAQ information. We

2518
01:18:27,840 --> 01:18:29,760
need to set up the index as well as the

2519
01:18:29,760 --> 01:18:31,760
namespace. So sample and then we're

2520
01:18:31,760 --> 01:18:33,199
going to call the namespace, you know,

2521
01:18:33,199 --> 01:18:35,199
FAQ because that's what it's called in

2522
01:18:35,199 --> 01:18:37,040
our pine cone right here as you can see.

2523
01:18:37,040 --> 01:18:38,080
And then we just need to add our

2524
01:18:38,080 --> 01:18:39,520
embeddings model and we should be good

2525
01:18:39,520 --> 01:18:42,320
to go which is embedded OpenAI text

2526
01:18:42,320 --> 01:18:44,400
embedding three small. So we're going to

2527
01:18:44,400 --> 01:18:46,400
hit the play above the AI agent and it's

2528
01:18:46,400 --> 01:18:47,679
going to be reading the email. As you

2529
01:18:47,679 --> 01:18:49,120
can see once again the prompt user

2530
01:18:49,120 --> 01:18:50,960
message. It's reading the email. What is

2531
01:18:50,960 --> 01:18:52,560
the privacy policy? I'm concerned about

2532
01:18:52,560 --> 01:18:55,040
my data and my passwords. Thank you. So

2533
01:18:55,040 --> 01:18:56,159
we're going to hit the play above the

2534
01:18:56,159 --> 01:18:57,760
agent. We're going to watch it use its

2535
01:18:57,760 --> 01:18:59,199
brain. We're going to watch it call the

2536
01:18:59,199 --> 01:19:02,640
vector store. And we got an error. Okay.

2537
01:19:02,640 --> 01:19:04,560
So, I'm getting this error, right? And

2538
01:19:04,560 --> 01:19:06,800
it says provider returned error. And

2539
01:19:06,800 --> 01:19:09,520
it's weird because basically why it's

2540
01:19:09,520 --> 01:19:10,880
erroring is because of our our chat

2541
01:19:10,880 --> 01:19:12,800
model. And it's it's weird because it

2542
01:19:12,800 --> 01:19:14,800
goes green, right? So, anyways, what I

2543
01:19:14,800 --> 01:19:16,159
would do here is if you're experiencing

2544
01:19:16,159 --> 01:19:17,600
that error, it means there's something

2545
01:19:17,600 --> 01:19:19,520
wrong with your key. So, I would go

2546
01:19:19,520 --> 01:19:20,719
reset it. But for now, I'm just going to

2547
01:19:20,719 --> 01:19:22,800
show you the quick fix. I can connect to

2548
01:19:22,800 --> 01:19:25,440
a OpenAI chat model real quick. And I

2549
01:19:25,440 --> 01:19:26,960
can run this here and we should be good

2550
01:19:26,960 --> 01:19:29,600
to go. So now it's going to actually

2551
01:19:29,600 --> 01:19:31,920
write the email and output. Super weird

2552
01:19:31,920 --> 01:19:33,360
error, but I'm honestly glad I caught

2553
01:19:33,360 --> 01:19:34,719
that on camera to show you guys in case

2554
01:19:34,719 --> 01:19:36,560
you face that issue because it could be

2555
01:19:36,560 --> 01:19:37,920
frustrating. So we should be able to

2556
01:19:37,920 --> 01:19:39,679
look at the actual output, which is,

2557
01:19:39,679 --> 01:19:41,120
"Hey there, thank you for your concern

2558
01:19:41,120 --> 01:19:43,280
about privacy policy. At Tech Haven, we

2559
01:19:43,280 --> 01:19:45,040
take your data protection seriously." So

2560
01:19:45,040 --> 01:19:46,400
then it gives us a quick summary with

2561
01:19:46,400 --> 01:19:48,080
data collection, data protection,

2562
01:19:48,080 --> 01:19:49,600
cookies. If we clicked into here and

2563
01:19:49,600 --> 01:19:51,199
went to the privacy policy, we could see

2564
01:19:51,199 --> 01:19:53,520
that it is in fact correct. And then it

2565
01:19:53,520 --> 01:19:55,280
also was friendly and used emojis like

2566
01:19:55,280 --> 01:19:57,120
we told it to right here in the system

2567
01:19:57,120 --> 01:19:59,120
prompt. And finally, it signed off as

2568
01:19:59,120 --> 01:20:00,960
Mr. Helpful from Tech Haven Solutions,

2569
01:20:00,960 --> 01:20:02,719
also like we told it to. So, we're

2570
01:20:02,719 --> 01:20:04,000
almost done here. The last thing that we

2571
01:20:04,000 --> 01:20:05,360
want to do is we want to have it

2572
01:20:05,360 --> 01:20:07,920
actually reply to this person that

2573
01:20:07,920 --> 01:20:09,440
triggered the whole workflow. So, we're

2574
01:20:09,440 --> 01:20:10,800
going to click on the plus. We're going

2575
01:20:10,800 --> 01:20:13,280
to type in Gmail. Grab a Gmail node and

2576
01:20:13,280 --> 01:20:15,760
we're going to do reply to a message.

2577
01:20:15,760 --> 01:20:17,199
Once we open up this node, we already

2578
01:20:17,199 --> 01:20:18,400
know that we have it connected because

2579
01:20:18,400 --> 01:20:20,719
we did that earlier. We need to

2580
01:20:20,719 --> 01:20:22,640
configure the message ID, the message

2581
01:20:22,640 --> 01:20:24,560
type, and the message. And so all I'm

2582
01:20:24,560 --> 01:20:26,320
going to do is first of all, email type.

2583
01:20:26,320 --> 01:20:28,000
I'm going to do text. For the message

2584
01:20:28,000 --> 01:20:29,760
ID, I'm going to go all the way down to

2585
01:20:29,760 --> 01:20:31,679
the Gmail trigger. And we have an ID

2586
01:20:31,679 --> 01:20:33,440
right here. This is the ID we want to

2587
01:20:33,440 --> 01:20:35,360
put into the message ID so that it

2588
01:20:35,360 --> 01:20:38,080
responds in line on Gmail rather than

2589
01:20:38,080 --> 01:20:39,920
creating a new thread. And then for the

2590
01:20:39,920 --> 01:20:41,360
message, we're going to just drag in the

2591
01:20:41,360 --> 01:20:43,120
output from the agent that we just had

2592
01:20:43,120 --> 01:20:44,320
write the message. So, I'm going to grab

2593
01:20:44,320 --> 01:20:46,320
this output, put it right there. And now

2594
01:20:46,320 --> 01:20:47,600
you can see this is how it's going to

2595
01:20:47,600 --> 01:20:49,719
respond in

2596
01:20:49,719 --> 01:20:51,679
email. And the last thing I want to do

2597
01:20:51,679 --> 01:20:54,000
is I want to click on add option, append

2598
01:20:54,000 --> 01:20:55,760
nadn attribution, and then just check

2599
01:20:55,760 --> 01:20:57,600
that off. So then at the bottom of the

2600
01:20:57,600 --> 01:20:59,880
email, it doesn't say this was sent by

2601
01:20:59,880 --> 01:21:02,640
naden. So finally, we'll hit this test

2602
01:21:02,640 --> 01:21:04,400
step. We will see we get a success

2603
01:21:04,400 --> 01:21:06,239
message that the email was sent. And

2604
01:21:06,239 --> 01:21:07,600
I'll head over to the email to show you

2605
01:21:07,600 --> 01:21:09,360
guys. Okay, so here it is. This is the

2606
01:21:09,360 --> 01:21:11,040
one that we sent off to that inbox. And

2607
01:21:11,040 --> 01:21:12,560
then this is the one that we just got

2608
01:21:12,560 --> 01:21:13,920
back. As you can see, it's in the same

2609
01:21:13,920 --> 01:21:16,400
thread and it has basically the privacy

2610
01:21:16,400 --> 01:21:18,960
policy outlined for us. Cool. So, that's

2611
01:21:18,960 --> 01:21:20,719
workflow number two. Couple ways we

2612
01:21:20,719 --> 01:21:22,159
could make this even better. One thing

2613
01:21:22,159 --> 01:21:24,239
we could do is we could add a node right

2614
01:21:24,239 --> 01:21:25,760
here. And this would be another Gmail

2615
01:21:25,760 --> 01:21:28,159
one. And we could basically add a label

2616
01:21:28,159 --> 01:21:31,040
to this email. So, if I grab add label

2617
01:21:31,040 --> 01:21:32,719
to message, we would do the exact same

2618
01:21:32,719 --> 01:21:34,880
thing. We'd grab the message ID the same

2619
01:21:34,880 --> 01:21:36,800
way we grabbed it earlier. So, now it

2620
01:21:36,800 --> 01:21:38,400
has the message ID of the label to

2621
01:21:38,400 --> 01:21:40,320
actually create. And then we would just

2622
01:21:40,320 --> 01:21:41,840
basically be able to select the label we

2623
01:21:41,840 --> 01:21:43,120
want to give it. So in this case, we

2624
01:21:43,120 --> 01:21:44,640
could give it the customer support

2625
01:21:44,640 --> 01:21:46,560
label. We hit test step, we'll get

2626
01:21:46,560 --> 01:21:48,640
another success message. And then in our

2627
01:21:48,640 --> 01:21:50,320
inbox, if we refresh, we will see that

2628
01:21:50,320 --> 01:21:51,679
that just got labeled as customer

2629
01:21:51,679 --> 01:21:53,440
support. So you could add on more

2630
01:21:53,440 --> 01:21:54,960
functionality like that. And you could

2631
01:21:54,960 --> 01:21:57,199
also down here create more sections. So

2632
01:21:57,199 --> 01:21:59,440
we could have finance, you know, a logic

2633
01:21:59,440 --> 01:22:01,280
built out for finance emails. We could

2634
01:22:01,280 --> 01:22:02,719
have logic built out for all these other

2635
01:22:02,719 --> 01:22:05,280
types of emails and um plug them into

2636
01:22:05,280 --> 01:22:06,960
different knowledge bases as well. Okay.

2637
01:22:06,960 --> 01:22:08,480
So the third one we're going to do is a

2638
01:22:08,480 --> 01:22:10,960
LinkedIn content creator workflow. So,

2639
01:22:10,960 --> 01:22:12,239
what we're going to do here is click on

2640
01:22:12,239 --> 01:22:14,639
add first step, of course. And ideally,

2641
01:22:14,639 --> 01:22:15,760
you know, in production, what this

2642
01:22:15,760 --> 01:22:17,440
workflow would look like is a schedule

2643
01:22:17,440 --> 01:22:18,719
trigger, you know. So, what you could do

2644
01:22:18,719 --> 01:22:20,239
is basically say every day I want this

2645
01:22:20,239 --> 01:22:22,320
thing to run at 7:00 a.m. That way, I'm

2646
01:22:22,320 --> 01:22:23,440
always going to have a LinkedIn post

2647
01:22:23,440 --> 01:22:25,600
ready for me at, you know, 7:30. I'll

2648
01:22:25,600 --> 01:22:27,520
post it every single day. And if you

2649
01:22:27,520 --> 01:22:28,880
wanted it to actually be automatic,

2650
01:22:28,880 --> 01:22:30,320
you'd have to flick this workflow from

2651
01:22:30,320 --> 01:22:32,639
inactive to active. And, you know, now

2652
01:22:32,639 --> 01:22:34,480
it says, um, your schedule trigger will

2653
01:22:34,480 --> 01:22:36,000
now trigger executions on the schedule

2654
01:22:36,000 --> 01:22:37,760
you have defined. So now it would be

2655
01:22:37,760 --> 01:22:39,040
working, but for the sake of this video,

2656
01:22:39,040 --> 01:22:40,719
we're going to turn that off and we are

2657
01:22:40,719 --> 01:22:42,639
just going to be using a manual trigger

2658
01:22:42,639 --> 01:22:44,719
just so we can show how this works. Um,

2659
01:22:44,719 --> 01:22:46,159
but it's the same concept, right? It

2660
01:22:46,159 --> 01:22:48,000
would just start the workflow. So what

2661
01:22:48,000 --> 01:22:49,440
we're going to do from here is we're

2662
01:22:49,440 --> 01:22:51,280
going to connect a Google sheet. So I'm

2663
01:22:51,280 --> 01:22:53,199
going to grab a Google sheet node. I'm

2664
01:22:53,199 --> 01:22:55,760
going to click on get rows and sheet and

2665
01:22:55,760 --> 01:22:57,360
we have to create our credential once

2666
01:22:57,360 --> 01:22:58,719
again. So we're going to create new

2667
01:22:58,719 --> 01:23:00,400
credential. We're going to be able to do

2668
01:23:00,400 --> 01:23:02,000
ooth to sign in, but we're going to have

2669
01:23:02,000 --> 01:23:03,679
to go back to Google Cloud and we're

2670
01:23:03,679 --> 01:23:05,120
going to have to grab a sheet and make

2671
01:23:05,120 --> 01:23:07,199
sure that we have the Google Sheets API

2672
01:23:07,199 --> 01:23:08,800
enabled. So, we'll come in here, we'll

2673
01:23:08,800 --> 01:23:10,719
click enable, and now once this is good

2674
01:23:10,719 --> 01:23:12,880
to go, we'll be able to sign in using

2675
01:23:12,880 --> 01:23:14,719
OOTH 2. So, very similar to what we just

2676
01:23:14,719 --> 01:23:16,159
had to do for Gmail in that previous

2677
01:23:16,159 --> 01:23:18,480
workflow. But now, we can sign in. So,

2678
01:23:18,480 --> 01:23:20,239
once again, choosing my email, allowing

2679
01:23:20,239 --> 01:23:21,600
it to have access, and then we're

2680
01:23:21,600 --> 01:23:23,280
connected successfully, and then giving

2681
01:23:23,280 --> 01:23:25,120
this a good name. And now, what we can

2682
01:23:25,120 --> 01:23:26,639
do is choose the document and the sheet

2683
01:23:26,639 --> 01:23:28,320
that it's going to be pulling from. So,

2684
01:23:28,320 --> 01:23:29,600
I'm going to show you. I have one called

2685
01:23:29,600 --> 01:23:31,199
LinkedIn posts, and I only have one

2686
01:23:31,199 --> 01:23:33,199
sheet, but let's show you the sheet real

2687
01:23:33,199 --> 01:23:35,040
quick. So, LinkedIn posts, what we have

2688
01:23:35,040 --> 01:23:38,480
is a topic, a status, and a content. And

2689
01:23:38,480 --> 01:23:39,840
we're just basically going to be pulling

2690
01:23:39,840 --> 01:23:42,080
in one row where the status equals

2691
01:23:42,080 --> 01:23:44,800
to-do, and then we are going to um

2692
01:23:44,800 --> 01:23:46,880
create the content, upload it back in

2693
01:23:46,880 --> 01:23:48,080
right here, and then we're going to

2694
01:23:48,080 --> 01:23:50,080
change the status to created. So, then

2695
01:23:50,080 --> 01:23:51,440
this same row doesn't get pulled in

2696
01:23:51,440 --> 01:23:52,880
every day. So, how this is going to work

2697
01:23:52,880 --> 01:23:54,400
is that we're going to create a filter.

2698
01:23:54,400 --> 01:23:56,320
So the first filter is going to be

2699
01:23:56,320 --> 01:23:58,960
looking within the status column and it

2700
01:23:58,960 --> 01:24:01,440
has to equal to-do. And if we click on

2701
01:24:01,440 --> 01:24:02,960
test step, we should see that we're

2702
01:24:02,960 --> 01:24:04,560
going to get like all of these items

2703
01:24:04,560 --> 01:24:06,400
where there's a bunch of topics. But we

2704
01:24:06,400 --> 01:24:08,159
don't want that. We only want to get the

2705
01:24:08,159 --> 01:24:10,480
first row. So at the bottom here, add

2706
01:24:10,480 --> 01:24:12,159
option. I'm going to say return only

2707
01:24:12,159 --> 01:24:14,639
first matching row. Check that on. We'll

2708
01:24:14,639 --> 01:24:15,840
test this again. And now we're only

2709
01:24:15,840 --> 01:24:17,199
going to be getting that top row to

2710
01:24:17,199 --> 01:24:19,679
create content on. Cool. So we have our

2711
01:24:19,679 --> 01:24:21,600
first step here, which is just getting

2712
01:24:21,600 --> 01:24:23,360
the content from the Google sheet. Now,

2713
01:24:23,360 --> 01:24:24,560
what we're going to do is we need to do

2714
01:24:24,560 --> 01:24:27,040
some web search on this topic in order

2715
01:24:27,040 --> 01:24:28,639
to create that content. So, I'm going to

2716
01:24:28,639 --> 01:24:30,400
add a new node. This one's going to be

2717
01:24:30,400 --> 01:24:32,159
called an HTTP request. So, we're going

2718
01:24:32,159 --> 01:24:34,000
to be making a request to a specific

2719
01:24:34,000 --> 01:24:35,920
API. And in this case, we're going to be

2720
01:24:35,920 --> 01:24:38,880
using Tavly's API. So, go on over to

2721
01:24:38,880 --> 01:24:41,199
tavly.com and create a free account.

2722
01:24:41,199 --> 01:24:42,719
You're going to get a,000 searches for

2723
01:24:42,719 --> 01:24:44,880
free per month. Okay, here we are in my

2724
01:24:44,880 --> 01:24:46,480
account. I'm on the free researcher

2725
01:24:46,480 --> 01:24:47,920
plan, which gives me a thousand free

2726
01:24:47,920 --> 01:24:49,520
credits. And right here, I'm going to

2727
01:24:49,520 --> 01:24:52,000
add an API key. We're going to name it,

2728
01:24:52,000 --> 01:24:54,400
create a key, and we're going to copy

2729
01:24:54,400 --> 01:24:55,840
this value. And so, you'll start to get

2730
01:24:55,840 --> 01:24:56,800
to the point when you connect to

2731
01:24:56,800 --> 01:24:58,000
different services, you always need to

2732
01:24:58,000 --> 01:25:00,080
have some sort of like token or API key.

2733
01:25:00,080 --> 01:25:01,440
But anyways, we're going to grab this in

2734
01:25:01,440 --> 01:25:03,280
a sec. What we need to do now is go to

2735
01:25:03,280 --> 01:25:04,800
the documentation that we see right

2736
01:25:04,800 --> 01:25:06,320
here. We're going to click on API

2737
01:25:06,320 --> 01:25:08,400
reference. And now we have right here.

2738
01:25:08,400 --> 01:25:10,320
This is going to be the API that we need

2739
01:25:10,320 --> 01:25:12,560
to use in order to search the web. So,

2740
01:25:12,560 --> 01:25:14,239
I'm not going to really dive into like

2741
01:25:14,239 --> 01:25:16,000
everything about HTTP requests right

2742
01:25:16,000 --> 01:25:17,199
now. I'm just going to show you the

2743
01:25:17,199 --> 01:25:19,360
simple way that we can get this set up.

2744
01:25:19,360 --> 01:25:21,040
So first thing that we're going to do is

2745
01:25:21,040 --> 01:25:22,400
we obviously see that we're using an

2746
01:25:22,400 --> 01:25:24,960
endpoint called Tavali search and we can

2747
01:25:24,960 --> 01:25:26,400
see it's a post request which is

2748
01:25:26,400 --> 01:25:28,560
different than like a git request and we

2749
01:25:28,560 --> 01:25:29,520
have all these different things we need

2750
01:25:29,520 --> 01:25:31,600
to configure and it can be confusing. So

2751
01:25:31,600 --> 01:25:33,600
all we want to do is on the top right we

2752
01:25:33,600 --> 01:25:35,280
see this curl command. We're going to

2753
01:25:35,280 --> 01:25:37,280
click on the copy button. We're going to

2754
01:25:37,280 --> 01:25:40,239
go back into our NEN, hit import curl,

2755
01:25:40,239 --> 01:25:43,719
paste in the curl command, hit

2756
01:25:43,719 --> 01:25:46,719
import, and now the whole node magically

2757
01:25:46,719 --> 01:25:48,639
just basically filled in itself. So

2758
01:25:48,639 --> 01:25:50,080
that's really awesome. And now we can

2759
01:25:50,080 --> 01:25:51,840
sort of break down what's going on. So

2760
01:25:51,840 --> 01:25:53,920
for every HTTP request, you have to have

2761
01:25:53,920 --> 01:25:55,920
some sort of method. Typically, when

2762
01:25:55,920 --> 01:25:58,080
you're sending over data to a service,

2763
01:25:58,080 --> 01:25:59,280
which in this case, we're going to be

2764
01:25:59,280 --> 01:26:01,600
sending over data to Tavali. It's going

2765
01:26:01,600 --> 01:26:03,440
to search the web and then bring data

2766
01:26:03,440 --> 01:26:05,440
back to us. That's a post request

2767
01:26:05,440 --> 01:26:08,320
because we're sending over body data. If

2768
01:26:08,320 --> 01:26:09,840
we were just like kind of trying to hit

2769
01:26:09,840 --> 01:26:12,159
an and if we were just trying to access

2770
01:26:12,159 --> 01:26:14,719
like you know um bestbuy.com and we just

2771
01:26:14,719 --> 01:26:16,080
wanted to scrape the information that

2772
01:26:16,080 --> 01:26:17,840
could just be a simple git request

2773
01:26:17,840 --> 01:26:19,440
because we're not sending anything over

2774
01:26:19,440 --> 01:26:20,719
anyways then we're going to have some

2775
01:26:20,719 --> 01:26:22,960
sort of base URL and endpoint which is

2776
01:26:22,960 --> 01:26:24,880
right here. The base URL we're hitting

2777
01:26:24,880 --> 01:26:25,960
is

2778
01:26:25,960 --> 01:26:27,760
api.com/tavaly and then the endpoint

2779
01:26:27,760 --> 01:26:30,000
we're hitting is slash search. So back

2780
01:26:30,000 --> 01:26:31,520
in the documentation you can see right

2781
01:26:31,520 --> 01:26:34,000
here we have slash search but if we were

2782
01:26:34,000 --> 01:26:36,159
doing like an extract we would do slash

2783
01:26:36,159 --> 01:26:37,920
extract. So that's how you can kind of

2784
01:26:37,920 --> 01:26:39,440
see the difference with the endpoints.

2785
01:26:39,440 --> 01:26:40,719
And then we have a few more things to

2786
01:26:40,719 --> 01:26:42,239
configure. The first one of course is

2787
01:26:42,239 --> 01:26:44,320
our authorization. So in this case,

2788
01:26:44,320 --> 01:26:45,440
we're doing it through a header

2789
01:26:45,440 --> 01:26:46,880
parameter. As you can see right here,

2790
01:26:46,880 --> 01:26:48,960
the curl command set it up. Basically

2791
01:26:48,960 --> 01:26:51,120
all we have to do is replace this um

2792
01:26:51,120 --> 01:26:54,080
token with our API key from Tavi. So I'm

2793
01:26:54,080 --> 01:26:56,719
going to go back here, copy that key in

2794
01:26:56,719 --> 01:26:58,719
N. I'm going to get rid of token and

2795
01:26:58,719 --> 01:27:00,080
just make sure that you have a space

2796
01:27:00,080 --> 01:27:01,920
after the word bearer. And then you can

2797
01:27:01,920 --> 01:27:03,760
paste in your token. And now we are

2798
01:27:03,760 --> 01:27:05,440
connected to Tavi. But we need to

2799
01:27:05,440 --> 01:27:07,360
configure our request before we send it

2800
01:27:07,360 --> 01:27:09,120
off. So right here are the parameters

2801
01:27:09,120 --> 01:27:10,960
within our body request. And I'm not

2802
01:27:10,960 --> 01:27:12,400
going to dive too deep into it. You can

2803
01:27:12,400 --> 01:27:13,920
go to the documentation if you want to

2804
01:27:13,920 --> 01:27:15,600
understand like you know the main thing

2805
01:27:15,600 --> 01:27:17,120
really is the query which is what we're

2806
01:27:17,120 --> 01:27:18,719
searching for. But we have other things

2807
01:27:18,719 --> 01:27:20,400
like the topic. It can be general or

2808
01:27:20,400 --> 01:27:22,639
news. We have search depth. We have max

2809
01:27:22,639 --> 01:27:24,320
results. We have a time range. We have

2810
01:27:24,320 --> 01:27:26,400
all this kind of stuff. Right now I'm

2811
01:27:26,400 --> 01:27:28,320
just going to leave everything here as

2812
01:27:28,320 --> 01:27:30,000
default. We're only going to be getting

2813
01:27:30,000 --> 01:27:31,600
one result. And we're going to be doing

2814
01:27:31,600 --> 01:27:33,120
a general topic. We're going to be doing

2815
01:27:33,120 --> 01:27:34,880
basic search. But right now, if we hit

2816
01:27:34,880 --> 01:27:36,560
test step, we should see that this is

2817
01:27:36,560 --> 01:27:37,760
going to work. But it's going to be

2818
01:27:37,760 --> 01:27:39,360
searching for who is Leo Messi. And

2819
01:27:39,360 --> 01:27:40,800
here's sort of like the answer we get

2820
01:27:40,800 --> 01:27:43,679
back as well as a URL. So this is an

2821
01:27:43,679 --> 01:27:45,840
actual website we could go to about

2822
01:27:45,840 --> 01:27:48,239
Lionel Messi and then some content from

2823
01:27:48,239 --> 01:27:51,199
that website. Right? So we are going to

2824
01:27:51,199 --> 01:27:52,800
change this to an expression so that we

2825
01:27:52,800 --> 01:27:54,400
can put a variable in here rather than

2826
01:27:54,400 --> 01:27:56,239
just a static hard-coded who is Leo

2827
01:27:56,239 --> 01:27:58,880
Messi. We'll delete that query. And all

2828
01:27:58,880 --> 01:28:00,960
we're going to do is just pull in our

2829
01:28:00,960 --> 01:28:02,560
topic. So, I'm just going to simply pull

2830
01:28:02,560 --> 01:28:05,040
in the topic of AI image generation.

2831
01:28:05,040 --> 01:28:06,480
Obviously, it's a variable right here,

2832
01:28:06,480 --> 01:28:08,239
but this is the result. And then we're

2833
01:28:08,239 --> 01:28:09,679
going to test step. And this should

2834
01:28:09,679 --> 01:28:11,920
basically pull back an article about AI

2835
01:28:11,920 --> 01:28:14,480
image generation. And you know, so here

2836
01:28:14,480 --> 01:28:18,080
is a deep AI um link. We'll go to it.

2837
01:28:18,080 --> 01:28:19,520
And we can see this is an AI image

2838
01:28:19,520 --> 01:28:21,600
generator. So maybe this isn't exactly

2839
01:28:21,600 --> 01:28:23,040
what we're looking for. What we could do

2840
01:28:23,040 --> 01:28:24,719
is basically just say like, you know, we

2841
01:28:24,719 --> 01:28:28,159
could hardcode in search the web for.

2842
01:28:28,159 --> 01:28:29,280
And now it's going to be saying search

2843
01:28:29,280 --> 01:28:31,280
the web for AI image generation. We

2844
01:28:31,280 --> 01:28:32,719
could come in here and say yeah actually

2845
01:28:32,719 --> 01:28:34,480
you know let's get three results not

2846
01:28:34,480 --> 01:28:36,159
just one. And then now we could test

2847
01:28:36,159 --> 01:28:37,840
that step and we're going to be getting

2848
01:28:37,840 --> 01:28:38,960
a little bit different of a search

2849
01:28:38,960 --> 01:28:42,239
result. Um AI image generation uses text

2850
01:28:42,239 --> 01:28:43,760
descriptions to create unique visuals.

2851
01:28:43,760 --> 01:28:45,440
And then now you can see we got three

2852
01:28:45,440 --> 01:28:47,679
different URLs rather than just one.

2853
01:28:47,679 --> 01:28:49,920
Anyways, so that's our web search. And

2854
01:28:49,920 --> 01:28:51,440
now that we have a web search based on

2855
01:28:51,440 --> 01:28:53,440
our defined topic, we just need to write

2856
01:28:53,440 --> 01:28:55,520
that content. So I'm going to click on

2857
01:28:55,520 --> 01:28:58,000
the plus. I'm going to grab an AI agent.

2858
01:28:58,000 --> 01:29:00,239
And once again, we're not giving it the

2859
01:29:00,239 --> 01:29:01,920
connected chat trigger node to look at.

2860
01:29:01,920 --> 01:29:03,679
That's nowhere to be found. We're going

2861
01:29:03,679 --> 01:29:05,600
to feed in the research that was just

2862
01:29:05,600 --> 01:29:07,840
done by Tavi. So, I'm going to click on

2863
01:29:07,840 --> 01:29:10,199
expression to open this up. I'm going to

2864
01:29:10,199 --> 01:29:14,400
say article one with a colon and I'm

2865
01:29:14,400 --> 01:29:15,679
just going to drag in the content from

2866
01:29:15,679 --> 01:29:18,719
article one. I'm going to say article 2

2867
01:29:18,719 --> 01:29:20,719
with a colon and just drag in the

2868
01:29:20,719 --> 01:29:22,639
content from article 2. And then I'm

2869
01:29:22,639 --> 01:29:25,679
going to say article 3 colon and just

2870
01:29:25,679 --> 01:29:27,600
drag in the content from the third

2871
01:29:27,600 --> 01:29:29,199
article. So now it's looking at all

2872
01:29:29,199 --> 01:29:31,440
three article contents. And now we just

2873
01:29:31,440 --> 01:29:32,800
need to give it a system prompt on how

2874
01:29:32,800 --> 01:29:34,800
to write a LinkedIn post. So open this

2875
01:29:34,800 --> 01:29:36,880
up. Click on add option. Click on system

2876
01:29:36,880 --> 01:29:38,960
message. And now let's give it a prompt

2877
01:29:38,960 --> 01:29:41,280
about turning these three articles into

2878
01:29:41,280 --> 01:29:43,440
a LinkedIn post. Okay. So I'm heading

2879
01:29:43,440 --> 01:29:45,440
over to my custom GPT for prompt

2880
01:29:45,440 --> 01:29:46,960
architect. If you want to access this,

2881
01:29:46,960 --> 01:29:48,400
you can get it for free by joining my

2882
01:29:48,400 --> 01:29:50,480
free school community. Um you'll join

2883
01:29:50,480 --> 01:29:51,920
that. It's linked in the description and

2884
01:29:51,920 --> 01:29:53,360
then you can just search for prompt

2885
01:29:53,360 --> 01:29:54,800
architect and you should find the link.

2886
01:29:54,800 --> 01:29:56,400
Anyways, real quick, it's just asking

2887
01:29:56,400 --> 01:29:58,480
for some clarification questions. So,

2888
01:29:58,480 --> 01:29:59,679
anyways, I'm just shooting off a quick

2889
01:29:59,679 --> 01:30:01,360
reply and now it should basically be

2890
01:30:01,360 --> 01:30:04,000
generating our system prompt for us. So,

2891
01:30:04,000 --> 01:30:05,840
I'll check in when this is done. Okay,

2892
01:30:05,840 --> 01:30:07,520
so here is the system prompt. I am going

2893
01:30:07,520 --> 01:30:09,600
to just paste it in here and I'm just

2894
01:30:09,600 --> 01:30:10,960
going to, you know, disclaimer, this is

2895
01:30:10,960 --> 01:30:12,480
not perfect at all. Like, I don't even

2896
01:30:12,480 --> 01:30:14,480
want this tool section at all because we

2897
01:30:14,480 --> 01:30:16,320
don't have a tool hooked up to this

2898
01:30:16,320 --> 01:30:17,920
agent. Um, we're obviously just going to

2899
01:30:17,920 --> 01:30:19,840
give it a chat model real quick. So, in

2900
01:30:19,840 --> 01:30:21,040
this case, what I'm going to do is I'm

2901
01:30:21,040 --> 01:30:22,880
going to use Claude 3.5 Sonnet just

2902
01:30:22,880 --> 01:30:23,920
because I really like the way that it

2903
01:30:23,920 --> 01:30:25,520
writes content. So, I'm using Claude

2904
01:30:25,520 --> 01:30:27,280
through Open Router. And now, let's give

2905
01:30:27,280 --> 01:30:28,639
it a run and we'll just see what the

2906
01:30:28,639 --> 01:30:30,320
output looks like. Um, I'll just click

2907
01:30:30,320 --> 01:30:31,520
into here while it's running and we

2908
01:30:31,520 --> 01:30:32,880
should see that it's going to read those

2909
01:30:32,880 --> 01:30:34,719
articles and then we'll get some sort of

2910
01:30:34,719 --> 01:30:37,280
LinkedIn post back. Okay, so here it is.

2911
01:30:37,280 --> 01:30:38,960
The creative revolution is here and it's

2912
01:30:38,960 --> 01:30:41,040
AI powered. Gone are the days of hiring

2913
01:30:41,040 --> 01:30:42,560
expensive designers or struggling with

2914
01:30:42,560 --> 01:30:44,639
complex software. Today's entrepreneurs

2915
01:30:44,639 --> 01:30:46,320
can transform ideas into a stunning

2916
01:30:46,320 --> 01:30:48,480
visuals instantly using AI image

2917
01:30:48,480 --> 01:30:50,000
generators. So, as you can see, we have

2918
01:30:50,000 --> 01:30:51,600
a few emojis. We have some relevant

2919
01:30:51,600 --> 01:30:53,280
hashtags. And then at the end, it also

2920
01:30:53,280 --> 01:30:54,880
said this post, you know, it kind of

2921
01:30:54,880 --> 01:30:56,800
explains why it made this post. We could

2922
01:30:56,800 --> 01:30:58,320
easily get rid of that. If all we want

2923
01:30:58,320 --> 01:30:59,679
is the content, we would just have to

2924
01:30:59,679 --> 01:31:01,520
throw that in the system prompt. But now

2925
01:31:01,520 --> 01:31:03,520
that we have the post that we want, all

2926
01:31:03,520 --> 01:31:05,360
we have to do is send it back into our

2927
01:31:05,360 --> 01:31:07,440
Google sheet and update that it was

2928
01:31:07,440 --> 01:31:09,040
actually made. So, we're going to grab

2929
01:31:09,040 --> 01:31:10,960
another sheets node. We're going to do

2930
01:31:10,960 --> 01:31:13,199
update row and sheet. And this one's a

2931
01:31:13,199 --> 01:31:14,639
little different. It's not just um

2932
01:31:14,639 --> 01:31:16,080
grabbing stuff from a row. We're trying

2933
01:31:16,080 --> 01:31:18,159
to update stuff. So, we have to say what

2934
01:31:18,159 --> 01:31:20,320
document we want, what sheet we want.

2935
01:31:20,320 --> 01:31:21,679
But now, it's asking us what column do

2936
01:31:21,679 --> 01:31:23,440
we want to match on. So, basically, I'm

2937
01:31:23,440 --> 01:31:25,120
going to choose topic. And all we have

2938
01:31:25,120 --> 01:31:27,120
to do is go all the way back down to the

2939
01:31:27,120 --> 01:31:28,800
sheet. We're going to choose the topic

2940
01:31:28,800 --> 01:31:30,480
and drag it in right here. Which is

2941
01:31:30,480 --> 01:31:32,400
basically saying, okay, when this node

2942
01:31:32,400 --> 01:31:35,120
gets called, whenever the topic equals

2943
01:31:35,120 --> 01:31:37,280
AI image generation, which is a

2944
01:31:37,280 --> 01:31:38,880
variable, obviously, whatever whatever

2945
01:31:38,880 --> 01:31:40,400
topic triggered the workflow is what's

2946
01:31:40,400 --> 01:31:41,840
going to pop up here. We're going to

2947
01:31:41,840 --> 01:31:44,239
update that status. So, back in the

2948
01:31:44,239 --> 01:31:45,520
sheets, we can see that the status is

2949
01:31:45,520 --> 01:31:46,960
currently to-do, and we need to change

2950
01:31:46,960 --> 01:31:48,960
it to created in order for it to go

2951
01:31:48,960 --> 01:31:50,960
green. So, I'm just going to type in

2952
01:31:50,960 --> 01:31:52,159
created, and obviously, you have to

2953
01:31:52,159 --> 01:31:53,440
spell this correctly the same way you

2954
01:31:53,440 --> 01:31:55,120
have it in your Google Sheets. And then

2955
01:31:55,120 --> 01:31:56,560
for the content, all I'm going to do is

2956
01:31:56,560 --> 01:31:58,000
we're just going to drag in the output

2957
01:31:58,000 --> 01:32:00,080
of the AI agent. And as you can see,

2958
01:32:00,080 --> 01:32:01,280
it's going to be spitting out the

2959
01:32:01,280 --> 01:32:03,040
result. And now if I hit test step and

2960
01:32:03,040 --> 01:32:04,480
we go back into the sheet, we'll

2961
01:32:04,480 --> 01:32:06,800
basically watch this change. Now it's

2962
01:32:06,800 --> 01:32:08,480
created. And now we have the content of

2963
01:32:08,480 --> 01:32:10,239
our LinkedIn post as well with some

2964
01:32:10,239 --> 01:32:12,000
justification for why it created the

2965
01:32:12,000 --> 01:32:14,080
post like this. And so like I said, you

2966
01:32:14,080 --> 01:32:15,440
could basically have this be some sort

2967
01:32:15,440 --> 01:32:17,440
of, you know, LinkedIn content making

2968
01:32:17,440 --> 01:32:18,960
machine where every day it's going to

2969
01:32:18,960 --> 01:32:20,960
run at 7:00 a.m. It's going to give you

2970
01:32:20,960 --> 01:32:22,800
a post. And then what you could do also

2971
01:32:22,800 --> 01:32:24,480
is you can automate this part of it

2972
01:32:24,480 --> 01:32:25,760
where you're basically having it create

2973
01:32:25,760 --> 01:32:27,920
a few new rows every day if you give it

2974
01:32:27,920 --> 01:32:30,080
a certain sort of like general topic to

2975
01:32:30,080 --> 01:32:32,080
create topics on and then every day you

2976
01:32:32,080 --> 01:32:34,080
can just have more and more pumping out.

2977
01:32:34,080 --> 01:32:35,600
So that is going to do it for our third

2978
01:32:35,600 --> 01:32:37,600
and final workflow. Okay, so that's

2979
01:32:37,600 --> 01:32:39,040
going to do it for this video. I hope

2980
01:32:39,040 --> 01:32:40,639
that it was helpful. You know, obviously

2981
01:32:40,639 --> 01:32:42,159
we connected to a ton of different

2982
01:32:42,159 --> 01:32:43,280
credentials and a ton of different

2983
01:32:43,280 --> 01:32:46,320
services. We even made a HTTP request to

2984
01:32:46,320 --> 01:32:48,400
an API called Tavali. Now, if you found

2985
01:32:48,400 --> 01:32:49,840
this helpful and you liked this sort of

2986
01:32:49,840 --> 01:32:51,520
live step-by-step style and you're also

2987
01:32:51,520 --> 01:32:52,960
looking to accelerate your journey with

2988
01:32:52,960 --> 01:32:55,040
NAN and AI automations, I would

2989
01:32:55,040 --> 01:32:56,159
definitely recommend to check out my

2990
01:32:56,159 --> 01:32:57,440
paid community. The link for that is

2991
01:32:57,440 --> 01:32:58,880
down in the description. Okay, so

2992
01:32:58,880 --> 01:33:00,400
hopefully those three workflows taught

2993
01:33:00,400 --> 01:33:02,239
you a ton about connecting to different

2994
01:33:02,239 --> 01:33:04,080
services and setting up credentials.

2995
01:33:04,080 --> 01:33:05,440
Now, I'm actually going to throw in one

2996
01:33:05,440 --> 01:33:07,520
more bonus step-by-step build, which is

2997
01:33:07,520 --> 01:33:09,040
actually one that I shared in my paid

2998
01:33:09,040 --> 01:33:10,639
community a while back, and I wanted to

2999
01:33:10,639 --> 01:33:12,080
bring it to you guys now. So, definitely

3000
01:33:12,080 --> 01:33:13,199
finish out this course, and if you're

3001
01:33:13,199 --> 01:33:14,320
still looking for some more and you like

3002
01:33:14,320 --> 01:33:15,760
the way I teach, then feel free to check

3003
01:33:15,760 --> 01:33:16,960
out the paid community. The link for

3004
01:33:16,960 --> 01:33:18,239
that's down in the description. We've

3005
01:33:18,239 --> 01:33:19,520
got a course in there that's even more

3006
01:33:19,520 --> 01:33:20,800
comprehensive than what you're watching

3007
01:33:20,800 --> 01:33:22,560
right now on YouTube. We've also got a

3008
01:33:22,560 --> 01:33:23,679
great community of people that are using

3009
01:33:23,679 --> 01:33:25,600
Niten to build AI automations every

3010
01:33:25,600 --> 01:33:27,040
single day. So, I'd love to see you guys

3011
01:33:27,040 --> 01:33:28,800
in that community. But, let's move ahead

3012
01:33:28,800 --> 01:33:31,760
and build out this bonus workflow. Hey

3013
01:33:31,760 --> 01:33:34,400
guys. So, today I wanted to do a step by

3014
01:33:34,400 --> 01:33:37,280
step of an invoice workflow. And this is

3015
01:33:37,280 --> 01:33:39,040
because there's different ways to

3016
01:33:39,040 --> 01:33:40,239
approach stuff like this, right? There's

3017
01:33:40,239 --> 01:33:42,080
the conversation of OCR. There's a

3018
01:33:42,080 --> 01:33:44,000
conversation of maybe extracting text

3019
01:33:44,000 --> 01:33:46,239
from PDFs. Um, there's the conversation

3020
01:33:46,239 --> 01:33:49,040
of if you're always getting invoices in

3021
01:33:49,040 --> 01:33:50,639
the exact same format, you probably

3022
01:33:50,639 --> 01:33:52,320
don't need AI because you could use like

3023
01:33:52,320 --> 01:33:54,560
a code node to extract the different

3024
01:33:54,560 --> 01:33:56,320
parameters and then push that through.

3025
01:33:56,320 --> 01:33:58,080
So, that's kind of stuff we're going to

3026
01:33:58,080 --> 01:33:59,760
talk about today. And I I haven't showed

3027
01:33:59,760 --> 01:34:00,960
this one on YouTube. It's not like a

3028
01:34:00,960 --> 01:34:02,639
YouTube build, but it's not an agent.

3029
01:34:02,639 --> 01:34:04,159
It's an AI powered workflow. And I also

3030
01:34:04,159 --> 01:34:05,280
wanted to talk about like just the

3031
01:34:05,280 --> 01:34:07,120
foundational elements of connecting

3032
01:34:07,120 --> 01:34:09,360
pieces, thinking about the workflow. So,

3033
01:34:09,360 --> 01:34:11,520
what we're going to do first actually is

3034
01:34:11,520 --> 01:34:13,120
we're going to hop into Excalar real

3035
01:34:13,120 --> 01:34:14,639
quick.

3036
01:34:14,639 --> 01:34:16,639
and I'm going to create a new one. And

3037
01:34:16,639 --> 01:34:17,679
we're just going to real quickly

3038
01:34:17,679 --> 01:34:20,560
wireframe out what we're doing. So,

3039
01:34:20,560 --> 01:34:21,760
first thing we're going to draw out here

3040
01:34:21,760 --> 01:34:24,280
is the trigger. So, we'll make this one

3041
01:34:24,280 --> 01:34:26,840
yellow. We'll call this the

3042
01:34:26,840 --> 01:34:30,760
trigger. And what this is going to be is

3043
01:34:30,760 --> 01:34:34,280
invoice. Sorry, we're going to do new

3044
01:34:34,280 --> 01:34:38,239
invoice. And this is going to be

3045
01:34:38,520 --> 01:34:41,360
um Google Drive. So the Google Drive

3046
01:34:41,360 --> 01:34:43,199
node, it's going to be triggering the

3047
01:34:43,199 --> 01:34:45,280
workflow and it's going to be when a new

3048
01:34:45,280 --> 01:34:47,760
invoice gets dropped into

3049
01:34:47,760 --> 01:34:49,760
um the folder that we're watching. So

3050
01:34:49,760 --> 01:34:52,320
that's the trigger. From there, and like

3051
01:34:52,320 --> 01:34:53,360
I said, this is going to be a pretty

3052
01:34:53,360 --> 01:34:55,360
simple workflow. From there, what we're

3053
01:34:55,360 --> 01:34:56,800
going to do is basically it's going to

3054
01:34:56,800 --> 01:34:59,920
be a PDF. So the first thing to

3055
01:34:59,920 --> 01:35:02,639
understand is actually let me just put

3056
01:35:02,639 --> 01:35:04,159
Google Drive over here. So the first

3057
01:35:04,159 --> 01:35:07,880
thing to understand from here is

3058
01:35:07,880 --> 01:35:11,840
um you know what what do the invoices

3059
01:35:11,840 --> 01:35:12,600
look

3060
01:35:12,600 --> 01:35:14,639
like? These are the questions that we're

3061
01:35:14,639 --> 01:35:15,920
going to have. So the first one's what

3062
01:35:15,920 --> 01:35:19,360
do the invoices look like? Um because

3063
01:35:19,360 --> 01:35:21,679
that determines what happens next. So if

3064
01:35:21,679 --> 01:35:23,440
they are PDFs that happen every single

3065
01:35:23,440 --> 01:35:25,360
time and they're always in the same

3066
01:35:25,360 --> 01:35:27,600
format, then next we'd want to do okay

3067
01:35:27,600 --> 01:35:29,520
well we can just kind of extract the

3068
01:35:29,520 --> 01:35:33,120
text from this and then we can um use a

3069
01:35:33,120 --> 01:35:34,719
code node to extract the information we

3070
01:35:34,719 --> 01:35:39,280
need per each parameter. Now if it is a

3071
01:35:39,280 --> 01:35:42,080
scanned invoice where it's maybe not as

3072
01:35:42,080 --> 01:35:44,000
we're not maybe not as able to extract

3073
01:35:44,000 --> 01:35:46,159
text from it or like turn it into a text

3074
01:35:46,159 --> 01:35:48,159
doc, we'll probably have to do some OCR

3075
01:35:48,159 --> 01:35:52,000
element. Um, but if it's PDF that's

3076
01:35:52,000 --> 01:35:54,000
generated by a computer, so we can

3077
01:35:54,000 --> 01:35:56,080
extract the text, but they're not going

3078
01:35:56,080 --> 01:35:57,280
to come through the same every time,

3079
01:35:57,280 --> 01:35:58,480
which is what we have in this case. I

3080
01:35:58,480 --> 01:36:00,639
have two example invoices. So, we know

3081
01:36:00,639 --> 01:36:02,480
we're overall we're looking for like

3082
01:36:02,480 --> 01:36:04,000
business name, client name, invoice

3083
01:36:04,000 --> 01:36:05,679
number, invoice date, due date, payment

3084
01:36:05,679 --> 01:36:07,280
method, bank details, maybe stuff like

3085
01:36:07,280 --> 01:36:08,960
that, right? But both of these are

3086
01:36:08,960 --> 01:36:10,639
formatted very differently. They all

3087
01:36:10,639 --> 01:36:12,239
have the same information, but they're

3088
01:36:12,239 --> 01:36:15,199
formatted differently. So that's why we

3089
01:36:15,199 --> 01:36:17,120
can't that's why we want to use an AI

3090
01:36:17,120 --> 01:36:19,920
sort of information extractor node. Um

3091
01:36:19,920 --> 01:36:21,280
so that's one of the main questions. The

3092
01:36:21,280 --> 01:36:22,719
other ones we'd think about would be

3093
01:36:22,719 --> 01:36:24,600
like you

3094
01:36:24,600 --> 01:36:27,600
know where do they go? So once we get

3095
01:36:27,600 --> 01:36:30,639
them where do they go? Um you know the

3096
01:36:30,639 --> 01:36:32,639
frequency of them coming in and then

3097
01:36:32,639 --> 01:36:34,440
also

3098
01:36:34,440 --> 01:36:37,120
like really any other action. So bas

3099
01:36:37,120 --> 01:36:38,880
building off of where do they go? It's

3100
01:36:38,880 --> 01:36:42,239
also like what actions will we take? So,

3101
01:36:42,239 --> 01:36:43,920
does that mean um are we just going to

3102
01:36:43,920 --> 01:36:46,080
throw it in a CRM or are we just going

3103
01:36:46,080 --> 01:36:47,920
to throw it in a CRM or maybe a database

3104
01:36:47,920 --> 01:36:49,920
or are we also going to like send them

3105
01:36:49,920 --> 01:36:52,320
an automated follow-up based on you know

3106
01:36:52,320 --> 01:36:53,520
the email that we extract from it and

3107
01:36:53,520 --> 01:36:54,719
say, "Hey, we received your invoice.

3108
01:36:54,719 --> 01:36:56,239
Thanks." So, like what does that look

3109
01:36:56,239 --> 01:36:57,679
like? So, those are the questions we

3110
01:36:57,679 --> 01:36:59,520
were initially going to ask. Um and then

3111
01:36:59,520 --> 01:37:01,040
that helps us pretty much plan out the

3112
01:37:01,040 --> 01:37:05,239
next steps. So because we figured out

3113
01:37:05,239 --> 01:37:07,239
um

3114
01:37:07,239 --> 01:37:11,839
basically we figured out that we want to

3115
01:37:11,960 --> 01:37:15,040
extract the same like x amount of

3116
01:37:15,040 --> 01:37:18,639
information the x the same x

3117
01:37:19,000 --> 01:37:21,199
fields. So because we found out we want

3118
01:37:21,199 --> 01:37:24,159
to extract the same X

3119
01:37:24,520 --> 01:37:27,000
fields but the

3120
01:37:27,000 --> 01:37:29,570
formats may not be

3121
01:37:29,570 --> 01:37:31,719
[Music]

3122
01:37:31,719 --> 01:37:35,600
consistent. We will use an AI

3123
01:37:35,600 --> 01:37:38,040
information

3124
01:37:38,040 --> 01:37:40,639
extractor. Um that is just a long

3125
01:37:40,639 --> 01:37:43,119
sentence. So shorten this up a little

3126
01:37:43,119 --> 01:37:44,639
bit or sorry make it smaller a little

3127
01:37:44,639 --> 01:37:46,840
bit. Okay so we have

3128
01:37:46,840 --> 01:37:48,840
that.

3129
01:37:48,840 --> 01:37:51,400
Um the

3130
01:37:51,400 --> 01:37:55,719
invoice will be

3131
01:37:56,080 --> 01:37:57,880
um like

3132
01:37:57,880 --> 01:38:01,600
updated to our Google sheet which will

3133
01:38:01,600 --> 01:38:04,880
just be like a database of

3134
01:38:05,080 --> 01:38:08,040
invoice which I'll just call invoice

3135
01:38:08,040 --> 01:38:12,480
database and then a follow-up email can

3136
01:38:12,480 --> 01:38:14,040
be

3137
01:38:14,040 --> 01:38:16,480
sent or no not a follow-up email we'll

3138
01:38:16,480 --> 01:38:18,280
just say an

3139
01:38:18,280 --> 01:38:20,400
email, an internal email will be sent.

3140
01:38:20,400 --> 01:38:22,679
So, an email will be sent to the

3141
01:38:22,679 --> 01:38:25,800
internal billing team.

3142
01:38:25,800 --> 01:38:29,199
Okay, so this is what we've got, right?

3143
01:38:29,199 --> 01:38:30,480
We have our questions. We've kind of

3144
01:38:30,480 --> 01:38:31,679
answered the questions. So, now we know

3145
01:38:31,679 --> 01:38:32,800
what the rest of the flow is going to

3146
01:38:32,800 --> 01:38:34,239
look like. We already know this is not

3147
01:38:34,239 --> 01:38:35,280
going to be an agent. It's going to be a

3148
01:38:35,280 --> 01:38:37,280
workflow. So, what we're going to do is

3149
01:38:37,280 --> 01:38:38,480
we're going to add another node right

3150
01:38:38,480 --> 01:38:41,040
here, which is going to be, you know,

3151
01:38:41,040 --> 01:38:43,679
PDF comes in. And what we want to do is

3152
01:38:43,679 --> 01:38:47,719
we want to extract the text from that

3153
01:38:47,719 --> 01:38:51,119
PDF. Um let's make this text smaller. So

3154
01:38:51,119 --> 01:38:52,639
we're going to extract the text. And

3155
01:38:52,639 --> 01:38:55,360
we'll do this by using a

3156
01:38:55,360 --> 01:38:59,679
um extract text node. Okay, cool. Now

3157
01:38:59,679 --> 01:39:01,280
once we have the text extracted, what do

3158
01:39:01,280 --> 01:39:02,440
we need to

3159
01:39:02,440 --> 01:39:06,440
do? We need to

3160
01:39:06,440 --> 01:39:09,480
um just moving over these initial

3161
01:39:09,480 --> 01:39:11,199
questions. So we have the text

3162
01:39:11,199 --> 01:39:13,360
extracted. Extracted. What comes next?

3163
01:39:13,360 --> 01:39:15,719
What comes next is we need to

3164
01:39:15,719 --> 01:39:18,199
um like decide

3165
01:39:18,199 --> 01:39:22,639
on the fields to extract. And how do we

3166
01:39:22,639 --> 01:39:24,760
get this? We get this

3167
01:39:24,760 --> 01:39:29,840
from our invoice database. So let's

3168
01:39:29,840 --> 01:39:31,520
quickly set up the invoice database. I'm

3169
01:39:31,520 --> 01:39:33,320
going to do this

3170
01:39:33,320 --> 01:39:36,440
by opening up a Google

3171
01:39:36,440 --> 01:39:39,119
sheet which we are just going to call

3172
01:39:39,119 --> 01:39:41,400
the

3173
01:39:41,400 --> 01:39:45,440
oops invoice DB. So now we need to

3174
01:39:45,440 --> 01:39:46,480
figure out what we actually want to put

3175
01:39:46,480 --> 01:39:48,800
into our invoice DB. So first thing

3176
01:39:48,800 --> 01:39:51,360
we'll do is um you know we're pretending

3177
01:39:51,360 --> 01:39:53,040
that our business is called Green Grass.

3178
01:39:53,040 --> 01:39:54,719
So we don't need that. We don't need the

3179
01:39:54,719 --> 01:39:55,840
business information. We really just

3180
01:39:55,840 --> 01:39:58,400
need the client information. So invoice

3181
01:39:58,400 --> 01:40:00,080
number will be the first thing we want.

3182
01:40:00,080 --> 01:40:01,440
So, we're just setting up our database

3183
01:40:01,440 --> 01:40:04,159
here. So, invoice number. From there, we

3184
01:40:04,159 --> 01:40:06,159
want to get client name, client address,

3185
01:40:06,159 --> 01:40:08,760
client email, client phone.

3186
01:40:08,760 --> 01:40:14,840
So, client name, client email,

3187
01:40:15,350 --> 01:40:16,760
[Music]

3188
01:40:16,760 --> 01:40:19,400
oops, client name, client

3189
01:40:19,400 --> 01:40:21,480
email,

3190
01:40:21,480 --> 01:40:25,560
client address, and then we want

3191
01:40:25,560 --> 01:40:28,159
client phone. Okay, so we have those

3192
01:40:28,159 --> 01:40:29,520
five things. And let's see what else we

3193
01:40:29,520 --> 01:40:31,679
want. probably the amount. So, we'll

3194
01:40:31,679 --> 01:40:34,639
just do total amount

3195
01:40:35,719 --> 01:40:40,040
due, total amount,

3196
01:40:41,000 --> 01:40:43,080
um, and due

3197
01:40:43,080 --> 01:40:46,600
date. Invoice date and due date.

3198
01:40:46,600 --> 01:40:50,639
Okay. Invoice date and due date. Okay.

3199
01:40:50,639 --> 01:40:52,880
So, we have these, what are these?

3200
01:40:52,880 --> 01:40:55,520
Eight. Eight fields. And I'm just going

3201
01:40:55,520 --> 01:40:57,600
to change these colors so it looks

3202
01:40:57,600 --> 01:41:00,159
visually better for us. So, here are the

3203
01:41:00,159 --> 01:41:01,280
fields we have and this is what we want

3204
01:41:01,280 --> 01:41:02,960
to extract from every single invoice

3205
01:41:02,960 --> 01:41:04,679
that we are going to

3206
01:41:04,679 --> 01:41:06,880
receive. Cool. So, we know we have these

3207
01:41:06,880 --> 01:41:09,040
eight things. I'm just going to actually

3208
01:41:09,040 --> 01:41:11,519
No, we're

3209
01:41:11,719 --> 01:41:14,199
fine. So, we have our eight

3210
01:41:14,199 --> 01:41:17,199
fields to extract

3211
01:41:17,199 --> 01:41:18,800
um and then they're going to be pushed

3212
01:41:18,800 --> 01:41:21,679
to invoice DB and then we'll set up the

3213
01:41:21,679 --> 01:41:23,119
once we have these fields we can

3214
01:41:23,119 --> 01:41:25,520
basically um create our email. So this

3215
01:41:25,520 --> 01:41:29,280
is going to be an AI node that's going

3216
01:41:29,280 --> 01:41:32,639
to info extract. So it's going to

3217
01:41:32,639 --> 01:41:34,080
extract the eight fields that we have

3218
01:41:34,080 --> 01:41:35,800
over

3219
01:41:35,800 --> 01:41:37,760
here. So we're going to send the data

3220
01:41:37,760 --> 01:41:39,560
into

3221
01:41:39,560 --> 01:41:42,360
there and it's going to extract those

3222
01:41:42,360 --> 01:41:45,400
fields. Once we extract those

3223
01:41:45,400 --> 01:41:47,760
fields, we don't probably need to set

3224
01:41:47,760 --> 01:41:49,520
the data because because coming out of

3225
01:41:49,520 --> 01:41:51,119
this will basically be those eight

3226
01:41:51,119 --> 01:41:54,560
fields. So um you know every time what's

3227
01:41:54,560 --> 01:41:57,560
going to happen is actually sorry let

3228
01:41:57,560 --> 01:41:59,679
me add another node here so we can

3229
01:41:59,679 --> 01:42:01,840
connect these. So what's going to come

3230
01:42:01,840 --> 01:42:03,920
out of here is one item which will be

3231
01:42:03,920 --> 01:42:05,760
the one PDF and then what's coming out

3232
01:42:05,760 --> 01:42:07,840
of here will be eight items every time.

3233
01:42:07,840 --> 01:42:09,600
So that's what we've got. We could also

3234
01:42:09,600 --> 01:42:11,440
want to think about maybe if two

3235
01:42:11,440 --> 01:42:12,800
invoices get dropped in at the same

3236
01:42:12,800 --> 01:42:14,320
time. How do we want to handle that loop

3237
01:42:14,320 --> 01:42:16,239
or just push through? But we won't worry

3238
01:42:16,239 --> 01:42:17,920
about that yet. So we've got one item

3239
01:42:17,920 --> 01:42:19,199
coming in here. the node that's

3240
01:42:19,199 --> 01:42:20,639
extracting the info will push out the

3241
01:42:20,639 --> 01:42:22,639
eight items and the eight items only.

3242
01:42:22,639 --> 01:42:27,239
And then what we can do from there is

3243
01:42:27,239 --> 01:42:31,199
update invoice DB and then from there we

3244
01:42:31,199 --> 01:42:33,440
can also and this could be like out of

3245
01:42:33,440 --> 01:42:35,360
here we do two things or it could be

3246
01:42:35,360 --> 01:42:37,679
like a uh sequential if that makes

3247
01:42:37,679 --> 01:42:39,199
sense. So, well, what else we know we

3248
01:42:39,199 --> 01:42:41,400
need to do is we know that we also need

3249
01:42:41,400 --> 01:42:43,159
to

3250
01:42:43,159 --> 01:42:46,159
email billing team. And so, what I was

3251
01:42:46,159 --> 01:42:47,159
saying there

3252
01:42:47,159 --> 01:42:49,600
is we could either have it like this

3253
01:42:49,600 --> 01:42:51,119
where at the same time it branches off

3254
01:42:51,119 --> 01:42:52,800
and it does those two things. And it

3255
01:42:52,800 --> 01:42:54,000
really doesn't matter the order because

3256
01:42:54,000 --> 01:42:55,440
they're both going to happen either way.

3257
01:42:55,440 --> 01:42:56,960
So, for now, to keep the flow simple,

3258
01:42:56,960 --> 01:42:58,560
we'll just do this or we're going to

3259
01:42:58,560 --> 01:43:01,960
email the billing team.

3260
01:43:01,960 --> 01:43:05,040
Um, and what's going to happen is, you

3261
01:43:05,040 --> 01:43:08,400
know, essentially because this is

3262
01:43:10,520 --> 01:43:12,719
internal, because this is internal, we

3263
01:43:12,719 --> 01:43:16,080
already know like the billing email. So,

3264
01:43:16,080 --> 01:43:19,360
you know,

3265
01:43:19,639 --> 01:43:21,119
billing@acample.com. This is what we're

3266
01:43:21,119 --> 01:43:22,159
going to feed in because we already know

3267
01:43:22,159 --> 01:43:23,440
the billing email. We don't have to

3268
01:43:23,440 --> 01:43:26,960
extract this from anywhere. Um, so we

3269
01:43:26,960 --> 01:43:30,840
have all the info we need. We

3270
01:43:30,840 --> 01:43:32,960
will what else do we need to feed in

3271
01:43:32,960 --> 01:43:34,320
here? So some of these some of these

3272
01:43:34,320 --> 01:43:37,920
fields we'll have to filter in. So some

3273
01:43:37,920 --> 01:43:42,199
of the extracted

3274
01:43:42,199 --> 01:43:45,040
fields because like we want to say hey

3275
01:43:45,040 --> 01:43:46,719
you know we got this invoice on this

3276
01:43:46,719 --> 01:43:50,400
date um to this client and it's due on

3277
01:43:50,400 --> 01:43:51,600
this date. So, we'll have some of the

3278
01:43:51,600 --> 01:43:53,360
extracted fields. We'll have a billing

3279
01:43:53,360 --> 01:43:56,199
example and then potentially

3280
01:43:56,199 --> 01:43:59,159
like potentially like

3281
01:43:59,159 --> 01:44:02,000
previous or like an email template

3282
01:44:02,000 --> 01:44:03,440
potentially like that's that's something

3283
01:44:03,440 --> 01:44:06,320
we can think about or we can just prompt

3284
01:44:06,320 --> 01:44:10,080
an agent to send off the email.

3285
01:44:11,320 --> 01:44:14,639
So, yeah. Okay. Okay. So what we want to

3286
01:44:14,639 --> 01:44:17,280
do here is actually this. What we need

3287
01:44:17,280 --> 01:44:20,520
to do is the email has to be generated

3288
01:44:20,520 --> 01:44:22,800
somewhere. So before we feed into an

3289
01:44:22,800 --> 01:44:25,440
emailing team node and let me actually

3290
01:44:25,440 --> 01:44:26,560
change this. So we're going to have

3291
01:44:26,560 --> 01:44:28,800
green nodes be AI and then blue nodes

3292
01:44:28,800 --> 01:44:30,800
are going to be not AI. So we're going

3293
01:44:30,800 --> 01:44:32,719
to get another AI node right here which

3294
01:44:32,719 --> 01:44:35,560
is going to be craft

3295
01:44:35,560 --> 01:44:37,760
email. So we'll connect these pieces

3296
01:44:37,760 --> 01:44:40,920
once again.

3297
01:44:40,920 --> 01:44:43,199
Um, and so I hope this I hope you guys

3298
01:44:43,199 --> 01:44:44,560
can see like this is me trying to figure

3299
01:44:44,560 --> 01:44:46,239
out the workflow before we get into nit

3300
01:44:46,239 --> 01:44:47,520
because then we can just plug in these

3301
01:44:47,520 --> 01:44:49,639
pieces, right?

3302
01:44:49,639 --> 01:44:51,760
Um, and so I didn't even think about

3303
01:44:51,760 --> 01:44:52,960
this. I mean, obviously we would have

3304
01:44:52,960 --> 01:44:54,560
got in there and end and realized, okay,

3305
01:44:54,560 --> 01:44:56,800
well, we need an email to actually

3306
01:44:56,800 --> 01:45:00,480
configure these next fields, but that's

3307
01:45:00,480 --> 01:45:03,080
just how it works, right? So

3308
01:45:03,080 --> 01:45:05,040
anyways, this stuff is actually hooked

3309
01:45:05,040 --> 01:45:06,320
up to the wrong place. We need this to

3310
01:45:06,320 --> 01:45:07,600
be hooked up over here to the craft

3311
01:45:07,600 --> 01:45:09,480
email

3312
01:45:09,480 --> 01:45:11,920
tool. So, email template will also be

3313
01:45:11,920 --> 01:45:14,080
hooked up here. And then the billing

3314
01:45:14,080 --> 01:45:16,880
example will be hooked up. This is the

3315
01:45:16,880 --> 01:45:18,080
No, this will still go here because

3316
01:45:18,080 --> 01:45:19,840
that's actually the email team or the

3317
01:45:19,840 --> 01:45:21,080
email node.

3318
01:45:21,080 --> 01:45:23,800
So, email

3319
01:45:23,800 --> 01:45:27,360
node, send email node, which is an

3320
01:45:27,360 --> 01:45:29,600
action and we'll be feeding in this as

3321
01:45:29,600 --> 01:45:31,000
well

3322
01:45:31,000 --> 01:45:34,719
as the actual email. So the email that's

3323
01:45:34,719 --> 01:45:37,920
written by AI will be fed in. And I

3324
01:45:37,920 --> 01:45:40,560
think that ends the process, right? So

3325
01:45:40,560 --> 01:45:41,960
we'll just add a

3326
01:45:41,960 --> 01:45:44,840
quick Oops. We'll just add a quick

3327
01:45:44,840 --> 01:45:47,280
yellow note over here. And I always my

3328
01:45:47,280 --> 01:45:49,080
my colors always

3329
01:45:49,080 --> 01:45:52,159
change, but just trying to keep things

3330
01:45:52,159 --> 01:45:53,440
consistent. Like in here, we're just

3331
01:45:53,440 --> 01:45:54,480
saying, okay, the process is going to

3332
01:45:54,480 --> 01:45:56,560
end now. Okay, so this is our workflow,

3333
01:45:56,560 --> 01:46:00,000
right? New invoice PDF comes through. We

3334
01:46:00,000 --> 01:46:01,360
want to extract the text. We're using an

3335
01:46:01,360 --> 01:46:02,880
extract text node which is just going to

3336
01:46:02,880 --> 01:46:05,679
be a static extract from PDF PDF or

3337
01:46:05,679 --> 01:46:07,679
convert PDF to text file type of thing.

3338
01:46:07,679 --> 01:46:09,520
We'll get one item sent to an AI node to

3339
01:46:09,520 --> 01:46:11,360
extract the eight fields we need. The

3340
01:46:11,360 --> 01:46:12,800
eight items will be fed into the next

3341
01:46:12,800 --> 01:46:14,159
node which is going to update our Google

3342
01:46:14,159 --> 01:46:16,679
sheet. Um and I'll just also signify

3343
01:46:16,679 --> 01:46:18,719
here this is going to be a Google sheet

3344
01:46:18,719 --> 01:46:19,840
because it's important to understand the

3345
01:46:19,840 --> 01:46:21,520
integrations and like who's involved in

3346
01:46:21,520 --> 01:46:24,280
each process. So this is going to be

3347
01:46:24,280 --> 01:46:27,760
AI. This is going to be AI and that's

3348
01:46:27,760 --> 01:46:29,119
going to be an extract node. This is

3349
01:46:29,119 --> 01:46:32,000
going to be a Gmail node and then we

3350
01:46:32,000 --> 01:46:33,920
have the process end. Cool. So this is

3351
01:46:33,920 --> 01:46:36,880
our wireframe. Now we can get into naden

3352
01:46:36,880 --> 01:46:38,159
and start building out. We can see that

3353
01:46:38,159 --> 01:46:40,320
this is a very very sequential flow. We

3354
01:46:40,320 --> 01:46:42,320
don't need an agent. We just need two AI

3355
01:46:42,320 --> 01:46:43,960
nodes

3356
01:46:43,960 --> 01:46:46,960
here.

3357
01:46:47,000 --> 01:46:50,080
So let us get into niten and start

3358
01:46:50,080 --> 01:46:51,719
building this thing. So

3359
01:46:51,719 --> 01:46:54,000
um we know we know what's starting this

3360
01:46:54,000 --> 01:46:55,760
process which is which is a trigger. So,

3361
01:46:55,760 --> 01:46:57,400
I'm going to grab a Google Drive

3362
01:46:57,400 --> 01:46:59,840
trigger. We're going to do um on changes

3363
01:46:59,840 --> 01:47:02,880
to a specific file or no, no, specific

3364
01:47:02,880 --> 01:47:04,320
folder, sorry. Changes involving a

3365
01:47:04,320 --> 01:47:05,679
specific folder. We're going to choose

3366
01:47:05,679 --> 01:47:08,000
our folder, which is going to be the

3367
01:47:08,000 --> 01:47:09,840
projects folder, and we're going to be

3368
01:47:09,840 --> 01:47:12,760
watching for a file created.

3369
01:47:12,760 --> 01:47:15,920
So, we've got our ABC Tech Solutions.

3370
01:47:15,920 --> 01:47:17,960
I'm going to download this as a PDF real

3371
01:47:17,960 --> 01:47:21,440
quick. So, download as a PDF. I'm going

3372
01:47:21,440 --> 01:47:23,199
to go to my projects folder in the

3373
01:47:23,199 --> 01:47:24,560
drive, and I'm going to drag this guy in

3374
01:47:24,560 --> 01:47:26,000
here.

3375
01:47:26,000 --> 01:47:27,600
Um, there it is. Okay, so there's our

3376
01:47:27,600 --> 01:47:30,800
PDF. We'll come in here and we'll hit

3377
01:47:30,800 --> 01:47:32,800
fetch test event. So, we should be

3378
01:47:32,800 --> 01:47:34,600
getting our PDF. Okay,

3379
01:47:34,600 --> 01:47:36,719
nice. We will just make sure it's the

3380
01:47:36,719 --> 01:47:39,760
right one. So, we we should see a ABC

3381
01:47:39,760 --> 01:47:41,199
Tech Solutions Invoice. Cool. So, I'm

3382
01:47:41,199 --> 01:47:42,400
going to pin this data just so we have

3383
01:47:42,400 --> 01:47:44,719
it here. So, just for reference, pinning

3384
01:47:44,719 --> 01:47:46,800
data, all it does is just keeps it here.

3385
01:47:46,800 --> 01:47:48,239
So, if we were to refresh this this

3386
01:47:48,239 --> 01:47:50,159
page, we'll still have our pinned data,

3387
01:47:50,159 --> 01:47:52,320
which is that PDF to play with. But if

3388
01:47:52,320 --> 01:47:53,440
we would have not pinned it, then we

3389
01:47:53,440 --> 01:47:54,800
would have had to fetch test event once

3390
01:47:54,800 --> 01:47:56,880
again. So not a huge deal with something

3391
01:47:56,880 --> 01:47:58,320
like this, but if you're maybe doing web

3392
01:47:58,320 --> 01:48:00,159
hooks or API calls, you don't want to

3393
01:48:00,159 --> 01:48:01,760
have to do it every time. So you can pin

3394
01:48:01,760 --> 01:48:03,560
that data.

3395
01:48:03,560 --> 01:48:06,000
Um or like an output of an AI node if

3396
01:48:06,000 --> 01:48:07,600
you don't want to have to rerun the AI.

3397
01:48:07,600 --> 01:48:11,040
But anyway, so we have our our PDF. We

3398
01:48:11,040 --> 01:48:13,199
know next based on our wireframe. And

3399
01:48:13,199 --> 01:48:16,440
let me just call this um invoice

3400
01:48:16,440 --> 01:48:19,440
flow wireframe.

3401
01:48:19,440 --> 01:48:21,199
So we know next is we need to extract

3402
01:48:21,199 --> 01:48:23,119
text. So perfect. We'll get right into

3403
01:48:23,119 --> 01:48:25,199
NADN. We'll click on next and we will do

3404
01:48:25,199 --> 01:48:28,000
an extract from file. So let's see. We

3405
01:48:28,000 --> 01:48:31,880
want to extract from PDF. And

3406
01:48:31,880 --> 01:48:34,760
although what do we have

3407
01:48:34,760 --> 01:48:39,199
here? We don't have any binary. So we

3408
01:48:39,199 --> 01:48:40,400
were on the right track here, but we

3409
01:48:40,400 --> 01:48:42,639
forgot that in order to we get the we

3410
01:48:42,639 --> 01:48:44,400
get the PDF file ID, but we don't

3411
01:48:44,400 --> 01:48:46,080
actually have it. So what we need to do

3412
01:48:46,080 --> 01:48:49,000
here first is

3413
01:48:49,000 --> 01:48:50,520
um

3414
01:48:50,520 --> 01:48:54,800
basically download the file because we

3415
01:48:54,800 --> 01:48:57,040
need the binary to then feed that into

3416
01:48:57,040 --> 01:49:00,400
the extract text node.

3417
01:49:00,760 --> 01:49:04,119
So we need the

3418
01:49:04,119 --> 01:49:06,639
binary. So, sorry if that's like I mean

3419
01:49:06,639 --> 01:49:08,719
really small, but basically in order to

3420
01:49:08,719 --> 01:49:10,960
extract the text, we need to download

3421
01:49:10,960 --> 01:49:12,480
the file first to get the binary and

3422
01:49:12,480 --> 01:49:16,080
then we can um actually do that. So,

3423
01:49:16,080 --> 01:49:17,199
little little thing we missed in the

3424
01:49:17,199 --> 01:49:19,119
wireframe, but not a huge deal, right?

3425
01:49:19,119 --> 01:49:20,960
So, we're going to extend this one off.

3426
01:49:20,960 --> 01:49:23,840
We're going to do a Google Drive node

3427
01:49:23,840 --> 01:49:25,199
once again, and we're going to look at

3428
01:49:25,199 --> 01:49:27,920
download file. So, now we can say, okay,

3429
01:49:27,920 --> 01:49:30,560
we're downloading a file. Um, we can

3430
01:49:30,560 --> 01:49:32,080
choose from a list, but this has to be

3431
01:49:32,080 --> 01:49:33,600
dynamic because it's going to be based

3432
01:49:33,600 --> 01:49:35,440
on that new trigger every time. So, I'm

3433
01:49:35,440 --> 01:49:37,760
going to do by ID. And now on the lefth

3434
01:49:37,760 --> 01:49:39,920
hand side, we can look for the file ID.

3435
01:49:39,920 --> 01:49:41,400
So, I'm going to switch to schema real

3436
01:49:41,400 --> 01:49:44,159
quick. Um, so we can find the the ID of

3437
01:49:44,159 --> 01:49:46,560
the file. We're just going to have to go

3438
01:49:46,560 --> 01:49:47,840
through. So, we have a permissions ID

3439
01:49:47,840 --> 01:49:48,960
right here. I don't think that's the

3440
01:49:48,960 --> 01:49:51,199
right one. We have a spaces ID. I don't

3441
01:49:51,199 --> 01:49:52,960
think that's the right one either. We're

3442
01:49:52,960 --> 01:49:56,520
looking for an actual file ID.

3443
01:49:56,520 --> 01:49:59,639
So, let's see.

3444
01:49:59,639 --> 01:50:04,639
parents icon link, thumbnail link, and

3445
01:50:04,639 --> 01:50:06,000
sometimes you just have to like find it

3446
01:50:06,000 --> 01:50:09,760
and test things out, right?

3447
01:50:09,960 --> 01:50:12,159
So, I feel like I probably have just

3448
01:50:12,159 --> 01:50:13,520
skipped right over it. Otherwise, we'll

3449
01:50:13,520 --> 01:50:16,719
just try out some of these other

3450
01:50:16,840 --> 01:50:19,679
IDs. Maybe it is this one. Yeah, I think

3451
01:50:19,679 --> 01:50:20,960
Okay, sorry. I think it is this one

3452
01:50:20,960 --> 01:50:22,239
because we see the name is right here

3453
01:50:22,239 --> 01:50:23,840
and the ID is right here. So, we'll try

3454
01:50:23,840 --> 01:50:25,760
this. We're referencing that

3455
01:50:25,760 --> 01:50:27,920
dynamically. We also see in here we

3456
01:50:27,920 --> 01:50:29,760
could do a Google file conversion which

3457
01:50:29,760 --> 01:50:31,600
basically says um you know if it's docs

3458
01:50:31,600 --> 01:50:33,920
convert it to HTML if it's drawings

3459
01:50:33,920 --> 01:50:35,119
convert it to that. If it's this convert

3460
01:50:35,119 --> 01:50:36,880
it to that there's not a PDF one so

3461
01:50:36,880 --> 01:50:39,560
we'll leave this off and we'll hit test

3462
01:50:39,560 --> 01:50:41,840
step. So now we will see we got the

3463
01:50:41,840 --> 01:50:43,600
invoice we can click view and this is

3464
01:50:43,600 --> 01:50:44,800
exactly what we're looking at here with

3465
01:50:44,800 --> 01:50:46,960
the invoice. So this is the correct one.

3466
01:50:46,960 --> 01:50:48,960
Now since we have it in our binary data

3467
01:50:48,960 --> 01:50:50,880
over here we have binary. Now we can

3468
01:50:50,880 --> 01:50:54,400
extract it from the file. So um you know

3469
01:50:54,400 --> 01:50:56,000
on the left is the inputs on the right

3470
01:50:56,000 --> 01:50:57,800
is going to be our output. So we're

3471
01:50:57,800 --> 01:51:00,159
extracting from PDF. We're looking in

3472
01:51:00,159 --> 01:51:01,920
the input binary field called data which

3473
01:51:01,920 --> 01:51:05,040
is right here. So I'll hit test step and

3474
01:51:05,040 --> 01:51:07,440
now we have text. So here's the actual

3475
01:51:07,440 --> 01:51:10,320
text right um the invoice the

3476
01:51:10,320 --> 01:51:11,920
information we need and out of this is

3477
01:51:11,920 --> 01:51:12,880
what we're going to pass over to

3478
01:51:12,880 --> 01:51:15,360
extract. So let's go back to the

3479
01:51:15,360 --> 01:51:18,159
wireframe. We have our text extracted.

3480
01:51:18,159 --> 01:51:20,239
Now, what we want to do is extract um

3481
01:51:20,239 --> 01:51:22,440
the specific eight fields that we need.

3482
01:51:22,440 --> 01:51:25,199
So, hopping back into the workflow, we

3483
01:51:25,199 --> 01:51:26,480
know that this is going to be an AI

3484
01:51:26,480 --> 01:51:27,360
node. So, it's going to be an

3485
01:51:27,360 --> 01:51:28,840
information

3486
01:51:28,840 --> 01:51:30,960
extractor. We have to first of all

3487
01:51:30,960 --> 01:51:32,719
classify we we know that one item is

3488
01:51:32,719 --> 01:51:34,400
going in here and that's right here for

3489
01:51:34,400 --> 01:51:35,679
us in the table, which is the actual

3490
01:51:35,679 --> 01:51:37,440
text of the invoice. So, we can open

3491
01:51:37,440 --> 01:51:38,719
this up and we can see this is the text

3492
01:51:38,719 --> 01:51:40,360
of the

3493
01:51:40,360 --> 01:51:43,599
invoice. We want to do it from attribute

3494
01:51:43,599 --> 01:51:45,040
description. So, that's what it's

3495
01:51:45,040 --> 01:51:46,400
looking for. So, we can add our eight

3496
01:51:46,400 --> 01:51:47,280
attributes. So, we know there's going to

3497
01:51:47,280 --> 01:51:48,639
be eight of them, right? So, we can

3498
01:51:48,639 --> 01:51:50,239
create eight. But, let's just first of

3499
01:51:50,239 --> 01:51:52,320
all go into our database to see what we

3500
01:51:52,320 --> 01:51:53,520
want. So, the first one's invoice

3501
01:51:53,520 --> 01:51:55,199
number. So, I'm going to copy this over

3502
01:51:55,199 --> 01:51:56,880
here. Invoice number. And we just have

3503
01:51:56,880 --> 01:51:59,199
to describe what that is. So, I'm just

3504
01:51:59,199 --> 01:52:01,080
going to say the number of the

3505
01:52:01,080 --> 01:52:03,199
invoice. And this is required. We're

3506
01:52:03,199 --> 01:52:04,480
going to make them all required. So,

3507
01:52:04,480 --> 01:52:06,320
number of the invoice. Then we have the

3508
01:52:06,320 --> 01:52:09,239
client name. Paste that in

3509
01:52:09,239 --> 01:52:11,679
here. Um, these should all be pretty

3510
01:52:11,679 --> 01:52:14,800
self um explanatory. So the name of the

3511
01:52:14,800 --> 01:52:17,239
client we're going to make it

3512
01:52:17,239 --> 01:52:20,320
required client email. So this is going

3513
01:52:20,320 --> 01:52:21,960
to be a little bit repetitive

3514
01:52:21,960 --> 01:52:24,599
but the

3515
01:52:24,599 --> 01:52:27,840
email of the client and let me just

3516
01:52:27,840 --> 01:52:31,239
quickly copy this for the next

3517
01:52:31,239 --> 01:52:34,400
two client address. So there's client

3518
01:52:34,400 --> 01:52:36,840
address and we're going to

3519
01:52:36,840 --> 01:52:41,520
say the address of the client

3520
01:52:43,560 --> 01:52:45,599
required. And then what's the last one

3521
01:52:45,599 --> 01:52:48,880
here? Client phone. Paste that in there,

3522
01:52:48,880 --> 01:52:50,960
which is obviously going to be the phone

3523
01:52:50,960 --> 01:52:53,360
number of the client. And here we can

3524
01:52:53,360 --> 01:52:54,639
say, is this going to be a string or is

3525
01:52:54,639 --> 01:52:56,159
it going to be a number? I'm going to

3526
01:52:56,159 --> 01:52:58,560
leave it right now as a string just

3527
01:52:58,560 --> 01:52:59,840
because over here on the left you can

3528
01:52:59,840 --> 01:53:01,920
see the phone. We have parenthesis in

3529
01:53:01,920 --> 01:53:03,840
there. And maybe we want the format to

3530
01:53:03,840 --> 01:53:05,280
come over with the parenthesis and the

3531
01:53:05,280 --> 01:53:07,440
little hyphen. So let's leave it as a

3532
01:53:07,440 --> 01:53:08,639
string for now. We can always test and

3533
01:53:08,639 --> 01:53:10,400
we'll come back. But client phone, we're

3534
01:53:10,400 --> 01:53:13,960
going to leave that. We have total

3535
01:53:13,960 --> 01:53:15,920
amount. Same reason here. I'm going to

3536
01:53:15,920 --> 01:53:17,040
leave this one as a string because I

3537
01:53:17,040 --> 01:53:18,239
want to keep the dollar sign when we

3538
01:53:18,239 --> 01:53:19,520
send it over to sheets and we'll see how

3539
01:53:19,520 --> 01:53:22,560
it comes over. But the total amount of

3540
01:53:22,560 --> 01:53:23,320
the

3541
01:53:23,320 --> 01:53:26,280
invoice

3542
01:53:26,280 --> 01:53:28,800
required. What's coming next is invoice

3543
01:53:28,800 --> 01:53:31,719
date and due date. So, invoice

3544
01:53:31,719 --> 01:53:34,800
date and due date, we can say these are

3545
01:53:34,800 --> 01:53:36,320
going to be dates. So, we're changing

3546
01:53:36,320 --> 01:53:37,960
the var the data type here. They're both

3547
01:53:37,960 --> 01:53:41,760
required. And the date the invoice was

3548
01:53:41,760 --> 01:53:43,960
sent. And then we're going to

3549
01:53:43,960 --> 01:53:47,040
say the date the invoice is due. So,

3550
01:53:47,040 --> 01:53:48,560
we're going to make sure this works. If

3551
01:53:48,560 --> 01:53:49,840
we need to, we can get in here and make

3552
01:53:49,840 --> 01:53:52,320
these descriptions more descriptive. But

3553
01:53:52,320 --> 01:53:53,440
for now, we're good. We'll see if we

3554
01:53:53,440 --> 01:53:55,199
have any options. You're an expert

3555
01:53:55,199 --> 01:53:56,800
extraction algorithm. Only extracts

3556
01:53:56,800 --> 01:53:58,400
relevant information from the text. If

3557
01:53:58,400 --> 01:53:59,599
you do not know the value of the

3558
01:53:59,599 --> 01:54:01,679
attribute to extract, you may omit the

3559
01:54:01,679 --> 01:54:03,040
attributes value. So, we'll just leave

3560
01:54:03,040 --> 01:54:06,400
that as is. Um, and we'll hit test step.

3561
01:54:06,400 --> 01:54:08,239
It's going to be looking at this text.

3562
01:54:08,239 --> 01:54:10,080
And of course, we're using AI, so we

3563
01:54:10,080 --> 01:54:12,639
have to connect a chat model. So, this

3564
01:54:12,639 --> 01:54:14,560
will also alter the performance. Right

3565
01:54:14,560 --> 01:54:15,599
now, we're going to go with a Google

3566
01:54:15,599 --> 01:54:18,159
Gemini 20 flash. See if that's powerful

3567
01:54:18,159 --> 01:54:20,000
enough. I think it should be. And then,

3568
01:54:20,000 --> 01:54:21,360
we're going to hit play once again. So,

3569
01:54:21,360 --> 01:54:22,320
now it's going to be extracting

3570
01:54:22,320 --> 01:54:24,880
information using AI. And what's great

3571
01:54:24,880 --> 01:54:26,320
about this is that we already get

3572
01:54:26,320 --> 01:54:28,400
everything out here in its own item. So,

3573
01:54:28,400 --> 01:54:30,159
it's really easy to map this now into

3574
01:54:30,159 --> 01:54:32,880
our Google sheet. So, let's make sure

3575
01:54:32,880 --> 01:54:35,520
this is all correct. Um, invoice number.

3576
01:54:35,520 --> 01:54:36,800
That looks good. I'm going to open up

3577
01:54:36,800 --> 01:54:38,280
the actual one.

3578
01:54:38,280 --> 01:54:41,199
Yep. Client name ABC. Yep. Client email

3579
01:54:41,199 --> 01:54:42,840
finance at ABC

3580
01:54:42,840 --> 01:54:44,920
Tech.

3581
01:54:44,920 --> 01:54:48,480
Yep. Address and phone. We have address

3582
01:54:48,480 --> 01:54:50,880
and phone. Perfect. We have total amount

3583
01:54:50,880 --> 01:54:53,480
is 141 175.

3584
01:54:53,480 --> 01:54:57,000
14175. We have um March 8th and March

3585
01:54:57,000 --> 01:54:59,280
22nd. If we go back up here, March 8th,

3586
01:54:59,280 --> 01:55:00,719
March 22nd. Perfect. So, that one

3587
01:55:00,719 --> 01:55:04,840
extracted it. Well, and

3588
01:55:04,840 --> 01:55:07,440
um okay, so we have one item coming out,

3589
01:55:07,440 --> 01:55:08,639
but technically there's eight like

3590
01:55:08,639 --> 01:55:10,239
properties in there. So, anyways, let's

3591
01:55:10,239 --> 01:55:12,639
go back to our our uh wireframe. So,

3592
01:55:12,639 --> 01:55:14,480
after we extracted the eight items, what

3593
01:55:14,480 --> 01:55:16,159
do we do next? We're going to put them

3594
01:55:16,159 --> 01:55:20,639
into our Google Sheet um database. So,

3595
01:55:20,639 --> 01:55:21,760
what we know is we're going to grab a

3596
01:55:21,760 --> 01:55:23,599
Google Sheets. We're going to do an

3597
01:55:23,599 --> 01:55:26,239
append row because we're adding a row.

3598
01:55:26,239 --> 01:55:27,360
Um, we already have a credential

3599
01:55:27,360 --> 01:55:28,719
selected. So, hopefully we can choose

3600
01:55:28,719 --> 01:55:30,400
our invoice database. It's just going to

3601
01:55:30,400 --> 01:55:32,560
be the first sheet, sheet one. And now

3602
01:55:32,560 --> 01:55:34,280
what happens is we have to map the

3603
01:55:34,280 --> 01:55:36,239
columns. So, you can see these are

3604
01:55:36,239 --> 01:55:38,080
dragable. We can grab each one. If I go

3605
01:55:38,080 --> 01:55:40,000
to schema, it's a little more apparent.

3606
01:55:40,000 --> 01:55:41,199
So, we have these eight items. And it's

3607
01:55:41,199 --> 01:55:42,320
going to be really easy now that we use

3608
01:55:42,320 --> 01:55:44,400
an information extractor because we can

3609
01:55:44,400 --> 01:55:46,239
just map, you know, invoice number to

3610
01:55:46,239 --> 01:55:48,000
invoice number, client name, client

3611
01:55:48,000 --> 01:55:51,599
name, email, email. And it's referencing

3612
01:55:51,599 --> 01:55:54,400
these variables because every time after

3613
01:55:54,400 --> 01:55:56,239
we do our information extractor, they're

3614
01:55:56,239 --> 01:55:58,239
going to be coming out as JSON.output

3615
01:55:58,239 --> 01:55:59,840
and then invoice number. And then for

3616
01:55:59,840 --> 01:56:02,400
client name, JSON.output client name. So

3617
01:56:02,400 --> 01:56:03,840
we have these dynamic variables that

3618
01:56:03,840 --> 01:56:05,280
will happen every single time. And

3619
01:56:05,280 --> 01:56:06,400
obviously I'll show this when we do

3620
01:56:06,400 --> 01:56:08,560
another example, but we can keep mapping

3621
01:56:08,560 --> 01:56:10,080
everything in. And we also did it in

3622
01:56:10,080 --> 01:56:12,000
that order. So it's really really easy

3623
01:56:12,000 --> 01:56:14,560
to do. We're just dragging and dropping

3624
01:56:14,560 --> 01:56:19,599
and we are finished. Cool. So if I hit

3625
01:56:19,599 --> 01:56:21,760
test step here, this is going to give us

3626
01:56:21,760 --> 01:56:23,119
a message that says like here are the

3627
01:56:23,119 --> 01:56:24,960
fields basically. So there are the

3628
01:56:24,960 --> 01:56:26,719
fields. They're mapped correctly. Come

3629
01:56:26,719 --> 01:56:28,320
into the sheets. We now have

3630
01:56:28,320 --> 01:56:30,960
automatically gotten this updated in our

3631
01:56:30,960 --> 01:56:34,400
invoice database. And um that's that. So

3632
01:56:34,400 --> 01:56:36,239
let me just change some of these nodes.

3633
01:56:36,239 --> 01:56:39,360
So this is going to be update database.

3634
01:56:39,360 --> 01:56:41,119
Um this is information extractor extract

3635
01:56:41,119 --> 01:56:44,840
from file. I'm just going to say this is

3636
01:56:44,840 --> 01:56:46,679
download

3637
01:56:46,679 --> 01:56:48,800
binary. So now we know what's going on

3638
01:56:48,800 --> 01:56:50,239
in each step. And we'll go back to the

3639
01:56:50,239 --> 01:56:51,920
wireframe real quick. What happens after

3640
01:56:51,920 --> 01:56:53,920
we update the database? Now we need to

3641
01:56:53,920 --> 01:56:56,239
craft the email. And this is going to be

3642
01:56:56,239 --> 01:56:58,159
using AI. And what's going to go into

3643
01:56:58,159 --> 01:56:59,920
this is some of the extracted fields and

3644
01:56:59,920 --> 01:57:01,520
maybe an email template. What we're

3645
01:57:01,520 --> 01:57:03,760
going to do more realistically is just a

3646
01:57:03,760 --> 01:57:08,320
system prompt. So back into nitn let's

3647
01:57:08,320 --> 01:57:10,280
add a

3648
01:57:10,280 --> 01:57:14,159
um open AI message and model node. So

3649
01:57:14,159 --> 01:57:15,040
what we're going to do is we're going to

3650
01:57:15,040 --> 01:57:17,360
choose our model to talk to. In this

3651
01:57:17,360 --> 01:57:19,520
case we'll go 40 mini. It should be

3652
01:57:19,520 --> 01:57:21,840
powerful enough. And now we're going to

3653
01:57:21,840 --> 01:57:23,440
set up our system prompt and our user

3654
01:57:23,440 --> 01:57:25,679
prompt. So at this point if you don't

3655
01:57:25,679 --> 01:57:27,800
understand the

3656
01:57:27,800 --> 01:57:29,920
difference the system prompt is the

3657
01:57:29,920 --> 01:57:32,239
instructions. So we're telling this node

3658
01:57:32,239 --> 01:57:33,920
how to behave. So first I'm going to

3659
01:57:33,920 --> 01:57:36,639
change this node name to create email

3660
01:57:36,639 --> 01:57:38,000
because that's like obviously what's

3661
01:57:38,000 --> 01:57:39,760
going on keeping you organized. And now

3662
01:57:39,760 --> 01:57:41,360
how do we explain to this node what its

3663
01:57:41,360 --> 01:57:45,480
role is? So you are an email

3664
01:57:45,480 --> 01:57:48,920
expert. You will receive let me actually

3665
01:57:48,920 --> 01:57:54,320
just open this up. You will receive

3666
01:57:54,320 --> 01:57:58,080
um invoice information.

3667
01:57:58,080 --> 01:58:02,639
Your job is to notify the internal

3668
01:58:02,639 --> 01:58:04,599
billing

3669
01:58:04,599 --> 01:58:07,199
team that

3670
01:58:07,199 --> 01:58:10,199
um an invoice was

3671
01:58:10,199 --> 01:58:13,920
received. Receive/s sent. Okay. So,

3672
01:58:13,920 --> 01:58:15,599
honestly, I'm going to leave it at that

3673
01:58:15,599 --> 01:58:17,280
for now. It's really simple. If we

3674
01:58:17,280 --> 01:58:18,480
wanted to, we can get in here and change

3675
01:58:18,480 --> 01:58:21,199
the prompting as far as like here is the

3676
01:58:21,199 --> 01:58:22,800
format. Here is the way you should be

3677
01:58:22,800 --> 01:58:24,480
doing it. One thing I like to do is I

3678
01:58:24,480 --> 01:58:25,760
like to say, you know, this is like your

3679
01:58:25,760 --> 01:58:27,440
overview. And then if we need to get

3680
01:58:27,440 --> 01:58:28,800
more granular, we can give it different

3681
01:58:28,800 --> 01:58:30,960
sections like output or rules or

3682
01:58:30,960 --> 01:58:32,560
anything like that. I'm also going to

3683
01:58:32,560 --> 01:58:35,480
say you are an email expert

3684
01:58:35,480 --> 01:58:38,760
for green grass

3685
01:58:38,760 --> 01:58:42,000
corp named

3686
01:58:42,000 --> 01:58:43,719
[Music]

3687
01:58:43,719 --> 01:58:47,840
um named um Greeny. Okay, so we have

3688
01:58:47,840 --> 01:58:49,679
Greenie from Green Grass Corp. That's

3689
01:58:49,679 --> 01:58:51,520
our email expert that's going to email

3690
01:58:51,520 --> 01:58:53,199
the billing team every time this

3691
01:58:53,199 --> 01:58:54,920
workflow happens. So that's the

3692
01:58:54,920 --> 01:58:58,080
overview. Now in the user prompt, think

3693
01:58:58,080 --> 01:58:59,360
of this as like when you're talking to

3694
01:58:59,360 --> 01:59:01,599
chatbt. So obviously I had chatbt create

3695
01:59:01,599 --> 01:59:03,159
these

3696
01:59:03,159 --> 01:59:06,800
invoices chatgbt this when we say hello

3697
01:59:06,800 --> 01:59:08,400
that's a user message because this is an

3698
01:59:08,400 --> 01:59:10,560
interact like an an interaction and it's

3699
01:59:10,560 --> 01:59:12,239
going to change every time. But behind

3700
01:59:12,239 --> 01:59:14,880
the scenes in this chatbt openai has a

3701
01:59:14,880 --> 01:59:16,080
system prompt in here that's basically

3702
01:59:16,080 --> 01:59:17,280
like you're a helpful assistant. You

3703
01:59:17,280 --> 01:59:19,360
help you know users answer questions. So

3704
01:59:19,360 --> 01:59:20,800
this window right here that we type in

3705
01:59:20,800 --> 01:59:24,320
is our user message and behind the

3706
01:59:24,320 --> 01:59:26,400
scenes telling the node how to act is

3707
01:59:26,400 --> 01:59:30,480
our system prompt. Cool. So in here I

3708
01:59:30,480 --> 01:59:32,239
like to have dynamic information go into

3709
01:59:32,239 --> 01:59:33,840
the user message while I like to have

3710
01:59:33,840 --> 01:59:35,679
static information in the actual system

3711
01:59:35,679 --> 01:59:37,599
prompt. So except for maybe the except

3712
01:59:37,599 --> 01:59:40,199
the exception usually of

3713
01:59:40,199 --> 01:59:42,480
like giving it the current time and day

3714
01:59:42,480 --> 01:59:44,560
because that's an expression. So

3715
01:59:44,560 --> 01:59:46,239
anyways, let's change this to an

3716
01:59:46,239 --> 01:59:48,560
expression. Let's make this full screen.

3717
01:59:48,560 --> 01:59:50,360
We are going to be giving it the invoice

3718
01:59:50,360 --> 01:59:53,639
information that it needs to write the

3719
01:59:53,639 --> 01:59:55,840
email because that's what it that's what

3720
01:59:55,840 --> 01:59:57,440
it's expecting. In the system prompt, we

3721
01:59:57,440 --> 01:59:59,800
said you will receive invoice

3722
01:59:59,800 --> 02:00:02,320
information. So, first thing is going to

3723
02:00:02,320 --> 02:00:05,280
be invoice number. We are going to grab

3724
02:00:05,280 --> 02:00:08,000
invoice number and just drag it in.

3725
02:00:08,000 --> 02:00:09,960
We're going to grab client

3726
02:00:09,960 --> 02:00:12,639
name and just drag it in. So, it's going

3727
02:00:12,639 --> 02:00:14,000
to dynamically get these different

3728
02:00:14,000 --> 02:00:17,159
things every time, right?

3729
02:00:17,159 --> 02:00:19,840
So, let's say maybe it doesn't even we

3730
02:00:19,840 --> 02:00:22,000
don't need client email. Okay, maybe we

3731
02:00:22,000 --> 02:00:24,040
do. We want client

3732
02:00:24,040 --> 02:00:27,119
email. Um, so we'll give it that. But

3733
02:00:27,119 --> 02:00:28,560
the billing team right now doesn't need

3734
02:00:28,560 --> 02:00:30,000
the address or phone. Let's just say

3735
02:00:30,000 --> 02:00:32,400
that. But it does want we do want them

3736
02:00:32,400 --> 02:00:36,040
to know the total amount of that

3737
02:00:36,040 --> 02:00:38,159
invoice. And we definitely want them to

3738
02:00:38,159 --> 02:00:40,280
know the

3739
02:00:40,280 --> 02:00:44,320
invoice date and the invoice due date.

3740
02:00:44,320 --> 02:00:46,159
So we can we can now drag in these two

3741
02:00:46,159 --> 02:00:48,320
things. So this was us just being able

3742
02:00:48,320 --> 02:00:52,080
to customize what the AI node sees. Just

3743
02:00:52,080 --> 02:00:53,520
keep in mind if we don't drag anything

3744
02:00:53,520 --> 02:00:56,480
in here, even if it's all on the input,

3745
02:00:56,480 --> 02:00:59,119
the AI node doesn't see any of it. So

3746
02:00:59,119 --> 02:01:00,639
let's hit test step and we'll see the

3747
02:01:00,639 --> 02:01:02,080
type of email we get. We're going to

3748
02:01:02,080 --> 02:01:03,199
have to make some changes. I already

3749
02:01:03,199 --> 02:01:04,480
know because you know we have to

3750
02:01:04,480 --> 02:01:07,520
separate everything. But what it did is

3751
02:01:07,520 --> 02:01:08,880
it created a subject which is new

3752
02:01:08,880 --> 02:01:10,239
invoice received and then the invoice

3753
02:01:10,239 --> 02:01:12,080
number. Dear billing team, I hope this

3754
02:01:12,080 --> 02:01:13,760
message finds you well. We've received

3755
02:01:13,760 --> 02:01:14,960
an invoice that requires your attention

3756
02:01:14,960 --> 02:01:16,480
and then it lists out some information

3757
02:01:16,480 --> 02:01:18,800
and then it also signs off Greeny Green

3758
02:01:18,800 --> 02:01:20,440
Grass Corp.

3759
02:01:20,440 --> 02:01:24,320
So, first thing we want to do is um if

3760
02:01:24,320 --> 02:01:25,480
we go back to our

3761
02:01:25,480 --> 02:01:29,119
wireframe, what we have to send in, and

3762
02:01:29,119 --> 02:01:30,639
we didn't document this well enough

3763
02:01:30,639 --> 02:01:35,400
actually, but what goes into here is a

3764
02:01:35,400 --> 02:01:37,760
um you know, in order to send an email,

3765
02:01:37,760 --> 02:01:40,440
we need a two, we need a

3766
02:01:40,440 --> 02:01:42,599
subject, and we

3767
02:01:42,599 --> 02:01:46,280
need the email body.

3768
02:01:46,280 --> 02:01:48,480
So, that those are the three things we

3769
02:01:48,480 --> 02:01:50,320
need. the two is coming from here. So,

3770
02:01:50,320 --> 02:01:52,480
we know that. And the subject and email

3771
02:01:52,480 --> 02:01:55,719
are going to come from the um craft

3772
02:01:55,719 --> 02:01:58,239
email node. So, we have the the two and

3773
02:01:58,239 --> 02:01:59,840
then actually I'm going to move this up

3774
02:01:59,840 --> 02:02:01,440
here. So, now we can just see where

3775
02:02:01,440 --> 02:02:03,280
we're getting all of our pieces from.

3776
02:02:03,280 --> 02:02:04,800
So, the two is coming from internal

3777
02:02:04,800 --> 02:02:06,400
knowledge. This can be hardcoded, but

3778
02:02:06,400 --> 02:02:07,679
the subject and email are going to be

3779
02:02:07,679 --> 02:02:11,760
dynamic from the AI note. Cool. So what

3780
02:02:11,760 --> 02:02:13,400
we want to do now

3781
02:02:13,400 --> 02:02:16,960
is we're going to

3782
02:02:17,560 --> 02:02:19,920
say output and we're going to tell it

3783
02:02:19,920 --> 02:02:22,760
how to output information. So

3784
02:02:22,760 --> 02:02:26,520
output output the following

3785
02:02:26,520 --> 02:02:29,440
parameters separately and we're just

3786
02:02:29,440 --> 02:02:33,920
going to say subject and email. So now

3787
02:02:33,920 --> 02:02:35,320
it should be outputting two parameters

3788
02:02:35,320 --> 02:02:37,840
separately, but it's not going to

3789
02:02:37,840 --> 02:02:39,119
because even though it says here's the

3790
02:02:39,119 --> 02:02:40,800
subject and then it gives us a subject

3791
02:02:40,800 --> 02:02:42,000
and then it says here's the email and

3792
02:02:42,000 --> 02:02:43,840
gives us an email, they're still in one

3793
02:02:43,840 --> 02:02:46,320
field. Meaning if we hook up another

3794
02:02:46,320 --> 02:02:48,320
node which would be a Gmail send email

3795
02:02:48,320 --> 02:02:49,400
as we

3796
02:02:49,400 --> 02:02:53,920
know which is going to be where right

3797
02:02:54,599 --> 02:02:56,880
here. Okay, so now this is the next

3798
02:02:56,880 --> 02:02:58,880
node. Here's the fields we need. But as

3799
02:02:58,880 --> 02:03:00,960
you can see coming out of the create

3800
02:03:00,960 --> 02:03:03,920
email AI node, we have this whole

3801
02:03:03,920 --> 02:03:06,080
parameter called content which has the

3802
02:03:06,080 --> 02:03:07,360
subject and the email. And we need to

3803
02:03:07,360 --> 02:03:08,800
get these split up so that we can drag

3804
02:03:08,800 --> 02:03:10,480
one into the subject and one into the

3805
02:03:10,480 --> 02:03:12,560
two. Right? So first of all, I'm just

3806
02:03:12,560 --> 02:03:14,400
making these expressions just so we can

3807
02:03:14,400 --> 02:03:17,760
drag stuff in later. Um, and so that's

3808
02:03:17,760 --> 02:03:20,000
what we need to do. And our fix there is

3809
02:03:20,000 --> 02:03:22,719
we come into here and we just check this

3810
02:03:22,719 --> 02:03:25,199
switch that says output content is JSON,

3811
02:03:25,199 --> 02:03:26,960
which will then will rerun. And now

3812
02:03:26,960 --> 02:03:29,000
we'll get subject and

3813
02:03:29,000 --> 02:03:31,280
body. Subject and email in two different

3814
02:03:31,280 --> 02:03:34,119
fields right here. We can see which is

3815
02:03:34,119 --> 02:03:36,560
awesome because then we can open up our

3816
02:03:36,560 --> 02:03:38,400
send email node. We can grab our

3817
02:03:38,400 --> 02:03:40,000
subject. It's going to be dynamic. And

3818
02:03:40,000 --> 02:03:41,280
we can grab our email. It's going to be

3819
02:03:41,280 --> 02:03:43,199
dynamic. Perfect. We're going to change

3820
02:03:43,199 --> 02:03:45,440
this to text. And we're going to add an

3821
02:03:45,440 --> 02:03:47,040
option down here. And we're just going

3822
02:03:47,040 --> 02:03:48,960
to say append nadn attribution and turn

3823
02:03:48,960 --> 02:03:50,199
that

3824
02:03:50,199 --> 02:03:51,719
off

3825
02:03:51,719 --> 02:03:53,920
because we just don't want to see the

3826
02:03:53,920 --> 02:03:55,199
message at the bottom that says this was

3827
02:03:55,199 --> 02:03:57,520
sent by nadn. And if we go back to our

3828
02:03:57,520 --> 02:04:00,480
wireframe wherever that is over here, we

3829
02:04:00,480 --> 02:04:01,679
know that this is the email that's going

3830
02:04:01,679 --> 02:04:03,440
to be coming through or we're going to

3831
02:04:03,440 --> 02:04:04,800
be sending to every time because we're

3832
02:04:04,800 --> 02:04:06,880
sending internally. So we can put that

3833
02:04:06,880 --> 02:04:09,119
right in here, not as a variable. Every

3834
02:04:09,119 --> 02:04:10,599
time this is going to be sending to

3835
02:04:10,599 --> 02:04:12,080
billing@acample.com. So this really

3836
02:04:12,080 --> 02:04:13,560
could be fixed. It doesn't have to be an

3837
02:04:13,560 --> 02:04:16,159
expression. Cool.

3838
02:04:16,159 --> 02:04:20,000
So we will now hit test step and we can

3839
02:04:20,000 --> 02:04:21,760
see that we got this this email sent. So

3840
02:04:21,760 --> 02:04:24,119
let me open up a new

3841
02:04:24,119 --> 02:04:26,440
tab. Let me go

3842
02:04:26,440 --> 02:04:29,719
into whoa into our

3843
02:04:29,719 --> 02:04:33,280
Gmail. I will go to the sent items and

3844
02:04:33,280 --> 02:04:34,320
we will see we just got this billing

3845
02:04:34,320 --> 02:04:35,840
email. So obviously it was a fake email

3846
02:04:35,840 --> 02:04:37,520
but this is what it looks like. We've

3847
02:04:37,520 --> 02:04:39,199
received a new invoice from ABC Tech.

3848
02:04:39,199 --> 02:04:40,800
Please find the details below. We got

3849
02:04:40,800 --> 02:04:42,400
invoice number, client name, client

3850
02:04:42,400 --> 02:04:45,520
email, total amount, total invoice date,

3851
02:04:45,520 --> 02:04:47,599
due date. Please process these this

3852
02:04:47,599 --> 02:04:48,599
invoice

3853
02:04:48,599 --> 02:04:50,119
accordingly.

3854
02:04:50,119 --> 02:04:52,880
So that's perfect. Um, we could also, if

3855
02:04:52,880 --> 02:04:54,320
we wanted to, we could prompt it a

3856
02:04:54,320 --> 02:04:56,440
little bit differently to say, you know,

3857
02:04:56,440 --> 02:04:59,119
like this has been updated within the

3858
02:04:59,119 --> 02:05:02,080
database and, um, you can check it out

3859
02:05:02,080 --> 02:05:03,840
here. So, let's do that real quick. What

3860
02:05:03,840 --> 02:05:04,960
we're going to do is we're going to say

3861
02:05:04,960 --> 02:05:06,159
because we've already updated the

3862
02:05:06,159 --> 02:05:07,840
database, I'm going to come into our

3863
02:05:07,840 --> 02:05:09,800
Google sheet. I'm going to copy this

3864
02:05:09,800 --> 02:05:12,199
link and I'm going

3865
02:05:12,199 --> 02:05:14,239
to we're basically going to bake this

3866
02:05:14,239 --> 02:05:17,119
into the email.

3867
02:05:17,480 --> 02:05:19,840
So, I'm going to say we're going to give

3868
02:05:19,840 --> 02:05:21,960
it a section called

3869
02:05:21,960 --> 02:05:26,080
email. Inform the billing team of the

3870
02:05:26,080 --> 02:05:28,400
invoice.

3871
02:05:28,400 --> 02:05:34,080
let them know we have also updated this

3872
02:05:34,080 --> 02:05:38,239
in the invoice database and they can

3873
02:05:38,239 --> 02:05:40,560
view it here and we'll just give them

3874
02:05:40,560 --> 02:05:43,199
this link to that Google doc. So every

3875
02:05:43,199 --> 02:05:44,159
time they'll just be able to send that

3876
02:05:44,159 --> 02:05:45,920
over. So I'm going to hit test up. We

3877
02:05:45,920 --> 02:05:47,840
should see a new email over here which

3878
02:05:47,840 --> 02:05:50,239
is going to include that link I hope. So

3879
02:05:50,239 --> 02:05:53,040
there's the link. We'll run this email

3880
02:05:53,040 --> 02:05:55,760
tool again to send a new email. Hop back

3881
02:05:55,760 --> 02:05:59,520
into Google Gmail. We got a new one. And

3882
02:05:59,520 --> 02:06:01,360
now we can see we have this link. So you

3883
02:06:01,360 --> 02:06:02,800
can view it here. We've already updated

3884
02:06:02,800 --> 02:06:05,119
this in the invoice database. We click

3885
02:06:05,119 --> 02:06:06,159
on the link. And now we have our

3886
02:06:06,159 --> 02:06:09,760
database as well. So cool. Now let's say

3887
02:06:09,760 --> 02:06:11,440
at this point we're happy with our

3888
02:06:11,440 --> 02:06:13,199
prompting. We're happy with the email.

3889
02:06:13,199 --> 02:06:14,320
This is done. If we go back to the

3890
02:06:14,320 --> 02:06:17,199
wireframe, the email is the last node.

3891
02:06:17,199 --> 02:06:19,679
So um maybe just to make it look

3892
02:06:19,679 --> 02:06:20,960
consistent, we will just add over

3893
02:06:20,960 --> 02:06:23,360
something here that just says nothing.

3894
02:06:23,360 --> 02:06:25,159
And now we know that the process is done

3895
02:06:25,159 --> 02:06:27,440
because nothing to do. So this is

3896
02:06:27,440 --> 02:06:28,480
basically like this is what we

3897
02:06:28,480 --> 02:06:31,040
wireframed out. So we know that we're

3898
02:06:31,040 --> 02:06:32,719
happy with this process. We understand

3899
02:06:32,719 --> 02:06:36,400
what's going on. Um but now let's unpin

3900
02:06:36,400 --> 02:06:37,760
this data real quick and let's drop in

3901
02:06:37,760 --> 02:06:39,679
another invoice to make sure that even

3902
02:06:39,679 --> 02:06:40,960
though it's formatted differently. So

3903
02:06:40,960 --> 02:06:43,679
this XYZ formatted differently, but the

3904
02:06:43,679 --> 02:06:45,599
AI should still be able to extract all

3905
02:06:45,599 --> 02:06:47,520
the information that we need. So I'm

3906
02:06:47,520 --> 02:06:48,639
going to come in here and download this

3907
02:06:48,639 --> 02:06:50,280
one as a

3908
02:06:50,280 --> 02:06:52,400
PDF. We have it right there. I'm going

3909
02:06:52,400 --> 02:06:54,880
to drop it into our Google Drive. So, we

3910
02:06:54,880 --> 02:06:58,079
have XYZ Enterprises now. Come back into

3911
02:06:58,079 --> 02:07:00,560
the workflow and we'll hit test fetch

3912
02:07:00,560 --> 02:07:02,400
test event. Let's just make sure this is

3913
02:07:02,400 --> 02:07:03,400
the right

3914
02:07:03,400 --> 02:07:06,800
one. So, XYZ Enterprises. Nice. And I'm

3915
02:07:06,800 --> 02:07:07,920
just going to hit test workflow and

3916
02:07:07,920 --> 02:07:10,239
we'll watch it download, extract, get

3917
02:07:10,239 --> 02:07:12,000
the information, update the database,

3918
02:07:12,000 --> 02:07:13,920
create the email, send the email, and

3919
02:07:13,920 --> 02:07:15,639
then nothing else should happen after

3920
02:07:15,639 --> 02:07:19,280
that. So, boom, we're done. Let's click

3921
02:07:19,280 --> 02:07:22,400
into our email. Here we have our new

3922
02:07:22,400 --> 02:07:23,920
invoice received. So it updated

3923
02:07:23,920 --> 02:07:25,440
differently like the subjects dynamic

3924
02:07:25,440 --> 02:07:27,199
because it was from XYZ a different

3925
02:07:27,199 --> 02:07:29,360
invoice number. As you remember the ABC

3926
02:07:29,360 --> 02:07:31,800
one, it started with TH

3927
02:07:31,800 --> 02:07:35,440
AI and this one starts with INV. So

3928
02:07:35,440 --> 02:07:37,199
that's why the subject is different.

3929
02:07:37,199 --> 02:07:38,639
Dear billing team, we have received a

3930
02:07:38,639 --> 02:07:40,320
new invoice from XYZ Enterprises. Please

3931
02:07:40,320 --> 02:07:42,239
find the details below. There's the

3932
02:07:42,239 --> 02:07:43,599
number, the name, all this kind of

3933
02:07:43,599 --> 02:07:46,760
information. Um the total amount was

3934
02:07:46,760 --> 02:07:49,840
13856. Let's go make sure that's right.

3935
02:07:49,840 --> 02:07:51,079
Total amount

3936
02:07:51,079 --> 02:07:54,960
13856. Um March 8th March 22nd once

3937
02:07:54,960 --> 02:07:56,440
again. Is that

3938
02:07:56,440 --> 02:08:01,599
correct? March 8th March 22nd. Nice. And

3939
02:08:01,599 --> 02:08:04,079
finance XYZ XYZ. Perfect. Okay. The

3940
02:08:04,079 --> 02:08:05,280
invoice has been updated in the

3941
02:08:05,280 --> 02:08:06,639
database. You can view it here. So let's

3942
02:08:06,639 --> 02:08:08,719
click on that link. Nice. We got our

3943
02:08:08,719 --> 02:08:10,079
information populated into the

3944
02:08:10,079 --> 02:08:12,000
spreadsheet. As you can see, it all

3945
02:08:12,000 --> 02:08:14,480
looks correct to me as well. Our strings

3946
02:08:14,480 --> 02:08:15,679
are coming through nice and our dates

3947
02:08:15,679 --> 02:08:16,880
are coming through nice. So I'm going to

3948
02:08:16,880 --> 02:08:18,320
leave it as is. Now, keep in mind

3949
02:08:18,320 --> 02:08:19,440
because these are technically coming

3950
02:08:19,440 --> 02:08:23,079
through as strings, um, that's fine for

3951
02:08:23,079 --> 02:08:25,679
phone, but Google Sheets automatically

3952
02:08:25,679 --> 02:08:27,360
made these numbers, I believe. So, if we

3953
02:08:27,360 --> 02:08:28,960
wanted to, we could sum these up because

3954
02:08:28,960 --> 02:08:31,079
they're numbers. Perfect.

3955
02:08:31,079 --> 02:08:33,360
Okay, cool. So, that's how that works,

3956
02:08:33,360 --> 02:08:36,000
right? Um, that's the email. We

3957
02:08:36,000 --> 02:08:38,000
wireframed it out. We tested it with two

3958
02:08:38,000 --> 02:08:40,639
different types of invoices. They

3959
02:08:40,639 --> 02:08:42,000
weren't consistent formatting, which

3960
02:08:42,000 --> 02:08:43,360
means we couldn't probably have used a

3961
02:08:43,360 --> 02:08:45,599
code node, but the AI is able to read

3962
02:08:45,599 --> 02:08:47,040
this and extract it. As you can see

3963
02:08:47,040 --> 02:08:49,040
right here, we got the same eight items

3964
02:08:49,040 --> 02:08:50,960
extracted that we were looking for. So,

3965
02:08:50,960 --> 02:08:54,239
that's perfect. Um, cool. So, going to

3966
02:08:54,239 --> 02:08:57,919
call this one here. I

3967
02:08:58,280 --> 02:09:00,920
will yeah I will attach

3968
02:09:00,920 --> 02:09:05,040
the actual flow and I will attach the

3969
02:09:05,040 --> 02:09:06,560
just a picture of this wireframe I

3970
02:09:06,560 --> 02:09:10,560
suppose in this um post and by now you

3971
02:09:10,560 --> 02:09:12,320
guys have already seen that I'm sure but

3972
02:09:12,320 --> 02:09:15,040
yeah I hope this was helpful um the

3973
02:09:15,040 --> 02:09:16,320
whole process of like the way that I

3974
02:09:16,320 --> 02:09:18,079
approached and I know this was a 35minut

3975
02:09:18,079 --> 02:09:20,880
build so it's not like the same as like

3976
02:09:20,880 --> 02:09:22,960
building something more complex but as

3977
02:09:22,960 --> 02:09:24,400
far as like a general workflow you know

3978
02:09:24,400 --> 02:09:25,840
this is a pretty solid solid one to get

3979
02:09:25,840 --> 02:09:27,639
started with.

3980
02:09:27,639 --> 02:09:30,800
Um it it shows elements of using AI

3981
02:09:30,800 --> 02:09:32,320
within a simple workflow that's going to

3982
02:09:32,320 --> 02:09:34,960
be sequential and it shows like you know

3983
02:09:34,960 --> 02:09:36,560
the way we have to reference our

3984
02:09:36,560 --> 02:09:38,239
variables and how we have to drag things

3985
02:09:38,239 --> 02:09:41,040
in and um obviously the component of

3986
02:09:41,040 --> 02:09:42,719
like wireframing out in the beginning to

3987
02:09:42,719 --> 02:09:45,920
understand the full flow at least 80%

3988
02:09:45,920 --> 02:09:48,159
85% of the full flow before you get in

3989
02:09:48,159 --> 02:09:50,639
there. So cool. Hope you guys enjoy this

3990
02:09:50,639 --> 02:09:52,480
one and I will see you guys in the

3991
02:09:52,480 --> 02:09:54,400
community. Thanks. All right. All right,

3992
02:09:54,400 --> 02:09:55,360
I hope you guys enjoyed those

3993
02:09:55,360 --> 02:09:56,719
step-by-step builds. Hopefully, right

3994
02:09:56,719 --> 02:09:57,840
now, you're feeling like you're in a

3995
02:09:57,840 --> 02:09:59,280
really good spot with Naden and

3996
02:09:59,280 --> 02:10:01,119
everything starting to piece together.

3997
02:10:01,119 --> 02:10:02,480
This next video we're going to move into

3998
02:10:02,480 --> 02:10:05,040
is about APIs because in order to really

3999
02:10:05,040 --> 02:10:06,480
get more advanced with our workflows and

4000
02:10:06,480 --> 02:10:08,719
our AI agents, we have to understand the

4001
02:10:08,719 --> 02:10:11,040
most important thing, which is APIs.

4002
02:10:11,040 --> 02:10:12,639
They let our Nin workflows connect to

4003
02:10:12,639 --> 02:10:13,840
anything that you actually want to use.

4004
02:10:13,840 --> 02:10:14,960
So, it's really important to understand

4005
02:10:14,960 --> 02:10:16,480
how to set up. And when you understand

4006
02:10:16,480 --> 02:10:18,159
it, the possibilities are endless. And

4007
02:10:18,159 --> 02:10:19,840
it's really not even that difficult. So,

4008
02:10:19,840 --> 02:10:21,280
let's break it down. If you're building

4009
02:10:21,280 --> 02:10:22,480
AI agents, but you don't really

4010
02:10:22,480 --> 02:10:24,159
understand what an API is or how to use

4011
02:10:24,159 --> 02:10:26,000
them, don't worry. You're not alone. I

4012
02:10:26,000 --> 02:10:27,679
was in that exact same spot not too long

4013
02:10:27,679 --> 02:10:29,520
ago. I'm not a programmer. I don't know

4014
02:10:29,520 --> 02:10:31,199
how to code, but I've been teaching tens

4015
02:10:31,199 --> 02:10:33,040
of thousands of people how to build real

4016
02:10:33,040 --> 02:10:34,719
AI systems. And what changed the game

4017
02:10:34,719 --> 02:10:36,480
for me was when I understood how to use

4018
02:10:36,480 --> 02:10:38,239
APIs. So, in this video, I'm going to

4019
02:10:38,239 --> 02:10:40,000
break it down as simple as possible, no

4020
02:10:40,000 --> 02:10:41,760
technical jargon, and by the end, you'll

4021
02:10:41,760 --> 02:10:43,360
be confidently setting up API calls

4022
02:10:43,360 --> 02:10:45,360
within your own Agentic workflows. Let's

4023
02:10:45,360 --> 02:10:47,119
make this easy. So the purpose of this

4024
02:10:47,119 --> 02:10:48,719
video is to understand how to set up

4025
02:10:48,719 --> 02:10:50,639
your own requests so you can access any

4026
02:10:50,639 --> 02:10:52,480
API because that's where the power truly

4027
02:10:52,480 --> 02:10:54,719
comes in. And before we get into NDN and

4028
02:10:54,719 --> 02:10:56,480
we set up a couple live examples and I

4029
02:10:56,480 --> 02:10:58,079
show you guys my thought process when

4030
02:10:58,079 --> 02:11:00,639
I'm setting up these API calls. First I

4031
02:11:00,639 --> 02:11:01,679
thought it would just be important to

4032
02:11:01,679 --> 02:11:04,000
understand what an API really is. And

4033
02:11:04,000 --> 02:11:05,760
APIs are so so powerful because let's

4034
02:11:05,760 --> 02:11:08,159
say we're building agents within NADN.

4035
02:11:08,159 --> 02:11:10,159
Basically we can only do things within

4036
02:11:10,159 --> 02:11:12,560
NADN's environment unless we use an API

4037
02:11:12,560 --> 02:11:14,239
to access some sort of server. So

4038
02:11:14,239 --> 02:11:16,560
whether that's like a Gmail or a HubSpot

4039
02:11:16,560 --> 02:11:18,800
or Air Table, whatever we want to access

4040
02:11:18,800 --> 02:11:20,400
that's outside of Niden's own

4041
02:11:20,400 --> 02:11:22,560
environment, we have to use an API call

4042
02:11:22,560 --> 02:11:24,719
to do so. And so that's why at the end

4043
02:11:24,719 --> 02:11:25,840
of this video, when you completely

4044
02:11:25,840 --> 02:11:27,520
understand how to set up any API call

4045
02:11:27,520 --> 02:11:28,960
you need, it's going to be a complete

4046
02:11:28,960 --> 02:11:31,119
gamecher for your workflows and it's

4047
02:11:31,119 --> 02:11:32,960
also going to unlock pretty much

4048
02:11:32,960 --> 02:11:35,119
unlimited possibilities. All right, now

4049
02:11:35,119 --> 02:11:36,719
that we understand why APIs are

4050
02:11:36,719 --> 02:11:38,800
important, let's talk about what they

4051
02:11:38,800 --> 02:11:40,400
actually do. So API stands for

4052
02:11:40,400 --> 02:11:42,320
application programming interface. And

4053
02:11:42,320 --> 02:11:43,840
at the highest level in the most simple

4054
02:11:43,840 --> 02:11:45,920
terms, it's just a way for two systems

4055
02:11:45,920 --> 02:11:47,920
to talk to each other. So NAND and

4056
02:11:47,920 --> 02:11:49,599
whatever other system we want to use in

4057
02:11:49,599 --> 02:11:51,440
our automations. So keeping it limited

4058
02:11:51,440 --> 02:11:53,760
to us, it's our NAN AI agent and

4059
02:11:53,760 --> 02:11:55,599
whatever we want it to interact with.

4060
02:11:55,599 --> 02:11:56,800
Okay, so I said we're going to make this

4061
02:11:56,800 --> 02:11:58,560
as simple as possible. So let's do it.

4062
02:11:58,560 --> 02:12:00,079
What we have here is just a scenario

4063
02:12:00,079 --> 02:12:01,760
where we go to a restaurant. So this is

4064
02:12:01,760 --> 02:12:03,360
us right here. And what we do is we sit

4065
02:12:03,360 --> 02:12:05,040
down and we look at the menu and we look

4066
02:12:05,040 --> 02:12:06,800
at what food that the restaurant has to

4067
02:12:06,800 --> 02:12:08,239
offer. And then when we're ready to

4068
02:12:08,239 --> 02:12:10,239
order, we don't talk directly to the

4069
02:12:10,239 --> 02:12:12,159
kitchen or the chefs in the kitchen. We

4070
02:12:12,159 --> 02:12:13,599
talk to the waiter. So we'd basically

4071
02:12:13,599 --> 02:12:14,960
look at the menu. We'd understand what

4072
02:12:14,960 --> 02:12:16,560
we want. Then we would talk to the

4073
02:12:16,560 --> 02:12:18,159
waiter and say, "Hey, I want the chicken

4074
02:12:18,159 --> 02:12:19,840
parm." The waiter would then take our

4075
02:12:19,840 --> 02:12:21,599
order and deliver it to the kitchen. And

4076
02:12:21,599 --> 02:12:23,199
after the kitchen sees the request that

4077
02:12:23,199 --> 02:12:25,119
we made and they understand, okay, this

4078
02:12:25,119 --> 02:12:26,719
person wants chicken parm. I'm going to

4079
02:12:26,719 --> 02:12:28,800
grab the chicken parm, not the salmon.

4080
02:12:28,800 --> 02:12:30,000
And then we're basically going to feed

4081
02:12:30,000 --> 02:12:31,520
this back down the line through the

4082
02:12:31,520 --> 02:12:33,040
waiter all the way back to the person

4083
02:12:33,040 --> 02:12:34,800
who ordered it in the first place. And

4084
02:12:34,800 --> 02:12:37,199
so that's how you can see we use an HTTP

4085
02:12:37,199 --> 02:12:40,000
request to talk to the API endpoint and

4086
02:12:40,000 --> 02:12:42,000
receive the data that we want. And so

4087
02:12:42,000 --> 02:12:43,199
now a little bit more of a technical

4088
02:12:43,199 --> 02:12:45,360
example of how this works in NADN. Okay,

4089
02:12:45,360 --> 02:12:47,119
so here is our AI agent. And when it

4090
02:12:47,119 --> 02:12:48,639
wants to interact with the service, it

4091
02:12:48,639 --> 02:12:50,400
first has to look at that services API

4092
02:12:50,400 --> 02:12:52,960
documentation to see what is offered.

4093
02:12:52,960 --> 02:12:54,480
Once we understand that, we'll read that

4094
02:12:54,480 --> 02:12:56,159
and we'll be ready to make our request

4095
02:12:56,159 --> 02:12:57,760
and we will make that request using an

4096
02:12:57,760 --> 02:13:00,880
HTTP request. From there, that HTTP

4097
02:13:00,880 --> 02:13:02,320
request will take our information and

4098
02:13:02,320 --> 02:13:04,159
send it to the API endpoint. the

4099
02:13:04,159 --> 02:13:05,760
endpoint will look at what we ordered

4100
02:13:05,760 --> 02:13:07,440
and it will say, "Okay, this person

4101
02:13:07,440 --> 02:13:08,719
wants this data. So, I'm going to go

4102
02:13:08,719 --> 02:13:10,639
grab that. I'm going to send it back,

4103
02:13:10,639 --> 02:13:12,239
send it back to the HTTP request." And

4104
02:13:12,239 --> 02:13:14,079
then the HTTP request is actually what

4105
02:13:14,079 --> 02:13:16,560
delivers us back the data that we asked

4106
02:13:16,560 --> 02:13:17,920
and we know that it was available

4107
02:13:17,920 --> 02:13:19,360
because we had to look at the API

4108
02:13:19,360 --> 02:13:21,360
documentation first. So, I hope that

4109
02:13:21,360 --> 02:13:22,639
helps. I think that looking at it

4110
02:13:22,639 --> 02:13:24,079
visually makes a lot more sense,

4111
02:13:24,079 --> 02:13:26,000
especially when you hear, you know, HTTP

4112
02:13:26,000 --> 02:13:28,159
API endpoint, all this kind of stuff.

4113
02:13:28,159 --> 02:13:29,760
But really, it's just going to be this

4114
02:13:29,760 --> 02:13:31,840
simple. So now let me show an example of

4115
02:13:31,840 --> 02:13:33,360
what actually this looks like in Naden

4116
02:13:33,360 --> 02:13:34,800
and when you would use one and when you

4117
02:13:34,800 --> 02:13:36,320
wouldn't need to use one. So here we

4118
02:13:36,320 --> 02:13:37,679
have two examples where we're accessing

4119
02:13:37,679 --> 02:13:39,679
a service called open weather map which

4120
02:13:39,679 --> 02:13:41,280
basically just lets us grab the weather

4121
02:13:41,280 --> 02:13:43,440
data from anywhere in the world. And so

4122
02:13:43,440 --> 02:13:44,719
on the left what we're doing is we're

4123
02:13:44,719 --> 02:13:46,480
using open weather's native integration

4124
02:13:46,480 --> 02:13:48,159
within nadn. And so what I mean by

4125
02:13:48,159 --> 02:13:49,599
native integration is just that when we

4126
02:13:49,599 --> 02:13:51,360
go into nadn and we click on the plus

4127
02:13:51,360 --> 02:13:53,199
button to add an app and we want to see

4128
02:13:53,199 --> 02:13:54,159
like you know the different

4129
02:13:54,159 --> 02:13:56,079
integrations. It has air tableable it

4130
02:13:56,079 --> 02:13:58,159
has affinity it has airtop it has all

4131
02:13:58,159 --> 02:14:00,320
these AWS things. It has a ton of native

4132
02:14:00,320 --> 02:14:02,239
integrations and all that a native

4133
02:14:02,239 --> 02:14:05,040
integration is is an HTTP request but

4134
02:14:05,040 --> 02:14:07,199
it's just like wrapped up nicely in a UI

4135
02:14:07,199 --> 02:14:09,599
for us to basically fill in different

4136
02:14:09,599 --> 02:14:11,599
parameters. And so once you realize that

4137
02:14:11,599 --> 02:14:13,199
it really clears everything up because

4138
02:14:13,199 --> 02:14:14,560
the only time you actually need to use

4139
02:14:14,560 --> 02:14:16,880
an HTTP request is if the service you

4140
02:14:16,880 --> 02:14:19,119
want to use is not listed in this list

4141
02:14:19,119 --> 02:14:21,440
of all the native integrations. Anyways,

4142
02:14:21,440 --> 02:14:23,040
let me show you what I mean by that. So

4143
02:14:23,040 --> 02:14:24,880
like I said on the left we have Open

4144
02:14:24,880 --> 02:14:26,960
Weather Maps native integration. So

4145
02:14:26,960 --> 02:14:28,079
basically what we're doing here is we're

4146
02:14:28,079 --> 02:14:29,679
sending over, okay, I'm using open

4147
02:14:29,679 --> 02:14:31,040
weather map. I'm going to put in the

4148
02:14:31,040 --> 02:14:32,639
latitude and the longitude of the city

4149
02:14:32,639 --> 02:14:34,000
that I'm looking for. And as you can see

4150
02:14:34,000 --> 02:14:36,159
over here, what we get back is Chicago

4151
02:14:36,159 --> 02:14:37,599
as well as a bunch of information about

4152
02:14:37,599 --> 02:14:39,440
the current weather in Chicago. And so

4153
02:14:39,440 --> 02:14:40,800
if you were to fill this out, it's super

4154
02:14:40,800 --> 02:14:42,320
super intuitive, right? All you do is

4155
02:14:42,320 --> 02:14:44,159
put in the Latin long, you choose your

4156
02:14:44,159 --> 02:14:46,239
format as far as imperial or metric, and

4157
02:14:46,239 --> 02:14:47,760
then you get back data. And that's the

4158
02:14:47,760 --> 02:14:49,119
exact same thing we're doing over here

4159
02:14:49,119 --> 02:14:51,599
where we use an HTTP request to talk to

4160
02:14:51,599 --> 02:14:54,079
Open Weather's API endpoint. And so this

4161
02:14:54,079 --> 02:14:55,360
is just looks a little more scary and

4162
02:14:55,360 --> 02:14:57,440
intimidating because we have to set this

4163
02:14:57,440 --> 02:14:59,280
up ourselves. But if we zoom in, we can

4164
02:14:59,280 --> 02:15:00,719
see it's pretty simple. We're making a

4165
02:15:00,719 --> 02:15:03,760
git request to open weather maps URL

4166
02:15:03,760 --> 02:15:05,760
endpoint. And then we're putting over

4167
02:15:05,760 --> 02:15:07,760
the lat and the long, which is basically

4168
02:15:07,760 --> 02:15:09,520
the exact same from the one on the left.

4169
02:15:09,520 --> 02:15:11,199
And then, as you can see, we get the

4170
02:15:11,199 --> 02:15:13,040
same information back about Chicago, and

4171
02:15:13,040 --> 02:15:14,719
then some weather information about

4172
02:15:14,719 --> 02:15:16,560
Chicago. And so the purpose of that was

4173
02:15:16,560 --> 02:15:18,079
just to show you guys that these native

4174
02:15:18,079 --> 02:15:20,400
integrations, all we're doing is we're

4175
02:15:20,400 --> 02:15:22,400
accessing some sort of API endpoint. it

4176
02:15:22,400 --> 02:15:24,159
just looks simpler and easier and

4177
02:15:24,159 --> 02:15:26,079
there's a nice user interface for us

4178
02:15:26,079 --> 02:15:27,280
rather than setting everything up

4179
02:15:27,280 --> 02:15:28,880
manually. Okay, so hopefully that's

4180
02:15:28,880 --> 02:15:30,159
starting to make a little more sense.

4181
02:15:30,159 --> 02:15:32,639
Let's move down here to the way that I

4182
02:15:32,639 --> 02:15:34,560
think about setting up these HTTP

4183
02:15:34,560 --> 02:15:36,639
requests, which is we're basically just

4184
02:15:36,639 --> 02:15:37,920
setting up filters and making

4185
02:15:37,920 --> 02:15:39,520
selections. All we're doing is we're

4186
02:15:39,520 --> 02:15:42,239
saying, okay, I want to access server X.

4187
02:15:42,239 --> 02:15:44,079
When I access server X, I need to tell

4188
02:15:44,079 --> 02:15:45,920
it basically, what do I want from you?

4189
02:15:45,920 --> 02:15:47,040
So, it's the same way when you're going

4190
02:15:47,040 --> 02:15:48,639
to order some pizza. You have to first

4191
02:15:48,639 --> 02:15:50,480
think about which pizza shop do I want

4192
02:15:50,480 --> 02:15:52,079
to call? And then once you call them,

4193
02:15:52,079 --> 02:15:53,280
it's like, okay, I need to actually

4194
02:15:53,280 --> 02:15:54,639
order something. It has to be small,

4195
02:15:54,639 --> 02:15:56,480
medium, large. It has to be pepperoni or

4196
02:15:56,480 --> 02:15:58,239
cheese. You have to tell it what you

4197
02:15:58,239 --> 02:15:59,840
want and then they will send you the

4198
02:15:59,840 --> 02:16:01,840
data back that you asked for. So when

4199
02:16:01,840 --> 02:16:03,360
we're setting these up, we basically

4200
02:16:03,360 --> 02:16:04,719
have like five main things to look out

4201
02:16:04,719 --> 02:16:06,480
for. The first one you have to do every

4202
02:16:06,480 --> 02:16:08,000
time, which is a method. And the two

4203
02:16:08,000 --> 02:16:09,760
most common are going to be a get or a

4204
02:16:09,760 --> 02:16:11,599
post. Typically, a get is when you're

4205
02:16:11,599 --> 02:16:13,040
just going to access an endpoint and you

4206
02:16:13,040 --> 02:16:14,400
don't have to send over any information.

4207
02:16:14,400 --> 02:16:15,840
You're just going to get something back.

4208
02:16:15,840 --> 02:16:17,199
But a post is when you're going to send

4209
02:16:17,199 --> 02:16:19,119
over certain parameters and certain data

4210
02:16:19,119 --> 02:16:21,280
and say okay using this information send

4211
02:16:21,280 --> 02:16:22,960
me back what I'm asking for. The great

4212
02:16:22,960 --> 02:16:24,480
news is and I'll show you later when we

4213
02:16:24,480 --> 02:16:26,159
get into any end to actually do a live

4214
02:16:26,159 --> 02:16:28,960
example. It'll always tell you to say

4215
02:16:28,960 --> 02:16:30,639
you know is this a get or a post. Then

4216
02:16:30,639 --> 02:16:32,318
the next thing is the endpoint. You have

4217
02:16:32,318 --> 02:16:34,080
to tell it like which website or you

4218
02:16:34,080 --> 02:16:35,519
know which endpoint you want to actually

4219
02:16:35,519 --> 02:16:37,599
access which URL. From there we have

4220
02:16:37,599 --> 02:16:38,799
three different parameters to set up.

4221
02:16:38,799 --> 02:16:40,160
And also just realize that this one

4222
02:16:40,160 --> 02:16:42,959
should say body parameters. But this

4223
02:16:42,959 --> 02:16:44,478
used to be the most confusing part to

4224
02:16:44,478 --> 02:16:46,318
me, but it's really not too bad at all.

4225
02:16:46,318 --> 02:16:48,080
So, let's break it down. So, keep in

4226
02:16:48,080 --> 02:16:49,599
mind when we're looking at that menu,

4227
02:16:49,599 --> 02:16:51,599
that API documentation, it's always

4228
02:16:51,599 --> 02:16:52,799
going to basically tell us, okay, here

4229
02:16:52,799 --> 02:16:54,240
are your query parameters, here are your

4230
02:16:54,240 --> 02:16:55,359
header parameters, and here are your

4231
02:16:55,359 --> 02:16:56,879
body parameters. So, as long as you

4232
02:16:56,879 --> 02:16:57,760
understand how to read the

4233
02:16:57,760 --> 02:16:59,920
documentation, you'll be just fine. But

4234
02:16:59,920 --> 02:17:01,679
typically, the difference here is that

4235
02:17:01,679 --> 02:17:03,439
when you're setting up query parameters,

4236
02:17:03,439 --> 02:17:04,879
this is basically just saying a few

4237
02:17:04,879 --> 02:17:06,799
filters. So if you search pizza into

4238
02:17:06,799 --> 02:17:08,519
Google, it'll come

4239
02:17:08,519 --> 02:17:10,558
google.com/arch, which would be Google's

4240
02:17:10,558 --> 02:17:12,240
endpoint. And then we would have a

4241
02:17:12,240 --> 02:17:14,240
question mark and then Q equals and then

4242
02:17:14,240 --> 02:17:15,679
a bunch of different filters. So as you

4243
02:17:15,679 --> 02:17:16,879
can see right here, the first filter is

4244
02:17:16,879 --> 02:17:19,439
just Q equals pizza. And the Q is, you

4245
02:17:19,439 --> 02:17:21,040
know, it stands for query parameters.

4246
02:17:21,040 --> 02:17:22,000
And you don't even have to understand

4247
02:17:22,000 --> 02:17:23,679
that. That's just me showing you kind of

4248
02:17:23,679 --> 02:17:25,519
like a real example of how that works.

4249
02:17:25,519 --> 02:17:26,879
From there, we have to set up a header

4250
02:17:26,879 --> 02:17:28,478
parameter, which is pretty much always

4251
02:17:28,478 --> 02:17:30,240
going to exist. And I basically just

4252
02:17:30,240 --> 02:17:31,920
think of header parameters as, you know,

4253
02:17:31,920 --> 02:17:34,000
authorizing myself. So, usually when

4254
02:17:34,000 --> 02:17:35,599
you're doing some sort of API where you

4255
02:17:35,599 --> 02:17:37,679
have to pay, you have to get a unique

4256
02:17:37,679 --> 02:17:39,599
API key and then you'll send that key.

4257
02:17:39,599 --> 02:17:40,879
And if you don't put your key in, then

4258
02:17:40,879 --> 02:17:41,760
you're not going to be able to get the

4259
02:17:41,760 --> 02:17:43,200
data back. So, like if you're ordering a

4260
02:17:43,200 --> 02:17:44,718
pizza and you don't give them your

4261
02:17:44,718 --> 02:17:46,240
credit card information, they're not

4262
02:17:46,240 --> 02:17:48,080
going to send you a pizza. And usually

4263
02:17:48,080 --> 02:17:49,760
an API key is something you want to keep

4264
02:17:49,760 --> 02:17:51,359
secret because let's say, you know, you

4265
02:17:51,359 --> 02:17:52,959
put 10 bucks into some sort of API

4266
02:17:52,959 --> 02:17:54,558
that's going to create images for you.

4267
02:17:54,558 --> 02:17:56,478
If that key gets leaked, then anyone

4268
02:17:56,478 --> 02:17:58,398
could use that key and could go create

4269
02:17:58,398 --> 02:18:00,160
images for themselves for free, but

4270
02:18:00,160 --> 02:18:02,080
they'd be running down your credits. And

4271
02:18:02,080 --> 02:18:03,599
these can come in different forms, but I

4272
02:18:03,599 --> 02:18:05,040
just wanted to show you a really common

4273
02:18:05,040 --> 02:18:06,879
one is, you know, you'll have your key

4274
02:18:06,879 --> 02:18:08,398
value pairs where you'll put

4275
02:18:08,398 --> 02:18:10,478
authorization as the name and then in

4276
02:18:10,478 --> 02:18:12,558
the value you'll put bearer space your

4277
02:18:12,558 --> 02:18:15,040
API key or in the name you could just

4278
02:18:15,040 --> 02:18:17,599
put API_key and then in the value you'd

4279
02:18:17,599 --> 02:18:19,599
put your API key. But once again, the

4280
02:18:19,599 --> 02:18:21,519
API documentation will tell you how to

4281
02:18:21,519 --> 02:18:23,280
configure all this. And then finally,

4282
02:18:23,280 --> 02:18:25,120
the body parameters if you need to send

4283
02:18:25,120 --> 02:18:26,879
something over to get something back.

4284
02:18:26,879 --> 02:18:29,040
Let's say we're, you know, making an API

4285
02:18:29,040 --> 02:18:31,760
call to our CRM and we want to get back

4286
02:18:31,760 --> 02:18:33,679
information about John. We could send

4287
02:18:33,679 --> 02:18:35,840
over something like name equals John.

4288
02:18:35,840 --> 02:18:37,439
The server would then grab all records

4289
02:18:37,439 --> 02:18:39,200
that have name equal John and then it

4290
02:18:39,200 --> 02:18:40,879
would send them back to you. So those

4291
02:18:40,879 --> 02:18:42,318
are basically like the five main things

4292
02:18:42,318 --> 02:18:43,679
to look out for when you're reading

4293
02:18:43,679 --> 02:18:45,920
through API documentation and setting up

4294
02:18:45,920 --> 02:18:48,799
your HTTP request. But the beautiful

4295
02:18:48,799 --> 02:18:51,599
thing about living in 2025 is that we

4296
02:18:51,599 --> 02:18:53,359
now have the most beautiful thing in the

4297
02:18:53,359 --> 02:18:55,840
world, which is a curl command. And so

4298
02:18:55,840 --> 02:18:57,679
what a curl command is is it lets you

4299
02:18:57,679 --> 02:18:59,599
hit copy and then you basically can just

4300
02:18:59,599 --> 02:19:02,318
import that curl into nadn and it will

4301
02:19:02,318 --> 02:19:03,920
pretty much set up the request for you.

4302
02:19:03,920 --> 02:19:05,439
Then at that point it really is just

4303
02:19:05,439 --> 02:19:07,920
like putting in your own API key and

4304
02:19:07,920 --> 02:19:09,840
tweaking a few things if you want to. So

4305
02:19:09,840 --> 02:19:11,359
let's take a look at this curl statement

4306
02:19:11,359 --> 02:19:13,040
for a service called Tavi. As you can

4307
02:19:13,040 --> 02:19:14,760
see that's the endpoint is

4308
02:19:14,760 --> 02:19:16,718
api.tavi.com. All this basically does is

4309
02:19:16,718 --> 02:19:18,318
it lets you search the internet. So you

4310
02:19:18,318 --> 02:19:19,760
can see here this curl statement tells

4311
02:19:19,760 --> 02:19:20,959
us pretty much everything we need to

4312
02:19:20,959 --> 02:19:22,879
know to use this. So it's telling us

4313
02:19:22,879 --> 02:19:24,318
that it's going to be a post. It's

4314
02:19:24,318 --> 02:19:25,840
showing us the API endpoint that we're

4315
02:19:25,840 --> 02:19:27,599
going to be accessing. It shows us how

4316
02:19:27,599 --> 02:19:28,959
to set up our header. So that's going to

4317
02:19:28,959 --> 02:19:30,478
be authorization and then it's going to

4318
02:19:30,478 --> 02:19:33,120
be bearer space API token. It's

4319
02:19:33,120 --> 02:19:34,160
basically just telling us that we're

4320
02:19:34,160 --> 02:19:36,240
going to get this back in JSON format.

4321
02:19:36,240 --> 02:19:37,359
And then you can see all of these

4322
02:19:37,359 --> 02:19:39,200
different key value pairs right here in

4323
02:19:39,200 --> 02:19:40,638
the data section. And these are

4324
02:19:40,638 --> 02:19:41,840
basically going to be body parameters

4325
02:19:41,840 --> 02:19:43,840
where we can say, you know, query is who

4326
02:19:43,840 --> 02:19:45,519
is Leo Messi? So that's what we' be

4327
02:19:45,519 --> 02:19:46,959
searching the internet for. We have

4328
02:19:46,959 --> 02:19:48,880
topic equals general. We have search

4329
02:19:48,880 --> 02:19:50,800
depth equals basic. So hopefully you can

4330
02:19:50,800 --> 02:19:52,240
see all of these are just different

4331
02:19:52,240 --> 02:19:54,240
filters where we can choose okay do we

4332
02:19:54,240 --> 02:19:56,080
want you know do we want one max result

4333
02:19:56,080 --> 02:19:58,640
or do we want four or do we have a time

4334
02:19:58,640 --> 02:20:00,720
range or do we not. So this is really

4335
02:20:00,720 --> 02:20:02,319
just at the end of the day. It's

4336
02:20:02,319 --> 02:20:03,920
basically like ordering Door Dash

4337
02:20:03,920 --> 02:20:05,520
because what we would have up here is

4338
02:20:05,520 --> 02:20:07,439
you know like what actual restaurant do

4339
02:20:07,439 --> 02:20:09,040
we want to order food from? We would put

4340
02:20:09,040 --> 02:20:10,720
in our credit card information. We would

4341
02:20:10,720 --> 02:20:12,319
say do we want this to be delivered to

4342
02:20:12,319 --> 02:20:13,920
us? Do we want to pick it up? We would

4343
02:20:13,920 --> 02:20:15,120
basically say you know do you want a

4344
02:20:15,120 --> 02:20:17,040
cheeseburger? No pickles. No onions.

4345
02:20:17,040 --> 02:20:18,080
Like what are the different things that

4346
02:20:18,080 --> 02:20:19,920
you want to flip? Do you want a side? Do

4347
02:20:19,920 --> 02:20:21,760
you want fries? Or do you want salad?

4348
02:20:21,760 --> 02:20:23,439
Like, what do you want? And so once you

4349
02:20:23,439 --> 02:20:25,040
get into this mindset where all I have

4350
02:20:25,040 --> 02:20:27,120
to do is understand this documentation

4351
02:20:27,120 --> 02:20:28,720
and just tweak these little things to

4352
02:20:28,720 --> 02:20:31,040
get back what I want, it makes setting

4353
02:20:31,040 --> 02:20:33,840
up API calls so much easier. And if

4354
02:20:33,840 --> 02:20:35,120
another thing that kind of intimidates

4355
02:20:35,120 --> 02:20:37,479
you is the aspect of

4356
02:20:37,479 --> 02:20:39,760
JSON, it shouldn't because all it is is

4357
02:20:39,760 --> 02:20:41,439
a key value pair like we kind of talked

4358
02:20:41,439 --> 02:20:43,200
about. You know, this is JSON right here

4359
02:20:43,200 --> 02:20:44,399
and you're going to send your body

4360
02:20:44,399 --> 02:20:46,720
parameter over as JSON and you're also

4361
02:20:46,720 --> 02:20:48,240
going to get back JSON. So the more and

4362
02:20:48,240 --> 02:20:49,439
more you use it, you're going to

4363
02:20:49,439 --> 02:20:51,359
recognize like how easy it is to set up.

4364
02:20:51,359 --> 02:20:52,800
So anyways, I hope that that made sense

4365
02:20:52,800 --> 02:20:54,720
and broke it down pretty simply. Now

4366
02:20:54,720 --> 02:20:56,479
that we've seen like how it all works,

4367
02:20:56,479 --> 02:20:58,399
it's going to be really valuable to get

4368
02:20:58,399 --> 02:21:00,720
into niten. I'm going to open up a API

4369
02:21:00,720 --> 02:21:02,399
documentation and we're just going to

4370
02:21:02,399 --> 02:21:04,960
set up a few requests together and we'll

4371
02:21:04,960 --> 02:21:06,880
see how it works. Okay, so here's the

4372
02:21:06,880 --> 02:21:08,319
example. You know, I did open weather's

4373
02:21:08,319 --> 02:21:09,840
native integration and then also open

4374
02:21:09,840 --> 02:21:11,840
weather as an HTTP request. And you can

4375
02:21:11,840 --> 02:21:13,280
see it was like basically the exact same

4376
02:21:13,280 --> 02:21:15,439
thing. Um, so let's say that what we

4377
02:21:15,439 --> 02:21:17,600
want to do is we want to use Perplexity,

4378
02:21:17,600 --> 02:21:18,560
which if you guys don't know what

4379
02:21:18,560 --> 02:21:20,319
Perplexity is, it is basically, you

4380
02:21:20,319 --> 02:21:22,000
know, kind of similar to Chatbt, but it

4381
02:21:22,000 --> 02:21:23,680
has really good like internet search and

4382
02:21:23,680 --> 02:21:25,760
research. So let's say we wanted to use

4383
02:21:25,760 --> 02:21:28,800
this and hook it up to an AI agent, so

4384
02:21:28,800 --> 02:21:31,680
it can do web search for us. But as you

4385
02:21:31,680 --> 02:21:33,359
can see, if I type in Perplexity,

4386
02:21:33,359 --> 02:21:34,800
there's no native integration for

4387
02:21:34,800 --> 02:21:37,040
Perplexity. So that basically signals to

4388
02:21:37,040 --> 02:21:39,200
us, okay, we can only access Perplexity

4389
02:21:39,200 --> 02:21:41,439
using an HTTP request. And real quick

4390
02:21:41,439 --> 02:21:42,479
side note, if you're ever thinking to

4391
02:21:42,479 --> 02:21:45,040
yourself, hm, I wonder if I can have my

4392
02:21:45,040 --> 02:21:47,840
agent interact with blank. The answer is

4393
02:21:47,840 --> 02:21:49,760
yes, if there's API documentation. And

4394
02:21:49,760 --> 02:21:51,120
all you have to do typically to find out

4395
02:21:51,120 --> 02:21:53,040
if there's API documentation is just

4396
02:21:53,040 --> 02:21:54,319
come in here and be like, you know,

4397
02:21:54,319 --> 02:21:56,160
Gmail API documentation. And then we can

4398
02:21:56,160 --> 02:21:58,560
see Gmail API is a restful API, which

4399
02:21:58,560 --> 02:22:00,960
means it has an API and we can use it

4400
02:22:00,960 --> 02:22:03,040
within our automations. Anyways, getting

4401
02:22:03,040 --> 02:22:04,479
back to this example of setting up a

4402
02:22:04,479 --> 02:22:06,640
perplexity HTTP request. We have our

4403
02:22:06,640 --> 02:22:08,479
HTTP request right here and it's left

4404
02:22:08,479 --> 02:22:10,000
completely blank. So, as you can see, we

4405
02:22:10,000 --> 02:22:12,319
have our method, we have our endpoint,

4406
02:22:12,319 --> 02:22:14,319
we have query, header, and body

4407
02:22:14,319 --> 02:22:16,000
parameters, but nothing has been set up

4408
02:22:16,000 --> 02:22:17,520
yet. So, what we need to do is we would

4409
02:22:17,520 --> 02:22:19,200
head over to Perplexity, as you can see

4410
02:22:19,200 --> 02:22:20,880
right here. And at the bottom, there's

4411
02:22:20,880 --> 02:22:22,560
this little thing called API. So, I'm

4412
02:22:22,560 --> 02:22:24,399
going to click on that. And this opens

4413
02:22:24,399 --> 02:22:26,080
up this little page. And so, what I have

4414
02:22:26,080 --> 02:22:28,160
here is Perplexity's API. If I click on

4415
02:22:28,160 --> 02:22:30,240
developer docs, and then right here, I

4416
02:22:30,240 --> 02:22:32,560
have API reference, which is integrate

4417
02:22:32,560 --> 02:22:34,240
the API into your workflows, which is

4418
02:22:34,240 --> 02:22:36,720
exactly what we want to do. This page is

4419
02:22:36,720 --> 02:22:38,080
where people might get confused and it

4420
02:22:38,080 --> 02:22:39,359
looks a little bit intimidating, but

4421
02:22:39,359 --> 02:22:40,720
hopefully this breakdown will show you

4422
02:22:40,720 --> 02:22:42,800
how you can understand any API doc,

4423
02:22:42,800 --> 02:22:44,560
especially if there's a curl command.

4424
02:22:44,560 --> 02:22:45,840
So, all I'm going to do first of all is

4425
02:22:45,840 --> 02:22:48,000
I'm just going to right away hit copy

4426
02:22:48,000 --> 02:22:49,520
and make sure you know you're in curl.

4427
02:22:49,520 --> 02:22:51,040
If you're in Python, it's not the same.

4428
02:22:51,040 --> 02:22:53,439
So, click on curl. I copied this curl

4429
02:22:53,439 --> 02:22:54,800
command and I'm going to come back into

4430
02:22:54,800 --> 02:22:57,200
nit hit import curl and all I have to do

4431
02:22:57,200 --> 02:22:59,280
is paste. Click import and basically

4432
02:22:59,280 --> 02:23:01,280
what you're going to see is this HTTP

4433
02:23:01,280 --> 02:23:02,880
request is going to get basically

4434
02:23:02,880 --> 02:23:04,880
populated for us. So now we have the

4435
02:23:04,880 --> 02:23:06,800
method has been changed to post. We have

4436
02:23:06,800 --> 02:23:08,560
the correct URL which is the API

4437
02:23:08,560 --> 02:23:10,399
endpoint which basically is telling this

4438
02:23:10,399 --> 02:23:11,439
node, okay, we're going to use

4439
02:23:11,439 --> 02:23:13,520
Perplexity's API. You can see that the

4440
02:23:13,520 --> 02:23:15,280
curl had no query parameters. So that's

4441
02:23:15,280 --> 02:23:17,439
left off. It did turn on headers which

4442
02:23:17,439 --> 02:23:19,520
is basically just having us put our API

4443
02:23:19,520 --> 02:23:21,359
key in there. And then of course we have

4444
02:23:21,359 --> 02:23:23,600
the JSON body that we need to send over.

4445
02:23:23,600 --> 02:23:24,880
Okay. So at this point what I would do

4446
02:23:24,880 --> 02:23:26,720
is now that we have this set up, we know

4447
02:23:26,720 --> 02:23:28,319
we just need to put in a few things of

4448
02:23:28,319 --> 02:23:30,560
our own. So the first thing to tackle is

4449
02:23:30,560 --> 02:23:32,399
how do we actually authorize ourselves

4450
02:23:32,399 --> 02:23:33,520
into Perplexity? All right. All right.

4451
02:23:33,520 --> 02:23:34,960
So, I'm back in Perplexity. I'm going to

4452
02:23:34,960 --> 02:23:36,960
go to my account and click on settings.

4453
02:23:36,960 --> 02:23:37,920
And then all I'm going to do is

4454
02:23:37,920 --> 02:23:39,439
basically I need to find where I can get

4455
02:23:39,439 --> 02:23:41,280
my API key. So, on the lefth hand side,

4456
02:23:41,280 --> 02:23:43,439
if I go all the way down, I can see API

4457
02:23:43,439 --> 02:23:45,359
keys. So, I'll click on that. And all

4458
02:23:45,359 --> 02:23:47,200
this is going to do is this shows my API

4459
02:23:47,200 --> 02:23:48,479
key right here. So, I'll have to click

4460
02:23:48,479 --> 02:23:51,680
on this, hit copy, come back into NN,

4461
02:23:51,680 --> 02:23:52,880
and then all I'm going to do is I'm

4462
02:23:52,880 --> 02:23:53,920
going to just delete where this says

4463
02:23:53,920 --> 02:23:55,280
token, but I'm going to make sure to

4464
02:23:55,280 --> 02:23:57,920
leave a space after bearer and hit

4465
02:23:57,920 --> 02:24:00,800
paste. So now this basically authorizes

4466
02:24:00,800 --> 02:24:03,120
ourselves to use Perplexity's endpoint.

4467
02:24:03,120 --> 02:24:04,479
And now if we look down at the body

4468
02:24:04,479 --> 02:24:06,080
request, we can see we have this thing

4469
02:24:06,080 --> 02:24:08,080
set up for us already. So if I hit test

4470
02:24:08,080 --> 02:24:10,160
step, this is real quick going to make a

4471
02:24:10,160 --> 02:24:12,000
request over. It just hit Perplexity's

4472
02:24:12,000 --> 02:24:13,280
endpoint. And as you can see, it came

4473
02:24:13,280 --> 02:24:15,600
back with data. And what this did is it

4474
02:24:15,600 --> 02:24:17,840
basically searched Perplexity for how

4475
02:24:17,840 --> 02:24:20,080
many stars are there in our galaxy. And

4476
02:24:20,080 --> 02:24:21,600
that's where right here we can see the

4477
02:24:21,600 --> 02:24:23,600
Milky Way galaxy, which is our galaxy,

4478
02:24:23,600 --> 02:24:25,280
is estimated to contain between 100

4479
02:24:25,280 --> 02:24:27,280
billion and 400 billion stars, blah blah

4480
02:24:27,280 --> 02:24:29,200
blah. So we know basically okay if we

4481
02:24:29,200 --> 02:24:30,880
want to change how this endpoint works

4482
02:24:30,880 --> 02:24:32,720
what data we're going to get back this

4483
02:24:32,720 --> 02:24:34,080
right here is where we would change our

4484
02:24:34,080 --> 02:24:35,760
request and if we go back into the

4485
02:24:35,760 --> 02:24:37,520
documentation we can see what else we

4486
02:24:37,520 --> 02:24:39,359
have to set up. So the first thing to

4487
02:24:39,359 --> 02:24:40,560
notice is that there's a few things that

4488
02:24:40,560 --> 02:24:42,160
are required and then some things that

4489
02:24:42,160 --> 02:24:43,760
are not. So right here we have you know

4490
02:24:43,760 --> 02:24:45,680
authorization that's always required.

4491
02:24:45,680 --> 02:24:47,920
The model is always required like which

4492
02:24:47,920 --> 02:24:49,920
perplexity model are we going to use?

4493
02:24:49,920 --> 02:24:51,520
The messages are always required. So

4494
02:24:51,520 --> 02:24:53,040
this is basically a mix of a system

4495
02:24:53,040 --> 02:24:55,359
message and a user message. So here the

4496
02:24:55,359 --> 02:24:57,040
example is be precise and concise and

4497
02:24:57,040 --> 02:24:58,800
then the user message is how many stars

4498
02:24:58,800 --> 02:25:00,720
are there in the galaxy. So if I came

4499
02:25:00,720 --> 02:25:03,680
back here and I said you know um be

4500
02:25:03,680 --> 02:25:06,240
funny in your answer. So I'm basically

4501
02:25:06,240 --> 02:25:08,160
telling this model how to act and then

4502
02:25:08,160 --> 02:25:09,680
instead of how many stars are there in

4503
02:25:09,680 --> 02:25:11,840
the galaxy I'm just going to say how

4504
02:25:11,840 --> 02:25:14,800
long do cows live? And I'll make another

4505
02:25:14,800 --> 02:25:16,880
request off to perplexity. So you can

4506
02:25:16,880 --> 02:25:18,800
see what comes back is this longer

4507
02:25:18,800 --> 02:25:20,560
content. So it's not being precise and

4508
02:25:20,560 --> 02:25:22,319
concise and it says so you're wondering

4509
02:25:22,319 --> 02:25:25,040
how long cows live. Well, let's move

4510
02:25:25,040 --> 02:25:26,479
into the details. So, as you can see,

4511
02:25:26,479 --> 02:25:28,720
it's being funny. Okay, back into the

4512
02:25:28,720 --> 02:25:30,240
API documentation. We have a few other

4513
02:25:30,240 --> 02:25:31,840
things that we could configure, but

4514
02:25:31,840 --> 02:25:33,600
notice how these aren't required the

4515
02:25:33,600 --> 02:25:35,120
same way that these ones are. So, we

4516
02:25:35,120 --> 02:25:36,800
have max tokens. We could basically put

4517
02:25:36,800 --> 02:25:39,280
in an integer and say how many tokens do

4518
02:25:39,280 --> 02:25:40,880
you want to use at the maximum. We could

4519
02:25:40,880 --> 02:25:42,160
change the temperature, which is, you

4520
02:25:42,160 --> 02:25:44,080
know, like how random the response would

4521
02:25:44,080 --> 02:25:45,600
be. And this one says, you know, it has

4522
02:25:45,600 --> 02:25:47,600
to be between zero and two. And as we

4523
02:25:47,600 --> 02:25:48,800
keep scrolling down, you can see that

4524
02:25:48,800 --> 02:25:50,080
there's a ton of other little levers

4525
02:25:50,080 --> 02:25:51,840
that we can just tweak a little bit to

4526
02:25:51,840 --> 02:25:53,439
change the type of response that we get

4527
02:25:53,439 --> 02:25:55,280
back from Plexity. And so once you start

4528
02:25:55,280 --> 02:25:57,200
to read more and more API documentation,

4529
02:25:57,200 --> 02:25:58,800
you can understand how you're really in

4530
02:25:58,800 --> 02:26:00,240
control of what you get back from the

4531
02:26:00,240 --> 02:26:02,560
server. And also you can see like, you

4532
02:26:02,560 --> 02:26:03,920
know, sometimes you have to send over

4533
02:26:03,920 --> 02:26:05,520
booleans, which is basically just true

4534
02:26:05,520 --> 02:26:07,200
or false. Sometimes you can only send

4535
02:26:07,200 --> 02:26:09,120
over numbers. Sometimes you can only

4536
02:26:09,120 --> 02:26:10,800
send over strings. And sometimes it'll

4537
02:26:10,800 --> 02:26:12,319
tell you, you know, like what will the

4538
02:26:12,319 --> 02:26:14,399
this value default to? and also what are

4539
02:26:14,399 --> 02:26:15,840
the only accepted values that you

4540
02:26:15,840 --> 02:26:17,439
actually could fill out. So for example,

4541
02:26:17,439 --> 02:26:18,720
if we go back to this temperature

4542
02:26:18,720 --> 02:26:20,240
setting, we can see it has to be a

4543
02:26:20,240 --> 02:26:22,319
number and if you don't fill that out,

4544
02:26:22,319 --> 02:26:24,479
it's going to be 0.2. But we can also

4545
02:26:24,479 --> 02:26:26,240
see that if you do fill this out, it has

4546
02:26:26,240 --> 02:26:28,560
to be between zero or two. Otherwise,

4547
02:26:28,560 --> 02:26:30,560
it's not going to work. Okay, cool. So

4548
02:26:30,560 --> 02:26:31,840
that's basically how it works. We just

4549
02:26:31,840 --> 02:26:34,080
set up an HTTP request and we change the

4550
02:26:34,080 --> 02:26:35,439
system prompt and we change the user

4551
02:26:35,439 --> 02:26:36,880
prompt and that's how we can customize

4552
02:26:36,880 --> 02:26:39,040
this thing to work for us. And that's

4553
02:26:39,040 --> 02:26:40,880
really cool as a node because we can set

4554
02:26:40,880 --> 02:26:42,319
up, you know, a workflow to pass over

4555
02:26:42,319 --> 02:26:44,399
some sort of variable into this request.

4556
02:26:44,399 --> 02:26:45,680
So it searches the web for something

4557
02:26:45,680 --> 02:26:47,120
different every time. But now let's say

4558
02:26:47,120 --> 02:26:48,720
we want to give our agent access to this

4559
02:26:48,720 --> 02:26:50,800
tool and the agent will decide what am I

4560
02:26:50,800 --> 02:26:52,000
going to search the web for based on

4561
02:26:52,000 --> 02:26:54,000
what the human asks me. So it's pretty

4562
02:26:54,000 --> 02:26:55,280
much the exact same process. We'll click

4563
02:26:55,280 --> 02:26:56,960
on add a tool and we're going to add an

4564
02:26:56,960 --> 02:26:59,520
HTTP request tool only because Plexity

4565
02:26:59,520 --> 02:27:01,120
doesn't have a native integration. And

4566
02:27:01,120 --> 02:27:02,319
then once again you can see we have an

4567
02:27:02,319 --> 02:27:04,000
import curl button. So if I click on

4568
02:27:04,000 --> 02:27:05,680
this and I just import that same curl

4569
02:27:05,680 --> 02:27:07,600
that we did last time once again it

4570
02:27:07,600 --> 02:27:09,120
fills out this whole thing for us. So we

4571
02:27:09,120 --> 02:27:11,280
have post, we have the perplexity

4572
02:27:11,280 --> 02:27:13,200
endpoint, we have our authorization

4573
02:27:13,200 --> 02:27:14,640
bearer, but notice we have to put in our

4574
02:27:14,640 --> 02:27:16,560
token once again. And so a cool little

4575
02:27:16,560 --> 02:27:18,319
hack is let's say you know you're going

4576
02:27:18,319 --> 02:27:20,160
to use perplexity a lot. Rather than

4577
02:27:20,160 --> 02:27:22,000
having to go grab your API key every

4578
02:27:22,000 --> 02:27:24,000
single time, what we can do is we can

4579
02:27:24,000 --> 02:27:25,520
just send it over right here in the

4580
02:27:25,520 --> 02:27:27,439
authentication tab. So let me show you

4581
02:27:27,439 --> 02:27:29,200
what I mean by that. If I click into

4582
02:27:29,200 --> 02:27:31,439
authentication, I can click on generic

4583
02:27:31,439 --> 02:27:33,439
credential type. And then from here, I

4584
02:27:33,439 --> 02:27:34,800
can basically choose, okay, is this a

4585
02:27:34,800 --> 02:27:37,280
basic O, a bearer O, all this kind of

4586
02:27:37,280 --> 02:27:38,560
stuff. A lot of times it's just going to

4587
02:27:38,560 --> 02:27:39,920
be header off. So that's why we know

4588
02:27:39,920 --> 02:27:41,520
right here we can click on header off.

4589
02:27:41,520 --> 02:27:42,800
And as you can see, we know that because

4590
02:27:42,800 --> 02:27:44,080
we're sending this over as a header

4591
02:27:44,080 --> 02:27:45,680
parameter and we just did this earlier

4592
02:27:45,680 --> 02:27:48,319
and it worked. So as you can see, I have

4593
02:27:48,319 --> 02:27:50,000
header offs already set up. I probably

4594
02:27:50,000 --> 02:27:52,080
already have a Plexity one set up right

4595
02:27:52,080 --> 02:27:53,359
here. But I'm just going to go ahead and

4596
02:27:53,359 --> 02:27:54,560
create a new one with you guys to show

4597
02:27:54,560 --> 02:27:56,560
you how this works. So I just create a

4598
02:27:56,560 --> 02:27:58,720
new header off and all we have to do is

4599
02:27:58,720 --> 02:28:01,200
the exact same thing that we had down in

4600
02:28:01,200 --> 02:28:02,960
the request that we just sent over which

4601
02:28:02,960 --> 02:28:04,319
means in the name we're just going to

4602
02:28:04,319 --> 02:28:06,399
type in authorization with a capital A

4603
02:28:06,399 --> 02:28:08,319
and once again we can see in the API

4604
02:28:08,319 --> 02:28:09,680
docs this is how you do it. So

4605
02:28:09,680 --> 02:28:11,600
authorization and then we can see that

4606
02:28:11,600 --> 02:28:14,080
the value has to be capital B bearer

4607
02:28:14,080 --> 02:28:16,080
space API token. So I'm just going to

4608
02:28:16,080 --> 02:28:19,840
come into here bearer space API token

4609
02:28:19,840 --> 02:28:21,200
and then all I have to do is you know

4610
02:28:21,200 --> 02:28:22,880
first of all name this so we can can

4611
02:28:22,880 --> 02:28:26,319
save it and then if I hit save now every

4612
02:28:26,319 --> 02:28:28,160
single time we want to use perplexity's

4613
02:28:28,160 --> 02:28:30,160
endpoint we already have our credentials

4614
02:28:30,160 --> 02:28:31,840
saved. So that's great and then we can

4615
02:28:31,840 --> 02:28:33,359
turn off the headers down here because

4616
02:28:33,359 --> 02:28:35,280
we don't need to send it over twice. So

4617
02:28:35,280 --> 02:28:37,520
now all we have to do is change this

4618
02:28:37,520 --> 02:28:39,120
body request a little bit just to make

4619
02:28:39,120 --> 02:28:41,200
it more dynamic. So in order to make it

4620
02:28:41,200 --> 02:28:42,800
dynamic the first thing we have to do is

4621
02:28:42,800 --> 02:28:44,880
change this to an expression. Now, we

4622
02:28:44,880 --> 02:28:46,479
can see that we can basically add a

4623
02:28:46,479 --> 02:28:48,080
variable in here. And what we can do is

4624
02:28:48,080 --> 02:28:49,520
we can add a variable that basically

4625
02:28:49,520 --> 02:28:52,160
just tells the AI model, the AI agent,

4626
02:28:52,160 --> 02:28:54,880
here is where you're going to send over

4627
02:28:54,880 --> 02:28:57,760
your internet search query. And so we

4628
02:28:57,760 --> 02:28:59,120
already know that all that that is is

4629
02:28:59,120 --> 02:29:01,439
the user content right here. So if I

4630
02:29:01,439 --> 02:29:04,080
delete this and basically if I do two

4631
02:29:04,080 --> 02:29:06,160
curly braces and then within the curly

4632
02:29:06,160 --> 02:29:08,000
braces I do a dollar sign and I type in

4633
02:29:08,000 --> 02:29:10,640
from, I can grab a from AI function. And

4634
02:29:10,640 --> 02:29:12,720
this from AI function just indicates to

4635
02:29:12,720 --> 02:29:15,600
the AI agent I need to choose something

4636
02:29:15,600 --> 02:29:17,280
to send over here. And you guys will see

4637
02:29:17,280 --> 02:29:19,200
an example and it will make more sense.

4638
02:29:19,200 --> 02:29:20,640
I also did a full video breaking this

4639
02:29:20,640 --> 02:29:21,840
down. So if you want to see that, I'll

4640
02:29:21,840 --> 02:29:23,680
tag it right up here. Anyways, as you

4641
02:29:23,680 --> 02:29:25,280
can see, all we have to really do is

4642
02:29:25,280 --> 02:29:26,960
enter in a key. So I'm just going to do,

4643
02:29:26,960 --> 02:29:28,479
you know, two quotes and within the

4644
02:29:28,479 --> 02:29:30,880
quote, I'm going to put in search term.

4645
02:29:30,880 --> 02:29:32,240
And so now the agent will be reading

4646
02:29:32,240 --> 02:29:34,000
this and say, okay, whenever the user

4647
02:29:34,000 --> 02:29:35,680
interacts with me and I know I need to

4648
02:29:35,680 --> 02:29:37,120
search the internet, I'm just going to

4649
02:29:37,120 --> 02:29:39,359
fill this whole thing in with the search

4650
02:29:39,359 --> 02:29:41,200
term. So, now that that's set up, I'm

4651
02:29:41,200 --> 02:29:43,600
just going to change this request to um

4652
02:29:43,600 --> 02:29:44,640
actually I'm just going to call it web

4653
02:29:44,640 --> 02:29:46,319
search to make that super intuitive for

4654
02:29:46,319 --> 02:29:48,240
the AI agent. And now what we're going

4655
02:29:48,240 --> 02:29:49,920
to do is we are going to talk to the

4656
02:29:49,920 --> 02:29:51,280
agent and see if it can actually search

4657
02:29:51,280 --> 02:29:53,359
the web. Okay, so I'm asking the AI

4658
02:29:53,359 --> 02:29:55,359
agent to search the web for the best

4659
02:29:55,359 --> 02:29:57,120
movies. It's going to think about it.

4660
02:29:57,120 --> 02:29:58,800
It's going to use this tool right here

4661
02:29:58,800 --> 02:30:00,160
and then we'll basically get to go in

4662
02:30:00,160 --> 02:30:02,000
there and we can see what it filled in

4663
02:30:02,000 --> 02:30:03,840
in that search term placeholder that we

4664
02:30:03,840 --> 02:30:05,760
gave it. So, first of all, the answer it

4665
02:30:05,760 --> 02:30:09,200
gave us was IMDb, top 250, um, Rotten

4666
02:30:09,200 --> 02:30:11,040
Tomatoes, all this kind of stuff, right?

4667
02:30:11,040 --> 02:30:12,560
So, that's movie information that we

4668
02:30:12,560 --> 02:30:15,040
just got from Perplexity. And what I can

4669
02:30:15,040 --> 02:30:16,880
do is click into the tool and we can see

4670
02:30:16,880 --> 02:30:18,720
in the top left it filled out search

4671
02:30:18,720 --> 02:30:20,800
term with best movies. And we can even

4672
02:30:20,800 --> 02:30:22,240
see that in action. If we come down to

4673
02:30:22,240 --> 02:30:23,920
the body request that it sent over and

4674
02:30:23,920 --> 02:30:25,760
we expand this, we can see on the right

4675
02:30:25,760 --> 02:30:27,920
hand side in the result panel, this is

4676
02:30:27,920 --> 02:30:30,319
the JSON body that it sent over to

4677
02:30:30,319 --> 02:30:32,240
Perplexity and it filled it in with best

4678
02:30:32,240 --> 02:30:34,240
movies. And then of course what we got

4679
02:30:34,240 --> 02:30:36,319
back was our content from Perplexity,

4680
02:30:36,319 --> 02:30:37,680
which is, you know, here are some of the

4681
02:30:37,680 --> 02:30:40,240
best movies across major platforms. All

4682
02:30:40,240 --> 02:30:41,760
right, then real quick before we wrap up

4683
02:30:41,760 --> 02:30:43,120
here, I just wanted to talk about some

4684
02:30:43,120 --> 02:30:45,120
common responses that you can get from

4685
02:30:45,120 --> 02:30:47,920
your HTTP requests. So the rule of thumb

4686
02:30:47,920 --> 02:30:49,920
to follow is if you get data back and

4687
02:30:49,920 --> 02:30:52,000
you get a 200, you're good. Sometimes

4688
02:30:52,000 --> 02:30:53,439
you'll get a response back, but you

4689
02:30:53,439 --> 02:30:55,600
won't explicitly see a 200 message. But

4690
02:30:55,600 --> 02:30:57,200
if you're getting the data back, then

4691
02:30:57,200 --> 02:30:58,960
you're good to go. And a quick example

4692
02:30:58,960 --> 02:31:00,880
of this is down here we have that HTTP

4693
02:31:00,880 --> 02:31:02,560
request which we went over earlier in

4694
02:31:02,560 --> 02:31:04,319
this video where we went to open weather

4695
02:31:04,319 --> 02:31:06,479
maps API and you can see down here we

4696
02:31:06,479 --> 02:31:08,720
got code 200 and there's data coming

4697
02:31:08,720 --> 02:31:11,680
back and 200 is good that's a success

4698
02:31:11,680 --> 02:31:13,359
code. Now if you get a request in the

4699
02:31:13,359 --> 02:31:15,520
400s that means that you probably set up

4700
02:31:15,520 --> 02:31:18,160
the request wrong. So 400 bad request

4701
02:31:18,160 --> 02:31:19,359
that could mean that your JSON's

4702
02:31:19,359 --> 02:31:20,720
invalid. It could just mean that you

4703
02:31:20,720 --> 02:31:22,720
have like an extra quotation mark or you

4704
02:31:22,720 --> 02:31:24,319
have you know an extra comma something

4705
02:31:24,319 --> 02:31:26,240
as silly as that. So let me show a quick

4706
02:31:26,240 --> 02:31:27,280
example of that. We're going to test

4707
02:31:27,280 --> 02:31:28,960
this workflow and what I'm doing is I'm

4708
02:31:28,960 --> 02:31:31,120
trying to send over a query to Tavi. And

4709
02:31:31,120 --> 02:31:32,640
you can see what we get is an error that

4710
02:31:32,640 --> 02:31:34,399
says JSON parameter needs to be valid

4711
02:31:34,399 --> 02:31:36,880
JSON. And this would be a 400 error. And

4712
02:31:36,880 --> 02:31:38,960
the issue here is if we go into the JSON

4713
02:31:38,960 --> 02:31:40,800
body that we're trying to send over, you

4714
02:31:40,800 --> 02:31:42,319
can see in the result panel, we're

4715
02:31:42,319 --> 02:31:44,399
trying to send over a query that has

4716
02:31:44,399 --> 02:31:46,319
basically two sets of quotation marks.

4717
02:31:46,319 --> 02:31:47,600
If you can see that. But here's the

4718
02:31:47,600 --> 02:31:49,600
great news about JSON. It is so

4719
02:31:49,600 --> 02:31:51,040
universally used and it's been around

4720
02:31:51,040 --> 02:31:52,720
for so long that we could basically just

4721
02:31:52,720 --> 02:31:55,840
copy the result over to chatbt. Paste it

4722
02:31:55,840 --> 02:31:57,680
in here and say, I'm getting an error

4723
02:31:57,680 --> 02:31:59,359
message that says JSON parameter needs

4724
02:31:59,359 --> 02:32:01,200
to be valid JSON. What's wrong with my

4725
02:32:01,200 --> 02:32:02,800
JSON? And as you can see, it says the

4726
02:32:02,800 --> 02:32:04,080
issue with your JSON is the use of

4727
02:32:04,080 --> 02:32:06,080
double quotes around the string value in

4728
02:32:06,080 --> 02:32:07,840
this line. So now we'd be able to go fix

4729
02:32:07,840 --> 02:32:09,120
that. And if we go back into the

4730
02:32:09,120 --> 02:32:11,040
workflow, we take away these double

4731
02:32:11,040 --> 02:32:12,960
quotes right here. Test the step again.

4732
02:32:12,960 --> 02:32:14,479
Now you can see it's spinning and it's

4733
02:32:14,479 --> 02:32:16,080
going to work. and we should get back

4734
02:32:16,080 --> 02:32:17,680
some information about pineapples on

4735
02:32:17,680 --> 02:32:19,359
pizza. Another common error you could

4736
02:32:19,359 --> 02:32:21,840
run into is a 401, meaning unauthorized.

4737
02:32:21,840 --> 02:32:23,280
This typically just means that your API

4738
02:32:23,280 --> 02:32:25,280
key is wrong. You could also get a 403,

4739
02:32:25,280 --> 02:32:26,880
which is forbidden. That just means that

4740
02:32:26,880 --> 02:32:28,240
maybe your account doesn't have access

4741
02:32:28,240 --> 02:32:30,080
to this data that you're requesting or

4742
02:32:30,080 --> 02:32:31,359
something like that. And then another

4743
02:32:31,359 --> 02:32:32,960
one you could get is a 404, which

4744
02:32:32,960 --> 02:32:34,080
sometimes you'll get that if you type in

4745
02:32:34,080 --> 02:32:36,399
a URL that doesn't exist. It just means

4746
02:32:36,399 --> 02:32:38,319
this doesn't exist. We can't find it.

4747
02:32:38,319 --> 02:32:39,600
And a lot of times when you're looking

4748
02:32:39,600 --> 02:32:41,520
at the actual API documentation that you

4749
02:32:41,520 --> 02:32:43,520
want to set up a request to. So here's

4750
02:32:43,520 --> 02:32:45,520
an example with Tavi, it'll show you

4751
02:32:45,520 --> 02:32:47,200
what typical responses could look like.

4752
02:32:47,200 --> 02:32:48,640
So here's one where you know we're using

4753
02:32:48,640 --> 02:32:50,640
Tavi to search for who is Leo Messi.

4754
02:32:50,640 --> 02:32:51,760
This was an example we looked at

4755
02:32:51,760 --> 02:32:54,399
earlier. And with a 200 response, we are

4756
02:32:54,399 --> 02:32:56,399
getting back like a query, an answer

4757
02:32:56,399 --> 02:32:58,319
results, stuff like that. We could also

4758
02:32:58,319 --> 02:33:00,240
see we could get a 400 which would be

4759
02:33:00,240 --> 02:33:02,000
for bad request, you know, invalid

4760
02:33:02,000 --> 02:33:04,319
topic. We could have a 401 which means

4761
02:33:04,319 --> 02:33:06,399
invalid API key. We could get all these

4762
02:33:06,399 --> 02:33:09,359
other ones like 429, 432, but in general

4763
02:33:09,359 --> 02:33:12,319
400 is bad. And then even worse is a

4764
02:33:12,319 --> 02:33:14,080
500. And this just basically means

4765
02:33:14,080 --> 02:33:15,600
something's wrong with the server. Maybe

4766
02:33:15,600 --> 02:33:17,120
it doesn't exist anymore or there's a

4767
02:33:17,120 --> 02:33:19,040
bug on the server side. But the good

4768
02:33:19,040 --> 02:33:21,120
news about a 500 is it's not your fault.

4769
02:33:21,120 --> 02:33:22,720
You didn't set up the request wrong. It

4770
02:33:22,720 --> 02:33:24,640
just means something's wrong with the

4771
02:33:24,640 --> 02:33:26,080
server. And it's really important to

4772
02:33:26,080 --> 02:33:27,439
know that because if you think you did

4773
02:33:27,439 --> 02:33:28,720
something wrong, but it's really not

4774
02:33:28,720 --> 02:33:30,399
your fault at all, you may be banging

4775
02:33:30,399 --> 02:33:32,160
your head against the wall for hours. So

4776
02:33:32,160 --> 02:33:33,840
anyways, what I wanted to highlight here

4777
02:33:33,840 --> 02:33:35,880
is there's never just like a

4778
02:33:35,880 --> 02:33:37,600
one-sizefits-all. I know how to set up

4779
02:33:37,600 --> 02:33:39,359
this one API call so I can just set up

4780
02:33:39,359 --> 02:33:40,960
every single other API call the exact

4781
02:33:40,960 --> 02:33:42,640
same way. The key is to really

4782
02:33:42,640 --> 02:33:44,240
understand how do you read the API

4783
02:33:44,240 --> 02:33:45,920
documentation? How do you set up your

4784
02:33:45,920 --> 02:33:47,040
body parameters and your different

4785
02:33:47,040 --> 02:33:48,560
header parameters? And then if you start

4786
02:33:48,560 --> 02:33:50,479
to run into issues, the key is

4787
02:33:50,479 --> 02:33:52,080
understanding and actually reading the

4788
02:33:52,080 --> 02:33:53,439
error message that you're getting back

4789
02:33:53,439 --> 02:33:55,359
and adjusting from there. All right, so

4790
02:33:55,359 --> 02:33:56,800
that's going to do it for this video.

4791
02:33:56,800 --> 02:33:58,880
Hopefully this has left you feeling a

4792
02:33:58,880 --> 02:34:00,560
lot more comfortable with diving into

4793
02:34:00,560 --> 02:34:02,560
API documentation, walking through it

4794
02:34:02,560 --> 02:34:04,399
just step by step using those curl

4795
02:34:04,399 --> 02:34:06,080
commands and really just understanding

4796
02:34:06,080 --> 02:34:07,760
all I'm doing is I'm setting up filters

4797
02:34:07,760 --> 02:34:09,359
and levers here. I don't have to get

4798
02:34:09,359 --> 02:34:10,720
super confused. It's really not that

4799
02:34:10,720 --> 02:34:12,800
technical. I'm pretty much in complete

4800
02:34:12,800 --> 02:34:15,040
control over what my API is going to

4801
02:34:15,040 --> 02:34:16,800
send me back. The same way I'm in

4802
02:34:16,800 --> 02:34:18,080
complete control when I'm, you know,

4803
02:34:18,080 --> 02:34:19,520
ordering something on Door Dash or

4804
02:34:19,520 --> 02:34:21,040
ordering something on Amazon, whatever

4805
02:34:21,040 --> 02:34:23,040
it is. Hopefully by now the concept of

4806
02:34:23,040 --> 02:34:25,520
APIs and HTTP requests makes a lot more

4807
02:34:25,520 --> 02:34:26,960
sense. But really, just to drive it

4808
02:34:26,960 --> 02:34:28,319
home, what we're going to do is hop into

4809
02:34:28,319 --> 02:34:30,880
some actual setups in NADN of connecting

4810
02:34:30,880 --> 02:34:33,280
to some different popular APIs and walk

4811
02:34:33,280 --> 02:34:35,200
through a few more step by steps just to

4812
02:34:35,200 --> 02:34:37,200
really make sure that we understand the

4813
02:34:37,200 --> 02:34:38,560
differences that can come with different

4814
02:34:38,560 --> 02:34:40,319
API documentation and how you read it

4815
02:34:40,319 --> 02:34:41,840
and how you set up stuff like your

4816
02:34:41,840 --> 02:34:44,080
credentials and the body requests. So,

4817
02:34:44,080 --> 02:34:45,520
let's move into this next part, which I

4818
02:34:45,520 --> 02:34:46,800
think is going to be super valuable to

4819
02:34:46,800 --> 02:34:49,120
see different API calls in action. Okay,

4820
02:34:49,120 --> 02:34:50,800
so in nodn when we're working with a

4821
02:34:50,800 --> 02:34:52,240
large language model, whether that's an

4822
02:34:52,240 --> 02:34:54,640
AI agent or just like an AI node, what

4823
02:34:54,640 --> 02:34:57,120
happens is we can only access the

4824
02:34:57,120 --> 02:34:59,120
information that is in the large

4825
02:34:59,120 --> 02:35:00,880
language models training data. And a lot

4826
02:35:00,880 --> 02:35:02,319
of times that's not going to be super

4827
02:35:02,319 --> 02:35:04,880
up-to-date and real time. So what we

4828
02:35:04,880 --> 02:35:06,880
want to do is access different APIs that

4829
02:35:06,880 --> 02:35:08,880
let us search the web or do real-time

4830
02:35:08,880 --> 02:35:11,040
search. And what we saw earlier in that

4831
02:35:11,040 --> 02:35:13,120
third step-by-step workflow was we used

4832
02:35:13,120 --> 02:35:15,120
a tool called Tavi and we accessed it

4833
02:35:15,120 --> 02:35:17,359
through an HTTP request node which as

4834
02:35:17,359 --> 02:35:19,680
you guys know looks like this. And we

4835
02:35:19,680 --> 02:35:21,359
were able to use this to communicate

4836
02:35:21,359 --> 02:35:24,080
with Tavali's API server. So if we ever

4837
02:35:24,080 --> 02:35:25,840
want to access real-time information or

4838
02:35:25,840 --> 02:35:28,399
do research on certain search terms, we

4839
02:35:28,399 --> 02:35:30,720
have to use some sort of API to do that.

4840
02:35:30,720 --> 02:35:32,880
So, like I said, we talked about Tavi,

4841
02:35:32,880 --> 02:35:34,720
but in this video, I'm going to help you

4842
02:35:34,720 --> 02:35:36,800
guys set up Perplexity, which if you

4843
02:35:36,800 --> 02:35:38,000
don't know what it is, it's kind of like

4844
02:35:38,000 --> 02:35:39,680
Chat GBT, but it's really, really good

4845
02:35:39,680 --> 02:35:42,160
for web search and in-depth research.

4846
02:35:42,160 --> 02:35:43,600
And it has that same sort of like, you

4847
02:35:43,600 --> 02:35:46,000
know, chat interface as chatbt, but what

4848
02:35:46,000 --> 02:35:48,319
you also have is access to the API. So,

4849
02:35:48,319 --> 02:35:50,479
if I click on API, we can see this

4850
02:35:50,479 --> 02:35:51,920
little screen, but what we want to go to

4851
02:35:51,920 --> 02:35:54,000
is the developer docs. And in the

4852
02:35:54,000 --> 02:35:55,680
developer docs, what we're looking for

4853
02:35:55,680 --> 02:35:57,439
is the API reference. We can also click

4854
02:35:57,439 --> 02:35:58,960
on the quick start guide right here

4855
02:35:58,960 --> 02:36:00,319
which just shows you how you can set up

4856
02:36:00,319 --> 02:36:01,840
your API key and get all that kind of

4857
02:36:01,840 --> 02:36:03,359
stuff. So that's exactly what we're

4858
02:36:03,359 --> 02:36:05,880
going to do is set up an API call to

4859
02:36:05,880 --> 02:36:08,240
Perplexity. So I'm going to click on API

4860
02:36:08,240 --> 02:36:09,920
reference and what we see here is the

4861
02:36:09,920 --> 02:36:12,560
endpoint to access Perplexi's API. And

4862
02:36:12,560 --> 02:36:13,840
so what I'm going to do is just grab

4863
02:36:13,840 --> 02:36:15,359
this curl command from that right hand

4864
02:36:15,359 --> 02:36:18,080
side, go back into our NEN and I'm just

4865
02:36:18,080 --> 02:36:19,439
going to import the curl right into

4866
02:36:19,439 --> 02:36:20,800
here. And then all we have to do from

4867
02:36:20,800 --> 02:36:22,479
there is basically configure what we

4868
02:36:22,479 --> 02:36:24,800
want to research and put in our own API

4869
02:36:24,800 --> 02:36:27,200
key. So there we go. We have our node

4870
02:36:27,200 --> 02:36:28,560
pretty much configured. And now the

4871
02:36:28,560 --> 02:36:30,399
first thing we see we need to set up is

4872
02:36:30,399 --> 02:36:32,880
our authorization API key. And what we

4873
02:36:32,880 --> 02:36:34,399
could do is set this up in here as a

4874
02:36:34,399 --> 02:36:36,399
generic credential type and save it. But

4875
02:36:36,399 --> 02:36:37,359
right now we're just going to keep

4876
02:36:37,359 --> 02:36:38,880
things as simple as possible where we

4877
02:36:38,880 --> 02:36:40,319
imported the curl. And now I'm just

4878
02:36:40,319 --> 02:36:41,359
going to show you where to plug in

4879
02:36:41,359 --> 02:36:43,280
little things. So we have to go back

4880
02:36:43,280 --> 02:36:45,120
over to Perplexity and we need to go get

4881
02:36:45,120 --> 02:36:46,479
an API key. So I'm going to come over

4882
02:36:46,479 --> 02:36:47,680
here to the left and I'm going to click

4883
02:36:47,680 --> 02:36:49,840
on my settings. And hopefully in here

4884
02:36:49,840 --> 02:36:51,439
we're able to find where our API key

4885
02:36:51,439 --> 02:36:53,280
lives. Now we can see in the bottom left

4886
02:36:53,280 --> 02:36:55,359
over here we have API keys. And what I'm

4887
02:36:55,359 --> 02:36:56,479
going to do is come in here and just

4888
02:36:56,479 --> 02:36:58,240
create a new secret key. And we just got

4889
02:36:58,240 --> 02:36:59,520
a new one generated. So I'm just going

4890
02:36:59,520 --> 02:37:01,840
to click on this button, click on copy,

4891
02:37:01,840 --> 02:37:03,760
and all we have to do is replace the

4892
02:37:03,760 --> 02:37:05,439
word right here that says token. So I'm

4893
02:37:05,439 --> 02:37:07,040
just going to delete that. I'm going to

4894
02:37:07,040 --> 02:37:08,399
make sure to leave a space after the

4895
02:37:08,399 --> 02:37:10,080
word bearer. And I'm going to paste in

4896
02:37:10,080 --> 02:37:12,640
my Perplexity API key. So now we should

4897
02:37:12,640 --> 02:37:14,560
be connected. And now what we need to do

4898
02:37:14,560 --> 02:37:16,080
is we need to set up the actual body

4899
02:37:16,080 --> 02:37:17,840
request. So if I go back into the

4900
02:37:17,840 --> 02:37:19,680
documentation, we can see this is

4901
02:37:19,680 --> 02:37:21,040
basically what we're sending over. So

4902
02:37:21,040 --> 02:37:23,040
that first thing is a model, which is

4903
02:37:23,040 --> 02:37:24,479
the name of the model that will complete

4904
02:37:24,479 --> 02:37:26,560
your prompt. And if we wanted to look at

4905
02:37:26,560 --> 02:37:27,840
different models, we could click into

4906
02:37:27,840 --> 02:37:29,680
here and look at other supported models

4907
02:37:29,680 --> 02:37:31,439
from Perplexity. So it took us to the

4908
02:37:31,439 --> 02:37:32,720
screen. We click on models, and we can

4909
02:37:32,720 --> 02:37:35,359
see we have Sonar Pro or Sonar. We have

4910
02:37:35,359 --> 02:37:37,120
Sonar Deep Research. We have some

4911
02:37:37,120 --> 02:37:38,720
reasoning models as well. But just to

4912
02:37:38,720 --> 02:37:40,000
keep things simple, I'm going to stick

4913
02:37:40,000 --> 02:37:41,520
with the default model right now, which

4914
02:37:41,520 --> 02:37:43,680
is just sonar. Then we have an object

4915
02:37:43,680 --> 02:37:45,439
that we're sending over, which is

4916
02:37:45,439 --> 02:37:47,359
messages. And within the messages

4917
02:37:47,359 --> 02:37:49,600
object, we have a few things. So first

4918
02:37:49,600 --> 02:37:51,120
of all we're sending over content which

4919
02:37:51,120 --> 02:37:52,960
is the contents of the message in turn

4920
02:37:52,960 --> 02:37:54,960
of conversation. It can be in a string

4921
02:37:54,960 --> 02:37:57,359
or an array of parts. And then we have a

4922
02:37:57,359 --> 02:37:58,800
role which is going to be the role of

4923
02:37:58,800 --> 02:38:00,640
the speaker in the conversation. And we

4924
02:38:00,640 --> 02:38:03,280
have available options system user or

4925
02:38:03,280 --> 02:38:05,200
assistant. So what you can see in our

4926
02:38:05,200 --> 02:38:06,720
request is that we're sending over a

4927
02:38:06,720 --> 02:38:08,479
system message as well as a user

4928
02:38:08,479 --> 02:38:10,000
message. And the system message is

4929
02:38:10,000 --> 02:38:11,359
basically the instructions for how this

4930
02:38:11,359 --> 02:38:13,920
AI model on perplexity should act. And

4931
02:38:13,920 --> 02:38:15,760
then the user message is our dynamic

4932
02:38:15,760 --> 02:38:17,439
search query that is going to change

4933
02:38:17,439 --> 02:38:19,280
every time. And if we go back into the

4934
02:38:19,280 --> 02:38:20,640
documentation, we can see that there are

4935
02:38:20,640 --> 02:38:22,399
a few other things we could add, but we

4936
02:38:22,399 --> 02:38:24,240
don't have to. We could tell Perplexity

4937
02:38:24,240 --> 02:38:26,000
what is the max tokens we want to use,

4938
02:38:26,000 --> 02:38:27,920
what is the temperature we want to use.

4939
02:38:27,920 --> 02:38:30,000
We could have it only search for things

4940
02:38:30,000 --> 02:38:32,560
in the past week or day. So, this

4941
02:38:32,560 --> 02:38:34,240
documentation is basically going to be

4942
02:38:34,240 --> 02:38:36,000
all the filters and settings that you

4943
02:38:36,000 --> 02:38:38,000
have access to in order to customize the

4944
02:38:38,000 --> 02:38:39,560
type of results that you want to get

4945
02:38:39,560 --> 02:38:41,920
back. But, like I said, keeping this one

4946
02:38:41,920 --> 02:38:43,200
really simple. We just want to search

4947
02:38:43,200 --> 02:38:45,040
the web. All I'm going to do is keep it

4948
02:38:45,040 --> 02:38:46,720
as is. And if I disconnect this real

4949
02:38:46,720 --> 02:38:48,880
quick and we come in and test step, it's

4950
02:38:48,880 --> 02:38:49,920
basically going to be searching

4951
02:38:49,920 --> 02:38:51,680
perplexity for how many stars are there

4952
02:38:51,680 --> 02:38:54,319
in our galaxy. And then the AI model of

4953
02:38:54,319 --> 02:38:56,240
sonar is the one that's going to grab

4954
02:38:56,240 --> 02:38:58,399
all of these five sources and it's going

4955
02:38:58,399 --> 02:39:00,160
to answer us. And right here it says the

4956
02:39:00,160 --> 02:39:02,399
Milky Way galaxy, which is our home

4957
02:39:02,399 --> 02:39:04,560
galaxy, is estimated to contain between

4958
02:39:04,560 --> 02:39:06,479
100 billion and 400 billion stars. This

4959
02:39:06,479 --> 02:39:08,080
range is due to the difficulty blah blah

4960
02:39:08,080 --> 02:39:09,439
blah blah blah. So that's basically how

4961
02:39:09,439 --> 02:39:11,359
it was able to answer us because it used

4962
02:39:11,359 --> 02:39:14,160
an AI model called sonar. So now if we

4963
02:39:14,160 --> 02:39:15,439
wanted to make this search a little bit

4964
02:39:15,439 --> 02:39:17,600
more dynamic, we could basically plug

4965
02:39:17,600 --> 02:39:19,439
this in and you can see in here what I'm

4966
02:39:19,439 --> 02:39:20,880
doing is I'm just setting a search term.

4967
02:39:20,880 --> 02:39:23,280
So let's test this step. What happens is

4968
02:39:23,280 --> 02:39:25,040
the output of this node is a research

4969
02:39:25,040 --> 02:39:27,200
term. Then we could reference that

4970
02:39:27,200 --> 02:39:29,359
variable of research term right in here

4971
02:39:29,359 --> 02:39:31,280
in our actual body request to

4972
02:39:31,280 --> 02:39:33,600
perplexity. So I would delete this fixed

4973
02:39:33,600 --> 02:39:35,040
message which is how many stars are

4974
02:39:35,040 --> 02:39:36,880
there in our galaxy. And all I would do

4975
02:39:36,880 --> 02:39:38,560
is I'd drag in research term from the

4976
02:39:38,560 --> 02:39:40,880
left, put it in between the two quotes,

4977
02:39:40,880 --> 02:39:43,040
and now it's coming over dynamically as

4978
02:39:43,040 --> 02:39:45,040
anthropic latest developments. And all

4979
02:39:45,040 --> 02:39:47,200
I'd have to do now is hit test step. And

4980
02:39:47,200 --> 02:39:49,200
we will get an answer from Perplexity

4981
02:39:49,200 --> 02:39:51,040
about Anthropic's recent developments.

4982
02:39:51,040 --> 02:39:52,720
There we go. It just came back. We can

4983
02:39:52,720 --> 02:39:54,080
see there's five different sources right

4984
02:39:54,080 --> 02:39:55,600
here. It went to Anthropic, it went to

4985
02:39:55,600 --> 02:39:57,680
YouTube, it went to TechCrunch. And what

4986
02:39:57,680 --> 02:40:00,880
we get is that today, May 22nd, so real

4987
02:40:00,880 --> 02:40:03,680
time information, Claude Opus 4 was

4988
02:40:03,680 --> 02:40:05,600
released. And that literally came out

4989
02:40:05,600 --> 02:40:07,359
like 2 or 3 hours ago. So that's how we

4990
02:40:07,359 --> 02:40:09,040
know this is searching the web in real

4991
02:40:09,040 --> 02:40:11,120
time. And then all we'd have to do is

4992
02:40:11,120 --> 02:40:12,640
have, you know, maybe an AI model is

4993
02:40:12,640 --> 02:40:14,080
changing our search term or maybe we're

4994
02:40:14,080 --> 02:40:15,600
pulling from a Google sheet with a bunch

4995
02:40:15,600 --> 02:40:17,200
of different topics we need to research.

4996
02:40:17,200 --> 02:40:18,720
But whatever it is, as long as we are

4997
02:40:18,720 --> 02:40:21,040
passing over that variable, this actual

4998
02:40:21,040 --> 02:40:22,880
search result from Perplexity is going

4999
02:40:22,880 --> 02:40:25,280
to change every single time. And that's

5000
02:40:25,280 --> 02:40:26,479
the whole point of variables, right?

5001
02:40:26,479 --> 02:40:28,560
They they vary. They're dynamic. So, I

5002
02:40:28,560 --> 02:40:30,080
know that one was quick, but Perplexity

5003
02:40:30,080 --> 02:40:32,000
is a super super versatile tool and

5004
02:40:32,000 --> 02:40:33,280
probably an API that you're going to be

5005
02:40:33,280 --> 02:40:35,120
calling a ton of times. So, just wanted

5006
02:40:35,120 --> 02:40:38,080
to make sure I threw that in

5007
02:40:38,520 --> 02:40:40,960
there. So, Firecall is going to allow us

5008
02:40:40,960 --> 02:40:43,280
to turn any website into LLM ready data

5009
02:40:43,280 --> 02:40:45,120
in a matter of seconds. And as you can

5010
02:40:45,120 --> 02:40:46,880
see right here, it's also open source.

5011
02:40:46,880 --> 02:40:48,240
So, once you get over to Firecol, click

5012
02:40:48,240 --> 02:40:49,520
on this button and you'll be able to get

5013
02:40:49,520 --> 02:40:51,600
500 free credits to play around with. As

5014
02:40:51,600 --> 02:40:52,560
you can see, there's four different

5015
02:40:52,560 --> 02:40:54,080
things we can do with Firecrawl. We can

5016
02:40:54,080 --> 02:40:57,120
scrape, we can crawl, we can map or we

5017
02:40:57,120 --> 02:40:59,280
can do this new extract which basically

5018
02:40:59,280 --> 02:41:01,040
means we can give firecraw a URL and

5019
02:41:01,040 --> 02:41:02,560
also a prompt like can you please

5020
02:41:02,560 --> 02:41:04,399
extract the company name and the

5021
02:41:04,399 --> 02:41:06,560
services they offer and an icebreaker

5022
02:41:06,560 --> 02:41:08,640
out of this URL. So there's some really

5023
02:41:08,640 --> 02:41:10,000
cool use cases that we can do with

5024
02:41:10,000 --> 02:41:11,600
firecrawl. So in this video we're going

5025
02:41:11,600 --> 02:41:13,120
to be mainly looking at extract, but I'm

5026
02:41:13,120 --> 02:41:14,080
also going to show you the difference

5027
02:41:14,080 --> 02:41:16,000
between scrape and extract. And we're

5028
02:41:16,000 --> 02:41:17,520
going to get into end and connect up so

5029
02:41:17,520 --> 02:41:18,720
you can see how this works. But the

5030
02:41:18,720 --> 02:41:20,080
playground is going to be a really good

5031
02:41:20,080 --> 02:41:21,439
place to understand the difference

5032
02:41:21,439 --> 02:41:23,520
between these different endpoints. All

5033
02:41:23,520 --> 02:41:25,120
right, so for the sake of this video,

5034
02:41:25,120 --> 02:41:26,240
this is the website we're going to be

5035
02:41:26,240 --> 02:41:27,600
looking at. It's called quotes to

5036
02:41:27,600 --> 02:41:29,200
scrape. And as you can see, it's got

5037
02:41:29,200 --> 02:41:30,720
like 10 on this first page and it also

5038
02:41:30,720 --> 02:41:32,080
has different pages of different

5039
02:41:32,080 --> 02:41:33,840
categories of quotes. And as you can

5040
02:41:33,840 --> 02:41:35,040
see, if we click into them, there are

5041
02:41:35,040 --> 02:41:36,319
different quotes. So what I'm going to

5042
02:41:36,319 --> 02:41:37,920
do is go back to the main screen and I'm

5043
02:41:37,920 --> 02:41:40,000
going to copy the URL of this website

5044
02:41:40,000 --> 02:41:41,760
and we're going to go into niten. We're

5045
02:41:41,760 --> 02:41:43,520
going to open up a new node, which is

5046
02:41:43,520 --> 02:41:45,600
going to be an HTTP request. And this is

5047
02:41:45,600 --> 02:41:47,200
just to show you what a standard get

5048
02:41:47,200 --> 02:41:49,359
request to a static website looks like.

5049
02:41:49,359 --> 02:41:51,520
So we're going to paste in the URL, hit

5050
02:41:51,520 --> 02:41:53,120
test step, and on the right hand side,

5051
02:41:53,120 --> 02:41:55,120
we're going to get all the HTML back

5052
02:41:55,120 --> 02:41:57,200
from the quotes to scrape website. Like

5053
02:41:57,200 --> 02:41:58,880
I said, what we're looking at here is a

5054
02:41:58,880 --> 02:42:00,640
nasty chunk of HTML. It's pretty hard

5055
02:42:00,640 --> 02:42:02,080
for us to read, but basically what's

5056
02:42:02,080 --> 02:42:04,160
going on here is this is the code that

5057
02:42:04,160 --> 02:42:06,080
goes to the website in order to have it

5058
02:42:06,080 --> 02:42:07,760
be styled and different fonts and

5059
02:42:07,760 --> 02:42:09,120
different colors. So right here, what

5060
02:42:09,120 --> 02:42:10,399
we're looking at is the entire first

5061
02:42:10,399 --> 02:42:12,240
page of this website. So if we were to

5062
02:42:12,240 --> 02:42:14,800
search for Harry, if I copy this, we go

5063
02:42:14,800 --> 02:42:17,520
back into edit and we control F this.

5064
02:42:17,520 --> 02:42:18,960
You can see there is the exact quote

5065
02:42:18,960 --> 02:42:20,560
that has the word Harry. So everything

5066
02:42:20,560 --> 02:42:22,080
from the website's in here, it's just

5067
02:42:22,080 --> 02:42:23,920
wrapped up in kind of an ugly chunk of

5068
02:42:23,920 --> 02:42:26,000
HTML. Now hopping back over to the

5069
02:42:26,000 --> 02:42:27,680
fireall playground using the scrape

5070
02:42:27,680 --> 02:42:30,080
endpoint, we can replace that same URL.

5071
02:42:30,080 --> 02:42:32,080
We'll run this and it's going to output

5072
02:42:32,080 --> 02:42:33,760
markdown formatting. So now we can see

5073
02:42:33,760 --> 02:42:35,280
we actually have everything we're

5074
02:42:35,280 --> 02:42:36,800
looking for with a different quotes and

5075
02:42:36,800 --> 02:42:39,680
it's a lot more readable for a human. So

5076
02:42:39,680 --> 02:42:41,439
that's what a web scrape is, right? We

5077
02:42:41,439 --> 02:42:42,960
get the information back, whether that's

5078
02:42:42,960 --> 02:42:44,800
HTML or markdown, but then we would

5079
02:42:44,800 --> 02:42:46,080
typically feed that into some sort of

5080
02:42:46,080 --> 02:42:47,840
LLM in order to extract the information

5081
02:42:47,840 --> 02:42:49,760
we're looking for. In this case, we'd be

5082
02:42:49,760 --> 02:42:52,160
looking for different quotes. But what

5083
02:42:52,160 --> 02:42:53,840
we can do with extract is we can give it

5084
02:42:53,840 --> 02:42:56,319
the URL and then also say, hey, get all

5085
02:42:56,319 --> 02:42:57,840
of the quotes on here. And using this

5086
02:42:57,840 --> 02:42:59,920
method, we can say, not just these first

5087
02:42:59,920 --> 02:43:02,080
10 on this page. I want you to crawl

5088
02:43:02,080 --> 02:43:03,439
through the whole site and basically get

5089
02:43:03,439 --> 02:43:04,720
all of these quotes, all of these

5090
02:43:04,720 --> 02:43:06,160
quotes, all of these quotes, all of

5091
02:43:06,160 --> 02:43:07,680
these quotes. So it's going to be really

5092
02:43:07,680 --> 02:43:09,040
cool. So I'm going to show how this

5093
02:43:09,040 --> 02:43:10,479
works in firecrawl and then we're going

5094
02:43:10,479 --> 02:43:11,920
to plug it into noden. All right. So

5095
02:43:11,920 --> 02:43:13,040
what we're doing here is we're saying

5096
02:43:13,040 --> 02:43:14,800
extract all of the quotes and authors

5097
02:43:14,800 --> 02:43:16,560
from this website. I gave it the website

5098
02:43:16,560 --> 02:43:18,080
and now what it's doing is it's going to

5099
02:43:18,080 --> 02:43:19,439
generate the different parameters that

5100
02:43:19,439 --> 02:43:22,240
the LLM will be looking to extract out

5101
02:43:22,240 --> 02:43:24,640
of the content of the website. Okay. So

5102
02:43:24,640 --> 02:43:26,080
here's the run we're about to execute.

5103
02:43:26,080 --> 02:43:27,840
We have the URL and then we have our

5104
02:43:27,840 --> 02:43:29,840
schema for what the LLM is going to be

5105
02:43:29,840 --> 02:43:31,760
looking for. And it's looking for text

5106
02:43:31,760 --> 02:43:33,040
which would be the quote and it's a

5107
02:43:33,040 --> 02:43:34,399
string. And then it's also going to be

5108
02:43:34,399 --> 02:43:35,760
looking for the author of that quote

5109
02:43:35,760 --> 02:43:37,280
which is also a string. And then the

5110
02:43:37,280 --> 02:43:39,280
prompt we're feeding here to the LLM is

5111
02:43:39,280 --> 02:43:40,800
extract all quotes and their

5112
02:43:40,800 --> 02:43:43,040
corresponding authors from the website.

5113
02:43:43,040 --> 02:43:44,160
So we're going to hit run and we're

5114
02:43:44,160 --> 02:43:46,000
going to see that it's not only going to

5115
02:43:46,000 --> 02:43:48,240
go to that first URL, it's basically

5116
02:43:48,240 --> 02:43:49,760
going to take that main domain, which is

5117
02:43:49,760 --> 02:43:51,439
quotes to scrape.com, and it's going to

5118
02:43:51,439 --> 02:43:52,960
be crawling through the other sections

5119
02:43:52,960 --> 02:43:54,960
of this website in order to come back

5120
02:43:54,960 --> 02:43:56,720
and scrape all the quotes on there.

5121
02:43:56,720 --> 02:43:58,560
Also, quick plug, go ahead and use code

5122
02:43:58,560 --> 02:44:00,720
herk10 to get 10% off the first 12

5123
02:44:00,720 --> 02:44:03,040
months on your Firecrawl plan. Okay, so

5124
02:44:03,040 --> 02:44:04,560
it just finished up. As you can see, we

5125
02:44:04,560 --> 02:44:07,680
have 79 quotes. So down here we have a

5126
02:44:07,680 --> 02:44:09,760
JSON response where it's going to be an

5127
02:44:09,760 --> 02:44:11,359
object called quotes. And in there we

5128
02:44:11,359 --> 02:44:12,640
have a bunch of different items which

5129
02:44:12,640 --> 02:44:15,040
has you know text author text author

5130
02:44:15,040 --> 02:44:17,120
text author and we have pretty much

5131
02:44:17,120 --> 02:44:19,040
everything from that website now. Okay

5132
02:44:19,040 --> 02:44:20,640
cool. But what we want to do is look at

5133
02:44:20,640 --> 02:44:22,880
how we can do this in n so that we have

5134
02:44:22,880 --> 02:44:25,600
you know a list of 20 30 40 URLs that we

5135
02:44:25,600 --> 02:44:27,520
want to extract information from. We can

5136
02:44:27,520 --> 02:44:28,800
just loop through and send off that

5137
02:44:28,800 --> 02:44:30,479
automation rather than having to come in

5138
02:44:30,479 --> 02:44:32,960
here and type that out in firecrawl.

5139
02:44:32,960 --> 02:44:33,920
Okay. So what we're going to do is go

5140
02:44:33,920 --> 02:44:35,520
back into edit end. And I apologize

5141
02:44:35,520 --> 02:44:36,800
because there may be some jumping around

5142
02:44:36,800 --> 02:44:38,240
here, but we're basically just gonna

5143
02:44:38,240 --> 02:44:40,560
clear out this HTTP request and grab a

5144
02:44:40,560 --> 02:44:42,399
new one. Now, what we're going to do is

5145
02:44:42,399 --> 02:44:43,840
we want to go into Firecrawl's

5146
02:44:43,840 --> 02:44:45,439
documentation. So, all we have to do is

5147
02:44:45,439 --> 02:44:47,200
import the curl command for the extract

5148
02:44:47,200 --> 02:44:48,720
endpoint rather than trying to figure

5149
02:44:48,720 --> 02:44:49,760
out how to fill out these different

5150
02:44:49,760 --> 02:44:51,680
parameters. So, back in Firecrawl, once

5151
02:44:51,680 --> 02:44:53,200
you set up your account, up in the top

5152
02:44:53,200 --> 02:44:54,640
right, you'll see a button called docs.

5153
02:44:54,640 --> 02:44:56,240
You want to click into there. And now,

5154
02:44:56,240 --> 02:44:57,920
we can see a quick start guide. We have

5155
02:44:57,920 --> 02:44:59,120
different endpoints. And what we're

5156
02:44:59,120 --> 02:45:00,399
going to do is on the left, scroll down

5157
02:45:00,399 --> 02:45:03,040
to features and click on extract. And

5158
02:45:03,040 --> 02:45:04,560
this is what we're looking for. So,

5159
02:45:04,560 --> 02:45:05,840
we've got some information here. The

5160
02:45:05,840 --> 02:45:07,200
first thing to look at is when we're

5161
02:45:07,200 --> 02:45:08,880
using the extract, you can extract

5162
02:45:08,880 --> 02:45:10,640
structured data from one or multiple

5163
02:45:10,640 --> 02:45:12,880
URLs, including wild cards. So, what we

5164
02:45:12,880 --> 02:45:14,560
did was we didn't just scrape one single

5165
02:45:14,560 --> 02:45:16,240
page. We basically scraped through all

5166
02:45:16,240 --> 02:45:18,720
of the pages that had the main base

5167
02:45:18,720 --> 02:45:21,520
domain of um quotescrape.com or

5168
02:45:21,520 --> 02:45:23,359
something like that. And if you put a

5169
02:45:23,359 --> 02:45:25,040
asterk after it, it's going to basically

5170
02:45:25,040 --> 02:45:26,319
mean this is a wild card and it's going

5171
02:45:26,319 --> 02:45:28,319
to go scrape all pages that are after it

5172
02:45:28,319 --> 02:45:30,720
rather than just scraping this one

5173
02:45:30,720 --> 02:45:33,200
predefined page. As you can see right

5174
02:45:33,200 --> 02:45:34,640
here, it'll automatically crawl and

5175
02:45:34,640 --> 02:45:36,640
parse all the URLs it can discover, then

5176
02:45:36,640 --> 02:45:38,560
extract the requested data. And we can

5177
02:45:38,560 --> 02:45:39,840
see that's how it worked because if we

5178
02:45:39,840 --> 02:45:41,279
come back into the request we just made,

5179
02:45:41,279 --> 02:45:42,800
we can see right here that it added a

5180
02:45:42,800 --> 02:45:45,080
slash with an asterisk after quotes to

5181
02:45:45,080 --> 02:45:47,120
scrape.com. Okay. Anyway, so what we're

5182
02:45:47,120 --> 02:45:48,880
looking for here is this curl command.

5183
02:45:48,880 --> 02:45:50,479
This is basically going to fill out the

5184
02:45:50,479 --> 02:45:51,680
method, which is going to be a post

5185
02:45:51,680 --> 02:45:52,960
request. It's going to fill out the

5186
02:45:52,960 --> 02:45:54,560
endpoint. It'll fill out the content

5187
02:45:54,560 --> 02:45:56,240
type, and it'll show us how to set up

5188
02:45:56,240 --> 02:45:58,000
our authorization. And then we'll have a

5189
02:45:58,000 --> 02:45:59,520
body request that we'll need to make

5190
02:45:59,520 --> 02:46:02,240
some minor changes to. So in the top

5191
02:46:02,240 --> 02:46:03,680
right I'm going to click copy and I'm

5192
02:46:03,680 --> 02:46:05,120
going to come back into edit end. Hit

5193
02:46:05,120 --> 02:46:07,120
import curl. Paste that in there. Hit

5194
02:46:07,120 --> 02:46:08,960
import. And as you can see everything

5195
02:46:08,960 --> 02:46:10,800
pretty much just got populated. So like

5196
02:46:10,800 --> 02:46:12,479
I said the method is going to be a post.

5197
02:46:12,479 --> 02:46:14,240
We have the endpoint already set up. And

5198
02:46:14,240 --> 02:46:15,439
what I want to do is show you guys how

5199
02:46:15,439 --> 02:46:16,960
to set up this authorization so that we

5200
02:46:16,960 --> 02:46:18,800
can keep it saved forever rather than

5201
02:46:18,800 --> 02:46:20,560
having to put it in here in the

5202
02:46:20,560 --> 02:46:22,560
configuration panel every time. So first

5203
02:46:22,560 --> 02:46:23,760
of all, head back over to your

5204
02:46:23,760 --> 02:46:26,000
firecrawl. Go to API keys on the lefth

5205
02:46:26,000 --> 02:46:27,359
hand side. And you're just going to want

5206
02:46:27,359 --> 02:46:29,600
to copy that API key. So once you have

5207
02:46:29,600 --> 02:46:31,600
that copied, head back into NN. And now

5208
02:46:31,600 --> 02:46:33,040
let's look at how we actually set this

5209
02:46:33,040 --> 02:46:35,359
up. So typically what you do is we have

5210
02:46:35,359 --> 02:46:37,040
this as a header parameter. Not all

5211
02:46:37,040 --> 02:46:38,640
authorizations are headers, but this one

5212
02:46:38,640 --> 02:46:41,760
is a header. And the key or the name is

5213
02:46:41,760 --> 02:46:44,240
authorization and the value is bearer

5214
02:46:44,240 --> 02:46:46,560
space your API key. So what you'd

5215
02:46:46,560 --> 02:46:48,160
typically do is just paste in your API

5216
02:46:48,160 --> 02:46:50,160
key right there and you'd be good to go.

5217
02:46:50,160 --> 02:46:51,439
But what we want to do is we want to

5218
02:46:51,439 --> 02:46:53,359
save our firecrawl credential the same

5219
02:46:53,359 --> 02:46:54,800
way you'd save, you know, a Google

5220
02:46:54,800 --> 02:46:58,080
Sheets credential or a Slack credential.

5221
02:46:58,080 --> 02:46:58,960
So, we're going to come into

5222
02:46:58,960 --> 02:47:01,279
authentication, click on generic. We're

5223
02:47:01,279 --> 02:47:02,960
going to click on generic type and

5224
02:47:02,960 --> 02:47:04,319
choose header because we know down here

5225
02:47:04,319 --> 02:47:06,160
it's a header off. And then you can see

5226
02:47:06,160 --> 02:47:07,520
I have some other credentials already

5227
02:47:07,520 --> 02:47:09,359
saved. We're going to create a new one.

5228
02:47:09,359 --> 02:47:11,040
I'm just going to name this firecrawl to

5229
02:47:11,040 --> 02:47:12,880
keep ourselves organized. For the name,

5230
02:47:12,880 --> 02:47:14,560
we're going to put authorization. And

5231
02:47:14,560 --> 02:47:15,680
for the value, we're going to type

5232
02:47:15,680 --> 02:47:18,319
bearer with a capital B space and then

5233
02:47:18,319 --> 02:47:20,000
paste in our API key. And we'll hit

5234
02:47:20,000 --> 02:47:21,439
save. And this is going to be the exact

5235
02:47:21,439 --> 02:47:23,760
same thing that we just did down below,

5236
02:47:23,760 --> 02:47:25,600
except for now we have it saved. So, we

5237
02:47:25,600 --> 02:47:27,520
can actually flick this field off. We

5238
02:47:27,520 --> 02:47:28,800
don't need to send headers because we're

5239
02:47:28,800 --> 02:47:30,560
sending them right here. And now we just

5240
02:47:30,560 --> 02:47:32,560
need to figure out how to configure this

5241
02:47:32,560 --> 02:47:34,399
body request. Okay, so I'm going to

5242
02:47:34,399 --> 02:47:35,680
change this to an expression and open it

5243
02:47:35,680 --> 02:47:37,120
up just so we can take a look at it. The

5244
02:47:37,120 --> 02:47:38,640
first thing we notice is that by default

5245
02:47:38,640 --> 02:47:40,319
there are three URLs in here that we

5246
02:47:40,319 --> 02:47:41,920
would be extracting from. We don't want

5247
02:47:41,920 --> 02:47:42,960
to do that here. So I'm going to grab

5248
02:47:42,960 --> 02:47:44,240
everything within the array, but I'm

5249
02:47:44,240 --> 02:47:45,840
going to keep the two quotation marks.

5250
02:47:45,840 --> 02:47:47,279
Now all we need to do is put the URL

5251
02:47:47,279 --> 02:47:48,399
that we're looking to extract

5252
02:47:48,399 --> 02:47:49,920
information from in between these

5253
02:47:49,920 --> 02:47:51,760
quotation marks. So here I just put in

5254
02:47:51,760 --> 02:47:53,760
the quotes to scrape.com. But what we

5255
02:47:53,760 --> 02:47:55,200
want to do if you remember is we want to

5256
02:47:55,200 --> 02:47:57,120
put an asterisk after that so that it

5257
02:47:57,120 --> 02:47:59,680
will go and crawl all of the pages, not

5258
02:47:59,680 --> 02:48:01,040
just that first page and which would

5259
02:48:01,040 --> 02:48:02,800
only have like nine or 10 quotes. And

5260
02:48:02,800 --> 02:48:04,160
now the rest is going to be really easy

5261
02:48:04,160 --> 02:48:05,600
to configure because we already did this

5262
02:48:05,600 --> 02:48:07,120
in the playground. So we know exactly

5263
02:48:07,120 --> 02:48:08,640
what goes where. So I'm going to click

5264
02:48:08,640 --> 02:48:10,560
back into our playground example. First

5265
02:48:10,560 --> 02:48:11,680
thing is this is the quote that

5266
02:48:11,680 --> 02:48:13,600
firecross sent off. So I'm going to copy

5267
02:48:13,600 --> 02:48:15,600
that. Go back and edit in and I'm just

5268
02:48:15,600 --> 02:48:17,200
going to replace the prompts right here.

5269
02:48:17,200 --> 02:48:18,720
We don't want the company mission blah

5270
02:48:18,720 --> 02:48:20,479
blah blah. We want to paste this in here

5271
02:48:20,479 --> 02:48:22,319
and we're looking to extract all quotes

5272
02:48:22,319 --> 02:48:24,160
and their corresponding authors from the

5273
02:48:24,160 --> 02:48:25,920
website. And then next is basically

5274
02:48:25,920 --> 02:48:27,760
telling the LLM, what are you pulling

5275
02:48:27,760 --> 02:48:30,160
back? So, we just told it it's pulling

5276
02:48:30,160 --> 02:48:31,760
back quotes and authors. So, we need to

5277
02:48:31,760 --> 02:48:33,120
actually make the schema down here in

5278
02:48:33,120 --> 02:48:36,080
the body request match the prompt. So,

5279
02:48:36,080 --> 02:48:37,520
all we have to do is go back into our

5280
02:48:37,520 --> 02:48:39,120
playground. Right here is the schema

5281
02:48:39,120 --> 02:48:40,720
that we sent over in our example. And

5282
02:48:40,720 --> 02:48:42,560
I'm just going to click on JSON view and

5283
02:48:42,560 --> 02:48:44,240
I'm going to copy this entire thing

5284
02:48:44,240 --> 02:48:46,240
which is wrapped up in curly braces.

5285
02:48:46,240 --> 02:48:48,000
We'll come back into end and we'll start

5286
02:48:48,000 --> 02:48:51,120
after schema colon space. Replace all

5287
02:48:51,120 --> 02:48:54,000
this with what we just had in um fire

5288
02:48:54,000 --> 02:48:55,840
crawl. And actually I think I've noticed

5289
02:48:55,840 --> 02:48:57,439
the way that this copied over. It's not

5290
02:48:57,439 --> 02:48:58,640
going to work. So let me show you guys

5291
02:48:58,640 --> 02:49:00,080
that real quick. If we hit test step,

5292
02:49:00,080 --> 02:49:01,600
it's going to say JSON parameter needs

5293
02:49:01,600 --> 02:49:03,279
to be valid JSON. So what I'm going to

5294
02:49:03,279 --> 02:49:05,359
do is I'm going to copy all of this. Now

5295
02:49:05,359 --> 02:49:06,960
I came into chat GBT and I'm just saying

5296
02:49:06,960 --> 02:49:08,800
fix this JSON. What it's going to do is

5297
02:49:08,800 --> 02:49:10,560
it's going to just basically push these

5298
02:49:10,560 --> 02:49:12,080
over. When you copy it over from

5299
02:49:12,080 --> 02:49:14,000
Firecrol, it kind of aligns them on the

5300
02:49:14,000 --> 02:49:15,439
left, but you don't want that. So, as

5301
02:49:15,439 --> 02:49:16,479
you can see, it just basically pushed

5302
02:49:16,479 --> 02:49:18,160
everything over. We'll copy this into

5303
02:49:18,160 --> 02:49:20,319
our Nit end right there. And all it did

5304
02:49:20,319 --> 02:49:21,920
was bump everything over once. And now

5305
02:49:21,920 --> 02:49:23,600
we should be good to go. So, real quick

5306
02:49:23,600 --> 02:49:24,800
before we test this out, I'm just going

5307
02:49:24,800 --> 02:49:27,200
to call this extract. And then we'll hit

5308
02:49:27,200 --> 02:49:28,720
test step. And we should see that it's

5309
02:49:28,720 --> 02:49:30,000
going to be pulling. And it's going to

5310
02:49:30,000 --> 02:49:33,040
give us a message that says um true. And

5311
02:49:33,040 --> 02:49:34,720
it gives us an ID. And so now what we

5312
02:49:34,720 --> 02:49:37,279
need to do next is pull this ID back to

5313
02:49:37,279 --> 02:49:38,800
see if our request has been fulfilled

5314
02:49:38,800 --> 02:49:40,960
yet. So I'm back in the documentation.

5315
02:49:40,960 --> 02:49:43,040
And now we are going to look at down

5316
02:49:43,040 --> 02:49:45,120
here asynchronous extraction and status

5317
02:49:45,120 --> 02:49:46,880
checking. So this is how we check the

5318
02:49:46,880 --> 02:49:48,960
status of a request. As you saw, we just

5319
02:49:48,960 --> 02:49:51,040
made one. So here I'm going to click on

5320
02:49:51,040 --> 02:49:52,800
copy this curl command. We're going to

5321
02:49:52,800 --> 02:49:54,240
come back and end it in and we're going

5322
02:49:54,240 --> 02:49:56,640
to add another HTTP request and we're

5323
02:49:56,640 --> 02:49:57,920
going to import that in there. And you

5324
02:49:57,920 --> 02:50:00,000
can see this one is going to be a get

5325
02:50:00,000 --> 02:50:01,120
command. It's going to have a different

5326
02:50:01,120 --> 02:50:02,800
endpoint. And what we need to do if you

5327
02:50:02,800 --> 02:50:04,800
look back at the documentation is at the

5328
02:50:04,800 --> 02:50:06,960
end of the extract slash we have to put

5329
02:50:06,960 --> 02:50:09,520
the extract ID that we're looking to

5330
02:50:09,520 --> 02:50:13,279
check the status of. So back in n the ID

5331
02:50:13,279 --> 02:50:14,720
is going to be coming from the left hand

5332
02:50:14,720 --> 02:50:16,720
side the previous node every time. So

5333
02:50:16,720 --> 02:50:18,720
I'm just going to change the URL field

5334
02:50:18,720 --> 02:50:21,439
to an expression. Put a backslash and

5335
02:50:21,439 --> 02:50:23,200
then I'm going to grab the ID pull it

5336
02:50:23,200 --> 02:50:24,960
right in there and we're good to go.

5337
02:50:24,960 --> 02:50:26,880
Except we need to set up our credential.

5338
02:50:26,880 --> 02:50:28,080
And this is why it's great. We already

5339
02:50:28,080 --> 02:50:30,640
set this up as a generic as a header.

5340
02:50:30,640 --> 02:50:32,640
And now we can just pull in easily our

5341
02:50:32,640 --> 02:50:35,760
fire crawl off and hit test step. So

5342
02:50:35,760 --> 02:50:37,680
what happens now is our request hasn't

5343
02:50:37,680 --> 02:50:39,439
been done yet. So as you can see it

5344
02:50:39,439 --> 02:50:41,680
comes back as processing and the data is

5345
02:50:41,680 --> 02:50:43,200
an empty array. So what we're going to

5346
02:50:43,200 --> 02:50:44,479
set up real quick is something called

5347
02:50:44,479 --> 02:50:46,080
polling where we're basically checking

5348
02:50:46,080 --> 02:50:48,000
in on a specific ID which is this one

5349
02:50:48,000 --> 02:50:50,000
right here. And we're going to check and

5350
02:50:50,000 --> 02:50:51,840
if it's if it's empty, if the data field

5351
02:50:51,840 --> 02:50:53,760
is empty, then that means we're going to

5352
02:50:53,760 --> 02:50:55,200
wait a certain amount of time and come

5353
02:50:55,200 --> 02:50:56,880
back and try again. So after the

5354
02:50:56,880 --> 02:50:59,600
request, I'm going to add a if. So, this

5355
02:50:59,600 --> 02:51:00,720
is just basically going to help us

5356
02:51:00,720 --> 02:51:02,479
create our filter. So, we're dragging in

5357
02:51:02,479 --> 02:51:04,080
JSON.data, which as you can see is an

5358
02:51:04,080 --> 02:51:06,399
empty array, and we're just going to say

5359
02:51:06,399 --> 02:51:08,800
is empty. But one thing you have to keep

5360
02:51:08,800 --> 02:51:10,560
in mind is this doesn't match. As you

5361
02:51:10,560 --> 02:51:12,720
can see, we're dragging in an array, and

5362
02:51:12,720 --> 02:51:14,160
we were trying to do a filter of a

5363
02:51:14,160 --> 02:51:16,240
string. So, we have to go to array and

5364
02:51:16,240 --> 02:51:18,000
then say is empty. And we'll hit test

5365
02:51:18,000 --> 02:51:20,560
step. And this is going to say true. The

5366
02:51:20,560 --> 02:51:23,439
data field is empty. And so, if true,

5367
02:51:23,439 --> 02:51:24,560
what we want to do is we're going to add

5368
02:51:24,560 --> 02:51:26,960
a wait. And this will wait for, you

5369
02:51:26,960 --> 02:51:28,399
know, let's in in this case we'll just

5370
02:51:28,399 --> 02:51:30,000
say five seconds. So if we hit test

5371
02:51:30,000 --> 02:51:31,319
step, it's going to wait for five

5372
02:51:31,319 --> 02:51:33,760
seconds. And um I wish actually I

5373
02:51:33,760 --> 02:51:35,520
switched the logic so that this would be

5374
02:51:35,520 --> 02:51:37,439
on the bottom, but whatever. And then we

5375
02:51:37,439 --> 02:51:38,800
would just drag this right back into

5376
02:51:38,800 --> 02:51:41,439
here. And we would try it again. So now

5377
02:51:41,439 --> 02:51:43,200
after 5 seconds had passed or however

5378
02:51:43,200 --> 02:51:45,040
much time, we would try this again. And

5379
02:51:45,040 --> 02:51:46,479
now we can see that we have our item

5380
02:51:46,479 --> 02:51:48,319
back and the data field is no longer

5381
02:51:48,319 --> 02:51:50,319
empty because we have our quotes object

5382
02:51:50,319 --> 02:51:53,359
which has 83 quotes. So even got more

5383
02:51:53,359 --> 02:51:54,560
than that time we did it in the

5384
02:51:54,560 --> 02:51:56,080
playground. And I'm thinking this is

5385
02:51:56,080 --> 02:51:57,520
just because, you know, the extract is

5386
02:51:57,520 --> 02:51:59,600
kind of still in beta. So it may not be

5387
02:51:59,600 --> 02:52:01,600
super consistent, but that's still way

5388
02:52:01,600 --> 02:52:03,520
better than if we were to just do a

5389
02:52:03,520 --> 02:52:05,120
simple getit request. And then as you

5390
02:52:05,120 --> 02:52:07,200
can see now, if we ran this next step,

5391
02:52:07,200 --> 02:52:08,520
this would come

5392
02:52:08,520 --> 02:52:11,279
out. Ah, but this is interesting. So

5393
02:52:11,279 --> 02:52:12,960
before it knows what it's pulling back,

5394
02:52:12,960 --> 02:52:15,840
the JSON.data field is an array. And so

5395
02:52:15,840 --> 02:52:17,920
we're able to set up is the array empty?

5396
02:52:17,920 --> 02:52:20,000
But now it's an object. So we can't put

5397
02:52:20,000 --> 02:52:21,439
it through the same filter because we're

5398
02:52:21,439 --> 02:52:24,319
looking at a filter for an array. So

5399
02:52:24,319 --> 02:52:25,520
what I'm thinking here is we could set

5400
02:52:25,520 --> 02:52:27,920
up this continue using error output. So

5401
02:52:27,920 --> 02:52:29,359
because this this node would error, we

5402
02:52:29,359 --> 02:52:30,880
could hit test step and we could see now

5403
02:52:30,880 --> 02:52:33,359
it's going to go down the false branch.

5404
02:52:33,359 --> 02:52:34,720
And so this basically just means it's

5405
02:52:34,720 --> 02:52:36,080
going to let us continue moving through

5406
02:52:36,080 --> 02:52:37,520
the process. And we could do then

5407
02:52:37,520 --> 02:52:38,880
whatever we want to do down here.

5408
02:52:38,880 --> 02:52:40,240
Obviously this isn't perfect because I

5409
02:52:40,240 --> 02:52:41,680
just set this up to show you guys and

5410
02:52:41,680 --> 02:52:43,600
ran into that. But that's typically sort

5411
02:52:43,600 --> 02:52:45,279
of the way we would think is how can we

5412
02:52:45,279 --> 02:52:46,960
make this a little more dynamic because

5413
02:52:46,960 --> 02:52:49,040
it has to deal with empty arrays or

5414
02:52:49,040 --> 02:52:50,960
potentially full objects. Anyways, what

5415
02:52:50,960 --> 02:52:52,720
I wanted to show you guys now is back in

5416
02:52:52,720 --> 02:52:54,960
our request if we were to get rid of

5417
02:52:54,960 --> 02:52:56,479
this asterk. What would happen? So,

5418
02:52:56,479 --> 02:52:57,359
we're just going to run this whole

5419
02:52:57,359 --> 02:52:59,120
process again. I'll hit test workflow.

5420
02:52:59,120 --> 02:53:00,479
And now it's going to be sending that

5421
02:53:00,479 --> 02:53:04,399
request only to, you know, one URL

5422
02:53:04,399 --> 02:53:06,479
rather than the other one. Aha. And I'm

5423
02:53:06,479 --> 02:53:08,399
glad we are doing live testing because I

5424
02:53:08,399 --> 02:53:09,840
made the mistake of putting this in as

5425
02:53:09,840 --> 02:53:12,640
JSON ID which doesn't exist if we're

5426
02:53:12,640 --> 02:53:14,319
pulling from the weight node. So all we

5427
02:53:14,319 --> 02:53:16,160
have to do in here is get rid of JSON.

5428
02:53:16,160 --> 02:53:19,520
ID and pull in a basically a you know a

5429
02:53:19,520 --> 02:53:21,200
node reference variable. So we're going

5430
02:53:21,200 --> 02:53:23,200
to do two curly braces. We're going to

5431
02:53:23,200 --> 02:53:24,960
be pulling from the extract node. And

5432
02:53:24,960 --> 02:53:27,399
now we just want to say

5433
02:53:27,399 --> 02:53:29,920
item.json ID and we should be good to go

5434
02:53:29,920 --> 02:53:31,840
now. So I'm just going to refresh this

5435
02:53:31,840 --> 02:53:33,439
and we'll completely do it again. So

5436
02:53:33,439 --> 02:53:35,279
test workflow, we're doing the exact

5437
02:53:35,279 --> 02:53:36,960
same thing. It's not ready yet. So,

5438
02:53:36,960 --> 02:53:38,240
we're going to wait 5 seconds and then

5439
02:53:38,240 --> 02:53:40,160
we're going to go check again. We

5440
02:53:40,160 --> 02:53:41,520
hopefully should see, okay, it's not

5441
02:53:41,520 --> 02:53:42,880
ready still. So, we're going to wait

5442
02:53:42,880 --> 02:53:45,040
five more seconds. Come check again. And

5443
02:53:45,040 --> 02:53:46,720
then whenever it is ready now, as you

5444
02:53:46,720 --> 02:53:48,560
can see, it goes down this branch. And

5445
02:53:48,560 --> 02:53:50,160
we can see that we actually get our

5446
02:53:50,160 --> 02:53:52,080
items back. And what you see here is

5447
02:53:52,080 --> 02:53:54,080
that this time we only got 10 quotes.

5448
02:53:54,080 --> 02:53:55,520
Um, you know, it says nine, but

5449
02:53:55,520 --> 02:53:57,279
computers count from zero. But we only

5450
02:53:57,279 --> 02:54:00,640
got 10 quotes because um we didn't put

5451
02:54:00,640 --> 02:54:04,560
an asterisk after the URL. So, Firecrawl

5452
02:54:04,560 --> 02:54:05,920
didn't know I need to go scrape

5453
02:54:05,920 --> 02:54:07,920
everything out of this whole base URL.

5454
02:54:07,920 --> 02:54:09,439
I'm only going to be scraping this one

5455
02:54:09,439 --> 02:54:11,200
specific page, which is this one right

5456
02:54:11,200 --> 02:54:13,120
here, which does in fact only have 10

5457
02:54:13,120 --> 02:54:15,200
quotes. And by the way, super simple

5458
02:54:15,200 --> 02:54:16,479
template here, but if you want to try it

5459
02:54:16,479 --> 02:54:18,640
out and just plug in your API key and

5460
02:54:18,640 --> 02:54:20,399
different URLs, you can grab that in the

5461
02:54:20,399 --> 02:54:22,000
free school community. You'll hop in

5462
02:54:22,000 --> 02:54:23,200
there, you will click on YouTube

5463
02:54:23,200 --> 02:54:24,720
resources and click on the post

5464
02:54:24,720 --> 02:54:26,479
associated with this video, and you'll

5465
02:54:26,479 --> 02:54:28,160
have the JSON right there to download.

5466
02:54:28,160 --> 02:54:29,439
Once you download that, all you have to

5467
02:54:29,439 --> 02:54:31,439
do is import it from file right up here,

5468
02:54:31,439 --> 02:54:33,040
and you'll have the workflow. So,

5469
02:54:33,040 --> 02:54:34,479
there's a lot of cool use cases for

5470
02:54:34,479 --> 02:54:35,920
firecrawl. It'd be cool to be able to

5471
02:54:35,920 --> 02:54:38,560
pull from a a sheet, for example, of 30

5472
02:54:38,560 --> 02:54:40,880
or 40 or 50 URLs that we want to run

5473
02:54:40,880 --> 02:54:42,720
through and then update based on the

5474
02:54:42,720 --> 02:54:44,240
results. You could do some really cool

5475
02:54:44,240 --> 02:54:45,680
stuff here, like researching a ton of

5476
02:54:45,680 --> 02:54:47,359
companies and then having it also create

5477
02:54:47,359 --> 02:54:48,960
some initial outreach for you. So, I

5478
02:54:48,960 --> 02:54:50,000
hope you guys enjoyed that one.

5479
02:54:50,000 --> 02:54:51,760
Firecrawl is a super cool tool. There's

5480
02:54:51,760 --> 02:54:53,040
lots of functionality there and there's

5481
02:54:53,040 --> 02:54:55,279
lots of uses of AI in Firecrawl, which

5482
02:54:55,279 --> 02:54:56,800
is awesome. We're going to move into a

5483
02:54:56,800 --> 02:54:57,760
different tool that you can use to

5484
02:54:57,760 --> 02:54:59,279
scrape pretty much anything, which is

5485
02:54:59,279 --> 02:55:00,560
called Appify, which has a ton of

5486
02:55:00,560 --> 02:55:02,160
different actors, and you can scrape,

5487
02:55:02,160 --> 02:55:04,240
like I said, almost anything. So, let's

5488
02:55:04,240 --> 02:55:06,399
go into the setup video. So, Ampify is

5489
02:55:06,399 --> 02:55:08,160
like a marketplace for actors, which

5490
02:55:08,160 --> 02:55:09,600
essentially let us scrape anything on

5491
02:55:09,600 --> 02:55:10,880
the internet. As you can see right here,

5492
02:55:10,880 --> 02:55:12,960
we're able to explore 4,500 plus

5493
02:55:12,960 --> 02:55:14,800
pre-built actors for web scraping and

5494
02:55:14,800 --> 02:55:16,080
automation. And it's really not that

5495
02:55:16,080 --> 02:55:17,520
complicated. An actor is basically just

5496
02:55:17,520 --> 02:55:19,200
a predefined script that was already

5497
02:55:19,200 --> 02:55:20,720
built for us that we can just send off a

5498
02:55:20,720 --> 02:55:22,240
certain request to. So, you can think of

5499
02:55:22,240 --> 02:55:23,359
it like a virtual assistant where you're

5500
02:55:23,359 --> 02:55:24,960
saying, "Hey, I want you to I want to

5501
02:55:24,960 --> 02:55:26,720
use the Tik Tok virtual assistant and I

5502
02:55:26,720 --> 02:55:28,479
want you to scrape, you know, videos

5503
02:55:28,479 --> 02:55:30,720
that have the hashtag of AI content." Or

5504
02:55:30,720 --> 02:55:32,160
you could use the LinkedIn job scraper

5505
02:55:32,160 --> 02:55:33,840
and you could say, "I want to find jobs

5506
02:55:33,840 --> 02:55:35,680
that are titled business analyst." So,

5507
02:55:35,680 --> 02:55:36,800
there's just so many ways you could use

5508
02:55:36,800 --> 02:55:38,240
Appify. You could get leads from Google

5509
02:55:38,240 --> 02:55:39,840
Maps. You could get Instagram comments.

5510
02:55:39,840 --> 02:55:41,680
You could get Facebook posts. There's

5511
02:55:41,680 --> 02:55:43,279
just almost unlimited things you can do

5512
02:55:43,279 --> 02:55:44,800
here. You can even tap into Apollo's

5513
02:55:44,800 --> 02:55:46,800
database of leads and just get a ton. So

5514
02:55:46,800 --> 02:55:48,000
today I'm just going to show you guys in

5515
02:55:48,000 --> 02:55:50,880
NAN the easiest way to set up this Aify

5516
02:55:50,880 --> 02:55:52,479
actor where you're going to start the

5517
02:55:52,479 --> 02:55:53,680
actor and then you're going to just grab

5518
02:55:53,680 --> 02:55:54,960
those results. So what you're going to

5519
02:55:54,960 --> 02:55:56,479
want to do is head over to Aify using

5520
02:55:56,479 --> 02:55:58,319
the link in the description and then use

5521
02:55:58,319 --> 02:56:00,960
code 30 Nate Herk to get 30% off. Okay,

5522
02:56:00,960 --> 02:56:02,000
like I said, what we're going to be

5523
02:56:02,000 --> 02:56:03,680
covering today is a two-step process

5524
02:56:03,680 --> 02:56:05,840
where you make one request to Aify to

5525
02:56:05,840 --> 02:56:07,520
start up an actor and then you're going

5526
02:56:07,520 --> 02:56:08,960
to wait for it to finish up and then

5527
02:56:08,960 --> 02:56:10,080
you're just going to pull those results

5528
02:56:10,080 --> 02:56:11,200
back in. So let me show you what that

5529
02:56:11,200 --> 02:56:12,640
looks like. What I'm going to do is hit

5530
02:56:12,640 --> 02:56:13,920
test workflow and this is going to start

5531
02:56:13,920 --> 02:56:15,600
the Google Maps actor. And what we're

5532
02:56:15,600 --> 02:56:17,040
doing here is we're asking for dentists

5533
02:56:17,040 --> 02:56:18,399
in New York. And then if I go to my

5534
02:56:18,399 --> 02:56:20,399
Appify console and I go over here to

5535
02:56:20,399 --> 02:56:22,080
actors and click on the Google Maps

5536
02:56:22,080 --> 02:56:24,080
extractor one, if I click on runs, we

5537
02:56:24,080 --> 02:56:25,359
can see that there's one currently

5538
02:56:25,359 --> 02:56:26,720
finishing up right now. And now that

5539
02:56:26,720 --> 02:56:28,160
it's finished, I can go back into our

5540
02:56:28,160 --> 02:56:29,840
workflow. I can hook it up to the get

5541
02:56:29,840 --> 02:56:32,000
results node. Hit test step. And this is

5542
02:56:32,000 --> 02:56:34,319
going to pull in those 50 dentists that

5543
02:56:34,319 --> 02:56:36,560
we just scraped in New York. And you can

5544
02:56:36,560 --> 02:56:38,160
see this contains information like their

5545
02:56:38,160 --> 02:56:39,760
address, their website, their phone

5546
02:56:39,760 --> 02:56:41,520
number, all this kind of stuff. So you

5547
02:56:41,520 --> 02:56:43,520
can just basically scrape these lists of

5548
02:56:43,520 --> 02:56:45,040
leads. So anyways, that's how this

5549
02:56:45,040 --> 02:56:46,560
works, but let's walk through a live

5550
02:56:46,560 --> 02:56:48,000
setup. So once you're in your Appify

5551
02:56:48,000 --> 02:56:49,600
console, you click on the Appify store,

5552
02:56:49,600 --> 02:56:50,880
and this is where you can see all the

5553
02:56:50,880 --> 02:56:52,640
different actors. And let's do an

5554
02:56:52,640 --> 02:56:54,479
example of like a social media one. So

5555
02:56:54,479 --> 02:56:55,520
I'm going to click on this Tik Tok

5556
02:56:55,520 --> 02:56:56,880
scraper since it's just the first one

5557
02:56:56,880 --> 02:56:58,720
right here. And this may seem a little

5558
02:56:58,720 --> 02:57:00,319
bit confusing, but it's not going to be

5559
02:57:00,319 --> 02:57:01,920
too bad at all. We get to basically do

5560
02:57:01,920 --> 02:57:03,359
all this with natural language. So let

5561
02:57:03,359 --> 02:57:04,880
me show you guys how this works. So

5562
02:57:04,880 --> 02:57:06,399
basically, we have this configuration

5563
02:57:06,399 --> 02:57:07,840
panel right here. When you open up any

5564
02:57:07,840 --> 02:57:09,680
sort of actor, they won't always all be

5565
02:57:09,680 --> 02:57:11,279
the same, but in this one, what we have

5566
02:57:11,279 --> 02:57:13,040
is videos with this hashtag. So, we can

5567
02:57:13,040 --> 02:57:14,880
put something in. I put in AI content to

5568
02:57:14,880 --> 02:57:16,319
play around with earlier. And then you

5569
02:57:16,319 --> 02:57:17,840
can see it asks, how many videos do you

5570
02:57:17,840 --> 02:57:19,680
want back? So, in this case, I put 10.

5571
02:57:19,680 --> 02:57:21,359
Let's just put 25 for the sake of this

5572
02:57:21,359 --> 02:57:22,720
demo. And then you have the option to

5573
02:57:22,720 --> 02:57:24,000
add more settings. So, down here, we

5574
02:57:24,000 --> 02:57:25,439
could do, you know, we could add certain

5575
02:57:25,439 --> 02:57:26,800
profiles that we want to scrape. We

5576
02:57:26,800 --> 02:57:27,840
could add a different search

5577
02:57:27,840 --> 02:57:29,600
functionality. We could even have it

5578
02:57:29,600 --> 02:57:31,279
download the videos for us. So, once

5579
02:57:31,279 --> 02:57:32,720
you're good with this configuration, and

5580
02:57:32,720 --> 02:57:34,000
just don't over complicate it. Think of

5581
02:57:34,000 --> 02:57:35,680
it the same way you would like put in

5582
02:57:35,680 --> 02:57:38,080
filters on an e-commerce website or the

5583
02:57:38,080 --> 02:57:39,520
same way you would, you know, fill in

5584
02:57:39,520 --> 02:57:41,600
your order when you're door dashing some

5585
02:57:41,600 --> 02:57:42,800
food. So, now that we have this filled

5586
02:57:42,800 --> 02:57:44,080
out the way we want it, all I'm going to

5587
02:57:44,080 --> 02:57:45,520
do is come up to the top right and hit

5588
02:57:45,520 --> 02:57:48,479
API and click API endpoints. The first

5589
02:57:48,479 --> 02:57:49,520
thing we're going to do is we're going

5590
02:57:49,520 --> 02:57:51,520
to use this endpoint called run actor.

5591
02:57:51,520 --> 02:57:52,800
This is the one that's basically just

5592
02:57:52,800 --> 02:57:54,399
going to send a request to Apify and

5593
02:57:54,399 --> 02:57:55,920
start this process, but it's not going

5594
02:57:55,920 --> 02:57:57,439
to give us the live results back. That's

5595
02:57:57,439 --> 02:57:59,359
why the second step later is to pull the

5596
02:57:59,359 --> 02:58:00,880
results back. What you could do is you

5597
02:58:00,880 --> 02:58:02,479
could run the actor synchronously,

5598
02:58:02,479 --> 02:58:03,840
meaning it's going to send it off and

5599
02:58:03,840 --> 02:58:05,600
it's just going to spin in and it end

5600
02:58:05,600 --> 02:58:07,359
until we're done and until it has the

5601
02:58:07,359 --> 02:58:09,279
results. But I found this way to be more

5602
02:58:09,279 --> 02:58:10,720
consistent. So anyways, all you have to

5603
02:58:10,720 --> 02:58:12,560
do is click on copy and it's already

5604
02:58:12,560 --> 02:58:15,279
going to have copied over your appy API

5605
02:58:15,279 --> 02:58:17,040
key. So it's really, really simple. All

5606
02:58:17,040 --> 02:58:18,319
we're going to do here is open up a new

5607
02:58:18,319 --> 02:58:20,880
HTTP request. I'm going to just paste in

5608
02:58:20,880 --> 02:58:23,439
that URL that we just copied right here.

5609
02:58:23,439 --> 02:58:24,800
And that's basically all we have to do

5610
02:58:24,800 --> 02:58:26,319
except for we want to change this method

5611
02:58:26,319 --> 02:58:28,319
to post because as you can see right

5612
02:58:28,319 --> 02:58:30,080
here, it says post. And so this is

5613
02:58:30,080 --> 02:58:31,920
basically just us putting in the actor's

5614
02:58:31,920 --> 02:58:33,279
phone number. And so we're giving it a

5615
02:58:33,279 --> 02:58:34,960
call. But now what we have to do is

5616
02:58:34,960 --> 02:58:36,960
actually tell it what we want. So right

5617
02:58:36,960 --> 02:58:38,160
here, we've already filled this out. I'm

5618
02:58:38,160 --> 02:58:40,000
going to click on JSON and all I have to

5619
02:58:40,000 --> 02:58:42,319
do is just copy this JSON right here. Go

5620
02:58:42,319 --> 02:58:44,560
back into N. Flick this on to send a

5621
02:58:44,560 --> 02:58:47,120
body and we want to send over just JSON.

5622
02:58:47,120 --> 02:58:48,319
And then all I have to do is paste that

5623
02:58:48,319 --> 02:58:49,600
in there. So, as you can see, what we're

5624
02:58:49,600 --> 02:58:51,760
sending over to this Tik Tok scraper is

5625
02:58:51,760 --> 02:58:54,240
I want AI content and I want 25 results.

5626
02:58:54,240 --> 02:58:55,760
And then all this other stuff is false.

5627
02:58:55,760 --> 02:58:56,960
So, I'm just going to hit test step. And

5628
02:58:56,960 --> 02:58:58,560
so, this basically returns us with an ID

5629
02:58:58,560 --> 02:59:00,800
and says, okay, the actor started. If we

5630
02:59:00,800 --> 02:59:02,560
go back into here and we click on runs,

5631
02:59:02,560 --> 02:59:04,399
we can see that this crawler is now

5632
02:59:04,399 --> 02:59:06,160
running. and it's going to basically

5633
02:59:06,160 --> 02:59:07,840
tell us how much it costed, how long it

5634
02:59:07,840 --> 02:59:09,680
took, and all this kind of stuff. And

5635
02:59:09,680 --> 02:59:11,040
now it's already done. So, what we need

5636
02:59:11,040 --> 02:59:12,960
to do now is we need to click on API up

5637
02:59:12,960 --> 02:59:14,880
in the top right. Click on API endpoints

5638
02:59:14,880 --> 02:59:16,640
again and scroll all the way down to the

5639
02:59:16,640 --> 02:59:19,279
bottom where we can see get last run

5640
02:59:19,279 --> 02:59:21,120
data set items. So, all I need to do is

5641
02:59:21,120 --> 02:59:23,120
hit this copy button right here. Go back

5642
02:59:23,120 --> 02:59:25,520
into Nitn and then open up another HTTP

5643
02:59:25,520 --> 02:59:27,279
request. And then I'm just going to

5644
02:59:27,279 --> 02:59:29,120
paste that URL right in there once

5645
02:59:29,120 --> 02:59:30,560
again. And I don't even have to change

5646
02:59:30,560 --> 02:59:32,080
the method because if we go in here, we

5647
02:59:32,080 --> 02:59:34,319
can see that this is a get. So, all I

5648
02:59:34,319 --> 02:59:36,000
have to do is hit test step. And this is

5649
02:59:36,000 --> 02:59:38,640
going to pull in those 25 results from

5650
02:59:38,640 --> 02:59:40,560
our Tik Tok scrape based on the search

5651
02:59:40,560 --> 02:59:42,399
term AI content. So, you can see right

5652
02:59:42,399 --> 02:59:44,000
here it says 25 items. And just to show

5653
02:59:44,000 --> 02:59:46,000
you guys that it really is 25 items, I'm

5654
02:59:46,000 --> 02:59:47,760
just going to grab a set field. We're

5655
02:59:47,760 --> 02:59:49,359
going to just drag in the actual text

5656
02:59:49,359 --> 02:59:51,680
from here and hit test step. And it

5657
02:59:51,680 --> 02:59:53,520
should Oh, we have to connect a trigger.

5658
02:59:53,520 --> 02:59:55,120
So, I'm just going to move this trigger

5659
02:59:55,120 --> 02:59:57,520
over here real quick. And um what you

5660
02:59:57,520 --> 02:59:58,720
can do is because we already have our

5661
02:59:58,720 --> 03:00:00,640
data here, I can just pin it so we don't

5662
03:00:00,640 --> 03:00:02,160
actually have to run it again. But then

5663
03:00:02,160 --> 03:00:03,840
I'll hit test step. And now we can see

5664
03:00:03,840 --> 03:00:05,520
we're going to get our 25 items right

5665
03:00:05,520 --> 03:00:08,479
here, which are all of the text content.

5666
03:00:08,479 --> 03:00:09,840
So I think just the captions or the

5667
03:00:09,840 --> 03:00:11,600
titles of these Tik Toks. And we have

5668
03:00:11,600 --> 03:00:14,240
all 25 Tik Toks as you can see. So I

5669
03:00:14,240 --> 03:00:15,439
just showed you guys the two-step

5670
03:00:15,439 --> 03:00:17,040
method. And why I've been using it

5671
03:00:17,040 --> 03:00:18,479
because here's an example where I did

5672
03:00:18,479 --> 03:00:20,399
the synchronous run. So all I did was I

5673
03:00:20,399 --> 03:00:22,479
came to the Google maps and I went to

5674
03:00:22,479 --> 03:00:24,960
API endpoints and then I wanted to do

5675
03:00:24,960 --> 03:00:26,800
run actor synchronously which basically

5676
03:00:26,800 --> 03:00:28,720
means that it would run it in n and it

5677
03:00:28,720 --> 03:00:30,160
would spin until the results were done

5678
03:00:30,160 --> 03:00:32,319
and then it should feed back the output.

5679
03:00:32,319 --> 03:00:34,479
So I copied that I put it into here and

5680
03:00:34,479 --> 03:00:35,840
as you can see I just ran it with the

5681
03:00:35,840 --> 03:00:37,520
Google maps looking for plumbers and we

5682
03:00:37,520 --> 03:00:39,120
got nothing back. So that's why we're

5683
03:00:39,120 --> 03:00:40,560
taking this two-step approach where as

5684
03:00:40,560 --> 03:00:41,920
you can see here we're going to do that

5685
03:00:41,920 --> 03:00:43,840
exact same request. We're doing a

5686
03:00:43,840 --> 03:00:45,439
request for plumbers and we're going to

5687
03:00:45,439 --> 03:00:47,040
fire this off. And so nothing came back

5688
03:00:47,040 --> 03:00:49,279
in Nitn. But if we go to our actor and

5689
03:00:49,279 --> 03:00:50,880
we go to runs, we can see right here

5690
03:00:50,880 --> 03:00:52,240
that this was the one that we just made

5691
03:00:52,240 --> 03:00:54,160
for plumbers. And if we click into it,

5692
03:00:54,160 --> 03:00:55,760
we can see all the plumbers. So that's

5693
03:00:55,760 --> 03:00:57,120
why we're taking the two-step approach.

5694
03:00:57,120 --> 03:00:58,560
I'm going to make the exact same request

5695
03:00:58,560 --> 03:01:00,319
here for New York plumbers. And what I'm

5696
03:01:00,319 --> 03:01:02,000
going to do is just run this workflow.

5697
03:01:02,000 --> 03:01:03,920
And now I wanted to talk about what we

5698
03:01:03,920 --> 03:01:05,840
have to do because what happens is we

5699
03:01:05,840 --> 03:01:07,279
started the actor. And as you can see,

5700
03:01:07,279 --> 03:01:08,640
it's running right now. And then it went

5701
03:01:08,640 --> 03:01:10,080
to grab the results, but the results

5702
03:01:10,080 --> 03:01:11,520
aren't done yet. So that's why it comes

5703
03:01:11,520 --> 03:01:13,680
back and says this is an item, but it's

5704
03:01:13,680 --> 03:01:15,520
empty. So, what we want to do is we want

5705
03:01:15,520 --> 03:01:17,279
to go to our runs and we want to see how

5706
03:01:17,279 --> 03:01:19,520
long this is taking on average for 50

5707
03:01:19,520 --> 03:01:20,960
leads. As you can see, the most amount

5708
03:01:20,960 --> 03:01:22,960
of time it's ever taken was 19 seconds.

5709
03:01:22,960 --> 03:01:24,399
So, I'm just going to go in here and in

5710
03:01:24,399 --> 03:01:26,240
between the start actor and grab

5711
03:01:26,240 --> 03:01:28,160
results, I'm going to add a wait, and

5712
03:01:28,160 --> 03:01:29,120
I'm just going to tell this thing to

5713
03:01:29,120 --> 03:01:31,040
wait for 22 seconds just to be safe. And

5714
03:01:31,040 --> 03:01:32,160
now, what I'm going to do is just run

5715
03:01:32,160 --> 03:01:33,680
this thing again. It's going to start

5716
03:01:33,680 --> 03:01:35,439
the actor. It's going to wait for 22

5717
03:01:35,439 --> 03:01:37,200
seconds. So, if we go back into Ampify,

5718
03:01:37,200 --> 03:01:38,880
you can see that the actor is once again

5719
03:01:38,880 --> 03:01:41,920
running. After about 22 seconds, it's

5720
03:01:41,920 --> 03:01:43,439
going to pass over and then we should

5721
03:01:43,439 --> 03:01:45,920
get all 50 results back in our HTTP

5722
03:01:45,920 --> 03:01:47,439
request. There we go. Just finished up.

5723
03:01:47,439 --> 03:01:48,800
And now you can see that we have 50

5724
03:01:48,800 --> 03:01:51,120
items which are all of the plumbers that

5725
03:01:51,120 --> 03:01:53,200
we got in New York. So from here, now

5726
03:01:53,200 --> 03:01:54,640
that you have these 50 leads and

5727
03:01:54,640 --> 03:01:56,479
remember if you want to come back into

5728
03:01:56,479 --> 03:01:58,720
Ampify and change up your input, you can

5729
03:01:58,720 --> 03:02:00,080
change how many places you want to

5730
03:02:00,080 --> 03:02:02,160
extract. So if you changed this to 200

5731
03:02:02,160 --> 03:02:03,520
and then you clicked on JSON and you

5732
03:02:03,520 --> 03:02:05,359
copied in that body, you would now be

5733
03:02:05,359 --> 03:02:07,760
searching for 200 results. But anyways,

5734
03:02:07,760 --> 03:02:09,120
that's the hard part is getting the

5735
03:02:09,120 --> 03:02:10,960
leads into end. But now we have all this

5736
03:02:10,960 --> 03:02:12,560
data about them and we can just, you

5737
03:02:12,560 --> 03:02:14,560
know, do some research, send them off a

5738
03:02:14,560 --> 03:02:16,560
email, whatever it is, we can just

5739
03:02:16,560 --> 03:02:18,319
basically have this thing running 24/7.

5740
03:02:18,319 --> 03:02:19,600
And if you wanted to make this workflow

5741
03:02:19,600 --> 03:02:21,120
more advanced to handle a little bit

5742
03:02:21,120 --> 03:02:23,520
more dynamic amount of results. What

5743
03:02:23,520 --> 03:02:25,040
you'd want to use is a technique called

5744
03:02:25,040 --> 03:02:27,200
polling. So basically, you'd wait, you

5745
03:02:27,200 --> 03:02:28,800
check in, and then if the results were

5746
03:02:28,800 --> 03:02:30,880
all done, you continue down the process.

5747
03:02:30,880 --> 03:02:32,640
But if they weren't all done, you would

5748
03:02:32,640 --> 03:02:34,399
basically wait again and come back. And

5749
03:02:34,399 --> 03:02:36,319
you would just loop through this until

5750
03:02:36,319 --> 03:02:37,840
you're confident that all of the results

5751
03:02:37,840 --> 03:02:39,120
are done. So that's going to be it for

5752
03:02:39,120 --> 03:02:40,240
this one. I'll have this template

5753
03:02:40,240 --> 03:02:42,160
available in my free school community if

5754
03:02:42,160 --> 03:02:43,279
you want to play around with it. Just

5755
03:02:43,279 --> 03:02:44,640
remember you'll have to come in here and

5756
03:02:44,640 --> 03:02:46,000
you'll have to switch out your own API

5757
03:02:46,000 --> 03:02:47,279
key. And don't forget when you get to

5758
03:02:47,279 --> 03:02:49,439
Ampify, you can use code 30 Nate Herk to

5759
03:02:49,439 --> 03:02:51,359
get 30% off. Okay, so those were some

5760
03:02:51,359 --> 03:02:53,279
APIs that we can use to actually scrape

5761
03:02:53,279 --> 03:02:54,880
information. Now, what if we want to use

5762
03:02:54,880 --> 03:02:57,200
APIs to generate some sort of content?

5763
03:02:57,200 --> 03:02:58,240
We're going to look at an image

5764
03:02:58,240 --> 03:03:00,240
generation API from OpenAI and we're

5765
03:03:00,240 --> 03:03:02,000
going to look at a video generation API

5766
03:03:02,000 --> 03:03:03,920
called Runway. So these next two

5767
03:03:03,920 --> 03:03:05,520
workflows will explain how you set up

5768
03:03:05,520 --> 03:03:07,359
those API calls and also how you can

5769
03:03:07,359 --> 03:03:09,840
bake them into a workflow to be a little

5770
03:03:09,840 --> 03:03:11,600
bit more practical. So let's take a

5771
03:03:11,600 --> 03:03:13,760
look. So this workflow right here, all I

5772
03:03:13,760 --> 03:03:15,760
had to do was enter in ROI on AI

5773
03:03:15,760 --> 03:03:17,520
automation and it was able to spit out

5774
03:03:17,520 --> 03:03:19,279
this LinkedIn post for me. And if you

5775
03:03:19,279 --> 03:03:21,120
look at this graphic, it's insane. It

5776
03:03:21,120 --> 03:03:22,720
looks super professional. It even has a

5777
03:03:22,720 --> 03:03:24,319
little LinkedIn logo in the corner, but

5778
03:03:24,319 --> 03:03:26,000
it directly calls out the actual

5779
03:03:26,000 --> 03:03:28,080
statistics that are in the post based on

5780
03:03:28,080 --> 03:03:29,520
the research. And for this next one, all

5781
03:03:29,520 --> 03:03:31,279
I typed in was mental health within the

5782
03:03:31,279 --> 03:03:33,200
workplace and it spit out this post.

5783
03:03:33,200 --> 03:03:34,640
According to Deote Insights,

5784
03:03:34,640 --> 03:03:36,399
organizations that support mental health

5785
03:03:36,399 --> 03:03:38,560
can see up to 25% increase in

5786
03:03:38,560 --> 03:03:40,080
productivity. And as you can see down

5787
03:03:40,080 --> 03:03:42,080
here, it's just a beautiful graphic. So,

5788
03:03:42,080 --> 03:03:43,760
a few weeks ago when Chacht came out

5789
03:03:43,760 --> 03:03:45,439
with their image generation model, you

5790
03:03:45,439 --> 03:03:46,800
probably saw a lot of stuff on LinkedIn

5791
03:03:46,800 --> 03:03:48,160
like this where people were turning

5792
03:03:48,160 --> 03:03:50,160
themselves into action figures or some

5793
03:03:50,160 --> 03:03:51,520
stuff like this where people were

5794
03:03:51,520 --> 03:03:54,000
turning themselves into Pixar animation

5795
03:03:54,000 --> 03:03:55,760
style photos or whatever it is. And

5796
03:03:55,760 --> 03:03:57,359
obviously, I had to try this out myself.

5797
03:03:57,359 --> 03:03:58,800
And of course, this was very cool and

5798
03:03:58,800 --> 03:04:00,240
everyone was getting really excited. But

5799
03:04:00,240 --> 03:04:01,600
then I started to think about how could

5800
03:04:01,600 --> 03:04:03,600
this image generation model actually be

5801
03:04:03,600 --> 03:04:06,000
used to save time for a marketing team

5802
03:04:06,000 --> 03:04:07,600
because this new image model is actually

5803
03:04:07,600 --> 03:04:09,200
good at spelling and it can make words

5804
03:04:09,200 --> 03:04:11,439
that don't look like gibberish. It opens

5805
03:04:11,439 --> 03:04:13,359
up a world of possibilities. So here's a

5806
03:04:13,359 --> 03:04:14,960
really quick example of me giving it a

5807
03:04:14,960 --> 03:04:16,800
one-s sentence prompt and it spits out a

5808
03:04:16,800 --> 03:04:18,800
poster that looks pretty solid. Of

5809
03:04:18,800 --> 03:04:20,160
course, we were limited to having to do

5810
03:04:20,160 --> 03:04:22,160
this in chatbt and coming in here and

5811
03:04:22,160 --> 03:04:24,880
typing, but now the API is released, so

5812
03:04:24,880 --> 03:04:26,560
we can start to save hours and hours of

5813
03:04:26,560 --> 03:04:27,920
time. And so, the automation I'm going

5814
03:04:27,920 --> 03:04:29,120
to show with you guys today is going to

5815
03:04:29,120 --> 03:04:30,880
help you turn an idea into a fully

5816
03:04:30,880 --> 03:04:33,200
researched LinkedIn post with a graphic

5817
03:04:33,200 --> 03:04:34,640
as well. And of course, we're going to

5818
03:04:34,640 --> 03:04:36,479
walk through setting up the HTTP request

5819
03:04:36,479 --> 03:04:38,960
to OpenAI's image generation model. But

5820
03:04:38,960 --> 03:04:40,560
what you can do is also download this

5821
03:04:40,560 --> 03:04:42,240
entire template for free and you can use

5822
03:04:42,240 --> 03:04:44,640
it to post on LinkedIn or you can also

5823
03:04:44,640 --> 03:04:46,160
just kind of build on top of it to see

5824
03:04:46,160 --> 03:04:48,560
how you can use image generation to save

5825
03:04:48,560 --> 03:04:50,560
you hours and hours within some sort of

5826
03:04:50,560 --> 03:04:52,560
marketing process. So this workflow

5827
03:04:52,560 --> 03:04:54,240
right here, all I had to do was enter in

5828
03:04:54,240 --> 03:04:56,800
ROI on AI automation and it was able to

5829
03:04:56,800 --> 03:04:58,640
spit out this LinkedIn post for me. And

5830
03:04:58,640 --> 03:04:59,920
if you look at this graphic, it's

5831
03:04:59,920 --> 03:05:01,920
insane. It looks super professional. It

5832
03:05:01,920 --> 03:05:03,359
even has a little LinkedIn logo in the

5833
03:05:03,359 --> 03:05:05,200
corner, but it directly calls out the

5834
03:05:05,200 --> 03:05:07,200
actual statistics that are in the post

5835
03:05:07,200 --> 03:05:09,439
based on the research. So 74% of

5836
03:05:09,439 --> 03:05:11,520
organizations say their most advanced AI

5837
03:05:11,520 --> 03:05:13,520
initiatives are meeting or exceeding ROI

5838
03:05:13,520 --> 03:05:15,920
expectations right here. And on the

5839
03:05:15,920 --> 03:05:17,760
other side, we can see that only 26% of

5840
03:05:17,760 --> 03:05:19,279
companies have achieved significant

5841
03:05:19,279 --> 03:05:21,200
AIdriven gains so far, which is right

5842
03:05:21,200 --> 03:05:23,120
here. And I was just extremely impressed

5843
03:05:23,120 --> 03:05:24,640
by this one. And for this next one, all

5844
03:05:24,640 --> 03:05:26,399
I typed in was mental health within the

5845
03:05:26,399 --> 03:05:28,319
workplace. And to spit out this post,

5846
03:05:28,319 --> 03:05:29,760
according to Deote Insights,

5847
03:05:29,760 --> 03:05:31,520
organizations that support mental health

5848
03:05:31,520 --> 03:05:33,680
can see up to 25% increase in

5849
03:05:33,680 --> 03:05:35,200
productivity. And as you can see down

5850
03:05:35,200 --> 03:05:37,120
here, it's just a beautiful graphic.

5851
03:05:37,120 --> 03:05:38,720
something that would probably take me 20

5852
03:05:38,720 --> 03:05:40,640
minutes in Canva. And if you can now

5853
03:05:40,640 --> 03:05:42,240
push out these posts in a minute rather

5854
03:05:42,240 --> 03:05:43,760
than 20 minutes, you can start to push

5855
03:05:43,760 --> 03:05:45,359
out more and more throughout the day and

5856
03:05:45,359 --> 03:05:47,359
save hours every week. And because the

5857
03:05:47,359 --> 03:05:49,120
post is being backed by research, the

5858
03:05:49,120 --> 03:05:50,720
graphic is being backed by the research

5859
03:05:50,720 --> 03:05:53,040
post. You're not polluting anything into

5860
03:05:53,040 --> 03:05:54,479
the internet. A lot of people in my

5861
03:05:54,479 --> 03:05:56,560
comments call it AI slop. Anyways, let's

5862
03:05:56,560 --> 03:05:58,240
do a quick live run of this workflow and

5863
03:05:58,240 --> 03:05:59,680
then I'll walk through step by step how

5864
03:05:59,680 --> 03:06:01,680
to set up this API call. And as always,

5865
03:06:01,680 --> 03:06:02,960
if you want to download this workflow

5866
03:06:02,960 --> 03:06:04,479
for free, all you have to do is join my

5867
03:06:04,479 --> 03:06:06,000
free school community. link is down in

5868
03:06:06,000 --> 03:06:07,600
the description and then you can search

5869
03:06:07,600 --> 03:06:09,520
for the title of the video. You can go

5870
03:06:09,520 --> 03:06:11,359
into YouTube resources. You need to find

5871
03:06:11,359 --> 03:06:13,359
the post associated with this video and

5872
03:06:13,359 --> 03:06:14,479
then when you're in there, you'll be

5873
03:06:14,479 --> 03:06:16,479
able to download this JSON file and that

5874
03:06:16,479 --> 03:06:18,080
is the template. So you download the

5875
03:06:18,080 --> 03:06:20,240
JSON file. You'll go back into Nitn.

5876
03:06:20,240 --> 03:06:22,479
You'll open up a new workflow and in the

5877
03:06:22,479 --> 03:06:25,040
top right you'll go to import from file.

5878
03:06:25,040 --> 03:06:26,640
Import that JSON file and then there'll

5879
03:06:26,640 --> 03:06:28,080
be a little sticky note with a setup

5880
03:06:28,080 --> 03:06:29,600
guide just sort of telling you what you

5881
03:06:29,600 --> 03:06:31,120
need to plug in to get this thing to

5882
03:06:31,120 --> 03:06:32,960
work for you. Okay, quick disclaimer

5883
03:06:32,960 --> 03:06:33,920
though. I'm not actually going to post

5884
03:06:33,920 --> 03:06:35,920
this to LinkedIn. you certainly could,

5885
03:06:35,920 --> 03:06:37,520
but um I'm just going to basically send

5886
03:06:37,520 --> 03:06:39,439
the post as well as the attachment to my

5887
03:06:39,439 --> 03:06:41,760
email because I don't want to post on

5888
03:06:41,760 --> 03:06:43,840
LinkedIn right now. Anyways, as you can

5889
03:06:43,840 --> 03:06:45,680
see here, this workflow is starting with

5890
03:06:45,680 --> 03:06:47,359
a form submission. So, if I hit test

5891
03:06:47,359 --> 03:06:48,880
workflow, it's going to pop up with a

5892
03:06:48,880 --> 03:06:51,200
form where we have to enter in our email

5893
03:06:51,200 --> 03:06:53,840
for the workflow to send us the results.

5894
03:06:53,840 --> 03:06:55,600
Topic of the post and then also I threw

5895
03:06:55,600 --> 03:06:57,200
in here a target audience. So, you could

5896
03:06:57,200 --> 03:06:58,720
have these posts be kind of flavored

5897
03:06:58,720 --> 03:07:00,240
towards a specific audience if you want

5898
03:07:00,240 --> 03:07:02,160
to. Okay, so this form is waiting for

5899
03:07:02,160 --> 03:07:04,000
us. I put in my email. I put the topic

5900
03:07:04,000 --> 03:07:05,680
of morning versus night people and the

5901
03:07:05,680 --> 03:07:07,439
target audience is working adults. So,

5902
03:07:07,439 --> 03:07:09,120
we'll hit submit, close out of here, and

5903
03:07:09,120 --> 03:07:10,640
we'll see the LinkedIn post agent is

5904
03:07:10,640 --> 03:07:12,560
going to start up. It's using Tavi here

5905
03:07:12,560 --> 03:07:14,720
for research and it's going to create

5906
03:07:14,720 --> 03:07:17,040
that post and then pass the post on to

5907
03:07:17,040 --> 03:07:19,359
the image prompt agent. And that image

5908
03:07:19,359 --> 03:07:20,800
prompt agent is going to read the post

5909
03:07:20,800 --> 03:07:22,800
and basically create a prompt to feed

5910
03:07:22,800 --> 03:07:23,720
into

5911
03:07:23,720 --> 03:07:26,880
OpenAI's image generator. And as you can

5912
03:07:26,880 --> 03:07:28,560
see, it's doing that right now. We're

5913
03:07:28,560 --> 03:07:30,800
going to get that back as a base 64

5914
03:07:30,800 --> 03:07:32,160
string. And then we're just converting

5915
03:07:32,160 --> 03:07:34,080
that to binary so we can actually post

5916
03:07:34,080 --> 03:07:36,240
that on LinkedIn or send that in email

5917
03:07:36,240 --> 03:07:37,840
as an attachment and we'll break down

5918
03:07:37,840 --> 03:07:39,680
all these steps. But let's just wait and

5919
03:07:39,680 --> 03:07:41,600
see what these results look like here.

5920
03:07:41,600 --> 03:07:43,040
Okay, so all that just finished up. Let

5921
03:07:43,040 --> 03:07:45,040
me pop over to email. So in email, we

5922
03:07:45,040 --> 03:07:46,640
got our new LinkedIn post. Are you a

5923
03:07:46,640 --> 03:07:48,399
morning lark or a night owl? The science

5924
03:07:48,399 --> 03:07:49,840
of productivity. I'm not going to read

5925
03:07:49,840 --> 03:07:51,279
through this right now exactly, but

5926
03:07:51,279 --> 03:07:52,960
let's take a look at the image we got.

5927
03:07:52,960 --> 03:07:54,880
When are you most productive? In the

5928
03:07:54,880 --> 03:07:57,120
morning, plus 10% productivity or night

5929
03:07:57,120 --> 03:07:59,200
owls thrive in flexibility. I mean, this

5930
03:07:59,200 --> 03:08:00,399
is insane. This is a really good

5931
03:08:00,399 --> 03:08:02,080
graphic. Okay, so now that we've seen

5932
03:08:02,080 --> 03:08:04,160
again how good this is, let's just break

5933
03:08:04,160 --> 03:08:05,520
down what's going on. We're going to

5934
03:08:05,520 --> 03:08:07,600
start off with the LinkedIn post agent.

5935
03:08:07,600 --> 03:08:09,600
All we're doing is we're feeding in two

5936
03:08:09,600 --> 03:08:11,040
things from the form submission, which

5937
03:08:11,040 --> 03:08:12,800
was what is the topic of the post, as

5938
03:08:12,800 --> 03:08:14,479
well as who's the target audience. So

5939
03:08:14,479 --> 03:08:15,920
right here, you can see morning versus

5940
03:08:15,920 --> 03:08:18,160
night people and working adults. And

5941
03:08:18,160 --> 03:08:19,520
then we move into the actual system

5942
03:08:19,520 --> 03:08:21,359
prompt, which I'm not going to read

5943
03:08:21,359 --> 03:08:22,479
through this entire thing. If you

5944
03:08:22,479 --> 03:08:23,760
download the template, the prompt will

5945
03:08:23,760 --> 03:08:25,120
be in there for you to look at. But

5946
03:08:25,120 --> 03:08:26,880
basically I told it you are an AI agent

5947
03:08:26,880 --> 03:08:28,399
specialized in creating professional

5948
03:08:28,399 --> 03:08:30,560
educational and engaging LinkedIn posts

5949
03:08:30,560 --> 03:08:33,200
based on a topic provided by the user.

5950
03:08:33,200 --> 03:08:34,720
We told it that it has a tool called

5951
03:08:34,720 --> 03:08:36,479
Tavly that it will use to search the web

5952
03:08:36,479 --> 03:08:38,880
and gather accurate information and that

5953
03:08:38,880 --> 03:08:40,479
the post should be written to appeal to

5954
03:08:40,479 --> 03:08:42,479
the provided target audience. And then

5955
03:08:42,479 --> 03:08:43,439
basically just some more information

5956
03:08:43,439 --> 03:08:45,520
about how to structure the post, what it

5957
03:08:45,520 --> 03:08:47,200
should output and then an example which

5958
03:08:47,200 --> 03:08:49,279
is basically you receive a topic. You

5959
03:08:49,279 --> 03:08:51,600
search the web, you draft the post and

5960
03:08:51,600 --> 03:08:53,200
you format it with source citations,

5961
03:08:53,200 --> 03:08:55,359
clean structure, optional hashtags and a

5962
03:08:55,359 --> 03:08:56,960
call to action at the end. And as you

5963
03:08:56,960 --> 03:08:59,680
can see what it outputs is a super clean

5964
03:08:59,680 --> 03:09:01,760
LinkedIn post right here. So then what

5965
03:09:01,760 --> 03:09:02,800
we're going to do is basically we're

5966
03:09:02,800 --> 03:09:05,200
feeding this output directly into that

5967
03:09:05,200 --> 03:09:06,960
next agent. And by the way, they're both

5968
03:09:06,960 --> 03:09:10,080
using chat GBT 4.1 through open router.

5969
03:09:10,080 --> 03:09:11,120
All right, but before we look at the

5970
03:09:11,120 --> 03:09:12,560
image prompt agent, let's just take a

5971
03:09:12,560 --> 03:09:14,160
look at these two things down here. So

5972
03:09:14,160 --> 03:09:15,520
the first one is the chat model that

5973
03:09:15,520 --> 03:09:17,439
plugs into both image prompt agent and

5974
03:09:17,439 --> 03:09:19,120
the LinkedIn post agent. So all you have

5975
03:09:19,120 --> 03:09:20,960
to do is go to open router, get an API

5976
03:09:20,960 --> 03:09:22,399
key, and then you can choose from all

5977
03:09:22,399 --> 03:09:23,760
these different models. And in here, I'm

5978
03:09:23,760 --> 03:09:24,520
using

5979
03:09:24,520 --> 03:09:26,960
GPT4.1. And then we have the actual tool

5980
03:09:26,960 --> 03:09:29,120
that the LinkedIn agent uses for its

5981
03:09:29,120 --> 03:09:31,200
research which is Tavi. And what we're

5982
03:09:31,200 --> 03:09:32,880
doing here is we're sending off a post

5983
03:09:32,880 --> 03:09:35,920
request using an HTTP request tool to

5984
03:09:35,920 --> 03:09:38,240
the Tavi endpoint. So this is where

5985
03:09:38,240 --> 03:09:39,439
people typically start to feel

5986
03:09:39,439 --> 03:09:40,960
overwhelmed when trying to set up these

5987
03:09:40,960 --> 03:09:42,479
requests because it can be confusing

5988
03:09:42,479 --> 03:09:43,439
when you're trying to look through that

5989
03:09:43,439 --> 03:09:45,520
API documentation. Which is exactly why

5990
03:09:45,520 --> 03:09:47,840
in my paid community I created a APIs

5991
03:09:47,840 --> 03:09:49,920
and HTTP requests deep dive because

5992
03:09:49,920 --> 03:09:51,760
truthfully you need to understand how to

5993
03:09:51,760 --> 03:09:54,160
set up these requests because being able

5994
03:09:54,160 --> 03:09:56,560
to connect to different APIs is where

5995
03:09:56,560 --> 03:09:58,640
the magic really happens. So Tavi just

5996
03:09:58,640 --> 03:10:00,479
lets your LLM connect to the web and

5997
03:10:00,479 --> 03:10:02,000
it's really good for web search and it

5998
03:10:02,000 --> 03:10:03,600
also gives you a thousand free searches

5999
03:10:03,600 --> 03:10:05,120
per month. So that's the plan that I'm

6000
03:10:05,120 --> 03:10:06,640
on. Anyways, once you're in here and you

6001
03:10:06,640 --> 03:10:08,319
have an account and you get an API key,

6002
03:10:08,319 --> 03:10:10,240
all I did was went to the Tavali search

6003
03:10:10,240 --> 03:10:12,640
endpoint and you can see we have a curl

6004
03:10:12,640 --> 03:10:14,720
statement right here where we have this

6005
03:10:14,720 --> 03:10:17,040
endpoint. We have post as the method we

6006
03:10:17,040 --> 03:10:18,960
have this is how we authorize ourselves

6007
03:10:18,960 --> 03:10:20,000
and this is all going to be pretty

6008
03:10:20,000 --> 03:10:21,359
similar to the way that we set up the

6009
03:10:21,359 --> 03:10:23,439
actual request to OpenAI's image

6010
03:10:23,439 --> 03:10:25,120
generation API. So, I'm not going to

6011
03:10:25,120 --> 03:10:26,479
dive into this too much. When you

6012
03:10:26,479 --> 03:10:27,680
download this template, all you have to

6013
03:10:27,680 --> 03:10:30,399
do is plug in your Tavi API. But later

6014
03:10:30,399 --> 03:10:32,319
in this video when we walk through

6015
03:10:32,319 --> 03:10:34,960
setting up the request to OpenAI, this

6016
03:10:34,960 --> 03:10:36,560
should make more sense. Anyways, the

6017
03:10:36,560 --> 03:10:38,080
main thing to take away from this tool

6018
03:10:38,080 --> 03:10:39,840
is that we're using a placeholder for

6019
03:10:39,840 --> 03:10:41,680
the request because in the request we

6020
03:10:41,680 --> 03:10:43,439
sent over to Tavali, we basically say,

6021
03:10:43,439 --> 03:10:44,800
okay, here's the search query that we're

6022
03:10:44,800 --> 03:10:46,080
going to search the internet for. And

6023
03:10:46,080 --> 03:10:47,200
then we have all these other little

6024
03:10:47,200 --> 03:10:49,120
settings we can tweak like the topic,

6025
03:10:49,120 --> 03:10:51,120
how many results, how many chunks per

6026
03:10:51,120 --> 03:10:52,880
source, all this kind of stuff. All we

6027
03:10:52,880 --> 03:10:54,960
really want to touch right now is the

6028
03:10:54,960 --> 03:10:57,279
query. And as you can see, I put this in

6029
03:10:57,279 --> 03:10:58,960
curly braces, meaning it's a

6030
03:10:58,960 --> 03:11:00,720
placeholder. I'm calling the placeholder

6031
03:11:00,720 --> 03:11:02,880
search term. And down here, I'm defining

6032
03:11:02,880 --> 03:11:04,640
that placeholder as what the user is

6033
03:11:04,640 --> 03:11:06,399
searching for. So, as you can see, this

6034
03:11:06,399 --> 03:11:07,920
data in the placeholder is going to be

6035
03:11:07,920 --> 03:11:09,760
filled in by the model. So, based on our

6036
03:11:09,760 --> 03:11:11,920
form submission, when we asked it to,

6037
03:11:11,920 --> 03:11:13,760
you know, create a LinkedIn post about

6038
03:11:13,760 --> 03:11:15,840
morning versus night people, it fills

6039
03:11:15,840 --> 03:11:17,760
out the search term with latest research

6040
03:11:17,760 --> 03:11:19,600
on productivity, morning people versus

6041
03:11:19,600 --> 03:11:21,120
night people, and that's basically how

6042
03:11:21,120 --> 03:11:22,720
it searches the internet. And then we

6043
03:11:22,720 --> 03:11:24,880
get our results back. And now it creates

6044
03:11:24,880 --> 03:11:26,399
a LinkedIn post that we're ready to pass

6045
03:11:26,399 --> 03:11:29,359
off to the next agent. So the output of

6046
03:11:29,359 --> 03:11:31,200
this one gets fed into this next one,

6047
03:11:31,200 --> 03:11:32,880
which all it has to do is read the

6048
03:11:32,880 --> 03:11:34,479
output. As you can see right here, we

6049
03:11:34,479 --> 03:11:36,319
gave it the LinkedIn post, which is the

6050
03:11:36,319 --> 03:11:38,319
full one that we just got spit out. And

6051
03:11:38,319 --> 03:11:39,760
then our system message is basically

6052
03:11:39,760 --> 03:11:41,520
telling it to turn that into an image

6053
03:11:41,520 --> 03:11:43,840
prompt. This one is a little bit longer.

6054
03:11:43,840 --> 03:11:45,520
Not too bad, though. I'm not going to

6055
03:11:45,520 --> 03:11:46,640
read the whole thing, but essentially

6056
03:11:46,640 --> 03:11:48,080
we're telling it that it's going to be

6057
03:11:48,080 --> 03:11:50,080
an AI agent that transforms a LinkedIn

6058
03:11:50,080 --> 03:11:53,520
post into a visual image prompt for a

6059
03:11:53,520 --> 03:11:56,479
textto-image AI generation model. So, we

6060
03:11:56,479 --> 03:11:58,399
told it to read the post, identify the

6061
03:11:58,399 --> 03:12:00,080
message, identify the takeaways, and

6062
03:12:00,080 --> 03:12:02,000
then create a compelling graphic prompt

6063
03:12:02,000 --> 03:12:04,000
that can be used with a textto image

6064
03:12:04,000 --> 03:12:05,520
generator. We gave it some output

6065
03:12:05,520 --> 03:12:06,800
instructions like, you know, if there's

6066
03:12:06,800 --> 03:12:08,080
numbers, try to work those into the

6067
03:12:08,080 --> 03:12:10,160
prompt. Um, you can use, you know, text,

6068
03:12:10,160 --> 03:12:12,640
charts, icons, shapes, overlays,

6069
03:12:12,640 --> 03:12:14,319
anything like that. And then the very

6070
03:12:14,319 --> 03:12:15,600
bottom here, we just gave it sort of

6071
03:12:15,600 --> 03:12:17,600
like an example prompt format. And you

6072
03:12:17,600 --> 03:12:20,160
can see what it spits out is a image

6073
03:12:20,160 --> 03:12:21,840
prompt. So it says a dynamic split

6074
03:12:21,840 --> 03:12:24,000
screen infographic style graphic. Left

6075
03:12:24,000 --> 03:12:25,920
side has a sunrise, it's bright yellow,

6076
03:12:25,920 --> 03:12:27,920
and it has morning larks plus 10%

6077
03:12:27,920 --> 03:12:29,520
productivity. And the right side is a

6078
03:12:29,520 --> 03:12:32,160
morning night sky, cool blue gradients,

6079
03:12:32,160 --> 03:12:33,760
a crescent moon, all this kind of stuff.

6080
03:12:33,760 --> 03:12:35,840
And that is exactly what we saw back in

6081
03:12:35,840 --> 03:12:38,399
here when we look at our image. And so

6082
03:12:38,399 --> 03:12:39,840
this is just so cool to me because first

6083
03:12:39,840 --> 03:12:41,200
of all, I think it's really cool that it

6084
03:12:41,200 --> 03:12:42,880
can read a post and kind of use its

6085
03:12:42,880 --> 03:12:44,319
brain to say, "Okay, this would be a

6086
03:12:44,319 --> 03:12:46,319
good, you know, graphic to be looking at

6087
03:12:46,319 --> 03:12:47,920
while I'm reading this post." But then

6088
03:12:47,920 --> 03:12:49,359
on top of that, it can actually just go

6089
03:12:49,359 --> 03:12:51,439
create that for us. So, I think this

6090
03:12:51,439 --> 03:12:52,720
stuff is super cool. You know, I

6091
03:12:52,720 --> 03:12:53,840
remember back in September, I was

6092
03:12:53,840 --> 03:12:55,600
working on a project where someone

6093
03:12:55,600 --> 03:12:57,200
wanted me to help them with LinkedIn

6094
03:12:57,200 --> 03:12:59,040
automated posting and they wanted visual

6095
03:12:59,040 --> 03:13:00,800
elements as well and I was like, uh, I

6096
03:13:00,800 --> 03:13:02,800
don't know, like that might have to be a

6097
03:13:02,800 --> 03:13:04,080
couple month away thing when we have

6098
03:13:04,080 --> 03:13:05,840
some better models and now we're here.

6099
03:13:05,840 --> 03:13:07,520
So, it's just super exciting to see. But

6100
03:13:07,520 --> 03:13:08,960
anyways, now we're going to feed that

6101
03:13:08,960 --> 03:13:12,319
output, the image prompt into the HTTP

6102
03:13:12,319 --> 03:13:14,800
request to OpenAI. So, real quick, let's

6103
03:13:14,800 --> 03:13:16,760
go take a look at OpenAI's

6104
03:13:16,760 --> 03:13:18,560
documentation. So, of course, we have

6105
03:13:18,560 --> 03:13:20,880
the GBT image API, which lets you

6106
03:13:20,880 --> 03:13:22,720
create, edit, and transform images.

6107
03:13:22,720 --> 03:13:24,240
You've got different styles, of course.

6108
03:13:24,240 --> 03:13:26,640
You can do like memes with a with text.

6109
03:13:26,640 --> 03:13:28,960
You can do creative things. You can turn

6110
03:13:28,960 --> 03:13:30,479
other images into different images. You

6111
03:13:30,479 --> 03:13:31,840
can do all this kind of stuff. And this

6112
03:13:31,840 --> 03:13:33,040
is where it gets really cool, these

6113
03:13:33,040 --> 03:13:35,200
posters and the visuals with words

6114
03:13:35,200 --> 03:13:36,720
because that's the kind of stuff where

6115
03:13:36,720 --> 03:13:38,960
typically AI image gen like wasn't there

6116
03:13:38,960 --> 03:13:41,040
yet. And one thing real quick in your

6117
03:13:41,040 --> 03:13:42,640
OpenAI account, which is different than

6118
03:13:42,640 --> 03:13:44,720
your chatbt account, this is where you

6119
03:13:44,720 --> 03:13:46,560
add the billing for your OpenAI API

6120
03:13:46,560 --> 03:13:48,000
calls. You have to have your

6121
03:13:48,000 --> 03:13:50,239
organization verified in order to

6122
03:13:50,239 --> 03:13:51,520
actually be able to access this model

6123
03:13:51,520 --> 03:13:54,399
through API. Right now, it took me 2

6124
03:13:54,399 --> 03:13:55,520
minutes. You basically just have to

6125
03:13:55,520 --> 03:13:57,200
submit an ID and it has to verify that

6126
03:13:57,200 --> 03:13:59,040
you're human and then you'll be verified

6127
03:13:59,040 --> 03:14:00,160
and then you can use it. Otherwise,

6128
03:14:00,160 --> 03:14:01,120
you're going to get an error message

6129
03:14:01,120 --> 03:14:02,800
that looks like this that I got earlier

6130
03:14:02,800 --> 03:14:04,560
today. But anyways, the verification

6131
03:14:04,560 --> 03:14:06,319
process does not take too long. Anyways,

6132
03:14:06,319 --> 03:14:07,359
then you're going to head over to the

6133
03:14:07,359 --> 03:14:08,880
API documentation that I will have

6134
03:14:08,880 --> 03:14:10,399
linked in the description where we can

6135
03:14:10,399 --> 03:14:12,560
see how we can actually create an image

6136
03:14:12,560 --> 03:14:14,560
in NAN. So, we're going to dive deeper

6137
03:14:14,560 --> 03:14:16,160
into this documentation in the later

6138
03:14:16,160 --> 03:14:17,279
part of this video where I'm walking

6139
03:14:17,279 --> 03:14:19,279
through a step-by-step setup of this.

6140
03:14:19,279 --> 03:14:21,760
But, we're using the endpoint um which

6141
03:14:21,760 --> 03:14:23,040
is going to create an image. So, we have

6142
03:14:23,040 --> 03:14:24,960
this URL right here. We're going to be

6143
03:14:24,960 --> 03:14:27,120
creating a post request and then we just

6144
03:14:27,120 --> 03:14:28,239
obviously have our things that we have

6145
03:14:28,239 --> 03:14:30,479
to configure like the prompt in the

6146
03:14:30,479 --> 03:14:32,399
body. We have to obviously send over

6147
03:14:32,399 --> 03:14:34,960
some sort of API key. We have to, you

6148
03:14:34,960 --> 03:14:36,319
know, we can choose the size. We can

6149
03:14:36,319 --> 03:14:37,680
choose the model. All this kind of

6150
03:14:37,680 --> 03:14:39,920
stuff. So back in NN, you can see that

6151
03:14:39,920 --> 03:14:41,680
I'm sending a post request to that

6152
03:14:41,680 --> 03:14:43,439
endpoint. For the headers, I set up my

6153
03:14:43,439 --> 03:14:44,640
API key right here, but I'm going to

6154
03:14:44,640 --> 03:14:46,160
show you guys a better way to do that in

6155
03:14:46,160 --> 03:14:47,680
the later part of this video. And then

6156
03:14:47,680 --> 03:14:49,200
for the body, we're saying, okay, I want

6157
03:14:49,200 --> 03:14:51,279
to use the GBT image model. Here's the

6158
03:14:51,279 --> 03:14:52,960
actual prompt to use for the image which

6159
03:14:52,960 --> 03:14:54,640
we dragged in from the image prompt

6160
03:14:54,640 --> 03:14:56,640
agent. And then finally the size we just

6161
03:14:56,640 --> 03:14:59,840
left it as that 1024 * 1024 square

6162
03:14:59,840 --> 03:15:01,520
image. And so this is interesting

6163
03:15:01,520 --> 03:15:03,840
because what we get back is we get back

6164
03:15:03,840 --> 03:15:07,279
a massive base 64 code. Like this thing

6165
03:15:07,279 --> 03:15:08,800
is huge. I can't even scroll right now.

6166
03:15:08,800 --> 03:15:11,200
My screen's kind of frozen. Anyways, um

6167
03:15:11,200 --> 03:15:12,319
yeah, there it goes. It just kind of

6168
03:15:12,319 --> 03:15:13,920
lagged. But we got back this massive

6169
03:15:13,920 --> 03:15:15,600
file. We can see how many tokens this

6170
03:15:15,600 --> 03:15:18,479
was. And then what we're going to do is

6171
03:15:18,479 --> 03:15:20,080
we're going to convert that to binary

6172
03:15:20,080 --> 03:15:21,439
data. So that's how we can actually get

6173
03:15:21,439 --> 03:15:23,600
the file as an image. As you can see now

6174
03:15:23,600 --> 03:15:27,279
after we turn that nasty string into a

6175
03:15:27,279 --> 03:15:28,800
file, we have the binary image right

6176
03:15:28,800 --> 03:15:31,040
over here. So all I did was I basically

6177
03:15:31,040 --> 03:15:32,880
just dragged in this field right here

6178
03:15:32,880 --> 03:15:34,880
with that nasty string. And then when

6179
03:15:34,880 --> 03:15:36,080
you hit test step, you'll get that

6180
03:15:36,080 --> 03:15:38,080
binary data. And then from there, you

6181
03:15:38,080 --> 03:15:39,760
have the binary data, you have the

6182
03:15:39,760 --> 03:15:41,520
LinkedIn post. All you have to do is,

6183
03:15:41,520 --> 03:15:43,520
you know, activate LinkedIn, drag it

6184
03:15:43,520 --> 03:15:45,040
right in there. Or you can just do what

6185
03:15:45,040 --> 03:15:47,120
I did, which is I'm sending it to myself

6186
03:15:47,120 --> 03:15:49,040
in email. And of course, before you guys

6187
03:15:49,040 --> 03:15:50,640
yell at me, let's just talk about how

6188
03:15:50,640 --> 03:15:53,080
much this run costed me. So, this was

6189
03:15:53,080 --> 03:15:55,840
4,273 tokens. And if we look at this API

6190
03:15:55,840 --> 03:15:57,600
and we go down to the pricing section,

6191
03:15:57,600 --> 03:15:59,520
we can see that for image output tokens,

6192
03:15:59,520 --> 03:16:01,200
which was generated images, it's going

6193
03:16:01,200 --> 03:16:03,040
to be 40 bucks for a million tokens,

6194
03:16:03,040 --> 03:16:05,279
which comes out to about 17 cents. If

6195
03:16:05,279 --> 03:16:06,479
you can see that right here, hopefully I

6196
03:16:06,479 --> 03:16:08,080
did the math right. But really, for the

6197
03:16:08,080 --> 03:16:09,680
quality and kind of for the industry

6198
03:16:09,680 --> 03:16:11,439
standard I've seen for price, that's on

6199
03:16:11,439 --> 03:16:12,960
the cheaper end. And as you can see down

6200
03:16:12,960 --> 03:16:14,960
here, it translates roughly to 2 cents,

6201
03:16:14,960 --> 03:16:17,279
7 cents, 19 cents per generated image

6202
03:16:17,279 --> 03:16:18,800
for low, medium, blah blah blah blah

6203
03:16:18,800 --> 03:16:20,399
blah. But anyways, now that that's out

6204
03:16:20,399 --> 03:16:22,319
of the way, let's just set up an HTTP

6205
03:16:22,319 --> 03:16:25,279
request to that API and generate an

6206
03:16:25,279 --> 03:16:26,720
image. So, I'm going to add a first

6207
03:16:26,720 --> 03:16:28,880
step. I'm just going to grab an HTTP

6208
03:16:28,880 --> 03:16:30,160
request. So, I'm just going to head over

6209
03:16:30,160 --> 03:16:31,920
to the actual API documentation from

6210
03:16:31,920 --> 03:16:34,080
OpenAI on how to create an image and how

6211
03:16:34,080 --> 03:16:35,600
to hit this endpoint. And all we're

6212
03:16:35,600 --> 03:16:36,560
going to do is we're going to copy this

6213
03:16:36,560 --> 03:16:38,239
curl command over here on the right. If

6214
03:16:38,239 --> 03:16:39,600
it you're not seeing a curl command, if

6215
03:16:39,600 --> 03:16:40,960
you're seeing Python, just change that

6216
03:16:40,960 --> 03:16:42,880
to curl. Copy that. And then we're going

6217
03:16:42,880 --> 03:16:45,680
to go back into Nitn. Hit import curl.

6218
03:16:45,680 --> 03:16:47,120
Paste that in there. And then once we

6219
03:16:47,120 --> 03:16:49,359
hit import, we're almost done. So that

6220
03:16:49,359 --> 03:16:50,800
curl statement basically just autopop

6221
03:16:50,800 --> 03:16:52,399
populated almost everything we need to

6222
03:16:52,399 --> 03:16:54,399
do. Now we just have a few minor tweaks.

6223
03:16:54,399 --> 03:16:55,520
But as you can see, it changed the

6224
03:16:55,520 --> 03:16:57,439
method to post. It gave us the correct

6225
03:16:57,439 --> 03:16:59,520
URL endpoint already. It has us sending

6226
03:16:59,520 --> 03:17:01,279
a header, which is our authorization,

6227
03:17:01,279 --> 03:17:02,640
and then it has our body parameters

6228
03:17:02,640 --> 03:17:04,080
filled out where all we'd really have to

6229
03:17:04,080 --> 03:17:06,239
change here is the prompt. And if we

6230
03:17:06,239 --> 03:17:07,840
wanted to, we can customize this kind of

6231
03:17:07,840 --> 03:17:09,200
stuff. And that's why it's going to be

6232
03:17:09,200 --> 03:17:10,800
really helpful to be able to understand

6233
03:17:10,800 --> 03:17:13,200
and read API documentation so you know

6234
03:17:13,200 --> 03:17:14,399
how to customize these different

6235
03:17:14,399 --> 03:17:16,319
requests. Basically, all of these little

6236
03:17:16,319 --> 03:17:18,000
things here like prompt, background,

6237
03:17:18,000 --> 03:17:20,640
model, n, output format, they're just

6238
03:17:20,640 --> 03:17:22,080
little levers that you can pull and

6239
03:17:22,080 --> 03:17:23,840
tweak in order to change your output.

6240
03:17:23,840 --> 03:17:25,040
But we're not going to dive too deep

6241
03:17:25,040 --> 03:17:26,800
into that right now. Let's just see how

6242
03:17:26,800 --> 03:17:28,399
we can create an image. Anyways, before

6243
03:17:28,399 --> 03:17:30,160
we grab our API key and plug that in,

6244
03:17:30,160 --> 03:17:32,399
when you're in your OpenAI account, make

6245
03:17:32,399 --> 03:17:33,680
sure that your organization is verified.

6246
03:17:33,680 --> 03:17:34,720
Otherwise, you're going to get this

6247
03:17:34,720 --> 03:17:35,840
error message and it's not going to let

6248
03:17:35,840 --> 03:17:37,680
you access the model. Doesn't take long.

6249
03:17:37,680 --> 03:17:39,760
Just submit an ID. And then also make

6250
03:17:39,760 --> 03:17:40,880
sure that you have billing information

6251
03:17:40,880 --> 03:17:43,840
set up so you can actually pay for um an

6252
03:17:43,840 --> 03:17:45,439
image. But then you're going to go down

6253
03:17:45,439 --> 03:17:47,840
here to API keys. You're going to create

6254
03:17:47,840 --> 03:17:49,760
new secret key. This one's going to be

6255
03:17:49,760 --> 03:17:52,960
called image test just for now. And then

6256
03:17:52,960 --> 03:17:55,040
you're going to copy that API key. Now

6257
03:17:55,040 --> 03:17:56,560
back in any then it has this already set

6258
03:17:56,560 --> 03:17:58,080
up for us where all we need to do is

6259
03:17:58,080 --> 03:18:00,080
delete all this. We're going to keep the

6260
03:18:00,080 --> 03:18:01,840
space after bearer. And we can paste in

6261
03:18:01,840 --> 03:18:03,760
our API key like that. and we're good to

6262
03:18:03,760 --> 03:18:06,160
go. But if you want a better method to

6263
03:18:06,160 --> 03:18:08,640
be able to save this key in Nadn so you

6264
03:18:08,640 --> 03:18:11,040
don't have to go find it every time.

6265
03:18:11,040 --> 03:18:11,960
What you can do is come to

6266
03:18:11,960 --> 03:18:14,399
authentication, go to general or

6267
03:18:14,399 --> 03:18:15,920
actually no it's generic and then you're

6268
03:18:15,920 --> 03:18:17,439
going to choose header off and we know

6269
03:18:17,439 --> 03:18:18,640
it's header because right here we're

6270
03:18:18,640 --> 03:18:20,319
sending headers as a header parameter

6271
03:18:20,319 --> 03:18:21,520
and this is where we're authorizing

6272
03:18:21,520 --> 03:18:22,880
oursel. So we're just going to do the

6273
03:18:22,880 --> 03:18:24,399
same up here with the header off. And

6274
03:18:24,399 --> 03:18:26,080
then we're going to create a new one.

6275
03:18:26,080 --> 03:18:28,800
I'm just going to call this one openai

6276
03:18:28,800 --> 03:18:30,080
image just so we can keep ourselves

6277
03:18:30,080 --> 03:18:31,920
organized.

6278
03:18:31,920 --> 03:18:33,040
And then you're going to do the same

6279
03:18:33,040 --> 03:18:34,880
thing as what we saw down in that header

6280
03:18:34,880 --> 03:18:37,160
parameter field. Meaning the

6281
03:18:37,160 --> 03:18:39,520
authorization is the name and then the

6282
03:18:39,520 --> 03:18:43,600
value was bearer space API key. So

6283
03:18:43,600 --> 03:18:44,880
that's all I'm going to do. I'm going to

6284
03:18:44,880 --> 03:18:47,520
hit save. We are now authorized to

6285
03:18:47,520 --> 03:18:49,279
access this endpoint. And I'm just going

6286
03:18:49,279 --> 03:18:51,520
to turn off sending headers because

6287
03:18:51,520 --> 03:18:52,960
we're technically sending headers right

6288
03:18:52,960 --> 03:18:55,439
up here with our authentication. So we

6289
03:18:55,439 --> 03:18:56,960
should be good now. Right now we'll be

6290
03:18:56,960 --> 03:18:58,640
getting an image of a cute baby sea

6291
03:18:58,640 --> 03:19:01,279
otter. Um, and I'm just going to say

6292
03:19:01,279 --> 03:19:03,600
making pancakes. And we'll hit test

6293
03:19:03,600 --> 03:19:05,279
step. And this should be running right

6294
03:19:05,279 --> 03:19:07,680
now. Um, okay. So, bad request. Please

6295
03:19:07,680 --> 03:19:09,600
check your parameters. Invalid type for

6296
03:19:09,600 --> 03:19:12,000
n. It expected an integer, but it got a

6297
03:19:12,000 --> 03:19:13,840
string instead. So, if you go back to

6298
03:19:13,840 --> 03:19:16,080
the API documentation, we can see n

6299
03:19:16,080 --> 03:19:18,160
right here. It should be integer or

6300
03:19:18,160 --> 03:19:20,160
null, and it's also optional. So, I'm

6301
03:19:20,160 --> 03:19:21,279
just going to delete that. We don't

6302
03:19:21,279 --> 03:19:22,120
really need

6303
03:19:22,120 --> 03:19:24,720
that. And I'm going to hit test step.

6304
03:19:24,720 --> 03:19:26,080
And while that's running real quick,

6305
03:19:26,080 --> 03:19:27,600
we'll just go back at n. And this

6306
03:19:27,600 --> 03:19:29,200
basically says the number of images to

6307
03:19:29,200 --> 03:19:31,439
generate must be between 1 and 10. So

6308
03:19:31,439 --> 03:19:32,640
that's like one of those little levers

6309
03:19:32,640 --> 03:19:34,399
you could tweak like I was talking about

6310
03:19:34,399 --> 03:19:36,479
if you want to customize your request.

6311
03:19:36,479 --> 03:19:38,000
But right now by default it's only going

6312
03:19:38,000 --> 03:19:40,000
to give us one. Looks like this HTTP

6313
03:19:40,000 --> 03:19:42,160
request is working. So I'll check in

6314
03:19:42,160 --> 03:19:45,200
with you guys in 20 seconds when this is

6315
03:19:45,200 --> 03:19:46,800
done. Okay. So now that that finished

6316
03:19:46,800 --> 03:19:48,960
up, didn't take too long. We have a few

6317
03:19:48,960 --> 03:19:50,239
things and all we really need is this

6318
03:19:50,239 --> 03:19:52,880
base 64. But we can see again this one

6319
03:19:52,880 --> 03:19:55,760
costed around 17. And now we just have

6320
03:19:55,760 --> 03:19:57,359
to turn this into binary so we can

6321
03:19:57,359 --> 03:19:59,200
actually view an image. So I'm going to

6322
03:19:59,200 --> 03:20:01,840
add a plus after the HTTP request. I'm

6323
03:20:01,840 --> 03:20:04,720
just going to type in binary. And we can

6324
03:20:04,720 --> 03:20:06,800
see convert to file, which is going to

6325
03:20:06,800 --> 03:20:09,279
convert JSON data to binary data. And

6326
03:20:09,279 --> 03:20:11,439
all we want to do here is move a B 64

6327
03:20:11,439 --> 03:20:14,239
string to file because this is a B 64

6328
03:20:14,239 --> 03:20:15,920
JSON. And this basically represents the

6329
03:20:15,920 --> 03:20:17,520
image. So I'm going to drag that into

6330
03:20:17,520 --> 03:20:19,840
there. And then when I hit test step, we

6331
03:20:19,840 --> 03:20:22,319
should be getting a binary image output

6332
03:20:22,319 --> 03:20:24,160
in a field called data. As you can see

6333
03:20:24,160 --> 03:20:25,920
right here, and this should be our image

6334
03:20:25,920 --> 03:20:28,880
of a cute sea otter making pancakes. As

6335
03:20:28,880 --> 03:20:30,399
you can see, um it's not super

6336
03:20:30,399 --> 03:20:32,080
realistic, and that's because the prompt

6337
03:20:32,080 --> 03:20:34,000
didn't have any like photorealistic,

6338
03:20:34,000 --> 03:20:36,239
hyperrealistic elements in there, but

6339
03:20:36,239 --> 03:20:38,080
you can easily make it do so. And of

6340
03:20:38,080 --> 03:20:39,040
course, I was playing around with this

6341
03:20:39,040 --> 03:20:40,399
earlier, and just to show you guys, you

6342
03:20:40,399 --> 03:20:41,920
can make some pretty cool realistic

6343
03:20:41,920 --> 03:20:45,040
images, here was um a post I made about

6344
03:20:45,040 --> 03:20:47,600
um if ancient Rome had access to

6345
03:20:47,600 --> 03:20:49,279
iPhones. And obviously, this is not like

6346
03:20:49,279 --> 03:20:51,040
a real Twitter account. Um, but this is

6347
03:20:51,040 --> 03:20:53,200
a dinosaurs evolved into modern-day

6348
03:20:53,200 --> 03:20:54,960
influencers. This was just for me

6349
03:20:54,960 --> 03:20:56,800
testing like an automation using this

6350
03:20:56,800 --> 03:20:59,359
API and auto posting, but not as

6351
03:20:59,359 --> 03:21:00,640
practical as like these LinkedIn

6352
03:21:00,640 --> 03:21:02,160
graphics. But if you guys want to see a

6353
03:21:02,160 --> 03:21:04,319
video sort of like this, let me know. Or

6354
03:21:04,319 --> 03:21:05,840
if you also want to see a more evolved

6355
03:21:05,840 --> 03:21:07,359
version of the LinkedIn posting flow and

6356
03:21:07,359 --> 03:21:09,040
how we can make it even more robust and

6357
03:21:09,040 --> 03:21:10,560
even more automated, then definitely let

6358
03:21:10,560 --> 03:21:13,439
me know about that as

6359
03:21:13,560 --> 03:21:15,520
well. Okay. Okay. So, all I have to do

6360
03:21:15,520 --> 03:21:17,040
in this form submission is enter in a

6361
03:21:17,040 --> 03:21:18,960
picture of a product, enter in the

6362
03:21:18,960 --> 03:21:20,960
product name, the product description,

6363
03:21:20,960 --> 03:21:22,479
and my email address. And we'll send

6364
03:21:22,479 --> 03:21:23,920
this off, and we'll see the workflow

6365
03:21:23,920 --> 03:21:26,080
over here start to fire off. So, we're

6366
03:21:26,080 --> 03:21:27,359
going to upload the photo. We're going

6367
03:21:27,359 --> 03:21:28,960
to get an image prompt. We're going to

6368
03:21:28,960 --> 03:21:30,479
download that photo. Now, we're creating

6369
03:21:30,479 --> 03:21:32,239
a professional graphic. So, after our

6370
03:21:32,239 --> 03:21:33,439
image has been generated, we're

6371
03:21:33,439 --> 03:21:35,520
uploading it to a API to get a public

6372
03:21:35,520 --> 03:21:38,000
URL so we can feed that URL of the image

6373
03:21:38,000 --> 03:21:40,239
into Runway to generate a professional

6374
03:21:40,239 --> 03:21:41,680
video. Now, we're going to wait 30

6375
03:21:41,680 --> 03:21:42,800
seconds and then we'll check in to see

6376
03:21:42,800 --> 03:21:44,399
if the video is done. If it's not done

6377
03:21:44,399 --> 03:21:45,600
yet, we're going to come down here and

6378
03:21:45,600 --> 03:21:47,279
pull, wait five more seconds, and then

6379
03:21:47,279 --> 03:21:48,800
go check in. And we're going to do this

6380
03:21:48,800 --> 03:21:50,399
infinitely until our video is actually

6381
03:21:50,399 --> 03:21:52,479
done. So, anyways, it just finished up.

6382
03:21:52,479 --> 03:21:54,080
It ended up hitting this check eight

6383
03:21:54,080 --> 03:21:55,600
times, which indicates I should probably

6384
03:21:55,600 --> 03:21:57,040
increase the wait time over here. But

6385
03:21:57,040 --> 03:21:58,319
anyways, let's go look at our finished

6386
03:21:58,319 --> 03:21:59,680
products. So, we just got this new

6387
03:21:59,680 --> 03:22:01,279
email. Here are the requested marketing

6388
03:22:01,279 --> 03:22:03,120
materials for your toothpaste. So,

6389
03:22:03,120 --> 03:22:04,160
first, let's look at the video cuz I

6390
03:22:04,160 --> 03:22:05,279
think that's more exciting. So, let me

6391
03:22:05,279 --> 03:22:06,479
open up this link. Wow, we got a

6392
03:22:06,479 --> 03:22:08,960
10-second video. It's spinning. It's 3D.

6393
03:22:08,960 --> 03:22:10,720
The lighting is changing. This looks

6394
03:22:10,720 --> 03:22:12,560
awesome. And then, of course, it also

6395
03:22:12,560 --> 03:22:13,920
sends us that image. in case we want to

6396
03:22:13,920 --> 03:22:15,520
use that as well. And one of the steps

6397
03:22:15,520 --> 03:22:16,560
in the workflow is that it's going to

6398
03:22:16,560 --> 03:22:17,920
upload your original image to your

6399
03:22:17,920 --> 03:22:19,439
Google Drive. So here you can see this

6400
03:22:19,439 --> 03:22:20,800
was the original and then this was the

6401
03:22:20,800 --> 03:22:22,399
finished product. So now you guys have

6402
03:22:22,399 --> 03:22:23,680
seen a demo. We're going to build this

6403
03:22:23,680 --> 03:22:25,920
entire workflow step by step. So stick

6404
03:22:25,920 --> 03:22:27,120
with me because by the end of this

6405
03:22:27,120 --> 03:22:28,800
video, you'll have this exact system up

6406
03:22:28,800 --> 03:22:30,479
and running. Okay. So when we're setting

6407
03:22:30,479 --> 03:22:32,080
up a system where we're creating an

6408
03:22:32,080 --> 03:22:33,680
image from text and then we're creating

6409
03:22:33,680 --> 03:22:35,840
a video from that image, the two most

6410
03:22:35,840 --> 03:22:37,200
important things are going to be that

6411
03:22:37,200 --> 03:22:38,880
image prompt and that video prompt. So

6412
03:22:38,880 --> 03:22:39,840
what we're going to do is head over to

6413
03:22:39,840 --> 03:22:41,200
my school community. The link for that

6414
03:22:41,200 --> 03:22:42,399
will be down in the description. It's a

6415
03:22:42,399 --> 03:22:43,840
free school community. And then what

6416
03:22:43,840 --> 03:22:44,960
you're going to do is either search for

6417
03:22:44,960 --> 03:22:46,800
the title of this video or click on

6418
03:22:46,800 --> 03:22:48,720
YouTube resources and find the post

6419
03:22:48,720 --> 03:22:50,479
associated with this video. And when you

6420
03:22:50,479 --> 03:22:52,239
click into there, there'll be a doc that

6421
03:22:52,239 --> 03:22:54,319
will look like this or a PDF and it will

6422
03:22:54,319 --> 03:22:55,680
have the two prompts that you'll need in

6423
03:22:55,680 --> 03:22:57,279
order to run the system. So head over

6424
03:22:57,279 --> 03:22:59,040
there, get that doc, and then we can hop

6425
03:22:59,040 --> 03:23:00,880
into the step by step. And that way we

6426
03:23:00,880 --> 03:23:02,560
can start to build this workflow and you

6427
03:23:02,560 --> 03:23:03,760
guys will have the prompts to plug right

6428
03:23:03,760 --> 03:23:06,000
in. Cool. So once you have those, let's

6429
03:23:06,000 --> 03:23:07,840
get started on the workflow. So as you

6430
03:23:07,840 --> 03:23:09,279
guys know, a workflow always has to

6431
03:23:09,279 --> 03:23:11,200
start with some sort of trigger. So in

6432
03:23:11,200 --> 03:23:12,560
this case, we're going to be triggering

6433
03:23:12,560 --> 03:23:14,479
this workflow with a form submission. So

6434
03:23:14,479 --> 03:23:16,160
I'm just going to grab the native NAN

6435
03:23:16,160 --> 03:23:18,160
form on new form event. So we're going

6436
03:23:18,160 --> 03:23:19,520
to configure what this form is going to

6437
03:23:19,520 --> 03:23:20,720
look like and what it's going to prompt

6438
03:23:20,720 --> 03:23:22,880
a user to input. And then whenever

6439
03:23:22,880 --> 03:23:24,720
someone actually submits a response,

6440
03:23:24,720 --> 03:23:26,080
that's when the workflow is going to

6441
03:23:26,080 --> 03:23:27,760
fire off. Okay. So I'm going to leave

6442
03:23:27,760 --> 03:23:29,520
the authentication as none. The form

6443
03:23:29,520 --> 03:23:31,120
title, I'm just putting go to market.

6444
03:23:31,120 --> 03:23:32,680
For the form description, I'm going to

6445
03:23:32,680 --> 03:23:36,399
say give us a product photo, title, and

6446
03:23:36,399 --> 03:23:37,760
description, and we'll get back to you

6447
03:23:37,760 --> 03:23:40,560
with professional marketing materials.

6448
03:23:40,560 --> 03:23:41,760
And if you guys are interested in what I

6449
03:23:41,760 --> 03:23:43,439
just used to dictate that text, there'll

6450
03:23:43,439 --> 03:23:44,880
be a link for Whisper Flow down in the

6451
03:23:44,880 --> 03:23:46,239
description. And now we need to add our

6452
03:23:46,239 --> 03:23:47,920
form elements. So the first one is going

6453
03:23:47,920 --> 03:23:50,000
to be not a text. We're going to have

6454
03:23:50,000 --> 03:23:52,399
them actually submit a file. So click on

6455
03:23:52,399 --> 03:23:54,239
file. This is going to be required. I

6456
03:23:54,239 --> 03:23:55,439
only want them to be allowed to upload

6457
03:23:55,439 --> 03:23:56,960
one file. So I'm going to switch off

6458
03:23:56,960 --> 03:23:59,359
multiple files. And then for the field

6459
03:23:59,359 --> 03:24:01,840
name, we're just going to say product

6460
03:24:01,840 --> 03:24:03,439
photo. Okay. So now we're going to add

6461
03:24:03,439 --> 03:24:04,800
another one, which is going to be the

6462
03:24:04,800 --> 03:24:05,920
product title. So I'm just going to

6463
03:24:05,920 --> 03:24:07,439
write product title. This is going to be

6464
03:24:07,439 --> 03:24:09,120
text. For placeholder, let's just put

6465
03:24:09,120 --> 03:24:10,880
toothpaste since that was the example.

6466
03:24:10,880 --> 03:24:12,479
This will be a required field. So, the

6467
03:24:12,479 --> 03:24:13,840
placeholder is just going to be the gray

6468
03:24:13,840 --> 03:24:15,439
text that fills in the text box so

6469
03:24:15,439 --> 03:24:17,359
people are kind of they know what to put

6470
03:24:17,359 --> 03:24:18,960
in. Okay, we're adding another one

6471
03:24:18,960 --> 03:24:21,359
called product description. We'll make

6472
03:24:21,359 --> 03:24:22,640
this one required. We'll just leave the

6473
03:24:22,640 --> 03:24:24,080
placeholder blank cuz you don't need it.

6474
03:24:24,080 --> 03:24:25,359
And then finally, what we need to get

6475
03:24:25,359 --> 03:24:27,120
from them is an email, but instead of

6476
03:24:27,120 --> 03:24:28,640
doing text, we can actually make it

6477
03:24:28,640 --> 03:24:30,960
require a valid email address. So, I'm

6478
03:24:30,960 --> 03:24:32,640
just going to call it email and we'll

6479
03:24:32,640 --> 03:24:34,279
just say like

6480
03:24:34,279 --> 03:24:36,239
namele.com so they know what a valid

6481
03:24:36,239 --> 03:24:37,359
email looks like. We'll make that

6482
03:24:37,359 --> 03:24:38,720
required because we have to send them an

6483
03:24:38,720 --> 03:24:40,720
email at the end with their materials.

6484
03:24:40,720 --> 03:24:42,479
And now we should be good to go. So if I

6485
03:24:42,479 --> 03:24:44,080
hit test step, we'll see that it's going

6486
03:24:44,080 --> 03:24:45,840
to open up a form submission and it has

6487
03:24:45,840 --> 03:24:47,200
everything that we just configured. And

6488
03:24:47,200 --> 03:24:48,880
now let me put in some sample data real

6489
03:24:48,880 --> 03:24:50,720
quick. Okay, so I put a picture of a

6490
03:24:50,720 --> 03:24:52,720
clone bottle. The title's clone. I said

6491
03:24:52,720 --> 03:24:54,239
the clone smells very clean and fresh

6492
03:24:54,239 --> 03:24:55,920
and it's a very sophisticated scent

6493
03:24:55,920 --> 03:24:57,120
because we're going to have that

6494
03:24:57,120 --> 03:24:58,960
description be used to sort of help

6495
03:24:58,960 --> 03:25:00,880
create that text image prompt. And then

6496
03:25:00,880 --> 03:25:02,080
I just put my email. So I'm going to

6497
03:25:02,080 --> 03:25:03,680
submit this form. We should see that

6498
03:25:03,680 --> 03:25:05,040
we're going to get data back right here

6499
03:25:05,040 --> 03:25:07,600
in our NIN, which is the binary photo.

6500
03:25:07,600 --> 03:25:08,720
This is the product photo that I just

6501
03:25:08,720 --> 03:25:10,960
submitted. And then we have our actual

6502
03:25:10,960 --> 03:25:13,520
table of information like the title, the

6503
03:25:13,520 --> 03:25:15,760
description, and the email. And so when

6504
03:25:15,760 --> 03:25:17,120
I'm building stuff step by step, what I

6505
03:25:17,120 --> 03:25:18,720
like to do is I get the data in here,

6506
03:25:18,720 --> 03:25:20,160
and then I pretty much will just build

6507
03:25:20,160 --> 03:25:22,319
node by node, testing the data all the

6508
03:25:22,319 --> 03:25:23,920
way through, making sure that nothing's

6509
03:25:23,920 --> 03:25:25,359
going to break when variables are being

6510
03:25:25,359 --> 03:25:27,200
passed from left to right in this

6511
03:25:27,200 --> 03:25:28,720
workflow. Okay, so the next thing that

6512
03:25:28,720 --> 03:25:30,800
we need to do is we have this binary

6513
03:25:30,800 --> 03:25:33,279
data in here and binary data is tough to

6514
03:25:33,279 --> 03:25:34,720
reference later. So what I'm going to do

6515
03:25:34,720 --> 03:25:35,840
is I'm just going to upload it straight

6516
03:25:35,840 --> 03:25:37,600
to our Google Drive so we can pull that

6517
03:25:37,600 --> 03:25:39,520
in later when we need it to actually

6518
03:25:39,520 --> 03:25:41,359
edit that image. Okay, so that's our

6519
03:25:41,359 --> 03:25:42,720
form trigger. That's what starts the

6520
03:25:42,720 --> 03:25:44,080
workflow. And now what we're going to do

6521
03:25:44,080 --> 03:25:46,000
next is we want to upload that original

6522
03:25:46,000 --> 03:25:48,239
image to Google Drive so we can pull it

6523
03:25:48,239 --> 03:25:50,239
in later and then use it to edit the

6524
03:25:50,239 --> 03:25:51,760
image. So what I'm going to do is I'm

6525
03:25:51,760 --> 03:25:53,120
going to click on the plus. I'm going to

6526
03:25:53,120 --> 03:25:54,560
type in Google Drive. And we're going to

6527
03:25:54,560 --> 03:25:56,560
grab a Google Drive operation. That is

6528
03:25:56,560 --> 03:25:58,960
going to be upload file. So, I'll click

6529
03:25:58,960 --> 03:26:00,720
on upload file. And at this point, you

6530
03:26:00,720 --> 03:26:02,319
need to connect your Google Drive. So,

6531
03:26:02,319 --> 03:26:03,359
I'm not going to walk through that step

6532
03:26:03,359 --> 03:26:04,960
by step, but I have a video right up

6533
03:26:04,960 --> 03:26:06,720
here where I do walk through it step by

6534
03:26:06,720 --> 03:26:08,399
step. But basically, you're just going

6535
03:26:08,399 --> 03:26:10,399
to go to Docs. You have to open up a

6536
03:26:10,399 --> 03:26:12,479
sort of Google Cloud profile or a

6537
03:26:12,479 --> 03:26:14,160
console, and then you just have to

6538
03:26:14,160 --> 03:26:15,600
connect yourself and enable the right

6539
03:26:15,600 --> 03:26:17,840
credentials and APIs. Um, but like I

6540
03:26:17,840 --> 03:26:19,359
said, that video will walk through it.

6541
03:26:19,359 --> 03:26:20,800
Anyways, now what we're doing is we have

6542
03:26:20,800 --> 03:26:23,920
to upload the binary field right here to

6543
03:26:23,920 --> 03:26:25,680
our Google Drive. So, it's not called

6544
03:26:25,680 --> 03:26:27,200
data. We can see over here it's called

6545
03:26:27,200 --> 03:26:28,399
product photo. So, I'm just going to

6546
03:26:28,399 --> 03:26:29,600
copy and paste that right there. So,

6547
03:26:29,600 --> 03:26:30,640
it's going to be looking for that

6548
03:26:30,640 --> 03:26:32,800
product photo. And then we have to give

6549
03:26:32,800 --> 03:26:34,800
it a name. So, that's why we had the

6550
03:26:34,800 --> 03:26:36,720
person submit a title. So, all I'm going

6551
03:26:36,720 --> 03:26:38,640
to do is for the name, I'm going to make

6552
03:26:38,640 --> 03:26:40,720
this an expression instead of fixed

6553
03:26:40,720 --> 03:26:42,319
because this name is going to change

6554
03:26:42,319 --> 03:26:43,840
based on the actual product coming

6555
03:26:43,840 --> 03:26:45,359
through. I'm going to drag in the

6556
03:26:45,359 --> 03:26:47,520
product title from the left right here.

6557
03:26:47,520 --> 03:26:49,760
So now the the photo in Google Drive is

6558
03:26:49,760 --> 03:26:51,439
going to be called cologne and then I'm

6559
03:26:51,439 --> 03:26:53,520
just going to in parenthesis say

6560
03:26:53,520 --> 03:26:55,359
original. So because this is an

6561
03:26:55,359 --> 03:26:56,880
expression, it basically means whenever

6562
03:26:56,880 --> 03:26:58,640
someone submits a form, whatever the

6563
03:26:58,640 --> 03:27:00,479
title is, it's going to be title and

6564
03:27:00,479 --> 03:27:01,920
then it's going to say original. And

6565
03:27:01,920 --> 03:27:03,279
that's how we sort of control that to be

6566
03:27:03,279 --> 03:27:05,120
dynamic. Anyways, then I'm just choosing

6567
03:27:05,120 --> 03:27:06,960
what folder to go in. So in my drive,

6568
03:27:06,960 --> 03:27:08,399
I'm going to choose it to go to a folder

6569
03:27:08,399 --> 03:27:10,800
that I just made called um product

6570
03:27:10,800 --> 03:27:12,479
creatives. So once we have that

6571
03:27:12,479 --> 03:27:14,080
configured, I'm going to hit test step.

6572
03:27:14,080 --> 03:27:15,760
We're going to wait for this to spin. it

6573
03:27:15,760 --> 03:27:16,960
means that it's trying to upload it

6574
03:27:16,960 --> 03:27:18,399
right now. And then once we get that

6575
03:27:18,399 --> 03:27:20,160
success message, we'll quickly go to our

6576
03:27:20,160 --> 03:27:21,439
Google Drive and make sure that the

6577
03:27:21,439 --> 03:27:23,760
image is actually there. So there we go.

6578
03:27:23,760 --> 03:27:25,120
It just came back. And now I'm going to

6579
03:27:25,120 --> 03:27:26,479
click into Google Drive, click out of

6580
03:27:26,479 --> 03:27:27,760
the toothpaste, and we can see we have

6581
03:27:27,760 --> 03:27:29,359
cologne. And that is the image that we

6582
03:27:29,359 --> 03:27:31,439
just submitted in NAN. All right. Now

6583
03:27:31,439 --> 03:27:33,120
that we've done that, what we want to do

6584
03:27:33,120 --> 03:27:35,279
is we want to feed the data into an AI

6585
03:27:35,279 --> 03:27:37,439
node so that it can create a text image

6586
03:27:37,439 --> 03:27:38,800
prompt. So I'm going to click on the

6587
03:27:38,800 --> 03:27:41,520
plus. I'm going to grab an AI agent. And

6588
03:27:41,520 --> 03:27:43,040
before we do anything in here, I'm first

6589
03:27:43,040 --> 03:27:44,640
of all going to give it its brain. So,

6590
03:27:44,640 --> 03:27:45,840
I'm going to click on the plus under

6591
03:27:45,840 --> 03:27:47,920
chat model. I'm personally going to grab

6592
03:27:47,920 --> 03:27:49,600
an open router chat model, which

6593
03:27:49,600 --> 03:27:51,680
basically lets you connect to a ton of

6594
03:27:51,680 --> 03:27:53,840
different things. Um, let me see. Open

6595
03:27:53,840 --> 03:27:55,760
router.ai. It basically lets you connect

6596
03:27:55,760 --> 03:27:57,760
your agents to all the different models.

6597
03:27:57,760 --> 03:27:59,520
So, if I click on models up here, we can

6598
03:27:59,520 --> 03:28:00,720
see that it just lets you connect to

6599
03:28:00,720 --> 03:28:03,359
Gemini, Anthropic, OpenAI, Deepseek. It

6600
03:28:03,359 --> 03:28:04,800
has all these models and all in one

6601
03:28:04,800 --> 03:28:06,960
place. So, go to open router, get an API

6602
03:28:06,960 --> 03:28:08,399
key, and then once you come back into

6603
03:28:08,399 --> 03:28:09,680
here, all you have to do is connect your

6604
03:28:09,680 --> 03:28:11,359
API key. And what I'm going to use here

6605
03:28:11,359 --> 03:28:14,000
is going to be 4.1. And then I'm just

6606
03:28:14,000 --> 03:28:15,520
going to name this so we know which one

6607
03:28:15,520 --> 03:28:18,479
I'm using here. And then we now have our

6608
03:28:18,479 --> 03:28:20,279
agent accessing

6609
03:28:20,279 --> 03:28:22,319
GPT4.1. Okay. So now you're going to go

6610
03:28:22,319 --> 03:28:24,160
to that PDF that I have in the school

6611
03:28:24,160 --> 03:28:26,000
community and you're just going to copy

6612
03:28:26,000 --> 03:28:29,120
this product photography prompt. Grab

6613
03:28:29,120 --> 03:28:31,439
that. Go back to the AI agent and then

6614
03:28:31,439 --> 03:28:33,200
you're going to click on add option. Add

6615
03:28:33,200 --> 03:28:34,960
a system message. And then we're

6616
03:28:34,960 --> 03:28:36,720
basically just going to I'm going to

6617
03:28:36,720 --> 03:28:38,239
click on expression and expand this full

6618
03:28:38,239 --> 03:28:39,680
screen so you guys can see it better.

6619
03:28:39,680 --> 03:28:40,800
But I'm just going to paste that prompt

6620
03:28:40,800 --> 03:28:42,479
in here. And this is going to tell the

6621
03:28:42,479 --> 03:28:44,560
AI agent how to take what we're giving

6622
03:28:44,560 --> 03:28:47,760
it and turn it into a text image

6623
03:28:47,760 --> 03:28:51,200
optimized prompt for professional style,

6624
03:28:51,200 --> 03:28:53,439
you know, studio photography. So, we're

6625
03:28:53,439 --> 03:28:55,279
not done yet because we have to actually

6626
03:28:55,279 --> 03:28:57,120
give it the dynamic information from our

6627
03:28:57,120 --> 03:28:59,760
form submission every time. So, that's a

6628
03:28:59,760 --> 03:29:01,200
user message. That's basically what it's

6629
03:29:01,200 --> 03:29:02,560
going to look at. So, the user message

6630
03:29:02,560 --> 03:29:03,840
is what the agent's going to look at

6631
03:29:03,840 --> 03:29:05,680
every time. And the system message is

6632
03:29:05,680 --> 03:29:07,040
basically like here are your

6633
03:29:07,040 --> 03:29:09,040
instructions. So for the user message,

6634
03:29:09,040 --> 03:29:10,239
we're not going to be using a connected

6635
03:29:10,239 --> 03:29:11,840
chat trigger node. We're going to define

6636
03:29:11,840 --> 03:29:13,920
below. And when we want to make sure

6637
03:29:13,920 --> 03:29:15,520
that this changes every time, we have to

6638
03:29:15,520 --> 03:29:17,359
make sure it's an expression. And then

6639
03:29:17,359 --> 03:29:19,040
I'm just going to drill down over here

6640
03:29:19,040 --> 03:29:20,800
to the form submission. And I'm going to

6641
03:29:20,800 --> 03:29:21,760
say, okay, here's what we're going to

6642
03:29:21,760 --> 03:29:24,560
give this agent. It's going to get the

6643
03:29:24,560 --> 03:29:26,880
product, which the person submitted to

6644
03:29:26,880 --> 03:29:29,520
us in the form, and we can drag in the

6645
03:29:29,520 --> 03:29:31,120
product, which was cologne, as you can

6646
03:29:31,120 --> 03:29:33,040
see on the right. And then they also

6647
03:29:33,040 --> 03:29:36,000
gave us a description. So, all I have to

6648
03:29:36,000 --> 03:29:37,120
do now is drag in the product

6649
03:29:37,120 --> 03:29:38,720
description. And so, now every time the

6650
03:29:38,720 --> 03:29:40,720
agent will be looking at whatever

6651
03:29:40,720 --> 03:29:42,160
product and description that the user

6652
03:29:42,160 --> 03:29:44,160
submitted in order to create its prompt.

6653
03:29:44,160 --> 03:29:46,160
So, I'm going to hit test step. We'll

6654
03:29:46,160 --> 03:29:48,040
see right now it's using its chat model

6655
03:29:48,040 --> 03:29:50,080
GPT4.1. And it's already created that

6656
03:29:50,080 --> 03:29:51,439
prompt for us. So, let's just give it a

6657
03:29:51,439 --> 03:29:53,600
quick read. Hyperrealistic photo of

6658
03:29:53,600 --> 03:29:54,800
sophisticated cologne bottle,

6659
03:29:54,800 --> 03:29:56,640
transparent glass, sleek minimalistic

6660
03:29:56,640 --> 03:29:59,120
design, silver metal cap, all this. But

6661
03:29:59,120 --> 03:30:00,560
what we have to do is we have to make

6662
03:30:00,560 --> 03:30:02,560
sure that the image isn't being created

6663
03:30:02,560 --> 03:30:04,640
just on this. It has to look at this,

6664
03:30:04,640 --> 03:30:06,720
but it also has to look at the actual

6665
03:30:06,720 --> 03:30:08,479
original image. So that's why our next

6666
03:30:08,479 --> 03:30:10,160
step is going to be to redownload this

6667
03:30:10,160 --> 03:30:11,760
file and then we're going to push it

6668
03:30:11,760 --> 03:30:13,840
over to the image generation model. So

6669
03:30:13,840 --> 03:30:15,200
at this point, you may be wondering like

6670
03:30:15,200 --> 03:30:16,720
why are we going to upload the file if

6671
03:30:16,720 --> 03:30:18,319
we're just going to download it again?

6672
03:30:18,319 --> 03:30:19,840
And the reason why I had to do that is

6673
03:30:19,840 --> 03:30:21,600
because when we get the file in the form

6674
03:30:21,600 --> 03:30:24,000
of binary, we want to send the binary

6675
03:30:24,000 --> 03:30:26,960
data into the HTTP request right here

6676
03:30:26,960 --> 03:30:28,960
that actually generates the image. And

6677
03:30:28,960 --> 03:30:30,720
we can't reference the binary way over

6678
03:30:30,720 --> 03:30:32,239
here if it's only coming through over

6679
03:30:32,239 --> 03:30:34,160
here. So, we upload it so that we can

6680
03:30:34,160 --> 03:30:35,680
then download it and then send it right

6681
03:30:35,680 --> 03:30:37,120
back in. And so, if that doesn't make

6682
03:30:37,120 --> 03:30:38,800
sense yet, it probably will once we get

6683
03:30:38,800 --> 03:30:41,600
over to the stage. But that's why.

6684
03:30:41,600 --> 03:30:43,040
Anyways, next step is we're going to

6685
03:30:43,040 --> 03:30:44,080
download that file. So, I'm going to

6686
03:30:44,080 --> 03:30:45,680
click on this plus. We're going to be

6687
03:30:45,680 --> 03:30:47,520
downloading it from Google Drive and

6688
03:30:47,520 --> 03:30:48,800
we're going to be using the operation

6689
03:30:48,800 --> 03:30:51,520
download file. So, we already should be

6690
03:30:51,520 --> 03:30:52,560
connected because we've set up our

6691
03:30:52,560 --> 03:30:54,239
Google credentials already. The

6692
03:30:54,239 --> 03:30:55,760
operation is going to be download the

6693
03:30:55,760 --> 03:30:57,600
resources a file and instead of choosing

6694
03:30:57,600 --> 03:30:59,279
from a list, we're going to choose by

6695
03:30:59,279 --> 03:31:00,800
ID. And all we're going to do is

6696
03:31:00,800 --> 03:31:02,160
download that file that we previously

6697
03:31:02,160 --> 03:31:03,680
uploaded every time. So I'm going to

6698
03:31:03,680 --> 03:31:05,439
come over here, the Google Drive, upload

6699
03:31:05,439 --> 03:31:08,239
photo node, drag in the ID, and now we

6700
03:31:08,239 --> 03:31:09,520
can see that's all we have to do. If we

6701
03:31:09,520 --> 03:31:11,680
hit test step, we'll get back that file

6702
03:31:11,680 --> 03:31:13,200
that we originally uploaded. And we can

6703
03:31:13,200 --> 03:31:15,279
just make sure it's the cologne bottle.

6704
03:31:15,279 --> 03:31:16,960
Okay, but now it's time to basically use

6705
03:31:16,960 --> 03:31:19,120
that downloaded file and the image

6706
03:31:19,120 --> 03:31:21,200
prompt and send that over to an API

6707
03:31:21,200 --> 03:31:23,760
that's going to create an image for us.

6708
03:31:23,760 --> 03:31:25,200
So we're going to be using OpenAI's

6709
03:31:25,200 --> 03:31:26,960
image generator. So here is the

6710
03:31:26,960 --> 03:31:28,880
documentation. we have the ability to

6711
03:31:28,880 --> 03:31:30,479
create an image or we can create an

6712
03:31:30,479 --> 03:31:32,080
image edit which is what we want to do

6713
03:31:32,080 --> 03:31:33,680
because we wanted to look at the photo

6714
03:31:33,680 --> 03:31:36,560
and our request. So typically what you

6715
03:31:36,560 --> 03:31:38,160
can do in this documentation is you can

6716
03:31:38,160 --> 03:31:40,080
copy the curl command but this curl

6717
03:31:40,080 --> 03:31:41,439
command is actually broken so we're not

6718
03:31:41,439 --> 03:31:43,040
going to do that. If you copied this one

6719
03:31:43,040 --> 03:31:44,560
up here to actually just create an image

6720
03:31:44,560 --> 03:31:46,319
that one would work fine but there's

6721
03:31:46,319 --> 03:31:47,920
like a bug with this one right now. So

6722
03:31:47,920 --> 03:31:50,880
anyways I'm going to go into our n I'm

6723
03:31:50,880 --> 03:31:51,920
going to hit the plus. I'm going to grab

6724
03:31:51,920 --> 03:31:54,319
an HTTP request and now we're going to

6725
03:31:54,319 --> 03:31:57,120
configure this request. So, I'm going to

6726
03:31:57,120 --> 03:31:58,479
walk through how I'm reading the API

6727
03:31:58,479 --> 03:32:00,560
documentation right here to set this up.

6728
03:32:00,560 --> 03:32:01,680
I'm not going to go super super

6729
03:32:01,680 --> 03:32:03,279
in-depth, but if you get confused along

6730
03:32:03,279 --> 03:32:04,720
the way, then definitely check out my

6731
03:32:04,720 --> 03:32:06,239
paid course. The link for that down in

6732
03:32:06,239 --> 03:32:07,680
the description. I've got a full course

6733
03:32:07,680 --> 03:32:10,000
on deep diving into APIs and HTTP

6734
03:32:10,000 --> 03:32:11,680
requests. Anyways, the first thing we

6735
03:32:11,680 --> 03:32:13,359
see is we're going to be making a post

6736
03:32:13,359 --> 03:32:15,600
request to this endpoint. So, the first

6737
03:32:15,600 --> 03:32:16,800
thing I'm going to do is copy this

6738
03:32:16,800 --> 03:32:18,479
endpoint. We're going to paste that in.

6739
03:32:18,479 --> 03:32:19,439
And then we're also going to make sure

6740
03:32:19,439 --> 03:32:21,840
the method is set to post. So, the next

6741
03:32:21,840 --> 03:32:23,040
thing that we have to do is authorize

6742
03:32:23,040 --> 03:32:25,120
ourselves somehow. So over here I can

6743
03:32:25,120 --> 03:32:26,960
see that we have a header and the name

6744
03:32:26,960 --> 03:32:28,560
is going to be authorization and then

6745
03:32:28,560 --> 03:32:31,120
the value is going to be bearer space R

6746
03:32:31,120 --> 03:32:33,439
open AI key. So that's why I set up a

6747
03:32:33,439 --> 03:32:35,200
header authentication already. So in

6748
03:32:35,200 --> 03:32:36,960
authentication I went to generic and

6749
03:32:36,960 --> 03:32:39,120
then I went to header and then you can

6750
03:32:39,120 --> 03:32:40,479
see I have a bunch of different headers

6751
03:32:40,479 --> 03:32:42,319
already set up. But what I did here is I

6752
03:32:42,319 --> 03:32:44,239
chose my OpenAI one where basically all

6753
03:32:44,239 --> 03:32:46,319
I did was I typed in here authorization

6754
03:32:46,319 --> 03:32:48,560
and then in the value I typed in bearer

6755
03:32:48,560 --> 03:32:50,640
space and then I pasted my API key in

6756
03:32:50,640 --> 03:32:52,479
there. And now I have my OpenAI

6757
03:32:52,479 --> 03:32:54,720
credential saved forever. Okay. So the

6758
03:32:54,720 --> 03:32:56,399
first thing we have to do in our body

6759
03:32:56,399 --> 03:32:58,960
request over to OpenAI is we have to

6760
03:32:58,960 --> 03:33:00,960
send over the image to edit. So that's

6761
03:33:00,960 --> 03:33:02,399
going to be in a field called image. And

6762
03:33:02,399 --> 03:33:03,760
then we're sending over the actual

6763
03:33:03,760 --> 03:33:05,920
photo. So what I'm going to do is I'm

6764
03:33:05,920 --> 03:33:07,920
going to click on send body. I'm going

6765
03:33:07,920 --> 03:33:10,560
to use form data. And now we can set up

6766
03:33:10,560 --> 03:33:12,160
the different names and values to send

6767
03:33:12,160 --> 03:33:13,840
over. So the first thing is we're going

6768
03:33:13,840 --> 03:33:15,279
to send over this image right here on

6769
03:33:15,279 --> 03:33:16,880
the lefth hand side. And this is in a

6770
03:33:16,880 --> 03:33:18,800
field called data. And it's binary. So,

6771
03:33:18,800 --> 03:33:19,920
I'm going to choose instead of form

6772
03:33:19,920 --> 03:33:21,359
data, I'm going to send over an NAN

6773
03:33:21,359 --> 03:33:23,439
binary file. The name is going to be

6774
03:33:23,439 --> 03:33:24,880
image because that's what it said in the

6775
03:33:24,880 --> 03:33:26,880
documentation. And the input data field

6776
03:33:26,880 --> 03:33:28,800
name is data. So, I'm just going to copy

6777
03:33:28,800 --> 03:33:30,399
that, paste it in there. And this

6778
03:33:30,399 --> 03:33:32,479
basically means, okay, we're sending

6779
03:33:32,479 --> 03:33:34,319
over this picture. The next thing we

6780
03:33:34,319 --> 03:33:36,479
need to send over is a prompt. So, the

6781
03:33:36,479 --> 03:33:37,600
name of this field is going to be

6782
03:33:37,600 --> 03:33:39,359
prompt. I'm just going to copy that, add

6783
03:33:39,359 --> 03:33:42,080
a new parameter, and call it prompt. And

6784
03:33:42,080 --> 03:33:43,520
then for the value, we want to send over

6785
03:33:43,520 --> 03:33:45,040
the prompt that we had our AI agent

6786
03:33:45,040 --> 03:33:46,239
write. So, I'm going to click into

6787
03:33:46,239 --> 03:33:47,760
schema and I'm just going to drag over

6788
03:33:47,760 --> 03:33:49,840
the output from the AI agent right

6789
03:33:49,840 --> 03:33:51,840
there. And now that's an expression. So,

6790
03:33:51,840 --> 03:33:53,120
the next thing we want to send over is

6791
03:33:53,120 --> 03:33:54,880
what model do we want to use? Because if

6792
03:33:54,880 --> 03:33:56,080
we don't put this in, it's going to

6793
03:33:56,080 --> 03:33:58,840
default to dolly 2, but we want to use

6794
03:33:58,840 --> 03:34:01,680
gpt-image- one. So, I'm going to copy

6795
03:34:01,680 --> 03:34:04,319
GPT- image- one. We're going to come

6796
03:34:04,319 --> 03:34:05,600
back into here, and I'm going to paste

6797
03:34:05,600 --> 03:34:08,080
that in as the value, but then the name

6798
03:34:08,080 --> 03:34:09,760
is model because, as you can see in

6799
03:34:09,760 --> 03:34:11,920
here, right there, it says model. So

6800
03:34:11,920 --> 03:34:13,040
hopefully you guys can see that when

6801
03:34:13,040 --> 03:34:15,520
we're sending over an API call, we just

6802
03:34:15,520 --> 03:34:16,720
have all of these different options

6803
03:34:16,720 --> 03:34:18,160
where we can sort of tweak different

6804
03:34:18,160 --> 03:34:20,640
settings to change the way that we get

6805
03:34:20,640 --> 03:34:22,479
the output back. And then you have some

6806
03:34:22,479 --> 03:34:23,920
other options, of course, like quality

6807
03:34:23,920 --> 03:34:25,680
or size. But right now, we're just going

6808
03:34:25,680 --> 03:34:27,200
to leave all that as default and just go

6809
03:34:27,200 --> 03:34:28,479
with these three things to keep it

6810
03:34:28,479 --> 03:34:30,000
simple. And I'm going to hit test step

6811
03:34:30,000 --> 03:34:32,319
and we'll see if this is working. Okay,

6812
03:34:32,319 --> 03:34:34,000
never mind. I got an error and I was

6813
03:34:34,000 --> 03:34:35,200
like, okay, I think I did everything

6814
03:34:35,200 --> 03:34:36,800
right. The reason I got the error is

6815
03:34:36,800 --> 03:34:38,319
because I don't have any more credits.

6816
03:34:38,319 --> 03:34:40,640
So, if you get this error, go add some

6817
03:34:40,640 --> 03:34:42,560
credits. Okay, so added more credits.

6818
03:34:42,560 --> 03:34:43,760
I'm going to try this again and I'll

6819
03:34:43,760 --> 03:34:45,520
check back in. But before I do that, I

6820
03:34:45,520 --> 03:34:48,479
wanted to say me clearly, I've been like

6821
03:34:48,479 --> 03:34:50,399
spamming this thing with creating images

6822
03:34:50,399 --> 03:34:52,239
cuz it's so cool. It's so fun. But

6823
03:34:52,239 --> 03:34:53,680
everyone else in the world has also been

6824
03:34:53,680 --> 03:34:55,040
doing that. So, if you're ever getting

6825
03:34:55,040 --> 03:34:56,720
some sort of like errors where it's like

6826
03:34:56,720 --> 03:34:58,880
a 500 type of error where it means like

6827
03:34:58,880 --> 03:35:00,800
something's going on on the server side

6828
03:35:00,800 --> 03:35:02,560
of things or you're seeing like some

6829
03:35:02,560 --> 03:35:04,560
sort of rate limit stuff, keep in mind

6830
03:35:04,560 --> 03:35:06,080
that there's there's a limit on how many

6831
03:35:06,080 --> 03:35:07,920
images you can send per minute. I don't

6832
03:35:07,920 --> 03:35:09,160
think that's been clearly defined on

6833
03:35:09,160 --> 03:35:13,200
GPT- image-1. But also, if the OpenAI

6834
03:35:13,200 --> 03:35:14,479
server is receiving way too many

6835
03:35:14,479 --> 03:35:16,399
requests, that is also another reason

6836
03:35:16,399 --> 03:35:18,720
why your request may be failing. So,

6837
03:35:18,720 --> 03:35:20,720
just keep that in mind. Okay, so now it

6838
03:35:20,720 --> 03:35:22,160
worked. We just got that back. But what

6839
03:35:22,160 --> 03:35:23,600
you'll notice is we don't see an image

6840
03:35:23,600 --> 03:35:25,600
here or like an image URL. So, what we

6841
03:35:25,600 --> 03:35:27,600
have to do is we have this base 64

6842
03:35:27,600 --> 03:35:30,080
string and we have to turn that into

6843
03:35:30,080 --> 03:35:32,000
binary data. So, what I'm going to do is

6844
03:35:32,000 --> 03:35:33,920
after this node, I'm going to add one

6845
03:35:33,920 --> 03:35:37,279
that says um convert to file. So we're

6846
03:35:37,279 --> 03:35:38,960
going to convert JSON data to binary

6847
03:35:38,960 --> 03:35:41,680
data and we're going to do B 64. So all

6848
03:35:41,680 --> 03:35:43,120
I have to do now is show this data on

6849
03:35:43,120 --> 03:35:45,359
the lefth hand side. Grab the base 64

6850
03:35:45,359 --> 03:35:47,200
string. And then when we hit test step,

6851
03:35:47,200 --> 03:35:48,880
we should get a binary file over here,

6852
03:35:48,880 --> 03:35:50,399
which if we click into it, this should

6853
03:35:50,399 --> 03:35:52,720
be our professional looking photo. Wow,

6854
03:35:52,720 --> 03:35:54,239
that looks great. It even got the

6855
03:35:54,239 --> 03:35:55,760
wording and like the same fonts right.

6856
03:35:55,760 --> 03:35:58,160
So that's awesome. And by the way, if we

6857
03:35:58,160 --> 03:36:00,000
click into the results of the create

6858
03:36:00,000 --> 03:36:01,760
image where we did the image edit, we

6859
03:36:01,760 --> 03:36:04,560
can see the tokens. And with this model,

6860
03:36:04,560 --> 03:36:06,880
it is basically $10 for a million input

6861
03:36:06,880 --> 03:36:09,120
tokens and $40 for a million output

6862
03:36:09,120 --> 03:36:10,640
tokens. So right here, you can see the

6863
03:36:10,640 --> 03:36:12,000
difference between our input and output

6864
03:36:12,000 --> 03:36:13,439
tokens. And this one was pretty cheap. I

6865
03:36:13,439 --> 03:36:15,279
think it was like 5 cents. Anyways, now

6866
03:36:15,279 --> 03:36:16,720
that we have that image right here as

6867
03:36:16,720 --> 03:36:19,359
binary data, we need to turn that into a

6868
03:36:19,359 --> 03:36:21,840
video using an API called Runway. And so

6869
03:36:21,840 --> 03:36:23,760
if we go into Runway and we go first of

6870
03:36:23,760 --> 03:36:25,200
all, let's look at the price. For a

6871
03:36:25,200 --> 03:36:27,279
5second video, 25 cents. For a 10-second

6872
03:36:27,279 --> 03:36:28,800
video, 50 cents. So that's the one we're

6873
03:36:28,800 --> 03:36:30,800
going to be doing today. But if we go to

6874
03:36:30,800 --> 03:36:32,479
the API reference to read how we can

6875
03:36:32,479 --> 03:36:34,880
turn an image into a video, what we need

6876
03:36:34,880 --> 03:36:36,640
to look at is how we actually send over

6877
03:36:36,640 --> 03:36:38,479
that image. And what we have to do here

6878
03:36:38,479 --> 03:36:42,080
is send over an HTTPS URL of the image.

6879
03:36:42,080 --> 03:36:43,600
So we somehow have to get this binary

6880
03:36:43,600 --> 03:36:46,319
data in NADN to a public image that

6881
03:36:46,319 --> 03:36:48,319
runway can access. So the way I'm going

6882
03:36:48,319 --> 03:36:50,239
to be doing that is with this API that's

6883
03:36:50,239 --> 03:36:53,439
free called image BB. And um it's a free

6884
03:36:53,439 --> 03:36:55,359
image hosting service. And what we can

6885
03:36:55,359 --> 03:36:57,520
do is basically just use its API to send

6886
03:36:57,520 --> 03:36:59,520
over the binary data and we'll get back

6887
03:36:59,520 --> 03:37:02,239
a public URL. So come here, make a free

6888
03:37:02,239 --> 03:37:03,840
account. You'll grab your API key from

6889
03:37:03,840 --> 03:37:05,920
up top. And then we basically have

6890
03:37:05,920 --> 03:37:07,439
here's how we set this up. So what I'm

6891
03:37:07,439 --> 03:37:08,479
going to do is I'm going to copy the

6892
03:37:08,479 --> 03:37:10,160
endpoint right there. We're going to go

6893
03:37:10,160 --> 03:37:12,080
back into naden and I'm going to add an

6894
03:37:12,080 --> 03:37:15,439
HTTP request. And let me just configure

6895
03:37:15,439 --> 03:37:16,960
this up. We'll put it over here just to

6896
03:37:16,960 --> 03:37:18,720
keep everything sort of square. But now

6897
03:37:18,720 --> 03:37:20,000
what I'm going to do in here is paste

6898
03:37:20,000 --> 03:37:22,800
that endpoint in as our URL. You can

6899
03:37:22,800 --> 03:37:24,479
also see that it says this call can be

6900
03:37:24,479 --> 03:37:26,560
done using post or git. But since git

6901
03:37:26,560 --> 03:37:28,000
requests are limited by the max amount

6902
03:37:28,000 --> 03:37:29,439
of length, you should probably do post.

6903
03:37:29,439 --> 03:37:30,640
So I'm just going to go back in here and

6904
03:37:30,640 --> 03:37:32,399
change this to a post. And then there

6905
03:37:32,399 --> 03:37:33,680
are basically two things that are

6906
03:37:33,680 --> 03:37:35,600
required. The first one is our API key.

6907
03:37:35,600 --> 03:37:37,359
And then the second one is the actual

6908
03:37:37,359 --> 03:37:39,600
image. Anyways, this documentation is

6909
03:37:39,600 --> 03:37:41,680
not super intuitive. I can sort of tell

6910
03:37:41,680 --> 03:37:43,439
that this is a query parameter because

6911
03:37:43,439 --> 03:37:45,520
it's being attached at the end of the

6912
03:37:45,520 --> 03:37:46,960
endpoint with a question mark and all

6913
03:37:46,960 --> 03:37:47,920
this kind of stuff. And that's just

6914
03:37:47,920 --> 03:37:49,600
because I've looked at tons of API

6915
03:37:49,600 --> 03:37:51,279
documentation. So, what I'm going to do

6916
03:37:51,279 --> 03:37:53,680
is go into nit. We're going to add a

6917
03:37:53,680 --> 03:37:55,200
generic credential type. It's going to

6918
03:37:55,200 --> 03:37:57,359
be a query off. Where where was query?

6919
03:37:57,359 --> 03:37:58,960
There we go. And then you can see I've

6920
03:37:58,960 --> 03:38:00,640
already added my image BB. But all

6921
03:38:00,640 --> 03:38:02,080
you're going to do is you would add the

6922
03:38:02,080 --> 03:38:03,439
name as a key. And then you would just

6923
03:38:03,439 --> 03:38:05,439
paste in your API key. And that's it.

6924
03:38:05,439 --> 03:38:07,279
And now we've authenticated ourselves to

6925
03:38:07,279 --> 03:38:09,279
the service. And then what's next is we

6926
03:38:09,279 --> 03:38:10,800
need to send over the image in a field

6927
03:38:10,800 --> 03:38:12,399
called image. So I'm going to go back in

6928
03:38:12,399 --> 03:38:14,000
here. I'm going to send over a body

6929
03:38:14,000 --> 03:38:15,640
because this allows us to actually send

6930
03:38:15,640 --> 03:38:18,640
over n binary fields. And I'm not going

6931
03:38:18,640 --> 03:38:20,160
to do n binary. I'm going to do form

6932
03:38:20,160 --> 03:38:21,600
data because then we can name the field

6933
03:38:21,600 --> 03:38:23,680
we're sending over. Like I said, not

6934
03:38:23,680 --> 03:38:24,880
going to deep dive into how that all

6935
03:38:24,880 --> 03:38:26,479
works, but the name is going to be image

6936
03:38:26,479 --> 03:38:28,479
and then the input data field name is

6937
03:38:28,479 --> 03:38:30,080
going to be data because that's how it's

6938
03:38:30,080 --> 03:38:32,000
seen over here. And this should be it.

6939
03:38:32,000 --> 03:38:33,520
So, real quick, I'm just going to change

6940
03:38:33,520 --> 03:38:36,000
this to get URL. And then we're going to

6941
03:38:36,000 --> 03:38:37,680
hit test step, which is going to send

6942
03:38:37,680 --> 03:38:40,560
over that binary data to image BB. And

6943
03:38:40,560 --> 03:38:42,080
it hopefully should be sending us back a

6944
03:38:42,080 --> 03:38:44,080
URL. And it sent back three of them. I'm

6945
03:38:44,080 --> 03:38:45,200
going to be using the middle one that's

6946
03:38:45,200 --> 03:38:47,040
just called URL because it's like the

6947
03:38:47,040 --> 03:38:48,720
best size and everything. You can look

6948
03:38:48,720 --> 03:38:50,000
at the other ones if you want on your

6949
03:38:50,000 --> 03:38:52,000
end, but this one is going to load up

6950
03:38:52,000 --> 03:38:54,239
and we should see it's the image that we

6951
03:38:54,239 --> 03:38:55,680
got generated for us. It takes a while

6952
03:38:55,680 --> 03:38:57,279
to load up on that first time, but as

6953
03:38:57,279 --> 03:38:58,960
you can see now, it's a publicly

6954
03:38:58,960 --> 03:39:00,800
accessible URL and then we can feed it

6955
03:39:00,800 --> 03:39:03,359
into runway. So that's exactly our next

6956
03:39:03,359 --> 03:39:05,200
step. We're going to add another request

6957
03:39:05,200 --> 03:39:07,359
right here. It's going to be an HTTP and

6958
03:39:07,359 --> 03:39:08,960
this one we're going to configure to hit

6959
03:39:08,960 --> 03:39:11,359
runway. So here's a good example of we

6960
03:39:11,359 --> 03:39:12,880
can actually use a curl command. So I'm

6961
03:39:12,880 --> 03:39:14,319
going to click on copy over here when

6962
03:39:14,319 --> 03:39:16,319
I'm in the runway. Generate a video from

6963
03:39:16,319 --> 03:39:19,200
image. Come back into Naden, hit import

6964
03:39:19,200 --> 03:39:21,120
curl, and paste that in there and hit

6965
03:39:21,120 --> 03:39:22,560
import. And this is going to basically

6966
03:39:22,560 --> 03:39:24,160
configure everything we need. We just

6967
03:39:24,160 --> 03:39:26,080
have to tweak a few things. Typically,

6968
03:39:26,080 --> 03:39:27,840
most API documentation nowadays will

6969
03:39:27,840 --> 03:39:29,840
have a curl command. The edit image one

6970
03:39:29,840 --> 03:39:31,040
that we set up earlier was just a little

6971
03:39:31,040 --> 03:39:33,840
broken. Imag is just a free service, so

6972
03:39:33,840 --> 03:39:35,840
sometimes they don't always. But let's

6973
03:39:35,840 --> 03:39:37,760
configure this node. So, the first thing

6974
03:39:37,760 --> 03:39:39,439
I see is we have a header off right

6975
03:39:39,439 --> 03:39:40,800
here. And I don't want to send it like

6976
03:39:40,800 --> 03:39:42,399
this. I want to send it up as a generic

6977
03:39:42,399 --> 03:39:44,479
type so I can save it. Otherwise, you'd

6978
03:39:44,479 --> 03:39:45,920
have to go get your API key every time

6979
03:39:45,920 --> 03:39:47,760
you wanted to use Runway. So, as you can

6980
03:39:47,760 --> 03:39:49,600
see, I've already set up my Runway API

6981
03:39:49,600 --> 03:39:51,439
key. So, I have it plugged in, but what

6982
03:39:51,439 --> 03:39:53,200
you would do is you'd go get your API

6983
03:39:53,200 --> 03:39:55,200
key from Runway. And then you'd see,

6984
03:39:55,200 --> 03:39:56,600
okay, how do we actually send over

6985
03:39:56,600 --> 03:39:58,560
authentication? It comes through with

6986
03:39:58,560 --> 03:40:00,880
the name authorization. And then the

6987
03:40:00,880 --> 03:40:03,600
header is bearer space API key. So,

6988
03:40:03,600 --> 03:40:05,120
similar to the last one. And then that's

6989
03:40:05,120 --> 03:40:06,319
all you would do in here when you're

6990
03:40:06,319 --> 03:40:07,920
setting up your runway credential.

6991
03:40:07,920 --> 03:40:11,200
Authorization bearer space my API key.

6992
03:40:11,200 --> 03:40:12,399
And then because we have ourselves

6993
03:40:12,399 --> 03:40:14,319
authenticated up here, we can flick off

6994
03:40:14,319 --> 03:40:15,840
that headers. And all we have to do now

6995
03:40:15,840 --> 03:40:17,920
is configure the actual body. Okay, so

6996
03:40:17,920 --> 03:40:19,760
first things first, what image are we

6997
03:40:19,760 --> 03:40:21,520
sending over to get turned into a video

6998
03:40:21,520 --> 03:40:23,279
in that name prompt image? We're going

6999
03:40:23,279 --> 03:40:24,960
to get rid of that value. And I'm just

7000
03:40:24,960 --> 03:40:27,120
going to drag in the URL that we wanted

7001
03:40:27,120 --> 03:40:28,960
that we got from earlier, which was that

7002
03:40:28,960 --> 03:40:30,720
picture I s I showed you guys. So now

7003
03:40:30,720 --> 03:40:33,359
runway sees that image. Next, we have

7004
03:40:33,359 --> 03:40:34,960
the seed, which if you want to look at

7005
03:40:34,960 --> 03:40:36,080
the documentation, you can play with it,

7006
03:40:36,080 --> 03:40:37,439
but I'm just going to get rid of that.

7007
03:40:37,439 --> 03:40:38,800
Then we have the model, which we're

7008
03:40:38,800 --> 03:40:41,120
going to be using, Gen 4 Turbo. We then

7009
03:40:41,120 --> 03:40:42,800
have the prompt text. So, this is where

7010
03:40:42,800 --> 03:40:44,160
we're going to get rid of this. And

7011
03:40:44,160 --> 03:40:46,399
you're going to go back to that PDF you

7012
03:40:46,399 --> 03:40:47,840
downloaded from my free school, and

7013
03:40:47,840 --> 03:40:49,920
you're going to paste this prompt in

7014
03:40:49,920 --> 03:40:51,520
there. So, this prompt basically gives

7015
03:40:51,520 --> 03:40:53,600
us that like 3D spinning effect where it

7016
03:40:53,600 --> 03:40:55,279
just kind of does a slow pan and a slow

7017
03:40:55,279 --> 03:40:56,720
rotate. And that's what I was looking

7018
03:40:56,720 --> 03:40:58,399
for. If you're wanting some other type

7019
03:40:58,399 --> 03:40:59,680
of video, then you can tweak that

7020
03:40:59,680 --> 03:41:02,000
prompt, of course. For the duration, if

7021
03:41:02,000 --> 03:41:04,479
you look in the documentation, it'll say

7022
03:41:04,479 --> 03:41:06,560
the duration only basically allows five

7023
03:41:06,560 --> 03:41:08,160
or 10. So, I'm just going to change this

7024
03:41:08,160 --> 03:41:10,160
one to 10. And then the last one was

7025
03:41:10,160 --> 03:41:11,439
ratio. And I'm just going to make the

7026
03:41:11,439 --> 03:41:13,120
square. So here are the accepted ratio

7027
03:41:13,120 --> 03:41:16,160
values. I'm going to copy 960 by 960.

7028
03:41:16,160 --> 03:41:17,279
And we're just going to paste that in

7029
03:41:17,279 --> 03:41:19,040
right there. And actually before we hit

7030
03:41:19,040 --> 03:41:20,560
test step, I've realized that we're

7031
03:41:20,560 --> 03:41:22,640
missing something here. So back in the

7032
03:41:22,640 --> 03:41:24,239
documentation, we can see that there's

7033
03:41:24,239 --> 03:41:25,920
one thing up here which is required,

7034
03:41:25,920 --> 03:41:28,800
which is a header. X-runway- version.

7035
03:41:28,800 --> 03:41:30,479
And then we need to set the value to

7036
03:41:30,479 --> 03:41:33,279
this. So I'm going to copy the header.

7037
03:41:33,279 --> 03:41:35,040
And we have to enable headers. I I

7038
03:41:35,040 --> 03:41:36,080
deleted it earlier, but we're going to

7039
03:41:36,080 --> 03:41:37,760
enable that. So we have the version. And

7040
03:41:37,760 --> 03:41:38,960
then I'm just going to go copy the value

7041
03:41:38,960 --> 03:41:41,200
that it needs to be set to and we'll

7042
03:41:41,200 --> 03:41:42,399
paste that in there as the value.

7043
03:41:42,399 --> 03:41:44,399
Otherwise, this would not have worked.

7044
03:41:44,399 --> 03:41:46,080
Okay, so that should be configured. But

7045
03:41:46,080 --> 03:41:48,080
before we test it out, I want to show

7046
03:41:48,080 --> 03:41:49,920
you guys how I set up the polling flow

7047
03:41:49,920 --> 03:41:52,399
like this that you saw in the demo. So

7048
03:41:52,399 --> 03:41:54,319
what we're going to do here is we need

7049
03:41:54,319 --> 03:41:57,200
to go see like, okay, once we send over

7050
03:41:57,200 --> 03:41:59,520
our request right here to get a video

7051
03:41:59,520 --> 03:42:01,439
from our image, it's going to return an

7052
03:42:01,439 --> 03:42:03,680
ID and that doesn't mean anything to us.

7053
03:42:03,680 --> 03:42:06,080
So what we have to do is get our task.

7054
03:42:06,080 --> 03:42:07,840
So that is the basically we send over

7055
03:42:07,840 --> 03:42:10,080
the ID that it gives us and then it'll

7056
03:42:10,080 --> 03:42:12,160
come back and say like the status equals

7057
03:42:12,160 --> 03:42:14,160
pending or running or we'll say

7058
03:42:14,160 --> 03:42:15,920
completed. So what I'm going to do is

7059
03:42:15,920 --> 03:42:18,239
copy this curl command for getting task

7060
03:42:18,239 --> 03:42:20,479
details. We're going to hook it up to

7061
03:42:20,479 --> 03:42:23,040
this node as an HTTP request. We're

7062
03:42:23,040 --> 03:42:24,760
going to import that

7063
03:42:24,760 --> 03:42:27,200
curl. Now that's pretty much set up. We

7064
03:42:27,200 --> 03:42:28,479
have our authorization which I'm going

7065
03:42:28,479 --> 03:42:30,239
to delete that because as you know we

7066
03:42:30,239 --> 03:42:32,160
just configured that earlier as a header

7067
03:42:32,160 --> 03:42:33,600
off. So, I'm just going to come in here

7068
03:42:33,600 --> 03:42:37,520
and grab my Runway API key. There it is.

7069
03:42:37,520 --> 03:42:39,120
I couldn't find it for some reason. Um,

7070
03:42:39,120 --> 03:42:41,279
we have the version set up. And now all

7071
03:42:41,279 --> 03:42:43,439
we have to do is drag in the actual ID

7072
03:42:43,439 --> 03:42:45,040
from the previous one. So, real quick,

7073
03:42:45,040 --> 03:42:45,920
I'm just going to make this an

7074
03:42:45,920 --> 03:42:48,720
expression. Delete ID. And now we're

7075
03:42:48,720 --> 03:42:50,319
pretty much set up. So, first of all,

7076
03:42:50,319 --> 03:42:51,920
I'm going to test this one, which is

7077
03:42:51,920 --> 03:42:53,359
going to send off that request to runway

7078
03:42:53,359 --> 03:42:54,880
and say, "Hey, here's our image. Here's

7079
03:42:54,880 --> 03:42:56,880
the prompt. Make a video out of it." And

7080
03:42:56,880 --> 03:42:59,439
as you can see, we got back an ID. Now

7081
03:42:59,439 --> 03:43:01,359
I'm going to use this next node and I'm

7082
03:43:01,359 --> 03:43:03,520
going to drag in that ID from earlier.

7083
03:43:03,520 --> 03:43:04,720
And now it's saying, okay, we're going

7084
03:43:04,720 --> 03:43:06,319
to check in on the status of this

7085
03:43:06,319 --> 03:43:08,720
specific task. And if I hit test step,

7086
03:43:08,720 --> 03:43:09,920
what we're going to see is that it's not

7087
03:43:09,920 --> 03:43:11,439
yet finished. So it's going to come back

7088
03:43:11,439 --> 03:43:13,920
and say, okay, status of this run or

7089
03:43:13,920 --> 03:43:15,920
status of this task is running. So

7090
03:43:15,920 --> 03:43:17,520
that's why what I'm going to do is add

7091
03:43:17,520 --> 03:43:18,439
an

7092
03:43:18,439 --> 03:43:20,960
if. And this if is going to be saying,

7093
03:43:20,960 --> 03:43:24,080
okay, does this status field right here,

7094
03:43:24,080 --> 03:43:26,319
does that equal running in all caps?

7095
03:43:26,319 --> 03:43:28,319
Because that's what it equals right now.

7096
03:43:28,319 --> 03:43:31,120
If yes, what we're going to do is we are

7097
03:43:31,120 --> 03:43:32,800
going to basically wait for a certain

7098
03:43:32,800 --> 03:43:34,120
amount of time. So here's the true

7099
03:43:34,120 --> 03:43:36,800
branch. I'm going to wait and let's just

7100
03:43:36,800 --> 03:43:38,720
say it's 5 seconds. So I'll just call

7101
03:43:38,720 --> 03:43:41,199
this five seconds. I'm going to wait for

7102
03:43:41,199 --> 03:43:42,560
5 seconds and then I'm going to come

7103
03:43:42,560 --> 03:43:44,880
back here and try again. So as you saw

7104
03:43:44,880 --> 03:43:46,239
in the demo, it basically tried again

7105
03:43:46,239 --> 03:43:48,000
like seven or eight times. And this just

7106
03:43:48,000 --> 03:43:50,479
ensures that it's never going to move on

7107
03:43:50,479 --> 03:43:53,040
until we actually have a finished photo.

7108
03:43:53,040 --> 03:43:54,479
So what you could also do is basically

7109
03:43:54,479 --> 03:43:56,479
say does status equal completed or

7110
03:43:56,479 --> 03:43:57,840
whatever it means when it completes.

7111
03:43:57,840 --> 03:43:59,600
That's another way to do it. You just

7112
03:43:59,600 --> 03:44:00,720
have to be careful to make sure that

7113
03:44:00,720 --> 03:44:01,840
whatever you're setting here as the

7114
03:44:01,840 --> 03:44:05,439
check is always 100% going to work. And

7115
03:44:05,439 --> 03:44:07,199
then what you do is you would continue

7116
03:44:07,199 --> 03:44:08,960
the rest of the logic down this path

7117
03:44:08,960 --> 03:44:10,800
once that check has been complete. And

7118
03:44:10,800 --> 03:44:11,920
then of course you probably don't want

7119
03:44:11,920 --> 03:44:13,439
to have this check like 10 times every

7120
03:44:13,439 --> 03:44:14,960
single time. So what you would do is

7121
03:44:14,960 --> 03:44:17,359
you'd add a weight step here. And once

7122
03:44:17,359 --> 03:44:18,960
you know about how long it takes, you'd

7123
03:44:18,960 --> 03:44:21,040
add this here. So last time I had it at

7124
03:44:21,040 --> 03:44:22,479
30 seconds and it waited like eight

7125
03:44:22,479 --> 03:44:23,840
times. So let's just say I'm going to

7126
03:44:23,840 --> 03:44:26,080
wait 60 seconds here. So then when this

7127
03:44:26,080 --> 03:44:27,600
flow actually runs, it'll wait for a

7128
03:44:27,600 --> 03:44:29,359
minute, check. If it's still not done,

7129
03:44:29,359 --> 03:44:30,800
it'll continuously loop through here and

7130
03:44:30,800 --> 03:44:32,720
wait 5 seconds every time until we're

7131
03:44:32,720 --> 03:44:34,640
done. Okay, there we go. So now status

7132
03:44:34,640 --> 03:44:36,160
is succeeded. And what I'm going to do

7133
03:44:36,160 --> 03:44:37,920
is just view this video real quick.

7134
03:44:37,920 --> 03:44:39,359
Hopefully this one came out nicely.

7135
03:44:39,359 --> 03:44:41,640
Let's take a

7136
03:44:41,640 --> 03:44:45,040
look. Wow, this is awesome. Super clean.

7137
03:44:45,040 --> 03:44:46,960
It's rotating really slowly. It's a full

7138
03:44:46,960 --> 03:44:49,199
10-second video. You can tell it's like

7139
03:44:49,199 --> 03:44:52,399
a 3D image. This is awesome. Okay, cool.

7140
03:44:52,399 --> 03:44:54,720
So now if we test this if branch, we'll

7141
03:44:54,720 --> 03:44:55,920
see that it's going to go down the other

7142
03:44:55,920 --> 03:44:57,520
one which is the false branch because

7143
03:44:57,520 --> 03:44:59,439
it's actually completed. And now we can

7144
03:44:59,439 --> 03:45:01,760
with confidence shoot off the email with

7145
03:45:01,760 --> 03:45:03,199
our materials. So I'm going to grab a

7146
03:45:03,199 --> 03:45:04,640
Gmail node. I'm going to click send a

7147
03:45:04,640 --> 03:45:07,120
message. And we are going to have this

7148
03:45:07,120 --> 03:45:08,319
configured hopefully because you've

7149
03:45:08,319 --> 03:45:09,920
already set up your Google stuff. And

7150
03:45:09,920 --> 03:45:11,920
now who do we send this to? We're going

7151
03:45:11,920 --> 03:45:13,520
to go grab that email from the original

7152
03:45:13,520 --> 03:45:14,880
form submission which is all the way

7153
03:45:14,880 --> 03:45:16,640
down here. We're going to make the

7154
03:45:16,640 --> 03:45:19,319
subject, which I'm just going to say

7155
03:45:19,319 --> 03:45:22,479
marketing materials, and then a colon.

7156
03:45:22,479 --> 03:45:24,239
And we'll just drag in the actual title

7157
03:45:24,239 --> 03:45:26,120
of the product, which in here was

7158
03:45:26,120 --> 03:45:28,239
cologne. I'm changing the email type to

7159
03:45:28,239 --> 03:45:30,640
text just because I want to. Um, we're

7160
03:45:30,640 --> 03:45:32,239
going to make the body an expression.

7161
03:45:32,239 --> 03:45:35,160
And we're just going to say like,

7162
03:45:35,160 --> 03:45:39,680
hey, here is your photo. And obviously

7163
03:45:39,680 --> 03:45:41,359
this can be customized however you want.

7164
03:45:41,359 --> 03:45:43,359
But for the photo, what we have to do is

7165
03:45:43,359 --> 03:45:45,520
grab that public URL that we generated

7166
03:45:45,520 --> 03:45:47,439
earlier. So right here there is the

7167
03:45:47,439 --> 03:45:51,439
photo URL. Here is your video. And for

7168
03:45:51,439 --> 03:45:52,640
the video, we're going to drag in the

7169
03:45:52,640 --> 03:45:55,439
URL we just got from the output of that

7170
03:45:55,439 --> 03:45:58,239
um runway get task check. So there is

7171
03:45:58,239 --> 03:46:00,080
the video URL. And then I'm just going

7172
03:46:00,080 --> 03:46:02,720
to say cheers. Last thing I want to do

7173
03:46:02,720 --> 03:46:05,040
is down here append edit an attribution

7174
03:46:05,040 --> 03:46:07,520
and turn that off. This just ensures

7175
03:46:07,520 --> 03:46:09,600
that the email doesn't say this email

7176
03:46:09,600 --> 03:46:12,080
was sent by NAN. And now if we hit test

7177
03:46:12,080 --> 03:46:13,920
step right here, this is pretty much the

7178
03:46:13,920 --> 03:46:15,600
end of the process. And we can go ahead

7179
03:46:15,600 --> 03:46:18,080
and check. Uh-oh. Okay, so not

7180
03:46:18,080 --> 03:46:19,439
authorized. Let me fix that real quick.

7181
03:46:19,439 --> 03:46:20,800
Okay, so I just switched my credential

7182
03:46:20,800 --> 03:46:21,840
because I was using one that had

7183
03:46:21,840 --> 03:46:23,520
expired. So now this should go through

7184
03:46:23,520 --> 03:46:25,120
and we'll go take a look at the email.

7185
03:46:25,120 --> 03:46:27,040
Okay, so did something wrong. I can

7186
03:46:27,040 --> 03:46:28,399
already tell what happened is this is

7187
03:46:28,399 --> 03:46:29,760
supposed to be an expression and

7188
03:46:29,760 --> 03:46:31,279
dynamically come through as the title of

7189
03:46:31,279 --> 03:46:33,359
the product, but we accidentally somehow

7190
03:46:33,359 --> 03:46:35,199
left off a curly brace. So, if I come

7191
03:46:35,199 --> 03:46:37,120
back into here and and add one more

7192
03:46:37,120 --> 03:46:38,319
curly brace right here to the

7193
03:46:38,319 --> 03:46:40,880
description or sorry, the subject now,

7194
03:46:40,880 --> 03:46:42,399
we should be good. I'll hit test step

7195
03:46:42,399 --> 03:46:44,319
again. And now we'll go take a look at

7196
03:46:44,319 --> 03:46:46,399
that email. Okay, there we go. Now, we

7197
03:46:46,399 --> 03:46:48,000
have the cologne and we have our photo

7198
03:46:48,000 --> 03:46:49,520
and our video. So, let's click into the

7199
03:46:49,520 --> 03:46:51,920
video real

7200
03:46:52,040 --> 03:46:54,479
quick. I'm just so amazed. This is this

7201
03:46:54,479 --> 03:46:55,920
is just so much fun. It look the the

7202
03:46:55,920 --> 03:46:57,680
lighting and the the reflections. It's

7203
03:46:57,680 --> 03:46:59,960
it's all just

7204
03:46:59,960 --> 03:47:01,920
perfect. And then we'll click into the

7205
03:47:01,920 --> 03:47:03,279
photo just in case we want to see the

7206
03:47:03,279 --> 03:47:05,600
actual image. And there it is. This also

7207
03:47:05,600 --> 03:47:07,520
looks awesome. All right, so that's

7208
03:47:07,520 --> 03:47:09,040
going to do it for today's video. I hope

7209
03:47:09,040 --> 03:47:10,720
you guys enjoyed this style of walking

7210
03:47:10,720 --> 03:47:12,479
step by step through some of the API

7211
03:47:12,479 --> 03:47:14,239
calls and sort of my thought process as

7212
03:47:14,239 --> 03:47:16,560
to how I set up this workflow. Okay, at

7213
03:47:16,560 --> 03:47:17,840
this point I think you guys probably

7214
03:47:17,840 --> 03:47:19,040
have a really good understanding of how

7215
03:47:19,040 --> 03:47:22,000
these AI workflows actually function and

7216
03:47:22,000 --> 03:47:22,800
you're probably getting a little bit

7217
03:47:22,800 --> 03:47:24,720
antsy and want to build an actual AI

7218
03:47:24,720 --> 03:47:26,560
agent. Now, so we're about to get into

7219
03:47:26,560 --> 03:47:28,160
building your first AI agent step by

7220
03:47:28,160 --> 03:47:30,080
step. But before that, just wanted to

7221
03:47:30,080 --> 03:47:32,560
drive home the concept of AI workflows

7222
03:47:32,560 --> 03:47:35,040
versus AI agents one more time and the

7223
03:47:35,040 --> 03:47:37,279
benefits of using workflows. But of

7224
03:47:37,279 --> 03:47:38,560
course, there are scenarios where you do

7225
03:47:38,560 --> 03:47:40,720
need to use an agent. So, let's break it

7226
03:47:40,720 --> 03:47:42,560
down real quick. Everyone is talking

7227
03:47:42,560 --> 03:47:44,399
about AI agents right now, but the truth

7228
03:47:44,399 --> 03:47:46,319
is most people are using them completely

7229
03:47:46,319 --> 03:47:48,880
wrong and admittedly myself included.

7230
03:47:48,880 --> 03:47:50,560
It's such a buzzword right now and it's

7231
03:47:50,560 --> 03:47:52,560
really cool in n to visually see your

7232
03:47:52,560 --> 03:47:54,239
agents think about which tools they have

7233
03:47:54,239 --> 03:47:56,080
and which ones to call. So, a lot of

7234
03:47:56,080 --> 03:47:57,439
people are just kind of forcing AI

7235
03:47:57,439 --> 03:47:59,680
agents into processes where you don't

7236
03:47:59,680 --> 03:48:01,600
really need it. But in reality, a simple

7237
03:48:01,600 --> 03:48:03,120
AI workflow is not only going to be

7238
03:48:03,120 --> 03:48:04,640
easier to build, it's going to be more

7239
03:48:04,640 --> 03:48:06,319
cost- effective and also more reliable

7240
03:48:06,319 --> 03:48:07,840
in the long run. If you guys don't know

7241
03:48:07,840 --> 03:48:09,439
me, my name's Nate. And for a while now,

7242
03:48:09,439 --> 03:48:10,800
I've been running an agency where we

7243
03:48:10,800 --> 03:48:12,479
deliver AI solutions to clients. And

7244
03:48:12,479 --> 03:48:14,000
I've also been teaching people from any

7245
03:48:14,000 --> 03:48:15,760
background how to build out these things

7246
03:48:15,760 --> 03:48:17,279
practically and apply them to their

7247
03:48:17,279 --> 03:48:19,359
business through deep dive courses as

7248
03:48:19,359 --> 03:48:21,040
well as live calls. So, if that sounds

7249
03:48:21,040 --> 03:48:22,160
interesting to you, definitely check out

7250
03:48:22,160 --> 03:48:23,520
the community with the link in the

7251
03:48:23,520 --> 03:48:24,880
description. But let's get into the

7252
03:48:24,880 --> 03:48:26,479
video. So, we're going to get into Naden

7253
03:48:26,479 --> 03:48:27,439
and I'm going to show you guys some

7254
03:48:27,439 --> 03:48:29,040
mistakes of when I've built agents when

7255
03:48:29,040 --> 03:48:30,080
I should have been building AI

7256
03:48:30,080 --> 03:48:31,920
workflows. But before that, I just

7257
03:48:31,920 --> 03:48:34,000
wanted to lay out the foundations here.

7258
03:48:34,000 --> 03:48:35,920
So, we all know what chatbt is. At its

7259
03:48:35,920 --> 03:48:37,279
core, it's a large language model that

7260
03:48:37,279 --> 03:48:39,040
we talk to with an input and then it

7261
03:48:39,040 --> 03:48:40,479
basically just gives us an output. So,

7262
03:48:40,479 --> 03:48:42,239
if we wanted to leverage chatbt to help

7263
03:48:42,239 --> 03:48:44,319
us write a blog post, we would ask it to

7264
03:48:44,319 --> 03:48:46,080
write a blog post about a certain topic.

7265
03:48:46,080 --> 03:48:47,439
It would do that and then it would give

7266
03:48:47,439 --> 03:48:48,800
us the output which we would then just

7267
03:48:48,800 --> 03:48:50,560
copy and paste somewhere else. And then

7268
03:48:50,560 --> 03:48:52,319
came the birth of AI agents, which is

7269
03:48:52,319 --> 03:48:54,000
when we actually were able to give tools

7270
03:48:54,000 --> 03:48:56,000
to our LLM so that they could not only

7271
03:48:56,000 --> 03:48:57,600
just generate content for us, but they

7272
03:48:57,600 --> 03:48:59,359
could actually go post it or go do

7273
03:48:59,359 --> 03:49:01,040
whatever we wanted to do with it. AI

7274
03:49:01,040 --> 03:49:02,160
agents are great and there's definitely

7275
03:49:02,160 --> 03:49:03,840
a time and a place for them because they

7276
03:49:03,840 --> 03:49:05,279
have different tools and basically the

7277
03:49:05,279 --> 03:49:06,800
agent will use its brain to understand,

7278
03:49:06,800 --> 03:49:08,880
okay, I have these three tools based on

7279
03:49:08,880 --> 03:49:10,720
what the user is asking me. Do I call

7280
03:49:10,720 --> 03:49:12,880
this one and then do I output or do I

7281
03:49:12,880 --> 03:49:14,960
call this one then this one or do I need

7282
03:49:14,960 --> 03:49:16,960
to call all three simultaneously? It has

7283
03:49:16,960 --> 03:49:18,640
that option and it has the variability

7284
03:49:18,640 --> 03:49:19,920
there. So, this is going to be a

7285
03:49:19,920 --> 03:49:22,000
non-deterministic workflow. But the

7286
03:49:22,000 --> 03:49:23,600
reality is most of the processes that

7287
03:49:23,600 --> 03:49:26,080
we're trying to enhance for our clients

7288
03:49:26,080 --> 03:49:28,000
are pretty deterministic workflows that

7289
03:49:28,000 --> 03:49:29,199
we can build out with something more

7290
03:49:29,199 --> 03:49:30,640
linear where we still have the same

7291
03:49:30,640 --> 03:49:33,040
tools. We're still using AI, but we have

7292
03:49:33,040 --> 03:49:34,880
everything going step one, step two,

7293
03:49:34,880 --> 03:49:36,720
step three, step four, step five, step

7294
03:49:36,720 --> 03:49:38,880
six, which is going to reduce the

7295
03:49:38,880 --> 03:49:40,319
variability there. It's going to be very

7296
03:49:40,319 --> 03:49:42,160
deterministic and it's going to help us

7297
03:49:42,160 --> 03:49:43,920
with a lot of things. So stick with me

7298
03:49:43,920 --> 03:49:45,199
because I'm going to show you guys an AI

7299
03:49:45,199 --> 03:49:47,040
agent video that I made on YouTube a few

7300
03:49:47,040 --> 03:49:49,359
months back and I started re-evaluating

7301
03:49:49,359 --> 03:49:50,960
it. Like why would I ever build out the

7302
03:49:50,960 --> 03:49:52,560
system like that? It's so inefficient.

7303
03:49:52,560 --> 03:49:54,080
So I'll show you guys that in a sec. But

7304
03:49:54,080 --> 03:49:55,439
real quick, let's talk about the pros of

7305
03:49:55,439 --> 03:49:57,199
AI workflows over AI agents. And I

7306
03:49:57,199 --> 03:49:59,199
narrowed it down to four main points.

7307
03:49:59,199 --> 03:50:00,720
The first one is reliability and

7308
03:50:00,720 --> 03:50:02,399
consistency. One of the most important

7309
03:50:02,399 --> 03:50:04,080
concepts of building an effective AI

7310
03:50:04,080 --> 03:50:05,840
agent is the system prompt because it

7311
03:50:05,840 --> 03:50:07,439
has to understand what its tools are,

7312
03:50:07,439 --> 03:50:08,960
when to use each one, and what the end

7313
03:50:08,960 --> 03:50:10,640
goal is. and it's on its own to figure

7314
03:50:10,640 --> 03:50:12,319
out which ones do I need to call in

7315
03:50:12,319 --> 03:50:14,080
order to provide a good output. But with

7316
03:50:14,080 --> 03:50:15,520
a workflow, we're basically keeping it

7317
03:50:15,520 --> 03:50:17,120
on track and there's no way that the

7318
03:50:17,120 --> 03:50:18,800
process can sort of deviate from the

7319
03:50:18,800 --> 03:50:20,640
guardrails that we've set up because it

7320
03:50:20,640 --> 03:50:22,640
has to happen in order and it can't

7321
03:50:22,640 --> 03:50:24,479
really go anywhere else. So this makes

7322
03:50:24,479 --> 03:50:25,920
systems more reliable because there's

7323
03:50:25,920 --> 03:50:27,279
never going to be a transfer of data

7324
03:50:27,279 --> 03:50:28,720
between workflows where things may get

7325
03:50:28,720 --> 03:50:30,720
messed up or incorrect mappings being

7326
03:50:30,720 --> 03:50:32,560
sent across, you know, agent to a

7327
03:50:32,560 --> 03:50:34,640
different agent or agent to tool. We're

7328
03:50:34,640 --> 03:50:36,000
just basically able to go through the

7329
03:50:36,000 --> 03:50:38,239
process linearly. So the next one is

7330
03:50:38,239 --> 03:50:40,239
going to be cost efficiency. When we're

7331
03:50:40,239 --> 03:50:41,920
using an agent and it has different

7332
03:50:41,920 --> 03:50:44,000
tools, every time it hits a tool, it's

7333
03:50:44,000 --> 03:50:45,359
going to go back to its brain. It's

7334
03:50:45,359 --> 03:50:46,640
going to rerun through its system prompt

7335
03:50:46,640 --> 03:50:48,000
and it's going to think about what is my

7336
03:50:48,000 --> 03:50:49,760
next step here. And every time you're

7337
03:50:49,760 --> 03:50:51,680
accessing that AI agent's brain, it

7338
03:50:51,680 --> 03:50:53,520
costs you money. So if we're able to

7339
03:50:53,520 --> 03:50:55,520
eliminate that aspect of decision-m and

7340
03:50:55,520 --> 03:50:57,199
just say, okay, you you finished step

7341
03:50:57,199 --> 03:50:58,640
two, now you have to go on to step

7342
03:50:58,640 --> 03:51:00,880
three. There's no decision to be made.

7343
03:51:00,880 --> 03:51:02,720
We don't have to make that extra API

7344
03:51:02,720 --> 03:51:04,800
call to think about what comes next, and

7345
03:51:04,800 --> 03:51:06,800
we're saving money. Number three is

7346
03:51:06,800 --> 03:51:08,560
easier debugging and maintenance. When

7347
03:51:08,560 --> 03:51:10,160
we have an AI workflow, we can see

7348
03:51:10,160 --> 03:51:12,239
exactly which node errors. We can see

7349
03:51:12,239 --> 03:51:13,920
exactly what mappings are incorrect and

7350
03:51:13,920 --> 03:51:16,080
what happened here. Whereas with an AI

7351
03:51:16,080 --> 03:51:17,600
agent workflow, it's a little bit

7352
03:51:17,600 --> 03:51:18,640
tougher because there's a lot of

7353
03:51:18,640 --> 03:51:20,239
manipulating the system prompt and

7354
03:51:20,239 --> 03:51:21,239
messing with different tool

7355
03:51:21,239 --> 03:51:23,439
configurations. And like I said, there's

7356
03:51:23,439 --> 03:51:25,520
data flowing between agent to tool or

7357
03:51:25,520 --> 03:51:27,279
between agent to subworkflow. And that's

7358
03:51:27,279 --> 03:51:28,800
where a lot of things can happen that

7359
03:51:28,800 --> 03:51:30,160
you don't really have full visibility

7360
03:51:30,160 --> 03:51:31,600
into. And then the final one is

7361
03:51:31,600 --> 03:51:33,439
scalability. kind of backpacks right off

7362
03:51:33,439 --> 03:51:35,120
of number three. But if you wanted to

7363
03:51:35,120 --> 03:51:36,720
add more nodes and more functionality to

7364
03:51:36,720 --> 03:51:38,560
a workflow, it's as simple as, you know,

7365
03:51:38,560 --> 03:51:40,000
plugging in a few more blocks here and

7366
03:51:40,000 --> 03:51:41,920
there or adding on to the back. But when

7367
03:51:41,920 --> 03:51:43,040
you want to increase the functionality

7368
03:51:43,040 --> 03:51:44,560
of an AI agent, you're probably going to

7369
03:51:44,560 --> 03:51:46,080
have to give it more tools. And when you

7370
03:51:46,080 --> 03:51:47,680
give it more tools, you're going to have

7371
03:51:47,680 --> 03:51:50,239
to refine and add more lines to the

7372
03:51:50,239 --> 03:51:52,080
system prompt, which could work great

7373
03:51:52,080 --> 03:51:53,920
initially, but then previous

7374
03:51:53,920 --> 03:51:55,520
functionality, the first couple tools

7375
03:51:55,520 --> 03:51:57,199
you added, those might stop working or

7376
03:51:57,199 --> 03:51:59,120
those may become less consistent. So

7377
03:51:59,120 --> 03:52:00,560
basically, the more control that we have

7378
03:52:00,560 --> 03:52:02,880
over the entire workflow, the better. AI

7379
03:52:02,880 --> 03:52:04,560
is great. There are times when we need

7380
03:52:04,560 --> 03:52:05,920
to make decisions and we need that

7381
03:52:05,920 --> 03:52:07,680
little bit of flexibility. But if a

7382
03:52:07,680 --> 03:52:09,199
decision doesn't have to be made, why

7383
03:52:09,199 --> 03:52:10,720
would we leave that up to the AI to

7384
03:52:10,720 --> 03:52:13,120
hallucinate 5 or 10% of the time when we

7385
03:52:13,120 --> 03:52:14,160
could basically say, "Hey, this is going

7386
03:52:14,160 --> 03:52:16,239
to be 100% consistent." Anyways, I've

7387
03:52:16,239 --> 03:52:17,439
made a video that talks a little bit

7388
03:52:17,439 --> 03:52:19,120
more about this stuff, as well as other

7389
03:52:19,120 --> 03:52:20,560
things I've learned over the first 6

7390
03:52:20,560 --> 03:52:22,000
months of building agents. If you want

7391
03:52:22,000 --> 03:52:23,840
to watch that, I'll link it up here. But

7392
03:52:23,840 --> 03:52:25,520
let's hop into n and take a look at some

7393
03:52:25,520 --> 03:52:27,359
real examples. Okay, so the first

7394
03:52:27,359 --> 03:52:29,040
example I want to share with you guys is

7395
03:52:29,040 --> 03:52:31,439
a typical sort of rag agent. And for

7396
03:52:31,439 --> 03:52:32,800
some reason it always seems like the

7397
03:52:32,800 --> 03:52:34,880
element of rag has to be associated with

7398
03:52:34,880 --> 03:52:36,800
an agent, but it really doesn't. So what

7399
03:52:36,800 --> 03:52:38,000
we have is a workflow where we're

7400
03:52:38,000 --> 03:52:39,359
putting a document from Google Drive

7401
03:52:39,359 --> 03:52:41,120
into Pine Cone. We have a customer

7402
03:52:41,120 --> 03:52:42,399
support agent and then we have a

7403
03:52:42,399 --> 03:52:44,399
customer support AI workflow. And both

7404
03:52:44,399 --> 03:52:46,239
of the blue box and the green box, they

7405
03:52:46,239 --> 03:52:47,920
do the exact same thing, but this one's

7406
03:52:47,920 --> 03:52:49,199
going to be more efficient and we also

7407
03:52:49,199 --> 03:52:50,560
have more control. So let's break this

7408
03:52:50,560 --> 03:52:52,080
down. Also, if you want to download this

7409
03:52:52,080 --> 03:52:53,199
template to play around with, you can

7410
03:52:53,199 --> 03:52:54,560
get it for free if you go to my free

7411
03:52:54,560 --> 03:52:55,760
school community. The link for that's

7412
03:52:55,760 --> 03:52:57,199
down in the description as well. You'll

7413
03:52:57,199 --> 03:52:58,479
come into here, click on YouTube

7414
03:52:58,479 --> 03:53:00,000
resources, and click on the post

7415
03:53:00,000 --> 03:53:01,760
associated with this video. And then the

7416
03:53:01,760 --> 03:53:03,040
workflow will be right here for you to

7417
03:53:03,040 --> 03:53:05,040
download. Okay, so anyways, here is the

7418
03:53:05,040 --> 03:53:06,000
document that we're going to be looking

7419
03:53:06,000 --> 03:53:08,800
at. It has policy and FAQ information.

7420
03:53:08,800 --> 03:53:10,399
We've already put it into Pine Cone. As

7421
03:53:10,399 --> 03:53:12,160
you can see, it's created eight vectors.

7422
03:53:12,160 --> 03:53:13,439
And now what we're going to do is we're

7423
03:53:13,439 --> 03:53:14,640
going to fire off an email to the

7424
03:53:14,640 --> 03:53:16,399
customer support agent to see how it

7425
03:53:16,399 --> 03:53:18,319
handles it. Okay, so we just sent off,

7426
03:53:18,319 --> 03:53:20,080
do you offer price matching or bulk

7427
03:53:20,080 --> 03:53:21,359
discounts? We'll come back into the

7428
03:53:21,359 --> 03:53:22,960
workflow, hit run, and we should see the

7429
03:53:22,960 --> 03:53:24,880
customer support agent is hitting the

7430
03:53:24,880 --> 03:53:26,160
vector database, and it's also hitting

7431
03:53:26,160 --> 03:53:28,080
its reply email tool. But what you'll

7432
03:53:28,080 --> 03:53:29,840
notice is that it hit its brain. So,

7433
03:53:29,840 --> 03:53:32,160
Google Gemini 2.0 Flash in this case,

7434
03:53:32,160 --> 03:53:33,760
not a huge deal because it's free. But

7435
03:53:33,760 --> 03:53:35,040
if you were using something else, it's

7436
03:53:35,040 --> 03:53:36,479
going to have hit that API three

7437
03:53:36,479 --> 03:53:37,920
different times, which would be three

7438
03:53:37,920 --> 03:53:40,080
separate costs. So, let's check and see

7439
03:53:40,080 --> 03:53:42,000
if it did this correctly. So, in our

7440
03:53:42,000 --> 03:53:43,760
email, we got the reply, "We do not

7441
03:53:43,760 --> 03:53:45,279
offer price matching currently, but we

7442
03:53:45,279 --> 03:53:46,560
do run promotions and discounts

7443
03:53:46,560 --> 03:53:48,880
regularly. Yes, bulk orders may qualify

7444
03:53:48,880 --> 03:53:50,560
for a discount. Please contact our sales

7445
03:53:50,560 --> 03:53:52,479
team at salestechhaven.com for

7446
03:53:52,479 --> 03:53:54,080
inquiries. So, let's go validate that

7447
03:53:54,080 --> 03:53:56,000
that's correct. So, in the FAQ section

7448
03:53:56,000 --> 03:53:57,439
of this doc, we have that they don't

7449
03:53:57,439 --> 03:53:58,960
offer price matching, but they do run

7450
03:53:58,960 --> 03:54:00,640
promotions and discounts regularly. And

7451
03:54:00,640 --> 03:54:02,640
then for bulk discounts, um you have to

7452
03:54:02,640 --> 03:54:04,880
hit up the sales team. So, it answered

7453
03:54:04,880 --> 03:54:06,399
correctly. Okay. So, now we're going to

7454
03:54:06,399 --> 03:54:08,080
run the customer support AI workflow

7455
03:54:08,080 --> 03:54:09,600
down here. It's going to grab the email.

7456
03:54:09,600 --> 03:54:11,120
It's going to search Pine Cone. It's

7457
03:54:11,120 --> 03:54:12,479
going to write the email. I'll explain

7458
03:54:12,479 --> 03:54:13,920
what's going on here in a sec. And then

7459
03:54:13,920 --> 03:54:15,680
it responds to the customer. So, there's

7460
03:54:15,680 --> 03:54:16,960
four steps here. It's going to be an

7461
03:54:16,960 --> 03:54:18,479
email trigger. It's going to search the

7462
03:54:18,479 --> 03:54:19,840
knowledge base. It's going to write the

7463
03:54:19,840 --> 03:54:21,520
email and then respond to the customer

7464
03:54:21,520 --> 03:54:23,680
in an email. So, why would we leave that

7465
03:54:23,680 --> 03:54:25,199
up to the agent to decide what it needs

7466
03:54:25,199 --> 03:54:26,960
to do if it's always going to happen in

7467
03:54:26,960 --> 03:54:28,800
those four steps every time? All right,

7468
03:54:28,800 --> 03:54:30,319
here's the email we just got in reply.

7469
03:54:30,319 --> 03:54:31,439
As you can see, this is the one that the

7470
03:54:31,439 --> 03:54:32,720
agent wrote, and this one looks a lot

7471
03:54:32,720 --> 03:54:34,319
better. Hello, thank you for reaching

7472
03:54:34,319 --> 03:54:36,080
out to us. In response to your inquiry,

7473
03:54:36,080 --> 03:54:37,520
we currently do not offer price

7474
03:54:37,520 --> 03:54:39,439
matching. However, we do regularly run

7475
03:54:39,439 --> 03:54:41,359
promotions and discounts, so be sure to

7476
03:54:41,359 --> 03:54:42,760
keep an eye out for those. That's

7477
03:54:42,760 --> 03:54:45,279
accurate. Regarding bulk discounts, yes,

7478
03:54:45,279 --> 03:54:47,199
they may indeed qualify for a discount.

7479
03:54:47,199 --> 03:54:48,880
So reach out to our sales team. If you

7480
03:54:48,880 --> 03:54:50,160
have any other questions, please feel

7481
03:54:50,160 --> 03:54:51,920
free to reach out. Best regards, Mr.

7482
03:54:51,920 --> 03:54:53,840
Helpful, TechHaven. And obviously, I

7483
03:54:53,840 --> 03:54:56,479
told it to sign off like that. So, now

7484
03:54:56,479 --> 03:54:57,760
that we've seen that, let's actually

7485
03:54:57,760 --> 03:54:59,439
break down what's going on. So, it's the

7486
03:54:59,439 --> 03:55:00,720
same trigger. You know, we're getting an

7487
03:55:00,720 --> 03:55:02,479
email, and as you can see, we can find

7488
03:55:02,479 --> 03:55:03,840
the text of the email right here, which

7489
03:55:03,840 --> 03:55:05,439
was, "Do you guys offer price matching

7490
03:55:05,439 --> 03:55:07,680
or bulk discounts?" We're feeding that

7491
03:55:07,680 --> 03:55:09,359
into a pine cone node. So, if you guys

7492
03:55:09,359 --> 03:55:10,720
didn't know, you don't even need these

7493
03:55:10,720 --> 03:55:12,560
to be only tools. You can have them just

7494
03:55:12,560 --> 03:55:14,399
be nodes. where we're searching for the

7495
03:55:14,399 --> 03:55:16,399
prompts that is, do you guys offer price

7496
03:55:16,399 --> 03:55:18,319
matching or bulk discounts? And maybe

7497
03:55:18,319 --> 03:55:20,160
you might want an AI step between the

7498
03:55:20,160 --> 03:55:22,160
trigger and the search to maybe like

7499
03:55:22,160 --> 03:55:24,319
formulate a query out of the email if

7500
03:55:24,319 --> 03:55:25,920
the email is pretty long. But in this

7501
03:55:25,920 --> 03:55:27,520
case, that's all we did. And now we can

7502
03:55:27,520 --> 03:55:29,680
see we got those four vectors back, same

7503
03:55:29,680 --> 03:55:31,439
way we would have with the agent. But

7504
03:55:31,439 --> 03:55:32,720
what's cool is we have a lot more

7505
03:55:32,720 --> 03:55:35,199
control over it. So as you can see, we

7506
03:55:35,199 --> 03:55:36,960
have a vector and then we have a score,

7507
03:55:36,960 --> 03:55:38,640
which basically ranks how relevant it

7508
03:55:38,640 --> 03:55:40,640
the vector was to the query that we sent

7509
03:55:40,640 --> 03:55:42,880
off. And so we have some pretty low ones

7510
03:55:42,880 --> 03:55:44,640
over here, but what we can do is say,

7511
03:55:44,640 --> 03:55:46,720
okay, we only want to keep if the score

7512
03:55:46,720 --> 03:55:48,640
is greater than 04. So it's only going

7513
03:55:48,640 --> 03:55:50,319
to be keeping these two, as you can see,

7514
03:55:50,319 --> 03:55:51,760
and it's getting rid of these two that

7515
03:55:51,760 --> 03:55:53,439
aren't super relevant. And this is

7516
03:55:53,439 --> 03:55:54,800
something that's a lot easier to control

7517
03:55:54,800 --> 03:55:56,720
in this linear flow compared to having

7518
03:55:56,720 --> 03:55:59,199
the agent try to filter through vector

7519
03:55:59,199 --> 03:56:00,960
results up here. Anyways, then we're

7520
03:56:00,960 --> 03:56:02,880
just aggregating however many results it

7521
03:56:02,880 --> 03:56:04,800
pulls back. if it's four, if it's three,

7522
03:56:04,800 --> 03:56:06,160
or if it's just one, it's still just

7523
03:56:06,160 --> 03:56:07,760
going to aggregate them together so that

7524
03:56:07,760 --> 03:56:09,920
we can feed it into our OpenAI node

7525
03:56:09,920 --> 03:56:11,439
that's going to write the email. So

7526
03:56:11,439 --> 03:56:12,800
basically, in the user prompt, we said,

7527
03:56:12,800 --> 03:56:14,319
"Okay, here's the customer inquiry.

7528
03:56:14,319 --> 03:56:15,840
Here's the original email, and here's

7529
03:56:15,840 --> 03:56:17,520
the relevant knowledge that we found.

7530
03:56:17,520 --> 03:56:18,720
All you have to do now is write an

7531
03:56:18,720 --> 03:56:20,640
email." And so by giving this AI node

7532
03:56:20,640 --> 03:56:22,479
just one specific goal, it's going to be

7533
03:56:22,479 --> 03:56:24,239
more quality and consistent with its

7534
03:56:24,239 --> 03:56:26,399
outputs rather than we gave the agent

7535
03:56:26,399 --> 03:56:28,560
multiple jobs. It had to not only write

7536
03:56:28,560 --> 03:56:30,000
the email, but it also had to figure out

7537
03:56:30,000 --> 03:56:31,600
how to search through information and

7538
03:56:31,600 --> 03:56:33,680
figure out what the next step was. So

7539
03:56:33,680 --> 03:56:35,439
this node, it only has to focus on one

7540
03:56:35,439 --> 03:56:37,199
thing. It has the knowledge handed to it

7541
03:56:37,199 --> 03:56:38,800
on a silver platter to write the email

7542
03:56:38,800 --> 03:56:40,720
with. And basically, we said, you're Mr.

7543
03:56:40,720 --> 03:56:42,479
Helpful, a customer support rep for Tech

7544
03:56:42,479 --> 03:56:44,080
Haven. Your job is to respond to

7545
03:56:44,080 --> 03:56:45,680
incoming customer emails with accurate

7546
03:56:45,680 --> 03:56:47,520
information from the knowledge base. You

7547
03:56:47,520 --> 03:56:48,960
must only answer using relevant

7548
03:56:48,960 --> 03:56:50,560
knowledge provided to you. Don't make

7549
03:56:50,560 --> 03:56:52,160
anything up. We gave it the tone and

7550
03:56:52,160 --> 03:56:53,840
then we said only output the body in a

7551
03:56:53,840 --> 03:56:56,000
clean format. it outputs that body and

7552
03:56:56,000 --> 03:56:57,439
then all it had to do is map in the

7553
03:56:57,439 --> 03:56:59,760
correct message ID and the correct

7554
03:56:59,760 --> 03:57:02,239
message content. Simple as that. So, I

7555
03:57:02,239 --> 03:57:03,600
hope this makes sense. Obviously, it's a

7556
03:57:03,600 --> 03:57:05,040
lot cooler to watch the agent do

7557
03:57:05,040 --> 03:57:06,720
something like that up here, but this is

7558
03:57:06,720 --> 03:57:08,399
basically the exact same flow and I

7559
03:57:08,399 --> 03:57:10,080
would argue that it's going to be a lot

7560
03:57:10,080 --> 03:57:12,479
better, more consistent, and cheaper.

7561
03:57:12,479 --> 03:57:14,160
Okay, so now to show an example where I

7562
03:57:14,160 --> 03:57:15,680
released this as a YouTube video and a

7563
03:57:15,680 --> 03:57:17,120
couple weeks later I was like, why did I

7564
03:57:17,120 --> 03:57:18,960
do it like that? So, what we have here

7565
03:57:18,960 --> 03:57:21,359
is a technical analyst. And so basically

7566
03:57:21,359 --> 03:57:23,040
we're talking to it through Telegram and

7567
03:57:23,040 --> 03:57:25,199
it has one tool which is basically going

7568
03:57:25,199 --> 03:57:27,279
to get a chart image and then it's going

7569
03:57:27,279 --> 03:57:28,640
to analyze the chart image and then it

7570
03:57:28,640 --> 03:57:30,239
sends it back to us in Telegram. And

7571
03:57:30,239 --> 03:57:31,600
this is the workflow that it's actually

7572
03:57:31,600 --> 03:57:33,199
calling right here where we're making an

7573
03:57:33,199 --> 03:57:35,840
HTTP request to chart- image. We're

7574
03:57:35,840 --> 03:57:37,359
getting the chart, downloading it,

7575
03:57:37,359 --> 03:57:38,960
analyzing the image, sending it back,

7576
03:57:38,960 --> 03:57:40,560
and then responding back to the agent.

7577
03:57:40,560 --> 03:57:42,160
So there's basically like two transfers

7578
03:57:42,160 --> 03:57:44,319
of data here that we don't need because

7579
03:57:44,319 --> 03:57:45,920
as you can see down here, we have the

7580
03:57:45,920 --> 03:57:49,120
exact same process as one simple AI

7581
03:57:49,120 --> 03:57:50,560
workflow. So there's going to be much

7582
03:57:50,560 --> 03:57:52,319
much less room for error here. But first

7583
03:57:52,319 --> 03:57:54,000
of all, let's demo how this works and

7584
03:57:54,000 --> 03:57:56,399
then we'll demo the actual AI workflow.

7585
03:57:56,399 --> 03:57:57,760
Okay, so it should be listening to us

7586
03:57:57,760 --> 03:57:59,359
now. I'm going to ask it to analyze

7587
03:57:59,359 --> 03:58:00,800
Microsoft. And as you can see, it's now

7588
03:58:00,800 --> 03:58:02,560
hitting that tool. We won't see this

7589
03:58:02,560 --> 03:58:04,560
workflow actually in real time just

7590
03:58:04,560 --> 03:58:06,080
because it's like calling a different

7591
03:58:06,080 --> 03:58:07,680
execution, but this is the workflow that

7592
03:58:07,680 --> 03:58:08,880
it's calling down here. I can actually

7593
03:58:08,880 --> 03:58:10,399
just it's basically calling this right

7594
03:58:10,399 --> 03:58:12,479
here. Um, so what it's going to do is

7595
03:58:12,479 --> 03:58:14,560
it's going to send us an image and then

7596
03:58:14,560 --> 03:58:16,239
a second or two later it's going to send

7597
03:58:16,239 --> 03:58:18,080
us an actual analysis. So there is

7598
03:58:18,080 --> 03:58:20,479
Microsoft's stock chart and now it's

7599
03:58:20,479 --> 03:58:21,680
creating that analysis as you can see

7600
03:58:21,680 --> 03:58:22,640
right up here and then it's going to

7601
03:58:22,640 --> 03:58:24,640
send us that analysis. We just got it.

7602
03:58:24,640 --> 03:58:26,399
So if you want to see the full video

7603
03:58:26,399 --> 03:58:28,080
that I made on YouTube, I'll I'll tag it

7604
03:58:28,080 --> 03:58:29,600
right up here. But not going to dive too

7605
03:58:29,600 --> 03:58:31,120
much into what's actually happening. I

7606
03:58:31,120 --> 03:58:32,399
just want to prove that we can do the

7607
03:58:32,399 --> 03:58:35,120
exact same thing down here with a simple

7608
03:58:35,120 --> 03:58:36,640
workflow. Although right here, I did

7609
03:58:36,640 --> 03:58:38,000
evolve this workflow a little bit. So

7610
03:58:38,000 --> 03:58:39,920
it's it's not only looking at NASDAQ,

7611
03:58:39,920 --> 03:58:41,120
but it can also choose different

7612
03:58:41,120 --> 03:58:43,279
exchanges and feed that into the API

7613
03:58:43,279 --> 03:58:45,840
call. But anyways, let's make this

7614
03:58:45,840 --> 03:58:47,680
trigger down here active and let's just

7615
03:58:47,680 --> 03:58:49,199
show off that we can do the exact same

7616
03:58:49,199 --> 03:58:51,680
thing with the workflow and it's going

7617
03:58:51,680 --> 03:58:55,040
to be better. So, test workflow. This

7618
03:58:55,040 --> 03:58:56,640
should be listening to us. Now, I'm just

7619
03:58:56,640 --> 03:58:58,080
going to ask it to um we'll do a

7620
03:58:58,080 --> 03:59:00,000
different one. Analyze uh Bank of

7621
03:59:00,000 --> 03:59:02,319
America. So, now it's getting it. It is

7622
03:59:02,319 --> 03:59:04,000
going to be downloading the chart.

7623
03:59:04,000 --> 03:59:05,439
Actually, want to open up Telegram so we

7624
03:59:05,439 --> 03:59:07,279
can see downloading the chart, analyzing

7625
03:59:07,279 --> 03:59:08,640
the image. It's going to send us that

7626
03:59:08,640 --> 03:59:11,120
image and then pretty much immediately

7627
03:59:11,120 --> 03:59:12,479
after it should be able to send us that

7628
03:59:12,479 --> 03:59:15,199
analysis. So we don't have that awkward

7629
03:59:15,199 --> 03:59:17,680
2 to 5 second wait. Obviously we're

7630
03:59:17,680 --> 03:59:19,040
waiting here. But as soon as this is

7631
03:59:19,040 --> 03:59:20,479
done, we should get the both the image

7632
03:59:20,479 --> 03:59:22,479
and the text simultaneously. There you

7633
03:59:22,479 --> 03:59:24,239
go. And so you can see the results are

7634
03:59:24,239 --> 03:59:27,040
basically the same. But this one is just

7635
03:59:27,040 --> 03:59:28,239
going to be more consistent. There's no

7636
03:59:28,239 --> 03:59:30,000
transfer of data between workflow.

7637
03:59:30,000 --> 03:59:31,760
There's no need to hit an AI model to

7638
03:59:31,760 --> 03:59:33,920
decide what tool I need to use. It is

7639
03:59:33,920 --> 03:59:36,399
just going to be one seamless flow. You

7640
03:59:36,399 --> 03:59:37,760
can al also get this workflow in the

7641
03:59:37,760 --> 03:59:38,720
free school community if you want to

7642
03:59:38,720 --> 03:59:39,920
play around with it. Just wanted to

7643
03:59:39,920 --> 03:59:41,680
throw that out there. Anyways, that's

7644
03:59:41,680 --> 03:59:42,960
going to wrap us up here. I just wanted

7645
03:59:42,960 --> 03:59:45,120
to close off with this isn't me bashing

7646
03:59:45,120 --> 03:59:46,880
on AI agents. Well, I guess a little bit

7647
03:59:46,880 --> 03:59:49,120
it was. AI agents are super powerful.

7648
03:59:49,120 --> 03:59:50,479
They're super cool. It's really

7649
03:59:50,479 --> 03:59:52,239
important to learn prompt engineering

7650
03:59:52,239 --> 03:59:54,000
and giving them different tools, but

7651
03:59:54,000 --> 03:59:55,600
it's just about understanding, am I

7652
03:59:55,600 --> 03:59:57,760
forcing an agent into something that

7653
03:59:57,760 --> 03:59:59,840
doesn't need it? Am I exposing myself to

7654
03:59:59,840 --> 04:00:02,040
the risk of lower quality outputs, less

7655
04:00:02,040 --> 04:00:04,239
consistency, more difficult time scaling

7656
04:00:04,239 --> 04:00:06,080
this thing? Things along those lines.

7657
04:00:06,080 --> 04:00:07,359
And so that's why I think it's super

7658
04:00:07,359 --> 04:00:08,600
important to get into something like

7659
04:00:08,600 --> 04:00:11,040
Excal wireframe out the solution that

7660
04:00:11,040 --> 04:00:12,800
you're looking to build. Understand what

7661
04:00:12,800 --> 04:00:14,399
are all the steps here. What are the

7662
04:00:14,399 --> 04:00:16,479
different API calls or different people

7663
04:00:16,479 --> 04:00:18,720
involved? What could happen here? Is

7664
04:00:18,720 --> 04:00:20,960
this deterministic or is there an aspect

7665
04:00:20,960 --> 04:00:23,439
of decision-m and variability here?

7666
04:00:23,439 --> 04:00:24,800
Essentially, is every flow going to be

7667
04:00:24,800 --> 04:00:27,600
the same or not the same? Cool. So now

7668
04:00:27,600 --> 04:00:29,120
that we have that whole concept out of

7669
04:00:29,120 --> 04:00:30,399
the way, I think it's really important

7670
04:00:30,399 --> 04:00:31,920
to understand that so that when you're

7671
04:00:31,920 --> 04:00:33,439
planning out what type of system you're

7672
04:00:33,439 --> 04:00:34,720
going to build, you're actually doing it

7673
04:00:34,720 --> 04:00:36,479
the right way from the start. But now

7674
04:00:36,479 --> 04:00:38,399
that we understand that, let's finally

7675
04:00:38,399 --> 04:00:40,319
set up our first AI agent together.

7676
04:00:40,319 --> 04:00:42,479
Let's move into that video. All right,

7677
04:00:42,479 --> 04:00:43,760
so at this point you guys are familiar

7678
04:00:43,760 --> 04:00:45,439
with Naden. You've built a few AI

7679
04:00:45,439 --> 04:00:47,040
workflows and now it's time to actually

7680
04:00:47,040 --> 04:00:49,040
build an AI agent, which gets even

7681
04:00:49,040 --> 04:00:51,040
cooler. So before we actually hop into

7682
04:00:51,040 --> 04:00:52,640
there and do that, just want to do a

7683
04:00:52,640 --> 04:00:54,239
quick refresher on this little diagram

7684
04:00:54,239 --> 04:00:55,520
we talked about at the beginning of this

7685
04:00:55,520 --> 04:00:57,600
video, which is the anatomy of an AI

7686
04:00:57,600 --> 04:00:59,840
agent. So we have our input, we have our

7687
04:00:59,840 --> 04:01:01,199
actual AI agent, and then we have an

7688
04:01:01,199 --> 04:01:03,199
output. The AI agent is connected to

7689
04:01:03,199 --> 04:01:04,319
different tools, and that's how it

7690
04:01:04,319 --> 04:01:06,239
actually takes action. And in order to

7691
04:01:06,239 --> 04:01:08,319
understand which tools do I need to use,

7692
04:01:08,319 --> 04:01:10,000
it will look at its brain and its

7693
04:01:10,000 --> 04:01:11,840
instructions. The brain comes in the

7694
04:01:11,840 --> 04:01:13,600
form of a large language model, which in

7695
04:01:13,600 --> 04:01:15,520
this video, we'll be using open router

7696
04:01:15,520 --> 04:01:17,760
to connect to as many different ones as

7697
04:01:17,760 --> 04:01:19,040
we want. and you guys have already set

7698
04:01:19,040 --> 04:01:20,720
up your open router credentials. Then we

7699
04:01:20,720 --> 04:01:22,160
also have access to memory which I will

7700
04:01:22,160 --> 04:01:23,199
show you guys how we're going to set up

7701
04:01:23,199 --> 04:01:26,080
in nadn. Then finally it uses its

7702
04:01:26,080 --> 04:01:27,680
instructions in order to understand what

7703
04:01:27,680 --> 04:01:29,279
to do and that is in the form of a

7704
04:01:29,279 --> 04:01:31,239
system prompt which we will also see in

7705
04:01:31,239 --> 04:01:33,439
naden. So all of these elements that

7706
04:01:33,439 --> 04:01:34,800
we've talked about will directly

7707
04:01:34,800 --> 04:01:37,120
translate to something in nen and I will

7708
04:01:37,120 --> 04:01:38,880
show you guys and call out exactly where

7709
04:01:38,880 --> 04:01:41,520
these are so there's no confusion. So

7710
04:01:41,520 --> 04:01:43,199
we're going to hop in nitn and you guys

7711
04:01:43,199 --> 04:01:45,040
know that a new workflow always starts

7712
04:01:45,040 --> 04:01:46,560
with a trigger. So, I'm going to hit tab

7713
04:01:46,560 --> 04:01:49,279
and I'm going to type in a chat trigger

7714
04:01:49,279 --> 04:01:50,479
because we want to just basically be

7715
04:01:50,479 --> 04:01:52,479
able to talk to our AI agent right here

7716
04:01:52,479 --> 04:01:55,359
in the native Nadm chat. So, there is

7717
04:01:55,359 --> 04:01:57,040
our trigger and what I'm going to do is

7718
04:01:57,040 --> 04:01:59,279
click the plus and add an AI agent right

7719
04:01:59,279 --> 04:02:00,720
after this trigger so we can actually

7720
04:02:00,720 --> 04:02:02,239
talk to it. And so, this is what it

7721
04:02:02,239 --> 04:02:03,359
looks like. You know, we have our AI

7722
04:02:03,359 --> 04:02:04,720
agent right here, but I'm going to click

7723
04:02:04,720 --> 04:02:06,239
into it so we can just talk about the

7724
04:02:06,239 --> 04:02:07,840
difference between a user message up

7725
04:02:07,840 --> 04:02:09,680
here and a system message that we can

7726
04:02:09,680 --> 04:02:11,920
add down here. So going back to the

7727
04:02:11,920 --> 04:02:15,359
example with chatbt and with our diagram

7728
04:02:15,359 --> 04:02:16,960
when we're talking to chat gbt in our

7729
04:02:16,960 --> 04:02:18,960
browser every single time we type and

7730
04:02:18,960 --> 04:02:21,359
say something to chatbt that is a user

7731
04:02:21,359 --> 04:02:23,120
message because that message coming in

7732
04:02:23,120 --> 04:02:25,840
is dynamic every time. So you can see

7733
04:02:25,840 --> 04:02:27,279
right here the source for the prompt

7734
04:02:27,279 --> 04:02:29,040
that the AI agent will be listening for

7735
04:02:29,040 --> 04:02:31,760
as if it was chatbt is the connected

7736
04:02:31,760 --> 04:02:33,520
chat trigger node. So we're set up right

7737
04:02:33,520 --> 04:02:35,279
here and the agent will be reading that

7738
04:02:35,279 --> 04:02:37,439
every time. If we were feeding in

7739
04:02:37,439 --> 04:02:39,199
information to this agent that wasn't

7740
04:02:39,199 --> 04:02:40,640
coming from the chat message trigger,

7741
04:02:40,640 --> 04:02:42,080
we'd have to change that. But right now,

7742
04:02:42,080 --> 04:02:43,760
we're good. And if we go back to our

7743
04:02:43,760 --> 04:02:45,359
diagram, this is basically the input

7744
04:02:45,359 --> 04:02:46,960
that we're feeding into the AI agent.

7745
04:02:46,960 --> 04:02:48,960
So, as you can see, input goes into the

7746
04:02:48,960 --> 04:02:50,319
agent. And that's exactly what we have

7747
04:02:50,319 --> 04:02:53,040
right here. Input going into the agent.

7748
04:02:53,040 --> 04:02:54,640
And then we have the system prompt. So,

7749
04:02:54,640 --> 04:02:56,000
I'm going to click back into the agent.

7750
04:02:56,000 --> 04:02:57,279
And we can see right here, we have a

7751
04:02:57,279 --> 04:02:58,880
system message, which is just telling

7752
04:02:58,880 --> 04:03:00,720
this AI agent, you are a helpful

7753
04:03:00,720 --> 04:03:02,080
assistant. So, right now, we're just

7754
04:03:02,080 --> 04:03:03,840
going to leave it as that. And back in

7755
04:03:03,840 --> 04:03:05,840
our diagram that is right here, its

7756
04:03:05,840 --> 04:03:07,439
instructions, which is called a system

7757
04:03:07,439 --> 04:03:08,800
prompt. So the next thing we can see

7758
04:03:08,800 --> 04:03:10,399
that we need is we need to give our AI

7759
04:03:10,399 --> 04:03:12,080
agent a brain, which will be a large

7760
04:03:12,080 --> 04:03:14,239
language model and also memory. So I'm

7761
04:03:14,239 --> 04:03:16,319
going to flick back into N. And you can

7762
04:03:16,319 --> 04:03:18,080
see we have two options right here. The

7763
04:03:18,080 --> 04:03:19,760
first one is chat model. So I'm first of

7764
04:03:19,760 --> 04:03:21,520
all just going to click on the plus for

7765
04:03:21,520 --> 04:03:22,960
chat model. I'm going to choose open

7766
04:03:22,960 --> 04:03:24,479
router. And we've already connected to

7767
04:03:24,479 --> 04:03:26,080
open router. And now I just get to

7768
04:03:26,080 --> 04:03:27,359
choose from all of these different chat

7769
04:03:27,359 --> 04:03:29,120
models to use. So I'm just going to go

7770
04:03:29,120 --> 04:03:34,239
ahead and choose a GBT 4.1 Mini.

7771
04:03:34,239 --> 04:03:35,760
And I'm just going to rename this node

7772
04:03:35,760 --> 04:03:38,160
GPT 4.1 mini just so we know which one

7773
04:03:38,160 --> 04:03:40,319
we're

7774
04:03:41,000 --> 04:03:43,920
using. Cool. So now we have our input,

7775
04:03:43,920 --> 04:03:45,600
our AI agent, and a brain. But let's

7776
04:03:45,600 --> 04:03:47,199
give it some memory real quick, which is

7777
04:03:47,199 --> 04:03:48,479
as simple as just clicking the plus

7778
04:03:48,479 --> 04:03:50,319
under memory. And I'm just going to for

7779
04:03:50,319 --> 04:03:52,319
now choose simple memory, which stores

7780
04:03:52,319 --> 04:03:54,080
it in and it end. There's no credentials

7781
04:03:54,080 --> 04:03:56,479
required. And as you can see, the

7782
04:03:56,479 --> 04:03:58,160
session ID is looking for the connected

7783
04:03:58,160 --> 04:04:00,000
chat trigger node. because we're using

7784
04:04:00,000 --> 04:04:01,680
the connected chat trigger node, we

7785
04:04:01,680 --> 04:04:03,359
don't have to change anything. We are

7786
04:04:03,359 --> 04:04:06,160
good to go. So, this is basically the

7787
04:04:06,160 --> 04:04:07,760
core part of the agent, right? So, what

7788
04:04:07,760 --> 04:04:09,199
I can do is I can actually talk to this

7789
04:04:09,199 --> 04:04:10,720
thing. So, I can say, "Hey," and we'll

7790
04:04:10,720 --> 04:04:12,239
see what it says back. It's going to use

7791
04:04:12,239 --> 04:04:15,120
its memory. It's going to um use its

7792
04:04:15,120 --> 04:04:16,319
brain to actually answer us. And it

7793
04:04:16,319 --> 04:04:18,160
says, "Hello, how can I assist you?" I

7794
04:04:18,160 --> 04:04:24,080
can say, "My name is Nate. I am 23 years

7795
04:04:24,080 --> 04:04:25,760
old." And now what I'm going to

7796
04:04:25,760 --> 04:04:27,279
basically test is that it's storing all

7797
04:04:27,279 --> 04:04:28,960
of this as memory and it's going to know

7798
04:04:28,960 --> 04:04:30,399
that. So now it says, "Nice to meet you,

7799
04:04:30,399 --> 04:04:31,920
Nate. How can I help you?" Now I'm going

7800
04:04:31,920 --> 04:04:33,720
to ask you, you

7801
04:04:33,720 --> 04:04:38,960
know, what's my name and how old am I?

7802
04:04:38,960 --> 04:04:40,319
So we'll send that off. And now it's

7803
04:04:40,319 --> 04:04:41,680
going to be able to answer us. Your name

7804
04:04:41,680 --> 04:04:43,439
is Nate and you are 23 years old. How

7805
04:04:43,439 --> 04:04:45,680
can I assist you further? So first of

7806
04:04:45,680 --> 04:04:47,840
all, the reason it's being so helpful is

7807
04:04:47,840 --> 04:04:49,600
because its system message says you're a

7808
04:04:49,600 --> 04:04:51,680
helpful assistant. The next piece would

7809
04:04:51,680 --> 04:04:54,080
be it's using its brain to answer us and

7810
04:04:54,080 --> 04:04:55,600
it's using its memory to make sure it's

7811
04:04:55,600 --> 04:04:57,960
not forgetting stuff about our current

7812
04:04:57,960 --> 04:05:00,080
conversation. So those are the three

7813
04:05:00,080 --> 04:05:02,720
parts right there. Input, AI agent,

7814
04:05:02,720 --> 04:05:04,640
brain, and instructions. And now it's

7815
04:05:04,640 --> 04:05:07,120
time to add the tools. So in this

7816
04:05:07,120 --> 04:05:08,319
example, we're going to build a super

7817
04:05:08,319 --> 04:05:10,560
simple personal assistant AI agent that

7818
04:05:10,560 --> 04:05:12,399
can do three things. It's going to be

7819
04:05:12,399 --> 04:05:15,040
able to look in our contact database in

7820
04:05:15,040 --> 04:05:17,520
order to grab contact information. with

7821
04:05:17,520 --> 04:05:18,880
that contact information. It's going to

7822
04:05:18,880 --> 04:05:20,640
be able to send an email and it's going

7823
04:05:20,640 --> 04:05:23,199
to be able to create a calendar event.

7824
04:05:23,199 --> 04:05:24,479
So, first thing we're going to do is

7825
04:05:24,479 --> 04:05:26,000
we're going to set up our contact

7826
04:05:26,000 --> 04:05:27,279
database. And what I'm going to do for

7827
04:05:27,279 --> 04:05:29,439
that is just I have this Google sheet.

7828
04:05:29,439 --> 04:05:31,040
Really simple. It just says name and

7829
04:05:31,040 --> 04:05:32,800
email. This could be maybe you have your

7830
04:05:32,800 --> 04:05:34,319
contacts in Google contacts. You could

7831
04:05:34,319 --> 04:05:36,080
connect that or an Air Table base or

7832
04:05:36,080 --> 04:05:38,160
whatever you want. This is just the

7833
04:05:38,160 --> 04:05:40,399
actual tool, the actual integration that

7834
04:05:40,399 --> 04:05:42,720
we want to make to our AI agent. So,

7835
04:05:42,720 --> 04:05:44,319
what I'm going to do is throw in a few

7836
04:05:44,319 --> 04:05:46,479
rows of example names and emails in

7837
04:05:46,479 --> 04:05:47,840
here. Okay. So, we're just going to

7838
04:05:47,840 --> 04:05:48,800
stick with these three. We've got

7839
04:05:48,800 --> 04:05:50,399
Michael Scott, Ryan Reynolds, and Oprah

7840
04:05:50,399 --> 04:05:51,680
Winfrey. And now, what we're going to be

7841
04:05:51,680 --> 04:05:53,520
able to do is have our AI agent look at

7842
04:05:53,520 --> 04:05:55,439
this contact database whenever we ask it

7843
04:05:55,439 --> 04:05:57,600
to send an email to someone or make a

7844
04:05:57,600 --> 04:05:59,279
calendar event with someone. If I go

7845
04:05:59,279 --> 04:06:00,560
back and add it in, the first thing we

7846
04:06:00,560 --> 04:06:02,319
have to do is add a tool to actually

7847
04:06:02,319 --> 04:06:03,840
access this Google sheet. So, I'm going

7848
04:06:03,840 --> 04:06:05,680
to click on tool. I'm going to type in

7849
04:06:05,680 --> 04:06:07,120
Google sheet. It's as simple as that.

7850
04:06:07,120 --> 04:06:08,720
And you can see we have a Google Sheets

7851
04:06:08,720 --> 04:06:10,239
tool. So, I'm going to click on that.

7852
04:06:10,239 --> 04:06:11,520
And now we have to set up our

7853
04:06:11,520 --> 04:06:13,040
credential. You guys have already

7854
04:06:13,040 --> 04:06:15,439
connected to Google Sheets in the

7855
04:06:15,439 --> 04:06:16,720
previous workflow, so it shouldn't be

7856
04:06:16,720 --> 04:06:17,680
too difficult. So choose your

7857
04:06:17,680 --> 04:06:19,359
credential. And then the first thing is

7858
04:06:19,359 --> 04:06:20,880
a tool description. What we're going to

7859
04:06:20,880 --> 04:06:22,319
do is we are going to just set this

7860
04:06:22,319 --> 04:06:24,000
automatically. And this basically

7861
04:06:24,000 --> 04:06:26,160
describes to the AI agent what does this

7862
04:06:26,160 --> 04:06:28,399
tool do. So we could set it manually and

7863
04:06:28,399 --> 04:06:30,319
describe ourselves, but if you just set

7864
04:06:30,319 --> 04:06:32,160
it automatically, the AI is going to be

7865
04:06:32,160 --> 04:06:33,520
pretty good at understanding what it

7866
04:06:33,520 --> 04:06:35,600
needs to do with this tool. The next

7867
04:06:35,600 --> 04:06:37,040
thing is a resource. So what are we

7868
04:06:37,040 --> 04:06:38,479
actually looking for? We're looking for

7869
04:06:38,479 --> 04:06:40,399
a sheet within a document, not an entire

7870
04:06:40,399 --> 04:06:41,640
document

7871
04:06:41,640 --> 04:06:44,080
itself. Then the operation is we want to

7872
04:06:44,080 --> 04:06:45,359
just get rows. So I'm going to leave it

7873
04:06:45,359 --> 04:06:47,040
all as that. And then what we need to do

7874
04:06:47,040 --> 04:06:49,279
is actually choose our document and then

7875
04:06:49,279 --> 04:06:50,800
the sheet within that document that we

7876
04:06:50,800 --> 04:06:52,880
want to look at. So for document, I'm

7877
04:06:52,880 --> 04:06:54,800
going to choose contacts. And for sheet,

7878
04:06:54,800 --> 04:06:56,000
there's only one. I'm just going to

7879
04:06:56,000 --> 04:06:57,680
choose sheet one. And then the last

7880
04:06:57,680 --> 04:06:59,439
thing I want to do is just give this

7881
04:06:59,439 --> 04:07:01,920
actual tool a pretty intuitive name. So

7882
04:07:01,920 --> 04:07:03,560
I'm just going to call this

7883
04:07:03,560 --> 04:07:06,479
contacts database. There you go. So now

7884
04:07:06,479 --> 04:07:08,080
it should be super clear to this AI

7885
04:07:08,080 --> 04:07:09,840
agent when to use this tool. We may have

7886
04:07:09,840 --> 04:07:11,600
to do some system prompting actually to

7887
04:07:11,600 --> 04:07:12,720
say like, hey, here are the different

7888
04:07:12,720 --> 04:07:14,319
tools you have. But for now, we're just

7889
04:07:14,319 --> 04:07:15,439
going to test it out and see if it

7890
04:07:15,439 --> 04:07:17,040
works. So what I'm going to do is open

7891
04:07:17,040 --> 04:07:19,600
up the chat and just ask it, can you

7892
04:07:19,600 --> 04:07:21,560
please get Oprah Winfreyy's contact

7893
04:07:21,560 --> 04:07:23,439
information. There we go. We'll send

7894
04:07:23,439 --> 04:07:25,199
that off and we will watch it basically

7895
04:07:25,199 --> 04:07:27,359
think. And then there we go. Boom. It

7896
04:07:27,359 --> 04:07:29,279
hit the Google Sheet tool that we wanted

7897
04:07:29,279 --> 04:07:30,960
it to. And if I open up the chat, it

7898
04:07:30,960 --> 04:07:32,399
says Oprah Winfreyy's contact

7899
04:07:32,399 --> 04:07:35,359
information is email opra winfrey.com.

7900
04:07:35,359 --> 04:07:37,199
If we go into the base, we can see that

7901
04:07:37,199 --> 04:07:39,560
is exactly what we put for her contact

7902
04:07:39,560 --> 04:07:41,600
information. Okay, so we've confirmed

7903
04:07:41,600 --> 04:07:43,120
that the agent knows how to use this

7904
04:07:43,120 --> 04:07:44,720
tool and that it can properly access

7905
04:07:44,720 --> 04:07:46,720
Google Sheets. The next step now is to

7906
04:07:46,720 --> 04:07:48,319
add another tool to be able to send

7907
04:07:48,319 --> 04:07:49,840
emails. So, I'm going to move this thing

7908
04:07:49,840 --> 04:07:51,359
over. I'm going to add another tool and

7909
04:07:51,359 --> 04:07:53,040
I'm just going to search for Gmail and

7910
04:07:53,040 --> 04:07:55,920
click on Gmail tool. Once again, we've

7911
04:07:55,920 --> 04:07:57,040
already covered credentials. So,

7912
04:07:57,040 --> 04:07:58,239
hopefully you guys are already logged in

7913
04:07:58,239 --> 04:08:00,160
there. And then what we need to do is

7914
04:08:00,160 --> 04:08:02,000
just configure the rest of the tool. So

7915
04:08:02,000 --> 04:08:04,080
tool description set automatically

7916
04:08:04,080 --> 04:08:08,080
resource message operation send and then

7917
04:08:08,080 --> 04:08:10,319
we have to fill out the two the subject

7918
04:08:10,319 --> 04:08:12,880
the email type and the message. What

7919
04:08:12,880 --> 04:08:14,640
we're able to do with our AI agents and

7920
04:08:14,640 --> 04:08:17,120
tools is something super super cool. We

7921
04:08:17,120 --> 04:08:19,279
can let our AI agent decide how to fill

7922
04:08:19,279 --> 04:08:21,359
out these three fields that will be

7923
04:08:21,359 --> 04:08:23,120
dynamic. And all I have to do is click

7924
04:08:23,120 --> 04:08:24,560
on this button right here to the right

7925
04:08:24,560 --> 04:08:26,399
that says let the model define this

7926
04:08:26,399 --> 04:08:27,920
parameter. So I'm going to click on that

7927
04:08:27,920 --> 04:08:29,760
button. And now we can see that it says

7928
04:08:29,760 --> 04:08:32,000
defined automatically by the model. So

7929
04:08:32,000 --> 04:08:33,840
basically if I said hey can you send an

7930
04:08:33,840 --> 04:08:36,880
email to Oprah Winfrey saying this um

7931
04:08:36,880 --> 04:08:39,520
and this it would then interpret our

7932
04:08:39,520 --> 04:08:42,960
message our user input and it would then

7933
04:08:42,960 --> 04:08:45,040
fill out who's this going to who's the

7934
04:08:45,040 --> 04:08:46,560
subject and who's the email. So I'll

7935
04:08:46,560 --> 04:08:47,920
show you guys an example of that. It's

7936
04:08:47,920 --> 04:08:49,279
super cool. So I'm just going to click

7937
04:08:49,279 --> 04:08:51,199
on this button for subject and also this

7938
04:08:51,199 --> 04:08:53,680
button for message. And now we can see

7939
04:08:53,680 --> 04:08:56,319
the actual AI use its brain to fill out

7940
04:08:56,319 --> 04:08:58,479
these three fields.

7941
04:08:58,479 --> 04:08:59,520
And then also I'm just going to change

7942
04:08:59,520 --> 04:09:01,840
the email type to text because I like it

7943
04:09:01,840 --> 04:09:04,319
how it comes through as text. So real

7944
04:09:04,319 --> 04:09:06,160
quick, just want to change this name to

7945
04:09:06,160 --> 04:09:08,960
send email. And all we have to do now is

7946
04:09:08,960 --> 04:09:10,560
we're going to chat with our agent and

7947
04:09:10,560 --> 04:09:12,399
see if it's able to send that email. All

7948
04:09:12,399 --> 04:09:13,840
right. So I'm sending off this message

7949
04:09:13,840 --> 04:09:15,840
that asks to send an email to Oprah

7950
04:09:15,840 --> 04:09:17,279
asking how she's doing and if she has

7951
04:09:17,279 --> 04:09:19,439
plans this weekend. And what happened is

7952
04:09:19,439 --> 04:09:21,520
it went straight to the send email tool.

7953
04:09:21,520 --> 04:09:23,520
And the reason it did that is because in

7954
04:09:23,520 --> 04:09:25,040
its memory, it remembered that it

7955
04:09:25,040 --> 04:09:26,920
already knows Oprah Winfreyy's contact

7956
04:09:26,920 --> 04:09:29,439
information. So if I open chat, it says

7957
04:09:29,439 --> 04:09:31,439
the email's been sent asking how she's

7958
04:09:31,439 --> 04:09:32,720
doing and if she has plans this weekend.

7959
04:09:32,720 --> 04:09:34,319
Is there anything else that you would

7960
04:09:34,319 --> 04:09:36,560
like to do? So real quick before we go

7961
04:09:36,560 --> 04:09:38,080
see if the email actually did get sent,

7962
04:09:38,080 --> 04:09:39,600
I'm going to click into the tool. And

7963
04:09:39,600 --> 04:09:41,120
what we can see is on this left hand

7964
04:09:41,120 --> 04:09:44,239
side, we can see exactly how it chose to

7965
04:09:44,239 --> 04:09:46,399
fill out these three fields. So for the

7966
04:09:46,399 --> 04:09:48,560
two, it put oprafree.com, which is

7967
04:09:48,560 --> 04:09:50,399
correct. For the subject, it put

7968
04:09:50,399 --> 04:09:52,319
checking in. And for the message, it put

7969
04:09:52,319 --> 04:09:54,239
hi Oprah. I hope this weekend finds you

7970
04:09:54,239 --> 04:09:55,680
well. How are you doing? Do you have any

7971
04:09:55,680 --> 04:09:58,399
plans? Best regards, Nate. And another

7972
04:09:58,399 --> 04:10:00,080
thing that's really cool is the only

7973
04:10:00,080 --> 04:10:01,680
reason that it signed off right here as

7974
04:10:01,680 --> 04:10:03,600
best regards Nate is because once again,

7975
04:10:03,600 --> 04:10:05,359
it used its memory and it remembers that

7976
04:10:05,359 --> 04:10:07,760
our name is Nate. That's how it filled

7977
04:10:07,760 --> 04:10:09,359
out those fields. Let me go over to my

7978
04:10:09,359 --> 04:10:11,120
email and we'll take a look. So, in our

7979
04:10:11,120 --> 04:10:13,359
sent, we have the checking in subject.

7980
04:10:13,359 --> 04:10:15,279
We have the message that we just read in

7981
04:10:15,279 --> 04:10:17,120
and it in. And then we have this little

7982
04:10:17,120 --> 04:10:18,560
thing at the bottom that says this email

7983
04:10:18,560 --> 04:10:20,560
was automatically sent by NADN. We can

7984
04:10:20,560 --> 04:10:22,960
easily turn that off if we go into NADN.

7985
04:10:22,960 --> 04:10:25,040
Open up the tool. We add an option at

7986
04:10:25,040 --> 04:10:26,399
the bottom that says append naden

7987
04:10:26,399 --> 04:10:28,239
attribution. And then we just turn off

7988
04:10:28,239 --> 04:10:30,560
the append naden attribution. And as you

7989
04:10:30,560 --> 04:10:31,840
can see if we click on add options,

7990
04:10:31,840 --> 04:10:33,120
there are other things that we can do as

7991
04:10:33,120 --> 04:10:34,720
well. Like we can reply to the sender

7992
04:10:34,720 --> 04:10:36,640
only. We can add a sender name. We can

7993
04:10:36,640 --> 04:10:39,279
add attachments. All this other stuff.

7994
04:10:39,279 --> 04:10:41,040
But at a high level and real quick

7995
04:10:41,040 --> 04:10:42,960
setup, that is the send email tool. And

7996
04:10:42,960 --> 04:10:44,960
keep in mind, we still haven't given our

7997
04:10:44,960 --> 04:10:47,120
agent any sort of system prompt besides

7998
04:10:47,120 --> 04:10:48,720
saying you're a helpful assistant. So,

7999
04:10:48,720 --> 04:10:51,040
super cool stuff. All right, cool. And

8000
04:10:51,040 --> 04:10:52,640
now for the last tool, what we want to

8001
04:10:52,640 --> 04:10:53,960
do is add

8002
04:10:53,960 --> 04:10:56,960
a create calendar event. So, I'm going

8003
04:10:56,960 --> 04:10:59,120
to search calendar and grab a Google

8004
04:10:59,120 --> 04:11:01,600
calendar node. We already should be set

8005
04:11:01,600 --> 04:11:02,960
up. Or if you're not, actually, all you

8006
04:11:02,960 --> 04:11:04,560
have to do is just create new credential

8007
04:11:04,560 --> 04:11:06,000
and sign in real quick because you

8008
04:11:06,000 --> 04:11:07,600
already went and created your whole

8009
04:11:07,600 --> 04:11:10,000
Google Cloud thing.

8010
04:11:10,000 --> 04:11:11,199
We're going to leave the description as

8011
04:11:11,199 --> 04:11:13,040
automatic. The resource is an event. The

8012
04:11:13,040 --> 04:11:15,600
operation is create. The calendar is

8013
04:11:15,600 --> 04:11:17,040
going to be one that we choose from our

8014
04:11:17,040 --> 04:11:19,439
account. And now we have a few things

8015
04:11:19,439 --> 04:11:22,000
that we want to fill out for this tool.

8016
04:11:22,000 --> 04:11:23,680
So basically, it's asking what time is

8017
04:11:23,680 --> 04:11:24,960
the event going to start and what time

8018
04:11:24,960 --> 04:11:26,800
is the event going to end. So real

8019
04:11:26,800 --> 04:11:27,920
quick, I'm just going to do the same

8020
04:11:27,920 --> 04:11:29,520
thing. I'm going to let the model decide

8021
04:11:29,520 --> 04:11:30,880
based on the way that we interact with

8022
04:11:30,880 --> 04:11:33,120
it with our input. And then real quick,

8023
04:11:33,120 --> 04:11:34,720
I just want to add one more field, which

8024
04:11:34,720 --> 04:11:36,720
is going to be a summary. And basically

8025
04:11:36,720 --> 04:11:38,080
whatever gets filled in right here for

8026
04:11:38,080 --> 04:11:39,439
summary is what's going to show up as

8027
04:11:39,439 --> 04:11:41,359
the name of the event in Google

8028
04:11:41,359 --> 04:11:42,880
calendar. But once again we're going to

8029
04:11:42,880 --> 04:11:44,560
let the model automatically define this

8030
04:11:44,560 --> 04:11:49,239
field. So let's call this node create

8031
04:11:49,239 --> 04:11:51,120
event. And actually one more thing I

8032
04:11:51,120 --> 04:11:52,479
forgot to do is we want to add an

8033
04:11:52,479 --> 04:11:54,239
attendee. So we can actually let the

8034
04:11:54,239 --> 04:11:56,479
agent add someone to an event as well.

8035
04:11:56,479 --> 04:11:58,880
So that is the new tool. We're going to

8036
04:11:58,880 --> 04:12:00,800
hit save. And remember no system

8037
04:12:00,800 --> 04:12:02,479
prompts. Let's see if we can create a

8038
04:12:02,479 --> 04:12:04,479
calendar event with Michael Scott. All

8039
04:12:04,479 --> 04:12:05,600
right. All right. So, we're asking for

8040
04:12:05,600 --> 04:12:08,000
dinner with Michael at 6 p.m. What's

8041
04:12:08,000 --> 04:12:11,040
going to happen is it probably Okay, so

8042
04:12:11,040 --> 04:12:12,319
we're going to have to do some prompting

8043
04:12:12,319 --> 04:12:14,000
because we don't know Michael Scott's

8044
04:12:14,000 --> 04:12:15,680
contact information yet, but it went

8045
04:12:15,680 --> 04:12:17,279
ahead and tried to create that email.

8046
04:12:17,279 --> 04:12:19,199
So, it said that it created the event

8047
04:12:19,199 --> 04:12:20,640
and let's click into the tool and see

8048
04:12:20,640 --> 04:12:23,760
what happened. So, it tried to send the

8049
04:12:23,760 --> 04:12:26,359
event invite to

8050
04:12:26,359 --> 04:12:27,680
michael.scottample.com. So, it

8051
04:12:27,680 --> 04:12:29,279
completely made that up because in our

8052
04:12:29,279 --> 04:12:31,880
contacts base, Michael Scott's email is

8053
04:12:31,880 --> 04:12:33,520
mikegreatcott.com. So, it got that

8054
04:12:33,520 --> 04:12:35,880
wrong. That's the first thing it got

8055
04:12:35,880 --> 04:12:38,160
wrong. The second thing it got wrong was

8056
04:12:38,160 --> 04:12:40,399
the actual start and end date. So, yes,

8057
04:12:40,399 --> 04:12:42,160
it made the event for 6 p.m., but it

8058
04:12:42,160 --> 04:12:45,680
made it for 6 p.m. on April 27th, 2024,

8059
04:12:45,680 --> 04:12:48,880
which was over a year ago. So, we can

8060
04:12:48,880 --> 04:12:50,880
fix this by using the system prompt. So,

8061
04:12:50,880 --> 04:12:52,239
what I'm going to do real quick is go

8062
04:12:52,239 --> 04:12:54,720
into the system prompt, and I'm just

8063
04:12:54,720 --> 04:12:55,840
going to make it just an expression and

8064
04:12:55,840 --> 04:12:57,600
open it up full screen real quick. What

8065
04:12:57,600 --> 04:13:00,880
I'm going to say next is you must always

8066
04:13:00,880 --> 04:13:03,520
look in the contacts database before

8067
04:13:03,520 --> 04:13:05,760
doing something like creating an event

8068
04:13:05,760 --> 04:13:08,399
or sending an email. You need the

8069
04:13:08,399 --> 04:13:10,479
person's email address in order to do

8070
04:13:10,479 --> 04:13:12,359
one of those

8071
04:13:12,359 --> 04:13:14,399
actions. Okay, so that's a really simple

8072
04:13:14,399 --> 04:13:16,000
thing we can add. And then also what I

8073
04:13:16,000 --> 04:13:17,840
want to tell it is what is today's

8074
04:13:17,840 --> 04:13:19,600
current date and time? So that if I say

8075
04:13:19,600 --> 04:13:20,960
create an event for tomorrow or create

8076
04:13:20,960 --> 04:13:22,479
an event for today, it actually gets the

8077
04:13:22,479 --> 04:13:24,479
date right. So, I'm just going to say

8078
04:13:24,479 --> 04:13:28,319
here is the current date slashtime. And

8079
04:13:28,319 --> 04:13:29,600
all I have to do to give it access to

8080
04:13:29,600 --> 04:13:31,359
the current date and time is do two

8081
04:13:31,359 --> 04:13:33,359
curly braces. And then right here you

8082
04:13:33,359 --> 04:13:35,600
can see dollar sign now which says a

8083
04:13:35,600 --> 04:13:36,880
date time representing the current

8084
04:13:36,880 --> 04:13:39,040
moment. So if I click on that on the

8085
04:13:39,040 --> 04:13:40,880
right hand side in the result panel you

8086
04:13:40,880 --> 04:13:42,080
can see it's going to show the current

8087
04:13:42,080 --> 04:13:44,319
date and time. So we're happy with that.

8088
04:13:44,319 --> 04:13:45,840
Our system prompt has been a little bit

8089
04:13:45,840 --> 04:13:47,680
upgraded and now we're going to just try

8090
04:13:47,680 --> 04:13:49,680
that exact same query again and we'll

8091
04:13:49,680 --> 04:13:50,880
see what happens. So, I'm going to click

8092
04:13:50,880 --> 04:13:53,199
on this little repost message button.

8093
04:13:53,199 --> 04:13:55,439
Send it again. And hopefully now, there

8094
04:13:55,439 --> 04:13:57,279
we go. It hits the contact database to

8095
04:13:57,279 --> 04:13:59,359
get Michael Scott's email. And then it

8096
04:13:59,359 --> 04:14:00,560
creates the calendar event with Michael

8097
04:14:00,560 --> 04:14:02,560
Scott. So, down here, it says, I've

8098
04:14:02,560 --> 04:14:04,319
created a calendar event for dinner with

8099
04:14:04,319 --> 04:14:06,159
Michael Scott tonight at 6. If you need

8100
04:14:06,159 --> 04:14:07,840
any more assistance, feel free to ask.

8101
04:14:07,840 --> 04:14:10,080
So, if I go to my calendar, we can see

8102
04:14:10,080 --> 04:14:11,600
we have a 2-hour long dinner with

8103
04:14:11,600 --> 04:14:14,000
Michael Scott. If I click onto it, we

8104
04:14:14,000 --> 04:14:16,080
can see that the guest that was invited

8105
04:14:16,080 --> 04:14:17,000
was

8106
04:14:17,000 --> 04:14:18,640
mikegreatscott.com, which is exactly

8107
04:14:18,640 --> 04:14:21,279
what we see in our contact database. And

8108
04:14:21,279 --> 04:14:22,560
so, you may have noticed it made this

8109
04:14:22,560 --> 04:14:23,920
event for 2 hours because we didn't

8110
04:14:23,920 --> 04:14:25,920
specify. If I said, "Hey, create a

8111
04:14:25,920 --> 04:14:27,279
15-minute event," it would have only

8112
04:14:27,279 --> 04:14:29,279
made it 15 minutes. So, what I'm going

8113
04:14:29,279 --> 04:14:31,920
to do real quick is a loaded prompt.

8114
04:14:31,920 --> 04:14:33,279
Okay, so fingers crossed. We're saying,

8115
04:14:33,279 --> 04:14:34,960
"Please invite Ryan Reynolds to a party

8116
04:14:34,960 --> 04:14:36,880
tonight that's only 30 minutes long at 8

8117
04:14:36,880 --> 04:14:39,199
p.m. and send him an email to confirm."

8118
04:14:39,199 --> 04:14:41,199
So, what happened here? It went to go

8119
04:14:41,199 --> 04:14:43,359
create an event and send an email, but

8120
04:14:43,359 --> 04:14:45,840
it didn't get Ryan Reynolds email first.

8121
04:14:45,840 --> 04:14:47,120
So, if we click into this, we can see

8122
04:14:47,120 --> 04:14:48,760
that it sent an email to

8123
04:14:48,760 --> 04:14:50,560
ryan.rrensacample.com. That's not right.

8124
04:14:50,560 --> 04:14:52,680
And it went to create an event at

8125
04:14:52,680 --> 04:14:54,239
ryan.rerensacample.com. And that's not

8126
04:14:54,239 --> 04:14:56,319
right either. But the good news is if we

8127
04:14:56,319 --> 04:14:58,000
go to calendar, we can see that it did

8128
04:14:58,000 --> 04:14:59,920
get the party right as far as it's 8

8129
04:14:59,920 --> 04:15:02,800
p.m. and only 15 minutes. So, because it

8130
04:15:02,800 --> 04:15:04,720
didn't take the right action, it's not

8131
04:15:04,720 --> 04:15:06,640
that big of a deal. We know now that we

8132
04:15:06,640 --> 04:15:08,800
have to go and refine the system prompt.

8133
04:15:08,800 --> 04:15:10,239
So to do that, I'm going to open up the

8134
04:15:10,239 --> 04:15:11,680
agent. I'm going to click into the

8135
04:15:11,680 --> 04:15:14,000
system prompt. And we are going to fix

8136
04:15:14,000 --> 04:15:16,000
some stuff up. Okay. So I added two

8137
04:15:16,000 --> 04:15:17,520
sentences that say, "Never make up

8138
04:15:17,520 --> 04:15:19,120
someone's email address. You must look

8139
04:15:19,120 --> 04:15:21,279
in the contact database tool." So as you

8140
04:15:21,279 --> 04:15:22,720
guys can see, this is pretty natural

8141
04:15:22,720 --> 04:15:24,239
language. We're just instructing someone

8142
04:15:24,239 --> 04:15:25,840
how to do something as if we were

8143
04:15:25,840 --> 04:15:27,680
teaching an intern. Okay. So what I'm

8144
04:15:27,680 --> 04:15:28,880
going to do real quick is clear this

8145
04:15:28,880 --> 04:15:30,159
memory. So I'm just going to reset the

8146
04:15:30,159 --> 04:15:31,600
session. And now we're starting from a

8147
04:15:31,600 --> 04:15:33,199
clean slate. And I'm going to ask that

8148
04:15:33,199 --> 04:15:35,520
exact same query to do that multi-step

8149
04:15:35,520 --> 04:15:37,199
thing with Ryan Reynolds. All right.

8150
04:15:37,199 --> 04:15:38,800
Take two. We're inviting Ryan Reynolds

8151
04:15:38,800 --> 04:15:40,720
to a party at 9:00 p.m. There we go.

8152
04:15:40,720 --> 04:15:42,399
It's hitting the contacts database. And

8153
04:15:42,399 --> 04:15:43,600
now it's going to hit the create event

8154
04:15:43,600 --> 04:15:45,120
and the send email tool at the same

8155
04:15:45,120 --> 04:15:47,600
time. Boom. I've scheduled a 30-minute

8156
04:15:47,600 --> 04:15:49,199
party tonight at 9:00 p.m. and invited

8157
04:15:49,199 --> 04:15:51,359
Ryan Reynolds. So, let's go to our

8158
04:15:51,359 --> 04:15:53,680
calendar. We have a 9 p.m. party for 30

8159
04:15:53,680 --> 04:15:55,479
minutes long, and it is

8160
04:15:55,479 --> 04:15:57,600
ryanpool.com, which is exactly what we

8161
04:15:57,600 --> 04:15:59,439
see in our contacts database. And then,

8162
04:15:59,439 --> 04:16:01,120
if we go to our email, we can see now

8163
04:16:01,120 --> 04:16:03,120
that we have a party invitation for

8164
04:16:03,120 --> 04:16:06,159
tonight to ryanpool.com. But what you'll

8165
04:16:06,159 --> 04:16:08,800
notice is now it didn't sign off as Nate

8166
04:16:08,800 --> 04:16:11,439
because I cleared that memory. So this

8167
04:16:11,439 --> 04:16:12,960
would be a super simple fix. We would

8168
04:16:12,960 --> 04:16:14,239
just want to go to the system prompt and

8169
04:16:14,239 --> 04:16:15,920
say, "Hey, when you're sending emails,

8170
04:16:15,920 --> 04:16:18,319
make sure you sign off as Nate." So

8171
04:16:18,319 --> 04:16:19,920
that's going to be it for your first AI

8172
04:16:19,920 --> 04:16:21,920
agent build. This one is very simple,

8173
04:16:21,920 --> 04:16:24,000
but also hopefully really opens your

8174
04:16:24,000 --> 04:16:26,159
eyes to how easy it is to plug in these

8175
04:16:26,159 --> 04:16:27,600
different tools. And it's really just

8176
04:16:27,600 --> 04:16:29,359
about your configurations and your

8177
04:16:29,359 --> 04:16:31,279
system prompts because system prompting

8178
04:16:31,279 --> 04:16:33,199
is a really important skill and it's

8179
04:16:33,199 --> 04:16:34,399
something that you kind of have to just

8180
04:16:34,399 --> 04:16:36,319
try out a lot. You have to get a lot of

8181
04:16:36,319 --> 04:16:38,880
reps and it's a very iterative process.

8182
04:16:38,880 --> 04:16:40,479
But anyways, congratulations. You just

8183
04:16:40,479 --> 04:16:42,720
built your first AI agent in probably

8184
04:16:42,720 --> 04:16:44,720
less than 20 minutes and now add on a

8185
04:16:44,720 --> 04:16:46,000
few more tools. Play around with a few

8186
04:16:46,000 --> 04:16:47,680
more parameters and just see how this

8187
04:16:47,680 --> 04:16:49,680
kind of stuff works. In this section,

8188
04:16:49,680 --> 04:16:51,439
what I'm going to talk about is dynamic

8189
04:16:51,439 --> 04:16:54,399
memory for your AI agents. So if you

8190
04:16:54,399 --> 04:16:56,000
remember, we had just set up this agent

8191
04:16:56,000 --> 04:16:58,159
and we were using simple memory and this

8192
04:16:58,159 --> 04:16:59,920
was basically helping us keep

8193
04:16:59,920 --> 04:17:02,159
conversation history. But what we didn't

8194
04:17:02,159 --> 04:17:05,439
yet talk about was the session ID and

8195
04:17:05,439 --> 04:17:07,760
what that exactly means. So basically

8196
04:17:07,760 --> 04:17:09,760
think of a session ID as some sort of

8197
04:17:09,760 --> 04:17:12,159
unique identifier that identifies each

8198
04:17:12,159 --> 04:17:14,239
separate conversation. So, if I'm

8199
04:17:14,239 --> 04:17:18,000
talking to you, person A, and you ask me

8200
04:17:18,000 --> 04:17:19,680
something, I'm gonna go look at

8201
04:17:19,680 --> 04:17:22,080
conversations from our conversation,

8202
04:17:22,080 --> 04:17:24,479
person A and Nate, and then I can read

8203
04:17:24,479 --> 04:17:25,920
that for context and then respond to

8204
04:17:25,920 --> 04:17:28,319
you. But if person B talks to me, I'm

8205
04:17:28,319 --> 04:17:29,600
going to go look at my conversation

8206
04:17:29,600 --> 04:17:31,600
history with person B before I respond

8207
04:17:31,600 --> 04:17:34,159
to them. And that way, I keep two people

8208
04:17:34,159 --> 04:17:35,680
and two conversations completely

8209
04:17:35,680 --> 04:17:37,600
separate. So, that's what a session ID

8210
04:17:37,600 --> 04:17:39,680
is. So, if we were having some sort of

8211
04:17:39,680 --> 04:17:41,760
AI agent that was being triggered by an

8212
04:17:41,760 --> 04:17:43,600
email, we would basically want to set

8213
04:17:43,600 --> 04:17:46,000
the session ID as the email address

8214
04:17:46,000 --> 04:17:47,840
coming in because then we know that the

8215
04:17:47,840 --> 04:17:50,159
agent's going to be uniquely responding

8216
04:17:50,159 --> 04:17:52,319
to whoever actually sent that email that

8217
04:17:52,319 --> 04:17:55,199
triggered it. So, just to demonstrate

8218
04:17:55,199 --> 04:17:56,800
how that works, what I'm going to do is

8219
04:17:56,800 --> 04:17:58,399
just manipulate the session ID a little

8220
04:17:58,399 --> 04:18:00,239
bit. So, I'm going to come into here and

8221
04:18:00,239 --> 04:18:02,560
I'm going to instead of using the chat

8222
04:18:02,560 --> 04:18:04,479
trigger node for the session ID, I'm

8223
04:18:04,479 --> 04:18:06,319
going to just define it below. And I'm

8224
04:18:06,319 --> 04:18:07,680
just going to do that exact example that

8225
04:18:07,680 --> 04:18:09,040
I just talked to you guys about with

8226
04:18:09,040 --> 04:18:10,960
person A and person B. So I'm just going

8227
04:18:10,960 --> 04:18:13,359
to put a lowercase A in there as the

8228
04:18:13,359 --> 04:18:15,080
session ID

8229
04:18:15,080 --> 04:18:17,520
key. So once I save that, what I'm going

8230
04:18:17,520 --> 04:18:20,000
to do is just say hi. Now it's going to

8231
04:18:20,000 --> 04:18:21,199
respond to me. It's going to update the

8232
04:18:21,199 --> 04:18:22,960
conversation history and say hi. I'm

8233
04:18:22,960 --> 04:18:26,159
going to say my name is

8234
04:18:26,159 --> 04:18:27,840
um Bruce. I don't know why I thought of

8235
04:18:27,840 --> 04:18:30,239
Bruce, but my name's Bruce. And now it

8236
04:18:30,239 --> 04:18:31,920
says nice to meet you Bruce. How can I

8237
04:18:31,920 --> 04:18:34,159
assist you? Now what I'm going to do is

8238
04:18:34,159 --> 04:18:36,800
I'm going to change the session ID to B.

8239
04:18:36,800 --> 04:18:38,159
We'll hit save. And I'm just going to

8240
04:18:38,159 --> 04:18:39,560
say what's my

8241
04:18:39,560 --> 04:18:42,880
name? What's my name? And it's going to

8242
04:18:42,880 --> 04:18:44,960
say I don't have access to your name

8243
04:18:44,960 --> 04:18:46,800
directly. If you'd like, you can provide

8244
04:18:46,800 --> 04:18:48,080
your name or any other details you want

8245
04:18:48,080 --> 04:18:50,080
me to know. How can I assist you today?

8246
04:18:50,080 --> 04:18:52,880
So person A is Bruce. Person B is no

8247
04:18:52,880 --> 04:18:54,239
name. And what I'm going to do is go

8248
04:18:54,239 --> 04:18:57,680
back to putting the key as A. Hit save.

8249
04:18:57,680 --> 04:19:01,040
And now if I say, "What is my name?"

8250
04:19:01,040 --> 04:19:03,199
with a misspelled my, it's going to say,

8251
04:19:03,199 --> 04:19:04,040
"Hey,

8252
04:19:04,040 --> 04:19:06,720
Bruce." There we go. Your name is Bruce.

8253
04:19:06,720 --> 04:19:08,159
How can I assist you further? And so

8254
04:19:08,159 --> 04:19:10,080
that's just a really quick demo of how

8255
04:19:10,080 --> 04:19:12,000
you're able to sort of actually have

8256
04:19:12,000 --> 04:19:15,199
dynamic um conversations with multiple

8257
04:19:15,199 --> 04:19:17,439
users in one single agent flow because

8258
04:19:17,439 --> 04:19:20,159
you can make this field dynamic. So,

8259
04:19:20,159 --> 04:19:21,520
what I'm going to do to show you guys a

8260
04:19:21,520 --> 04:19:23,359
practical use of this, let's say you're

8261
04:19:23,359 --> 04:19:25,120
wanting to connect your agent to Slack

8262
04:19:25,120 --> 04:19:27,120
or to Telegram or to WhatsApp or to

8263
04:19:27,120 --> 04:19:29,920
Gmail. You want the memory to be dynamic

8264
04:19:29,920 --> 04:19:31,520
and you want it to be unique for each

8265
04:19:31,520 --> 04:19:33,600
person that's interacting with it. So,

8266
04:19:33,600 --> 04:19:35,040
what I have here is a Gmail trigger. I'm

8267
04:19:35,040 --> 04:19:36,319
going to hit test workflow, which should

8268
04:19:36,319 --> 04:19:38,319
just pull in an email. So, when we open

8269
04:19:38,319 --> 04:19:39,520
up this email, we can see like the

8270
04:19:39,520 --> 04:19:41,439
actual body of the email. We can see,

8271
04:19:41,439 --> 04:19:43,359
you know, like history. We can see a

8272
04:19:43,359 --> 04:19:45,120
thread ID, all this kind of stuff. But

8273
04:19:45,120 --> 04:19:46,479
what I want to look at is who is the

8274
04:19:46,479 --> 04:19:48,800
email from? Because then if I feed this

8275
04:19:48,800 --> 04:19:51,040
into the AI agent and first of all we

8276
04:19:51,040 --> 04:19:53,359
would have to change the actual um user

8277
04:19:53,359 --> 04:19:55,680
message. So we are no longer talking to

8278
04:19:55,680 --> 04:19:57,040
our agent with the connected chat

8279
04:19:57,040 --> 04:19:59,199
trigger node, right? We're connecting to

8280
04:19:59,199 --> 04:20:01,359
it with Gmail. So I'm going to click to

8281
04:20:01,359 --> 04:20:03,359
find below. The user message is

8282
04:20:03,359 --> 04:20:04,800
basically going to be whatever you want

8283
04:20:04,800 --> 04:20:07,199
the agent to look at. So don't even

8284
04:20:07,199 --> 04:20:08,960
think about end right now. If you had an

8285
04:20:08,960 --> 04:20:10,399
agent to help you with your emails, what

8286
04:20:10,399 --> 04:20:11,920
would you want it to read? You'd want it

8287
04:20:11,920 --> 04:20:13,359
to read maybe a combination of the

8288
04:20:13,359 --> 04:20:15,680
subject and the body. So that's exactly

8289
04:20:15,680 --> 04:20:17,279
what I'm going to do. I'm just going to

8290
04:20:17,279 --> 04:20:19,199
type in subject. Okay, here's the

8291
04:20:19,199 --> 04:20:20,479
subject down here. And I'm going to drag

8292
04:20:20,479 --> 04:20:22,319
that right in there. And then I'm just

8293
04:20:22,319 --> 04:20:24,800
going to say body. And then I would drag

8294
04:20:24,800 --> 04:20:27,279
in the actual body snippet. And it's a

8295
04:20:27,279 --> 04:20:28,960
snippet right now because in the actual

8296
04:20:28,960 --> 04:20:31,120
Gmail trigger, we have this flicked on

8297
04:20:31,120 --> 04:20:33,199
as simplified. If we turn that off, it

8298
04:20:33,199 --> 04:20:34,399
would give us not a snippet. It would

8299
04:20:34,399 --> 04:20:36,000
give us a full email body. But for right

8300
04:20:36,000 --> 04:20:37,439
now, for simplicity, we'll leave it

8301
04:20:37,439 --> 04:20:39,279
simplified. But now you can see that's

8302
04:20:39,279 --> 04:20:40,399
what the agent's going to be reading

8303
04:20:40,399 --> 04:20:42,399
every time, not the connected chat

8304
04:20:42,399 --> 04:20:44,880
trigger node. And before we hit test

8305
04:20:44,880 --> 04:20:46,560
step, what we want to do is we want to

8306
04:20:46,560 --> 04:20:47,640
make

8307
04:20:47,640 --> 04:20:50,319
the sender of this email also the

8308
04:20:50,319 --> 04:20:52,800
session key for the simple memory. So

8309
04:20:52,800 --> 04:20:54,640
we're going to define below and what I'm

8310
04:20:54,640 --> 04:20:56,399
going to do is find the from field which

8311
04:20:56,399 --> 04:20:58,960
is right here and drag that in. So now

8312
04:20:58,960 --> 04:21:00,960
whenever we get a new email, we're going

8313
04:21:00,960 --> 04:21:02,640
to be looking at conversation history

8314
04:21:02,640 --> 04:21:04,880
from whoever sent that email to trigger

8315
04:21:04,880 --> 04:21:06,720
this whole workflow. So I'll hit save

8316
04:21:06,720 --> 04:21:08,080
and basically what I'm going to do is

8317
04:21:08,080 --> 04:21:10,159
just run the agent. And what it's going

8318
04:21:10,159 --> 04:21:11,680
to do is update the memory. It's going

8319
04:21:11,680 --> 04:21:13,680
to be looking at the correct thing and

8320
04:21:13,680 --> 04:21:15,120
it's taking some action for us. So,

8321
04:21:15,120 --> 04:21:17,040
we'll take a look at what it does. But

8322
04:21:17,040 --> 04:21:18,880
basically, it said the invitation email

8323
04:21:18,880 --> 04:21:20,239
for the party tonight has been sent to

8324
04:21:20,239 --> 04:21:21,760
Ryan. If you need any further

8325
04:21:21,760 --> 04:21:23,840
assistance, please let me know. And the

8326
04:21:23,840 --> 04:21:25,920
reason why it did that is because the

8327
04:21:25,920 --> 04:21:27,680
actual user message basically was saying

8328
04:21:27,680 --> 04:21:30,159
we're inviting Ryan to a party. So,

8329
04:21:30,159 --> 04:21:31,439
hopefully that clears up some stuff

8330
04:21:31,439 --> 04:21:34,080
about dynamic um user messages and

8331
04:21:34,080 --> 04:21:36,560
dynamic memory. And now you're on your

8332
04:21:36,560 --> 04:21:38,479
way to building some pretty cool Jetic

8333
04:21:38,479 --> 04:21:39,840
workflows. And something important to

8334
04:21:39,840 --> 04:21:41,840
touch on real quick is with the memory

8335
04:21:41,840 --> 04:21:43,680
within the actual node. What you'll

8336
04:21:43,680 --> 04:21:45,680
notice is that there is a context window

8337
04:21:45,680 --> 04:21:47,520
length parameter. And this says how many

8338
04:21:47,520 --> 04:21:49,279
past interactions the model receives as

8339
04:21:49,279 --> 04:21:50,800
context. So this is definitely more of

8340
04:21:50,800 --> 04:21:52,399
the short-term memory because it's only

8341
04:21:52,399 --> 04:21:53,920
going to be looking at the past five

8342
04:21:53,920 --> 04:21:55,840
interactions before it crafts its

8343
04:21:55,840 --> 04:21:57,680
response. And this is not just with a

8344
04:21:57,680 --> 04:21:59,279
simple memory node. What we have here is

8345
04:21:59,279 --> 04:22:00,960
if I delete this connection and click on

8346
04:22:00,960 --> 04:22:02,640
memory, you can see there are other

8347
04:22:02,640 --> 04:22:04,399
types of memory we can use for our AI

8348
04:22:04,399 --> 04:22:05,840
agents. Let's say for example we're

8349
04:22:05,840 --> 04:22:07,439
doing Postgress which later in this

8350
04:22:07,439 --> 04:22:09,120
course you'll see how to set this up.

8351
04:22:09,120 --> 04:22:10,479
But in Postgress you can see that

8352
04:22:10,479 --> 04:22:12,560
there's also a context window length. So

8353
04:22:12,560 --> 04:22:14,000
just to show you guys an example of like

8354
04:22:14,000 --> 04:22:15,359
what that actually looks like. What

8355
04:22:15,359 --> 04:22:16,399
we're going to do is just connect back

8356
04:22:16,399 --> 04:22:18,880
to here. I'm going to drag in our chat

8357
04:22:18,880 --> 04:22:20,479
message trigger which means I'm going to

8358
04:22:20,479 --> 04:22:22,080
have to change the input of the AI

8359
04:22:22,080 --> 04:22:23,520
agent. So we're going to get rid of this

8360
04:22:23,520 --> 04:22:26,080
whole um defined below with the subject

8361
04:22:26,080 --> 04:22:27,279
and body. We're going to drag in the

8362
04:22:27,279 --> 04:22:29,120
connected chat trigger node. Go ahead

8363
04:22:29,120 --> 04:22:31,199
and give this another save. And now I'm

8364
04:22:31,199 --> 04:22:32,800
just going to come into the chat and

8365
04:22:32,800 --> 04:22:37,199
say, "Hello, Mr. Agent. What is going on

8366
04:22:37,199 --> 04:22:39,760
here? We have the memory is messed up."

8367
04:22:39,760 --> 04:22:41,600
So remember, I just changed the session

8368
04:22:41,600 --> 04:22:45,600
ID from our chat trigger to the Gmail

8369
04:22:45,600 --> 04:22:48,640
trigger um the address, the email

8370
04:22:48,640 --> 04:22:49,760
address of whoever just sent us the

8371
04:22:49,760 --> 04:22:50,720
email. So I'm going to have to go change

8372
04:22:50,720 --> 04:22:52,640
that again. I'm just going to simply

8373
04:22:52,640 --> 04:22:54,399
choose connected chat trigger node. And

8374
04:22:54,399 --> 04:22:56,080
now it's referencing the correct session

8375
04:22:56,080 --> 04:22:57,600
ID. Our variable is green. We're good to

8376
04:22:57,600 --> 04:22:59,520
go. We'll try this again. Hello, Mr.

8377
04:22:59,520 --> 04:23:01,840
Agent. It's going to talk to us. So,

8378
04:23:01,840 --> 04:23:03,159
just save that as

8379
04:23:03,159 --> 04:23:07,520
memory. My name is

8380
04:23:07,960 --> 04:23:10,319
Nate. Okay. Nice to meet you, Nate. How

8381
04:23:10,319 --> 04:23:14,920
can I assist you? My favorite color is

8382
04:23:14,920 --> 04:23:17,760
blue. And I'm going to say, you know,

8383
04:23:17,760 --> 04:23:21,600
tell me about myself. Okay. So, it's

8384
04:23:21,600 --> 04:23:22,800
using all that memory, right? We

8385
04:23:22,800 --> 04:23:24,399
basically saw a demo of this, but it

8386
04:23:24,399 --> 04:23:26,000
basically says, other than your name and

8387
04:23:26,000 --> 04:23:27,600
your favorite color is blue, what else

8388
04:23:27,600 --> 04:23:29,920
is there about you? So if I go into the

8389
04:23:29,920 --> 04:23:31,359
agent and I click over here into the

8390
04:23:31,359 --> 04:23:34,560
agent logs, we can see the basically the

8391
04:23:34,560 --> 04:23:36,239
order of operations that the agent took

8392
04:23:36,239 --> 04:23:38,080
in order to answer us. So the first

8393
04:23:38,080 --> 04:23:40,479
thing that it does is it uses its simple

8394
04:23:40,479 --> 04:23:41,680
memory. And that's where you can see

8395
04:23:41,680 --> 04:23:43,680
down here, these are basically the past

8396
04:23:43,680 --> 04:23:46,159
interactions that we've had, which was

8397
04:23:46,159 --> 04:23:49,120
um hello Mr. Agent, my name is Nate, my

8398
04:23:49,120 --> 04:23:50,640
favorite color is blue. And this would

8399
04:23:50,640 --> 04:23:52,800
basically cap out at five interactions.

8400
04:23:52,800 --> 04:23:54,479
So that's all we're basically saying in

8401
04:23:54,479 --> 04:23:57,120
this context window length right here.

8402
04:23:57,120 --> 04:23:58,399
So, just wanted to throw that out there

8403
04:23:58,399 --> 04:24:00,880
real quick. This is not going to be

8404
04:24:00,880 --> 04:24:02,960
absolutely unlimited memory to remember

8405
04:24:02,960 --> 04:24:04,159
everything that you've ever said to your

8406
04:24:04,159 --> 04:24:06,159
agent. We would have to set that up in a

8407
04:24:06,159 --> 04:24:07,359
different way. All right, so you've got

8408
04:24:07,359 --> 04:24:08,960
your agent up and running. You have your

8409
04:24:08,960 --> 04:24:10,880
simple memory set up, but something that

8410
04:24:10,880 --> 04:24:12,800
I alluded to in that video was setting

8411
04:24:12,800 --> 04:24:14,960
up memory outside of NADN, which could

8412
04:24:14,960 --> 04:24:16,640
be something like Postgress. So in this

8413
04:24:16,640 --> 04:24:17,840
next one, we're going to walk through

8414
04:24:17,840 --> 04:24:19,840
the full setup of creating a superbase

8415
04:24:19,840 --> 04:24:21,439
account, connecting your Postgress and

8416
04:24:21,439 --> 04:24:23,199
your Superbase so that you can have your

8417
04:24:23,199 --> 04:24:25,040
short-term memory with Postgress and

8418
04:24:25,040 --> 04:24:26,319
then you can also connect a vector

8419
04:24:26,319 --> 04:24:28,239
database with Superbase. So let's get

8420
04:24:28,239 --> 04:24:29,680
started. So today I'm going to be

8421
04:24:29,680 --> 04:24:30,560
showing you guys how to connect

8422
04:24:30,560 --> 04:24:33,120
Postgress SQL and Superbase to Nadin. So

8423
04:24:33,120 --> 04:24:34,239
what I'm going to be doing today is

8424
04:24:34,239 --> 04:24:35,439
walking through signing up for an

8425
04:24:35,439 --> 04:24:36,800
account, creating a project, and then

8426
04:24:36,800 --> 04:24:38,640
connecting them both to NADN so you guys

8427
04:24:38,640 --> 04:24:40,080
can follow every step of the way. But

8428
04:24:40,080 --> 04:24:41,680
real quick, Postgress is an open- source

8429
04:24:41,680 --> 04:24:43,279
relational database management system

8430
04:24:43,279 --> 04:24:45,040
that you're able to use plugins like PG

8431
04:24:45,040 --> 04:24:46,479
vector if you want vector similarity

8432
04:24:46,479 --> 04:24:47,840
search. In this case, we're just going

8433
04:24:47,840 --> 04:24:49,359
to be using Postgress as the memory for

8434
04:24:49,359 --> 04:24:50,960
our agent. And then Superbase is a

8435
04:24:50,960 --> 04:24:52,239
backend as a service that's kind of

8436
04:24:52,239 --> 04:24:54,000
built on top of Postgress. And in

8437
04:24:54,000 --> 04:24:55,120
today's example, we're going to be using

8438
04:24:55,120 --> 04:24:56,800
that as the vector database. But don't

8439
04:24:56,800 --> 04:24:58,000
want to waste any time. Here we are in

8440
04:24:58,000 --> 04:24:59,279
Naden. And what we know we're going to

8441
04:24:59,279 --> 04:25:00,960
do here for our agent is give it memory

8442
04:25:00,960 --> 04:25:03,359
with Postgress and access to a vector

8443
04:25:03,359 --> 04:25:05,040
database in Superbase. So for memory,

8444
04:25:05,040 --> 04:25:06,159
I'm going to click on this plus and

8445
04:25:06,159 --> 04:25:07,680
click on Postgress chat memory. And then

8446
04:25:07,680 --> 04:25:09,120
we'll set up this credential. And then

8447
04:25:09,120 --> 04:25:10,319
over here we want to click on the plus

8448
04:25:10,319 --> 04:25:12,239
for tool. We'll grab a superbase vector

8449
04:25:12,239 --> 04:25:13,840
store node and then this is where we'll

8450
04:25:13,840 --> 04:25:15,439
hook up our superbase credential. So

8451
04:25:15,439 --> 04:25:16,640
whenever we need to connect to these

8452
04:25:16,640 --> 04:25:18,080
thirdparty services what we have to do

8453
04:25:18,080 --> 04:25:19,680
is come into the node go to our

8454
04:25:19,680 --> 04:25:21,120
credential and then we want to create a

8455
04:25:21,120 --> 04:25:22,399
new one. And then we have all the stuff

8456
04:25:22,399 --> 04:25:24,560
to configure like our host our username

8457
04:25:24,560 --> 04:25:26,399
our password our port all this kind of

8458
04:25:26,399 --> 04:25:28,239
stuff. So we have to hop into superbase

8459
04:25:28,239 --> 04:25:30,000
first create account create a new

8460
04:25:30,000 --> 04:25:31,600
project and then we'll be able to access

8461
04:25:31,600 --> 04:25:33,279
all this information to plug in. So here

8462
04:25:33,279 --> 04:25:34,479
we are in Superbase. I'm going to be

8463
04:25:34,479 --> 04:25:35,920
creating a new account like I said just

8464
04:25:35,920 --> 04:25:37,279
so we can walk through all of this step

8465
04:25:37,279 --> 04:25:38,640
by step for you guys. So, first thing

8466
04:25:38,640 --> 04:25:39,840
you want to do is sign up for a new

8467
04:25:39,840 --> 04:25:41,279
account. So, I just got my confirmation

8468
04:25:41,279 --> 04:25:42,319
email. So, I'm going to go ahead and

8469
04:25:42,319 --> 04:25:43,760
confirm. Once you do that, it's going to

8470
04:25:43,760 --> 04:25:45,120
have you create a new organization. And

8471
04:25:45,120 --> 04:25:46,479
then within that, we create a new

8472
04:25:46,479 --> 04:25:47,680
project. So, I'm just going to leave

8473
04:25:47,680 --> 04:25:48,880
everything as is for now. It's going to

8474
04:25:48,880 --> 04:25:50,239
be personal. It's going to be free. And

8475
04:25:50,239 --> 04:25:52,000
I'll hit create organization. And then

8476
04:25:52,000 --> 04:25:53,199
from here, we are creating a new

8477
04:25:53,199 --> 04:25:54,080
project. So, I'm going to leave

8478
04:25:54,080 --> 04:25:55,680
everything once again as is. This is the

8479
04:25:55,680 --> 04:25:56,960
organization we're creating the project

8480
04:25:56,960 --> 04:25:58,560
in. Here's the project name. And then

8481
04:25:58,560 --> 04:26:00,080
you need to create a password. And

8482
04:26:00,080 --> 04:26:00,960
you're going to have to remember this

8483
04:26:00,960 --> 04:26:02,880
password to hook up to our Subabase node

8484
04:26:02,880 --> 04:26:04,720
later. So, I've entered my password. I'm

8485
04:26:04,720 --> 04:26:06,159
going to copy this because like I said,

8486
04:26:06,159 --> 04:26:07,359
you want to save this so you can enter

8487
04:26:07,359 --> 04:26:08,720
it later. And then we'll click create

8488
04:26:08,720 --> 04:26:10,159
new project. This is going to be

8489
04:26:10,159 --> 04:26:11,680
launching up our project. And this may

8490
04:26:11,680 --> 04:26:14,080
take a few minutes. So, um, just have to

8491
04:26:14,080 --> 04:26:15,359
be patient here. As you can see, we're

8492
04:26:15,359 --> 04:26:16,479
in the screen. It's going to say setting

8493
04:26:16,479 --> 04:26:18,080
up project. So, we pretty much are just

8494
04:26:18,080 --> 04:26:19,600
going to wait until our project's been

8495
04:26:19,600 --> 04:26:21,199
set up. So, while this is happening, we

8496
04:26:21,199 --> 04:26:22,239
can see that there's already some stuff

8497
04:26:22,239 --> 04:26:23,600
that may look a little confusing. We've

8498
04:26:23,600 --> 04:26:25,439
got project API keys with a service ro

8499
04:26:25,439 --> 04:26:27,040
secret. We have configuration with a

8500
04:26:27,040 --> 04:26:29,199
different URL and some sort of JWT

8501
04:26:29,199 --> 04:26:30,880
secret. So, I'm going to show you guys

8502
04:26:30,880 --> 04:26:32,960
how you need to access what it is and

8503
04:26:32,960 --> 04:26:35,600
plug it into the right places in Naden.

8504
04:26:35,600 --> 04:26:36,640
But, as you can see, we got launched to

8505
04:26:36,640 --> 04:26:38,080
a different screen. The project status

8506
04:26:38,080 --> 04:26:39,840
is still being launched. So, just going

8507
04:26:39,840 --> 04:26:41,520
to wait for it to be complete. So,

8508
04:26:41,520 --> 04:26:42,720
everything just got set up. We're now

8509
04:26:42,720 --> 04:26:44,800
good to connect to NAN. And what you

8510
04:26:44,800 --> 04:26:45,920
want to do is typically you'd come down

8511
04:26:45,920 --> 04:26:47,120
to project settings and you click on

8512
04:26:47,120 --> 04:26:48,479
database. And this is where everything

8513
04:26:48,479 --> 04:26:50,000
would be to connect. But it says

8514
04:26:50,000 --> 04:26:51,359
connection string has moved. So, as you

8515
04:26:51,359 --> 04:26:52,479
can see, there's a little button up here

8516
04:26:52,479 --> 04:26:53,840
called connect. So, we're going to click

8517
04:26:53,840 --> 04:26:55,120
on this. And now, this is where we're

8518
04:26:55,120 --> 04:26:56,479
grabbing the information that we need

8519
04:26:56,479 --> 04:26:58,479
for Postgress. So this is where it gets

8520
04:26:58,479 --> 04:26:59,760
a little confusing because there's a lot

8521
04:26:59,760 --> 04:27:01,359
of stuff that we need for Postgress. We

8522
04:27:01,359 --> 04:27:03,439
need to get a host, a username, our

8523
04:27:03,439 --> 04:27:04,960
password from earlier when we set up the

8524
04:27:04,960 --> 04:27:06,720
project, and then a port. So all we're

8525
04:27:06,720 --> 04:27:08,080
looking for are those four things, but

8526
04:27:08,080 --> 04:27:09,439
we need to find them in here. So what

8527
04:27:09,439 --> 04:27:10,960
I'm going to do is change the type to

8528
04:27:10,960 --> 04:27:13,199
Postgress SQL. And then I'm going to go

8529
04:27:13,199 --> 04:27:15,120
down to the transaction pooler, and this

8530
04:27:15,120 --> 04:27:16,000
is where we're going to find the things

8531
04:27:16,000 --> 04:27:17,359
that we need. The first thing that we're

8532
04:27:17,359 --> 04:27:18,800
looking for is the host, which if you

8533
04:27:18,800 --> 04:27:20,159
set it up just like me, it's going to be

8534
04:27:20,159 --> 04:27:22,880
after the -h. So it's going to be AWS,

8535
04:27:22,880 --> 04:27:24,520
and then we have our

8536
04:27:24,520 --> 04:27:26,000
region.pool.subase.com. So we're going

8537
04:27:26,000 --> 04:27:28,560
to grab that, copy it, and then we're

8538
04:27:28,560 --> 04:27:29,600
going to paste that into the host

8539
04:27:29,600 --> 04:27:31,279
section right there. So that's what it

8540
04:27:31,279 --> 04:27:32,800
should look like for host. Now we have a

8541
04:27:32,800 --> 04:27:34,399
database and a username to set up. So if

8542
04:27:34,399 --> 04:27:36,239
we go back into that superbase page, we

8543
04:27:36,239 --> 04:27:38,560
can see we have a D and a U. So the D is

8544
04:27:38,560 --> 04:27:40,239
going to stay as Postgress, but for

8545
04:27:40,239 --> 04:27:41,920
user, we're going to grab everything

8546
04:27:41,920 --> 04:27:43,120
after the U, which is going to be

8547
04:27:43,120 --> 04:27:45,920
postgress.com, and then these um

8548
04:27:45,920 --> 04:27:47,439
different characters. So I'm going to

8549
04:27:47,439 --> 04:27:49,199
paste that in here under the user. And

8550
04:27:49,199 --> 04:27:50,239
for the password, this is where you're

8551
04:27:50,239 --> 04:27:51,359
going to paste in the password that you

8552
04:27:51,359 --> 04:27:53,600
use to set up your Subbase project. And

8553
04:27:53,600 --> 04:27:54,720
then finally at the bottom, we're

8554
04:27:54,720 --> 04:27:56,359
looking for a port, which is by default

8555
04:27:56,359 --> 04:27:58,239
5342. But in this case, we're going to

8556
04:27:58,239 --> 04:27:59,760
grab the port from the transaction

8557
04:27:59,760 --> 04:28:01,040
pooler right here, which is following

8558
04:28:01,040 --> 04:28:04,159
the lowercase P. So we have 6543. I'm

8559
04:28:04,159 --> 04:28:05,840
going to copy that, paste that into here

8560
04:28:05,840 --> 04:28:07,840
as the port. And then we'll hit save.

8561
04:28:07,840 --> 04:28:09,120
And we'll see if we got connection

8562
04:28:09,120 --> 04:28:10,720
tested successfully. There we go. We got

8563
04:28:10,720 --> 04:28:11,920
green. And then I'm just going to rename

8564
04:28:11,920 --> 04:28:13,600
this so I can keep it organized. So

8565
04:28:13,600 --> 04:28:14,720
there we go. We've connected to

8566
04:28:14,720 --> 04:28:16,560
Postgress as our chat memory. We can see

8567
04:28:16,560 --> 04:28:17,600
that it is going to be using the

8568
04:28:17,600 --> 04:28:19,439
connected chat trigger node. That's how

8569
04:28:19,439 --> 04:28:20,640
it's going to be using the key to store

8570
04:28:20,640 --> 04:28:22,080
this information. and it's going to be

8571
04:28:22,080 --> 04:28:23,840
storing it in a table in Subabase called

8572
04:28:23,840 --> 04:28:25,760
Naden chat histories. So real quick, I'm

8573
04:28:25,760 --> 04:28:26,880
going to talk to the agent. I'm just

8574
04:28:26,880 --> 04:28:28,159
going to disconnect the subbase so we

8575
04:28:28,159 --> 04:28:29,680
don't get any errors. So now when I send

8576
04:28:29,680 --> 04:28:31,439
off hello AI agent, it's going to

8577
04:28:31,439 --> 04:28:32,800
respond to us with something like hey,

8578
04:28:32,800 --> 04:28:34,399
how can I help you today? Hello, how can

8579
04:28:34,399 --> 04:28:35,920
I assist you? And now you can see that

8580
04:28:35,920 --> 04:28:37,199
there were two things stored in our

8581
04:28:37,199 --> 04:28:38,960
Postgress chat memory. So we'll switch

8582
04:28:38,960 --> 04:28:40,319
over to superbase. And now we're going

8583
04:28:40,319 --> 04:28:41,760
to come up here in the left and go to

8584
04:28:41,760 --> 04:28:43,520
table editor. We can see we have a new

8585
04:28:43,520 --> 04:28:45,199
table that we just created called NAN

8586
04:28:45,199 --> 04:28:46,640
chat histories. And then we have two

8587
04:28:46,640 --> 04:28:48,479
messages in here. So the first one as

8588
04:28:48,479 --> 04:28:49,920
you can see was a human type and the

8589
04:28:49,920 --> 04:28:51,760
content was hello AI agent which is what

8590
04:28:51,760 --> 04:28:53,760
we said to the AI agent and then the

8591
04:28:53,760 --> 04:28:56,399
second one was a type AI and this is the

8592
04:28:56,399 --> 04:28:58,159
AI's response to us. So it said hello

8593
04:28:58,159 --> 04:28:59,920
how can I assist you today. So this is

8594
04:28:59,920 --> 04:29:01,680
where all of your chats are going to be

8595
04:29:01,680 --> 04:29:03,520
stored based on the session ID and just

8596
04:29:03,520 --> 04:29:04,960
once again this session ID is coming

8597
04:29:04,960 --> 04:29:06,960
from the connected chat trigger node. So

8598
04:29:06,960 --> 04:29:08,159
it's just coming from this node right

8599
04:29:08,159 --> 04:29:09,359
here. As you can see, there's the

8600
04:29:09,359 --> 04:29:11,279
session ID that matches the one in our

8601
04:29:11,279 --> 04:29:14,080
our chat memory table. And that is how

8602
04:29:14,080 --> 04:29:16,159
it's using it to store sort of like the

8603
04:29:16,159 --> 04:29:18,880
unique chat conversations. Cool. Now

8604
04:29:18,880 --> 04:29:20,399
that we have Postgress chat memory set

8605
04:29:20,399 --> 04:29:22,800
up, let's hook up our Superbase vector

8606
04:29:22,800 --> 04:29:24,560
store. So, we're going to drag it in.

8607
04:29:24,560 --> 04:29:26,159
And then now we need to go up here and

8608
04:29:26,159 --> 04:29:27,279
connect our credentials. So, I'm going

8609
04:29:27,279 --> 04:29:28,800
to create new credential. And we can see

8610
04:29:28,800 --> 04:29:30,960
that we need two things, a host and a

8611
04:29:30,960 --> 04:29:33,040
service role secret. And the host is not

8612
04:29:33,040 --> 04:29:34,159
going to be the same one as the host

8613
04:29:34,159 --> 04:29:36,159
that we used to set up our Postgress. So

8614
04:29:36,159 --> 04:29:37,680
let's hop into Superbase and grab this

8615
04:29:37,680 --> 04:29:39,520
information. So back in Superbase, we're

8616
04:29:39,520 --> 04:29:41,120
going to go down to the settings. We're

8617
04:29:41,120 --> 04:29:43,600
going to click on data API and then we

8618
04:29:43,600 --> 04:29:45,520
have our project URL and then we have

8619
04:29:45,520 --> 04:29:47,279
our service ro secret. So this is all

8620
04:29:47,279 --> 04:29:49,120
we're using for URL. We're going to copy

8621
04:29:49,120 --> 04:29:50,880
this, go back to Subase, and then we'll

8622
04:29:50,880 --> 04:29:52,560
paste this in as our host. As you can

8623
04:29:52,560 --> 04:29:54,880
see, it's supposed to be HTTPS

8624
04:29:54,880 --> 04:29:56,640
um and then your Superbase account. So

8625
04:29:56,640 --> 04:29:58,560
we'll paste that in and you can see

8626
04:29:58,560 --> 04:30:00,800
that's what we have.co. Also, keep in

8627
04:30:00,800 --> 04:30:02,159
mind this is because I launched up an

8628
04:30:02,159 --> 04:30:03,359
organization and a project in

8629
04:30:03,359 --> 04:30:05,199
Superbase's cloud. If you were to

8630
04:30:05,199 --> 04:30:06,399
self-host this, it would be a little

8631
04:30:06,399 --> 04:30:07,840
different because you'd have to access

8632
04:30:07,840 --> 04:30:09,600
your local host. And then of course, we

8633
04:30:09,600 --> 04:30:11,359
need our service ro secret. So back in

8634
04:30:11,359 --> 04:30:13,120
Superbase, I'm going to reveal, copy,

8635
04:30:13,120 --> 04:30:14,800
and then paste it into an end. So let me

8636
04:30:14,800 --> 04:30:16,159
do that real quick. And as you can see,

8637
04:30:16,159 --> 04:30:17,680
I got that huge token. Just paste it in.

8638
04:30:17,680 --> 04:30:19,279
So what I'm going to do now is save it.

8639
04:30:19,279 --> 04:30:20,720
Hopefully it goes green. There we go. We

8640
04:30:20,720 --> 04:30:22,560
have connection tested successfully. And

8641
04:30:22,560 --> 04:30:23,840
then once again, just going to rename

8642
04:30:23,840 --> 04:30:25,279
this. The next step from here would be

8643
04:30:25,279 --> 04:30:27,199
to create our Superbase vector store

8644
04:30:27,199 --> 04:30:28,560
within the platform that we can actually

8645
04:30:28,560 --> 04:30:30,000
push documents into. So you're going to

8646
04:30:30,000 --> 04:30:31,840
click on docs right here. You are going

8647
04:30:31,840 --> 04:30:33,520
to go to the quick start for setting up

8648
04:30:33,520 --> 04:30:35,040
your vector store and then all you have

8649
04:30:35,040 --> 04:30:36,640
to do right here is copy this command.

8650
04:30:36,640 --> 04:30:38,800
So in the top right, copy this script.

8651
04:30:38,800 --> 04:30:40,159
Come back into Subabase. You'll come on

8652
04:30:40,159 --> 04:30:42,000
the lefth hand side to SQL editor.

8653
04:30:42,000 --> 04:30:43,600
You'll paste that command in here. You

8654
04:30:43,600 --> 04:30:44,640
don't change anything at all. You'll

8655
04:30:44,640 --> 04:30:46,159
just hit run. And then you could should

8656
04:30:46,159 --> 04:30:48,319
see down here success. No rows returned.

8657
04:30:48,319 --> 04:30:49,760
And then in the table editor, we'll have

8658
04:30:49,760 --> 04:30:51,520
a new table over here called documents.

8659
04:30:51,520 --> 04:30:52,640
So this is where when we're actually

8660
04:30:52,640 --> 04:30:54,239
vectorizing our data, it's going to go

8661
04:30:54,239 --> 04:30:56,080
into this table. Okay. Okay. So, I'm

8662
04:30:56,080 --> 04:30:57,359
just going to do a real quick example of

8663
04:30:57,359 --> 04:30:59,279
putting a Google doc into our Subbase

8664
04:30:59,279 --> 04:31:00,800
vector database just to show you guys

8665
04:31:00,800 --> 04:31:02,080
that everything's connected the way it

8666
04:31:02,080 --> 04:31:03,600
should be and working as it should. So,

8667
04:31:03,600 --> 04:31:05,359
I'm going to grab a Google Drive node

8668
04:31:05,359 --> 04:31:06,800
right here. I'm going to click download

8669
04:31:06,800 --> 04:31:08,800
file. I'm going to select a file to

8670
04:31:08,800 --> 04:31:10,000
download which in this case I'm just

8671
04:31:10,000 --> 04:31:11,920
going to grab body shop services terms

8672
04:31:11,920 --> 04:31:13,760
and conditions and then hit test step.

8673
04:31:13,760 --> 04:31:15,760
And we'll see the binary data which is a

8674
04:31:15,760 --> 04:31:17,920
doc file over here. And now we have that

8675
04:31:17,920 --> 04:31:19,199
information. And what we want to do with

8676
04:31:19,199 --> 04:31:21,439
it is add it to superbase superbase

8677
04:31:21,439 --> 04:31:22,880
vector store. So, I'm going to type in

8678
04:31:22,880 --> 04:31:25,040
superbase. We'll see vector store. The

8679
04:31:25,040 --> 04:31:26,640
operation is going to be add documents

8680
04:31:26,640 --> 04:31:28,800
to vector store. And then we have to

8681
04:31:28,800 --> 04:31:30,080
choose the right credential because we

8682
04:31:30,080 --> 04:31:31,520
have to choose the table to put it in.

8683
04:31:31,520 --> 04:31:33,199
So this is in this case we already made

8684
04:31:33,199 --> 04:31:34,880
a table. As you can see in our superbase

8685
04:31:34,880 --> 04:31:36,880
it's called documents. So back in here

8686
04:31:36,880 --> 04:31:38,080
I'm going to choose the credential I

8687
04:31:38,080 --> 04:31:39,920
just made. I'm going to choose insert

8688
04:31:39,920 --> 04:31:41,040
documents and I'm going to choose the

8689
04:31:41,040 --> 04:31:43,359
table to insert it to not the N chat

8690
04:31:43,359 --> 04:31:45,120
histories. We want to insert this to

8691
04:31:45,120 --> 04:31:47,399
documents because this one is set up for

8692
04:31:47,399 --> 04:31:49,279
vectorization. From there I have to

8693
04:31:49,279 --> 04:31:50,560
choose our document loader as well as

8694
04:31:50,560 --> 04:31:52,080
our embeddings. So I'm not really going

8695
04:31:52,080 --> 04:31:53,840
to dive into exactly what this all means

8696
04:31:53,840 --> 04:31:55,359
right now. If you're kind of confused

8697
04:31:55,359 --> 04:31:57,040
and you're wanting a deeper dive on rag

8698
04:31:57,040 --> 04:31:58,479
and building agents, definitely check

8699
04:31:58,479 --> 04:31:59,760
out my paid community. We've got

8700
04:31:59,760 --> 04:32:01,279
different deep dive topics about all

8701
04:32:01,279 --> 04:32:02,399
this kind of stuff. But I'm just going

8702
04:32:02,399 --> 04:32:03,680
to set this up real quick so we can see

8703
04:32:03,680 --> 04:32:05,199
the actual example. I'm just choosing

8704
04:32:05,199 --> 04:32:07,199
the binary data to load in here. I'm

8705
04:32:07,199 --> 04:32:08,880
choosing the embedding and I'm choosing

8706
04:32:08,880 --> 04:32:10,239
our text splitter which is going to be

8707
04:32:10,239 --> 04:32:11,840
recursive. And so now all I have to do

8708
04:32:11,840 --> 04:32:13,439
here is hit run. It's going to be taking

8709
04:32:13,439 --> 04:32:15,680
that binary data of that body shop file.

8710
04:32:15,680 --> 04:32:16,960
It split it up. And as you can see

8711
04:32:16,960 --> 04:32:18,560
there's three items. So if we go back

8712
04:32:18,560 --> 04:32:20,479
into our Superbase vector store and we

8713
04:32:20,479 --> 04:32:21,479
hit

8714
04:32:21,479 --> 04:32:23,840
refresh, we now see three items in our

8715
04:32:23,840 --> 04:32:25,680
vector database and we have the

8716
04:32:25,680 --> 04:32:26,960
different content and all this

8717
04:32:26,960 --> 04:32:28,159
information here like the standard oil

8718
04:32:28,159 --> 04:32:29,680
change, the synthetic oil change is

8719
04:32:29,680 --> 04:32:31,439
coming from our body shop document that

8720
04:32:31,439 --> 04:32:32,880
I have right here that we put in there

8721
04:32:32,880 --> 04:32:35,120
just to validate the rag. And we know

8722
04:32:35,120 --> 04:32:36,880
that this is a vector database store

8723
04:32:36,880 --> 04:32:38,239
rather than a relational one because we

8724
04:32:38,239 --> 04:32:39,600
can see we have our vector embedding

8725
04:32:39,600 --> 04:32:41,199
over here which is all the dimensions.

8726
04:32:41,199 --> 04:32:42,960
And then we have our metadata. So we

8727
04:32:42,960 --> 04:32:44,800
have stuff like the source and um the

8728
04:32:44,800 --> 04:32:46,319
blob type, all this kind of stuff. And

8729
04:32:46,319 --> 04:32:47,600
this is where we could also go ahead and

8730
04:32:47,600 --> 04:32:49,359
add more metadata if we wanted to.

8731
04:32:49,359 --> 04:32:51,279
Anyways, now that we have vectors in our

8732
04:32:51,279 --> 04:32:53,120
documents table, we can hook up the

8733
04:32:53,120 --> 04:32:55,680
actual agent to the correct table. So in

8734
04:32:55,680 --> 04:32:58,239
here, what I'm going to call this is um

8735
04:32:58,239 --> 04:33:00,000
body shop. For the description, I'm

8736
04:33:00,000 --> 04:33:03,279
going to say use this to get information

8737
04:33:03,279 --> 04:33:06,160
about the body shop. And then from the

8738
04:33:06,160 --> 04:33:07,199
table name, we have to choose the

8739
04:33:07,199 --> 04:33:08,561
correct table, of course. So we know

8740
04:33:08,561 --> 04:33:10,000
that we just put all this into something

8741
04:33:10,000 --> 04:33:11,278
called documents. So I'm going to choose

8742
04:33:11,278 --> 04:33:13,680
documents. And finally, we just have to

8743
04:33:13,680 --> 04:33:15,039
choose our embeddings, of course, so

8744
04:33:15,039 --> 04:33:16,958
that it can embed the query and pull

8745
04:33:16,958 --> 04:33:18,799
stuff back accurately. And that's pretty

8746
04:33:18,799 --> 04:33:20,799
much it. We have our AI agent set up.

8747
04:33:20,799 --> 04:33:22,719
So, let's go ahead and do a test and see

8748
04:33:22,719 --> 04:33:24,160
what we get back. So, I'm going to go

8749
04:33:24,160 --> 04:33:25,680
ahead and say what brake services are

8750
04:33:25,680 --> 04:33:27,599
offered at the body shop. It's going to

8751
04:33:27,599 --> 04:33:29,118
update the Postgress memory. So, now

8752
04:33:29,118 --> 04:33:30,719
we'll be able to see that query. It hit

8753
04:33:30,719 --> 04:33:32,561
the Superbase vector store in order to

8754
04:33:32,561 --> 04:33:34,400
retrieve that information and then

8755
04:33:34,400 --> 04:33:36,240
create an augmented generated answer for

8756
04:33:36,240 --> 04:33:38,480
us. And now we have the body shop offers

8757
04:33:38,480 --> 04:33:40,879
the following brake services. 120 per

8758
04:33:40,879 --> 04:33:43,919
axle for replacement, 150 per axle for

8759
04:33:43,919 --> 04:33:45,680
rotor replacement, and then full brake

8760
04:33:45,680 --> 04:33:48,000
inspection is 30 bucks. So, if we click

8761
04:33:48,000 --> 04:33:49,520
back into our document, we can see that

8762
04:33:49,520 --> 04:33:51,118
that's exactly what it just pulled. And

8763
04:33:51,118 --> 04:33:53,520
then, if we go into our vector database

8764
04:33:53,520 --> 04:33:55,118
within Subase, we can find that

8765
04:33:55,118 --> 04:33:56,480
information in here. But then we can

8766
04:33:56,480 --> 04:33:58,400
also click on NAN chat history, and we

8767
04:33:58,400 --> 04:34:00,080
can see we have two more chats. So, the

8768
04:34:00,080 --> 04:34:01,599
first one was a human, which is what we

8769
04:34:01,599 --> 04:34:03,359
said. What brake services are offered at

8770
04:34:03,359 --> 04:34:05,039
the body shop? And then the second one

8771
04:34:05,039 --> 04:34:07,680
was a AI content, which is the body shop

8772
04:34:07,680 --> 04:34:09,039
offers the following brake services,

8773
04:34:09,039 --> 04:34:10,719
blah blah blah. And this is exactly what

8774
04:34:10,719 --> 04:34:13,278
it just responded to us with within NADN

8775
04:34:13,278 --> 04:34:14,958
down here as you can see. And so keep in

8776
04:34:14,958 --> 04:34:16,561
mind this AI agent has zero prompting.

8777
04:34:16,561 --> 04:34:17,759
We didn't even open up the system

8778
04:34:17,759 --> 04:34:19,599
message. All that's in here is you are a

8779
04:34:19,599 --> 04:34:20,958
helpful assistant. But if you are

8780
04:34:20,958 --> 04:34:22,160
setting this up, what you want to do is

8781
04:34:22,160 --> 04:34:23,680
you know explain its role and you want

8782
04:34:23,680 --> 04:34:25,359
to tell it you know you have access to a

8783
04:34:25,359 --> 04:34:28,000
vector database. It is called X. It has

8784
04:34:28,000 --> 04:34:29,759
information about X Y and Z and you

8785
04:34:29,759 --> 04:34:32,000
should use it when a client asks about X

8786
04:34:32,000 --> 04:34:33,520
Y and Z. Anyways that's going to be it

8787
04:34:33,520 --> 04:34:35,199
for this one. Subase and Postgress are

8788
04:34:35,199 --> 04:34:37,199
super super powerful tools to use to

8789
04:34:37,199 --> 04:34:38,561
connect up as a database for your

8790
04:34:38,561 --> 04:34:39,520
agents, whether it's going to be

8791
04:34:39,520 --> 04:34:41,680
relational or vector databases and

8792
04:34:41,680 --> 04:34:42,879
you've got lots of options with, you

8793
04:34:42,879 --> 04:34:44,400
know, self-hosting and some good options

8794
04:34:44,400 --> 04:34:46,240
for security and scalability there. Now

8795
04:34:46,240 --> 04:34:47,680
that you guys have built an agent and

8796
04:34:47,680 --> 04:34:49,199
you see the way that an agent is able to

8797
04:34:49,199 --> 04:34:50,958
understand what tools it has and which

8798
04:34:50,958 --> 04:34:52,719
ones it needs to use, what's really

8799
04:34:52,719 --> 04:34:55,039
really cool and powerful about NAND is

8800
04:34:55,039 --> 04:34:58,160
that we can have a tool for an AI agent

8801
04:34:58,160 --> 04:34:59,759
be a custom workflow that we built out

8802
04:34:59,759 --> 04:35:02,480
in Nadn or we can build out a custom

8803
04:35:02,480 --> 04:35:04,879
agent in Naden and then give our main

8804
04:35:04,879 --> 04:35:06,799
agent access to call on that lower

8805
04:35:06,799 --> 04:35:08,160
agent. So what I'm about to share with

8806
04:35:08,160 --> 04:35:10,000
you guys next is an architecture you can

8807
04:35:10,000 --> 04:35:11,438
use when you're building multi- aent

8808
04:35:11,438 --> 04:35:13,118
systems. It's basically called having an

8809
04:35:13,118 --> 04:35:15,680
orchestrator agent and sub agents or

8810
04:35:15,680 --> 04:35:17,438
parent agents and child agents. So,

8811
04:35:17,438 --> 04:35:18,639
let's dive into it. I think you guys

8812
04:35:18,639 --> 04:35:20,400
will think it's pretty cool. So, a

8813
04:35:20,400 --> 04:35:22,240
multi- aent system is one where we have

8814
04:35:22,240 --> 04:35:24,240
multiple autonomous AI agents working

8815
04:35:24,240 --> 04:35:26,000
together in order to get the job done

8816
04:35:26,000 --> 04:35:27,359
and they're able to talk to each other

8817
04:35:27,359 --> 04:35:28,719
and they're able to use the tools that

8818
04:35:28,719 --> 04:35:30,320
they have access to. What we're going to

8819
04:35:30,320 --> 04:35:31,520
be talking about today is a type of

8820
04:35:31,520 --> 04:35:32,879
multi- aent system called the

8821
04:35:32,879 --> 04:35:34,958
orchestrator architecture. And basically

8822
04:35:34,958 --> 04:35:36,799
what that means that we have one agent

8823
04:35:36,799 --> 04:35:38,400
up here. I call it the parent agent and

8824
04:35:38,400 --> 04:35:40,320
then I call these child agents. But we

8825
04:35:40,320 --> 04:35:41,840
have an orchestrator agent that's able

8826
04:35:41,840 --> 04:35:44,320
to call on different sub aents. And the

8827
04:35:44,320 --> 04:35:46,000
best way to think about it is this

8828
04:35:46,000 --> 04:35:48,480
agent's only goal is to understand the

8829
04:35:48,480 --> 04:35:50,000
intent of the user. Whether that's

8830
04:35:50,000 --> 04:35:51,520
through Telegram or through email,

8831
04:35:51,520 --> 04:35:53,039
whatever it is, understanding that

8832
04:35:53,039 --> 04:35:55,118
intent and then understanding, okay, I

8833
04:35:55,118 --> 04:35:57,039
have access to these four agents and

8834
04:35:57,039 --> 04:35:59,039
here is what each one is good at. Which

8835
04:35:59,039 --> 04:36:01,438
one or which ones do I need to call in

8836
04:36:01,438 --> 04:36:03,680
order to actually achieve the end goal?

8837
04:36:03,680 --> 04:36:05,039
So, in this case, if I'm saying to the

8838
04:36:05,039 --> 04:36:08,000
agent, can you please write me a quick

8839
04:36:08,000 --> 04:36:11,118
blog post about dogs and send that to

8840
04:36:11,118 --> 04:36:13,278
Dexter Morgan, and can you also create a

8841
04:36:13,278 --> 04:36:14,958
dinner event for tonight at 6 p.m. with

8842
04:36:14,958 --> 04:36:18,719
Michael Scott? And thank you. Cool. So,

8843
04:36:18,719 --> 04:36:20,400
this is a pretty loaded task, right? And

8844
04:36:20,400 --> 04:36:22,958
can you imagine if this one agent had

8845
04:36:22,958 --> 04:36:25,359
access to all of these like 15 or

8846
04:36:25,359 --> 04:36:27,359
however many tools and it had to do all

8847
04:36:27,359 --> 04:36:29,199
of that itself, it would be pretty

8848
04:36:29,199 --> 04:36:30,799
overwhelmed and it wouldn't be able to

8849
04:36:30,799 --> 04:36:32,799
do it very accurately. So, what you can

8850
04:36:32,799 --> 04:36:34,240
see here is it is able to just

8851
04:36:34,240 --> 04:36:35,438
understand, okay, I have these four

8852
04:36:35,438 --> 04:36:37,359
agents. They each have a different role.

8853
04:36:37,359 --> 04:36:38,639
Which ones do I need to call? And you

8854
04:36:38,639 --> 04:36:39,919
can see what it's doing is it called the

8855
04:36:39,919 --> 04:36:41,438
contact agent to get the contact

8856
04:36:41,438 --> 04:36:43,118
information. Right now, it's calling the

8857
04:36:43,118 --> 04:36:44,639
content creator agent. And now that

8858
04:36:44,639 --> 04:36:45,759
that's finished up, it's probably going

8859
04:36:45,759 --> 04:36:47,199
to call the calendar agent to make that

8860
04:36:47,199 --> 04:36:48,561
event. And then it's going to call the

8861
04:36:48,561 --> 04:36:50,080
email agent in order to actually send

8862
04:36:50,080 --> 04:36:52,000
that blog that we had the content

8863
04:36:52,000 --> 04:36:54,160
creator agent make. And then you can see

8864
04:36:54,160 --> 04:36:55,520
it also called this little tool down

8865
04:36:55,520 --> 04:36:56,799
here called Think. If you want to see a

8866
04:36:56,799 --> 04:36:58,240
full video where I broke down what that

8867
04:36:58,240 --> 04:36:59,919
does, you can watch it right up here.

8868
04:36:59,919 --> 04:37:01,599
But we just got a response back from the

8869
04:37:01,599 --> 04:37:03,118
orchestrator agent. So, let's see what

8870
04:37:03,118 --> 04:37:04,639
it said. All right, so it said, "The

8871
04:37:04,639 --> 04:37:06,080
blog post about dogs has been sent to

8872
04:37:06,080 --> 04:37:07,520
Dexter Morgan. A dinner event for

8873
04:37:07,520 --> 04:37:09,199
tonight at 6 p.m. with Michael Scott has

8874
04:37:09,199 --> 04:37:10,561
been created. And if you need anything

8875
04:37:10,561 --> 04:37:12,240
else, let me know." And just to verify

8876
04:37:12,240 --> 04:37:13,359
that that actually went through, you can

8877
04:37:13,359 --> 04:37:14,958
see we have a new event for dinner at 6

8878
04:37:14,958 --> 04:37:16,719
p.m. with Michael Scott. And then in our

8879
04:37:16,719 --> 04:37:18,480
email and our scent, we can see that we

8880
04:37:18,480 --> 04:37:20,719
have a full blog post sent to Dexter

8881
04:37:20,719 --> 04:37:22,240
Morgan. And you can see that we also

8882
04:37:22,240 --> 04:37:23,359
have a link right here that we can click

8883
04:37:23,359 --> 04:37:24,879
into, which means that the content

8884
04:37:24,879 --> 04:37:26,400
creator agent was able to do some

8885
04:37:26,400 --> 04:37:28,719
research, find this URL, create the blog

8886
04:37:28,719 --> 04:37:29,840
post, and send that back to the

8887
04:37:29,840 --> 04:37:31,039
orchestrator agent. And then the

8888
04:37:31,039 --> 04:37:32,719
orchestrator agent remembered, okay, so

8889
04:37:32,719 --> 04:37:34,639
I need to send a blog post to Dexter

8890
04:37:34,639 --> 04:37:36,160
Morgan. I've got his email from the

8891
04:37:36,160 --> 04:37:37,759
contact agent. I have the blog post from

8892
04:37:37,759 --> 04:37:39,359
the content creator agent. Now all I

8893
04:37:39,359 --> 04:37:40,719
have to do is pass it over to the email

8894
04:37:40,719 --> 04:37:42,799
agent to take care of the rest. So yes,

8895
04:37:42,799 --> 04:37:44,160
it's important to think about the tools

8896
04:37:44,160 --> 04:37:45,919
because if this main agent had access to

8897
04:37:45,919 --> 04:37:47,118
all those tools, it would be pretty

8898
04:37:47,118 --> 04:37:48,719
overwhelming. But also think about the

8899
04:37:48,719 --> 04:37:50,879
prompts. So, in this ultimate assistant

8900
04:37:50,879 --> 04:37:52,958
prompt, it's pretty short, right? All I

8901
04:37:52,958 --> 04:37:54,080
had to say was, "You're the ultimate

8902
04:37:54,080 --> 04:37:55,599
assistant. Your job is to send the

8903
04:37:55,599 --> 04:37:57,438
user's query to the correct tool. You

8904
04:37:57,438 --> 04:37:59,118
should never be writing emails or ever

8905
04:37:59,118 --> 04:38:00,799
creating summaries or doing anything.

8906
04:38:00,799 --> 04:38:02,879
You just need to delegate the task." And

8907
04:38:02,879 --> 04:38:04,240
then what we did is we said, "Okay, you

8908
04:38:04,240 --> 04:38:05,599
have these six tools. Here's what

8909
04:38:05,599 --> 04:38:06,799
they're called. Here's when you use

8910
04:38:06,799 --> 04:38:08,400
them." And it's just super super clear

8911
04:38:08,400 --> 04:38:10,240
and concise. There's almost no room for

8912
04:38:10,240 --> 04:38:12,480
ambiguity. We gave it a few rules, an

8913
04:38:12,480 --> 04:38:14,320
example output, and basically that's it.

8914
04:38:14,320 --> 04:38:16,000
And now it's able to interpret any query

8915
04:38:16,000 --> 04:38:17,599
we might have, even if it's a loaded

8916
04:38:17,599 --> 04:38:19,199
query. As you can see, in this case, it

8917
04:38:19,199 --> 04:38:20,958
had to call all four agents, but it

8918
04:38:20,958 --> 04:38:22,561
still got it right. And then when it

8919
04:38:22,561 --> 04:38:24,080
sends over something to like the email

8920
04:38:24,080 --> 04:38:25,759
agent, for example, we're able to give

8921
04:38:25,759 --> 04:38:27,599
this specific agent a very, very

8922
04:38:27,599 --> 04:38:29,919
specific system prompt because we only

8923
04:38:29,919 --> 04:38:31,680
have to tell it about you only have

8924
04:38:31,680 --> 04:38:33,919
access to these email tools. And this is

8925
04:38:33,919 --> 04:38:35,118
just going back to the whole thing about

8926
04:38:35,118 --> 04:38:37,118
specialization. It's not confusing. It

8927
04:38:37,118 --> 04:38:39,118
knows exactly what it needs to do. Same

8928
04:38:39,118 --> 04:38:40,240
thing with these other agents. You know,

8929
04:38:40,240 --> 04:38:41,520
the calendar agent, of course, has its

8930
04:38:41,520 --> 04:38:43,278
own prompts with its own set of calendar

8931
04:38:43,278 --> 04:38:45,039
tools. The contact agent has its own

8932
04:38:45,039 --> 04:38:46,799
prompt with its own set of contact

8933
04:38:46,799 --> 04:38:48,561
tools. And then of course we have the

8934
04:38:48,561 --> 04:38:50,400
content creator agent which has to know

8935
04:38:50,400 --> 04:38:52,320
how to not only do research using its

8936
04:38:52,320 --> 04:38:54,958
tavly tool but it also has to format the

8937
04:38:54,958 --> 04:38:57,759
blog post with you know proper HTML. As

8938
04:38:57,759 --> 04:38:59,599
you can see here there was like a title

8939
04:38:59,599 --> 04:39:00,958
there were headings there were you know

8940
04:39:00,958 --> 04:39:02,879
inline links all that kind of stuff. And

8941
04:39:02,879 --> 04:39:04,400
so because we have all of this

8942
04:39:04,400 --> 04:39:06,080
specialized can you imagine if we had

8943
04:39:06,080 --> 04:39:08,080
all of that system prompt thrown into

8944
04:39:08,080 --> 04:39:09,680
this one agent and gave it access to all

8945
04:39:09,680 --> 04:39:12,080
the tools just wouldn't be good. And if

8946
04:39:12,080 --> 04:39:13,520
you're still not convinced, think about

8947
04:39:13,520 --> 04:39:15,039
the fact that for each of these

8948
04:39:15,039 --> 04:39:16,561
different tasks, because we know what

8949
04:39:16,561 --> 04:39:18,320
each agent is doing, we're able to give

8950
04:39:18,320 --> 04:39:20,639
it a very specific chat model because,

8951
04:39:20,639 --> 04:39:21,599
you know, like for something like

8952
04:39:21,599 --> 04:39:23,039
content creation, I like to use cloud

8953
04:39:23,039 --> 04:39:24,799
3.7, but I wouldn't want to use

8954
04:39:24,799 --> 04:39:26,799
something as expensive as cloud 3.7 just

8955
04:39:26,799 --> 04:39:28,879
to get contacts or to add contacts to my

8956
04:39:28,879 --> 04:39:31,039
contact database. So that's why I went

8957
04:39:31,039 --> 04:39:32,320
with Flash here. And then for these

8958
04:39:32,320 --> 04:39:34,240
ones, I'm using 4.1 Mini. So you're able

8959
04:39:34,240 --> 04:39:36,320
to have a lot more control over exactly

8960
04:39:36,320 --> 04:39:38,320
how you want your agents to run. And so

8961
04:39:38,320 --> 04:39:39,600
I pretty much think I hit on a lot of

8962
04:39:39,600 --> 04:39:40,718
that, but you know, benefits of

8963
04:39:40,718 --> 04:39:43,040
multi-agent system, more reusable

8964
04:39:43,040 --> 04:39:44,480
components. So now that we have built

8965
04:39:44,480 --> 04:39:46,480
out, you know, an email agent, whenever

8966
04:39:46,480 --> 04:39:48,560
I'm building another agent ever, and I

8967
04:39:48,560 --> 04:39:49,760
realize, okay, maybe it would be nice

8968
04:39:49,760 --> 04:39:51,280
for this agent to have a couple email

8969
04:39:51,280 --> 04:39:53,200
functions. Boom, I just give it access

8970
04:39:53,200 --> 04:39:54,560
to the email agent because we've already

8971
04:39:54,560 --> 04:39:56,320
built it and this email agent can be

8972
04:39:56,320 --> 04:39:57,920
called on by as many different workflows

8973
04:39:57,920 --> 04:39:59,920
as we want. And when we're talking about

8974
04:39:59,920 --> 04:40:01,760
reusable components, that doesn't have

8975
04:40:01,760 --> 04:40:04,000
to just mean these agents are reusable.

8976
04:40:04,000 --> 04:40:05,280
It could also be workflows that are

8977
04:40:05,280 --> 04:40:07,120
reusable. So, for example, if I go to

8978
04:40:07,120 --> 04:40:08,718
this AI marketing team video, if you

8979
04:40:08,718 --> 04:40:09,920
haven't watched it, I'll leave a link

8980
04:40:09,920 --> 04:40:12,718
right up here. These tools down here,

8981
04:40:12,718 --> 04:40:14,000
none of these are agents. They're all

8982
04:40:14,000 --> 04:40:15,680
just workflows. So, for example, if I

8983
04:40:15,680 --> 04:40:17,440
click into the video workflow, you can

8984
04:40:17,440 --> 04:40:19,280
see that it's sending data over to this

8985
04:40:19,280 --> 04:40:20,878
workflow. And even though it's not an

8986
04:40:20,878 --> 04:40:22,160
agent, it still is going to do

8987
04:40:22,160 --> 04:40:24,160
everything it needs to do and then send

8988
04:40:24,160 --> 04:40:26,480
data back to that main agent. Similarly,

8989
04:40:26,480 --> 04:40:28,160
with this create image tool, if I was to

8990
04:40:28,160 --> 04:40:30,080
click into it real quick, you can see

8991
04:40:30,080 --> 04:40:31,600
that this is not an agent, but what it's

8992
04:40:31,600 --> 04:40:32,560
going to do is it's going to take

8993
04:40:32,560 --> 04:40:34,240
information from that orchestrator agent

8994
04:40:34,240 --> 04:40:36,160
and do a very specific function. That

8995
04:40:36,160 --> 04:40:38,638
way, this main agent up here, all it has

8996
04:40:38,638 --> 04:40:40,240
to do is understand, I have these

8997
04:40:40,240 --> 04:40:41,680
different tools, which one do I need to

8998
04:40:41,680 --> 04:40:43,920
use. So, reusable components and also

8999
04:40:43,920 --> 04:40:45,360
we're going to have model flexibility,

9000
04:40:45,360 --> 04:40:46,958
different models for different agents.

9001
04:40:46,958 --> 04:40:48,240
We're going to have easier debugging and

9002
04:40:48,240 --> 04:40:49,840
maintenance because like I said with the

9003
04:40:49,840 --> 04:40:51,600
whole prompting thing, if you tried to

9004
04:40:51,600 --> 04:40:54,638
give that main agent access to 25 tools

9005
04:40:54,638 --> 04:40:56,240
and in the prompt you have to say here's

9006
04:40:56,240 --> 04:40:58,320
when you use all 25 tools and it wasn't

9007
04:40:58,320 --> 04:40:59,680
working, you wouldn't know where to

9008
04:40:59,680 --> 04:41:01,040
start. You would feel really overwhelmed

9009
04:41:01,040 --> 04:41:02,638
as to like how do I even fix this

9010
04:41:02,638 --> 04:41:04,958
prompt. So by splitting things up into

9011
04:41:04,958 --> 04:41:07,600
small small tasks and specialized areas,

9012
04:41:07,600 --> 04:41:09,200
it's going to make it so much easier.

9013
04:41:09,200 --> 04:41:10,638
Exactly like I just covered point number

9014
04:41:10,638 --> 04:41:12,320
four, clear prompts logic and better

9015
04:41:12,320 --> 04:41:14,160
testability. And finally, it's a

9016
04:41:14,160 --> 04:41:15,600
foundation for multi-turn agents or

9017
04:41:15,600 --> 04:41:17,440
agent memory. Just because we're sending

9018
04:41:17,440 --> 04:41:19,440
data from main agent to sub agent

9019
04:41:19,440 --> 04:41:20,958
doesn't mean we're losing that context

9020
04:41:20,958 --> 04:41:22,878
of like we're talking to Nate right now

9021
04:41:22,878 --> 04:41:24,560
or we're talking to Dave right now. We

9022
04:41:24,560 --> 04:41:26,480
can still have that memory pass between

9023
04:41:26,480 --> 04:41:28,320
workflows. So things get really really

9024
04:41:28,320 --> 04:41:31,120
powerful and it's just pretty cool.

9025
04:41:31,120 --> 04:41:32,638
Okay, so we've seen a demo. I think you

9026
04:41:32,638 --> 04:41:34,480
guys understand the benefits here. Just

9027
04:41:34,480 --> 04:41:35,600
one thing I wanted to throw out before

9028
04:41:35,600 --> 04:41:37,360
we get into like a live build of a

9029
04:41:37,360 --> 04:41:40,798
multi- aent system is just because this

9030
04:41:40,798 --> 04:41:42,560
is cool and there's benefits doesn't

9031
04:41:42,560 --> 04:41:44,320
mean it's always the right thing to do.

9032
04:41:44,320 --> 04:41:46,000
So if you're forcing a multi-agent

9033
04:41:46,000 --> 04:41:47,920
orchestrator framework into a process

9034
04:41:47,920 --> 04:41:50,320
that could be a simple single agent or a

9035
04:41:50,320 --> 04:41:52,400
simple AI workflow, all you're going to

9036
04:41:52,400 --> 04:41:53,120
be doing is you're going to be

9037
04:41:53,120 --> 04:41:54,320
increasing the latency. You're going to

9038
04:41:54,320 --> 04:41:55,840
be increasing the cost because you're

9039
04:41:55,840 --> 04:41:58,160
making more API calls and you're

9040
04:41:58,160 --> 04:41:59,680
probably going to be increasing the

9041
04:41:59,680 --> 04:42:02,638
amount of error just because kind of the

9042
04:42:02,638 --> 04:42:04,480
golden rule is you want to eliminate as

9043
04:42:04,480 --> 04:42:06,400
much data transfer between workflows as

9044
04:42:06,400 --> 04:42:08,080
you can because that's where you can run

9045
04:42:08,080 --> 04:42:10,000
into like some issues. But of course

9046
04:42:10,000 --> 04:42:11,440
there are times when you do need

9047
04:42:11,440 --> 04:42:13,280
dedicated agents for certain functions.

9048
04:42:13,280 --> 04:42:15,440
So, let's get into a new workflow and

9049
04:42:15,440 --> 04:42:17,280
build a really simple example of an

9050
04:42:17,280 --> 04:42:18,878
orchestrator agent that's able to call

9051
04:42:18,878 --> 04:42:21,520
on a sub agent. All right. So, what

9052
04:42:21,520 --> 04:42:22,638
we're going to be doing here is we're

9053
04:42:22,638 --> 04:42:24,400
going to build an orchestrator agent.

9054
04:42:24,400 --> 04:42:25,760
So, I'm going to hit tab. I'm going to

9055
04:42:25,760 --> 04:42:27,360
type in AI agent and we're going to pull

9056
04:42:27,360 --> 04:42:28,638
this guy in. And we're just going to be

9057
04:42:28,638 --> 04:42:29,840
talking to this guy using that little

9058
04:42:29,840 --> 04:42:32,400
chat window down here for now. So, first

9059
04:42:32,400 --> 04:42:33,840
thing we need to do as always is connect

9060
04:42:33,840 --> 04:42:35,360
a brain. I'm going to go ahead and grab

9061
04:42:35,360 --> 04:42:36,958
an open router. And we're just going to

9062
04:42:36,958 --> 04:42:39,440
throw in a 4.1 mini. And I'll just

9063
04:42:39,440 --> 04:42:40,798
change this name real quick so we can

9064
04:42:40,798 --> 04:42:43,280
see what we're using. And from here,

9065
04:42:43,280 --> 04:42:44,560
we're basically just going to connect to

9066
04:42:44,560 --> 04:42:46,320
a subworkflow. And then we'll go build

9067
04:42:46,320 --> 04:42:48,240
out that actual subworkflow agent. So

9068
04:42:48,240 --> 04:42:50,000
the way we do it is we click on this

9069
04:42:50,000 --> 04:42:52,080
plus under tool. And what we want to do

9070
04:42:52,080 --> 04:42:54,560
is call nen workflow tool because you

9071
04:42:54,560 --> 04:42:56,240
can see it says uses another nen

9072
04:42:56,240 --> 04:42:58,320
workflow as a tool. Allows packaging any

9073
04:42:58,320 --> 04:43:00,480
naden node as a tool. So it's super

9074
04:43:00,480 --> 04:43:01,920
cool. That's how we can send data to

9075
04:43:01,920 --> 04:43:03,280
these like custom things that we built

9076
04:43:03,280 --> 04:43:05,200
out. As you saw earlier when I showed

9077
04:43:05,200 --> 04:43:06,400
that little example of the marketing

9078
04:43:06,400 --> 04:43:08,958
team agent, that's how we can do it. So

9079
04:43:08,958 --> 04:43:10,480
I'm going to click on this. And

9080
04:43:10,480 --> 04:43:11,680
basically when you click on this,

9081
04:43:11,680 --> 04:43:13,280
there's a few things to configure. The

9082
04:43:13,280 --> 04:43:15,040
first one is a description of when do

9083
04:43:15,040 --> 04:43:17,280
you use this tool. You'll kind of tell

9084
04:43:17,280 --> 04:43:18,718
the agent that here and you'll also be

9085
04:43:18,718 --> 04:43:20,000
able to tell a little bit in a system

9086
04:43:20,000 --> 04:43:21,360
prompt, but you have to tell it when to

9087
04:43:21,360 --> 04:43:23,040
use this tool. And then the next thing

9088
04:43:23,040 --> 04:43:24,798
is actually linking the tool. So you can

9089
04:43:24,798 --> 04:43:27,040
see we can choose from a list of our

9090
04:43:27,040 --> 04:43:28,958
different workflows in NAN. You can see

9091
04:43:28,958 --> 04:43:30,080
I have a ton of different workflows

9092
04:43:30,080 --> 04:43:31,600
here, but all you have to do is you have

9093
04:43:31,600 --> 04:43:32,958
to choose the one that you want this

9094
04:43:32,958 --> 04:43:35,520
orchestrator agent to send data to. And

9095
04:43:35,520 --> 04:43:36,718
one thing I want to call attention to

9096
04:43:36,718 --> 04:43:38,798
here is this text box which says the

9097
04:43:38,798 --> 04:43:40,400
tool will call the workflow you defined

9098
04:43:40,400 --> 04:43:42,240
below and it will look in the last node

9099
04:43:42,240 --> 04:43:44,400
for the response. The workflow needs to

9100
04:43:44,400 --> 04:43:46,718
start with an execute workflow trigger.

9101
04:43:46,718 --> 04:43:48,560
So what does this mean? Let's just go

9102
04:43:48,560 --> 04:43:50,000
build another workflow and we will see

9103
04:43:50,000 --> 04:43:51,520
exactly what it means. So I'm going to

9104
04:43:51,520 --> 04:43:52,878
open up a new workflow which is going to

9105
04:43:52,878 --> 04:43:54,240
be our sub agent. So, I'm going to hit

9106
04:43:54,240 --> 04:43:55,600
tab to open up the nodes. And it's

9107
04:43:55,600 --> 04:43:57,200
obviously prompting us to choose a

9108
04:43:57,200 --> 04:43:58,400
trigger. And we're going to choose this

9109
04:43:58,400 --> 04:44:00,000
one down here that says when executed by

9110
04:44:00,000 --> 04:44:02,000
another workflow, runs the flow when

9111
04:44:02,000 --> 04:44:04,080
called by the execute workflow node from

9112
04:44:04,080 --> 04:44:06,000
a different tool. So, basically, the

9113
04:44:06,000 --> 04:44:07,840
only thing that can access this node and

9114
04:44:07,840 --> 04:44:10,320
send data to this node is one of these

9115
04:44:10,320 --> 04:44:12,160
bad boys right here. So, these two

9116
04:44:12,160 --> 04:44:13,760
things are basically just connected and

9117
04:44:13,760 --> 04:44:15,040
data is going to be sending between

9118
04:44:15,040 --> 04:44:16,798
them. And what's interesting about this

9119
04:44:16,798 --> 04:44:18,240
node is you can have a couple ways that

9120
04:44:18,240 --> 04:44:20,320
you accept data. So, by default, I

9121
04:44:20,320 --> 04:44:21,920
usually just put it on accept all data.

9122
04:44:21,920 --> 04:44:23,680
And this will put things into a field

9123
04:44:23,680 --> 04:44:25,520
right here called query. But if you

9124
04:44:25,520 --> 04:44:26,958
wanted to, you could also have it send

9125
04:44:26,958 --> 04:44:29,200
over specific fields. So, if you wanted

9126
04:44:29,200 --> 04:44:30,718
to only get like, you know, a phone

9127
04:44:30,718 --> 04:44:32,878
number and you wanted to get a name and

9128
04:44:32,878 --> 04:44:34,560
you wanted to get an email and you

9129
04:44:34,560 --> 04:44:36,240
wanted those all to already be in three

9130
04:44:36,240 --> 04:44:38,000
separate fields, that's how you could do

9131
04:44:38,000 --> 04:44:39,840
that. And a practical example of that

9132
04:44:39,840 --> 04:44:41,760
would be in my marketing team right here

9133
04:44:41,760 --> 04:44:43,280
in the create image. You can see that

9134
04:44:43,280 --> 04:44:44,878
I'm sending over an image title, an

9135
04:44:44,878 --> 04:44:47,040
image prompt, and a chat ID. And that's

9136
04:44:47,040 --> 04:44:48,400
another good example of being able to

9137
04:44:48,400 --> 04:44:51,920
send, you know, like memory over because

9138
04:44:51,920 --> 04:44:53,920
I have a chat ID coming from here, which

9139
04:44:53,920 --> 04:44:55,920
is memory to the agent right here. But

9140
04:44:55,920 --> 04:44:57,680
then I can also send that chat ID to the

9141
04:44:57,680 --> 04:44:59,600
next workflow if we need memory to be

9142
04:44:59,600 --> 04:45:01,360
accessed down here as well. So in this

9143
04:45:01,360 --> 04:45:02,560
case, just to start off, we're not going

9144
04:45:02,560 --> 04:45:04,320
to be sending over specified fields.

9145
04:45:04,320 --> 04:45:06,160
We're just going to do accept all data

9146
04:45:06,160 --> 04:45:08,958
and let us connect an AI agent to this

9147
04:45:08,958 --> 04:45:10,638
guy. So I'm going to type in AI agent.

9148
04:45:10,638 --> 04:45:12,400
We'll pull this in. The first thing we

9149
04:45:12,400 --> 04:45:14,638
need to do is we need to change this

9150
04:45:14,638 --> 04:45:16,000
because we're not going to be talking

9151
04:45:16,000 --> 04:45:17,760
through the connected chat trigger node

9152
04:45:17,760 --> 04:45:20,000
as we know because we have this trigger

9153
04:45:20,000 --> 04:45:21,440
right here. So what we're going to do is

9154
04:45:21,440 --> 04:45:23,040
save this workflow. So now it should

9155
04:45:23,040 --> 04:45:24,560
actually register an end that we have

9156
04:45:24,560 --> 04:45:26,080
this workflow. I'm going to go back in

9157
04:45:26,080 --> 04:45:27,280
here and we're just going to connect it.

9158
04:45:27,280 --> 04:45:29,120
So we know that it's called subwork sub

9159
04:45:29,120 --> 04:45:32,638
aent. So grab that right there. And now

9160
04:45:32,638 --> 04:45:34,080
you can see it says the sub workflow is

9161
04:45:34,080 --> 04:45:35,840
set up to receive all input data.

9162
04:45:35,840 --> 04:45:37,440
Without specific inputs, the agent will

9163
04:45:37,440 --> 04:45:39,280
not be able to pass data to this tool.

9164
04:45:39,280 --> 04:45:40,958
you can define the specific inputs in

9165
04:45:40,958 --> 04:45:42,480
the trigger. So that's exactly what I

9166
04:45:42,480 --> 04:45:44,000
just showed you guys with changing that

9167
04:45:44,000 --> 04:45:45,760
right there. So what I want to do is

9168
04:45:45,760 --> 04:45:47,360
show how data gets here so we can

9169
04:45:47,360 --> 04:45:49,040
actually map it so the agent can read

9170
04:45:49,040 --> 04:45:51,120
it. So what we need to do before we can

9171
04:45:51,120 --> 04:45:52,560
actually test it out is we need to make

9172
04:45:52,560 --> 04:45:54,240
sure that this orchestrator agent

9173
04:45:54,240 --> 04:45:56,080
understands what this tool will do and

9174
04:45:56,080 --> 04:45:57,600
when to use it. So let's just say that

9175
04:45:57,600 --> 04:45:59,200
this one's going to be an email agent.

9176
04:45:59,200 --> 04:46:00,240
First thing I'm going to do is just

9177
04:46:00,240 --> 04:46:03,040
intuitively name this thing email agent.

9178
04:46:03,040 --> 04:46:04,400
I'm then going to type in the

9179
04:46:04,400 --> 04:46:07,680
description call this tool to take any

9180
04:46:07,680 --> 04:46:10,000
email actions. So now it should

9181
04:46:10,000 --> 04:46:12,718
basically, you know, signal to this guy

9182
04:46:12,718 --> 04:46:14,798
whenever I see any sort of query come in

9183
04:46:14,798 --> 04:46:16,240
that has to do with email. I'm just

9184
04:46:16,240 --> 04:46:17,520
going to pass that query right off to

9185
04:46:17,520 --> 04:46:19,840
this tool. So as you can see, I'm not

9186
04:46:19,840 --> 04:46:21,280
even going to add a system message to

9187
04:46:21,280 --> 04:46:22,560
this AI agent yet. We're just going to

9188
04:46:22,560 --> 04:46:24,000
see if we can understand. And I'm going

9189
04:46:24,000 --> 04:46:26,080
to come in here and say, "Please send an

9190
04:46:26,080 --> 04:46:28,878
email to Nate asking him how he's

9191
04:46:28,878 --> 04:46:30,798
doing."

9192
04:46:30,798 --> 04:46:32,240
So, we fire that off and hopefully it's

9193
04:46:32,240 --> 04:46:33,600
going to call this tool and then we'll

9194
04:46:33,600 --> 04:46:35,040
be able to go in there and see the query

9195
04:46:35,040 --> 04:46:36,798
that we got. The reason that this

9196
04:46:36,798 --> 04:46:38,878
errored is because we haven't mapped

9197
04:46:38,878 --> 04:46:39,920
anything. So, what I'm going to do is

9198
04:46:39,920 --> 04:46:41,280
click on the tool. I'm going to click on

9199
04:46:41,280 --> 04:46:43,280
view subexecution. So, we can pop open

9200
04:46:43,280 --> 04:46:45,360
like the exact error that just happened.

9201
04:46:45,360 --> 04:46:47,280
And we can see exactly what happened is

9202
04:46:47,280 --> 04:46:49,760
that this came through in a field called

9203
04:46:49,760 --> 04:46:52,320
query. But the main agent is not looking

9204
04:46:52,320 --> 04:46:53,840
for a field called query. It's looking

9205
04:46:53,840 --> 04:46:55,680
for a field called chat input. So I'm

9206
04:46:55,680 --> 04:46:57,040
just going to click on debug and editor

9207
04:46:57,040 --> 04:46:59,040
so we can actually pull this in. Now all

9208
04:46:59,040 --> 04:47:00,480
I have to do is come in here, change

9209
04:47:00,480 --> 04:47:02,480
this to define below, and then just drag

9210
04:47:02,480 --> 04:47:04,000
in the actual query. And now we know

9211
04:47:04,000 --> 04:47:06,480
that this sub agent is always going to

9212
04:47:06,480 --> 04:47:09,200
receive the orchestrator agents message.

9213
04:47:09,200 --> 04:47:10,560
But what you'll notice here is that the

9214
04:47:10,560 --> 04:47:12,160
orchestrator agent sent over a message

9215
04:47:12,160 --> 04:47:13,760
that says, "Hi Nate, just wanted to

9216
04:47:13,760 --> 04:47:15,120
check in and see how you're doing. Hope

9217
04:47:15,120 --> 04:47:17,600
all is well." So there's a mistake here

9218
04:47:17,600 --> 04:47:19,360
because this main agent ended up

9219
04:47:19,360 --> 04:47:21,440
basically like creating an email and

9220
04:47:21,440 --> 04:47:23,200
sending it over. All we wanted to do is

9221
04:47:23,200 --> 04:47:25,520
basically just pass the message along.

9222
04:47:25,520 --> 04:47:27,280
So what I would do here is come into the

9223
04:47:27,280 --> 04:47:29,480
system prompt and I'm just going to

9224
04:47:29,480 --> 04:47:31,400
say

9225
04:47:31,400 --> 04:47:34,160
overview. You are an orchestrator agent.

9226
04:47:34,160 --> 04:47:37,360
Your only job is to delegate the task to

9227
04:47:37,360 --> 04:47:40,160
the correct tool. No need to write

9228
04:47:40,160 --> 04:47:42,440
emails or create

9229
04:47:42,440 --> 04:47:44,638
summaries. There we go. So just with a

9230
04:47:44,638 --> 04:47:45,920
very simple line, that's all we're going

9231
04:47:45,920 --> 04:47:47,920
to do. And before we shoot that off, I'm

9232
04:47:47,920 --> 04:47:48,878
just going to go back into the sub

9233
04:47:48,878 --> 04:47:50,718
workflow and we have to give this thing

9234
04:47:50,718 --> 04:47:52,638
an actual brain. so that it can process

9235
04:47:52,638 --> 04:47:54,240
messages. We're just going to go with a

9236
04:47:54,240 --> 04:47:57,040
4.1 mini once again. Save that. So, it

9237
04:47:57,040 --> 04:47:58,798
actually reflects on this main agent.

9238
04:47:58,798 --> 04:48:00,240
And now, let's try to send off this

9239
04:48:00,240 --> 04:48:01,920
exact same query. And we'll see what it

9240
04:48:01,920 --> 04:48:04,080
does this time. So, it's calling the

9241
04:48:04,080 --> 04:48:06,000
email agent tool. It shouldn't error

9242
04:48:06,000 --> 04:48:09,040
because we we we fixed it. But, as you

9243
04:48:09,040 --> 04:48:10,798
can see now, it just called that tool

9244
04:48:10,798 --> 04:48:12,560
twice. So, we have to understand why did

9245
04:48:12,560 --> 04:48:14,798
it just call the sub agent twice. First

9246
04:48:14,798 --> 04:48:16,080
thing I'm going to do is click into the

9247
04:48:16,080 --> 04:48:17,200
main agent and I'm going to click on

9248
04:48:17,200 --> 04:48:19,280
logs. And we can see exactly what it

9249
04:48:19,280 --> 04:48:21,360
did. So when it called the email agent

9250
04:48:21,360 --> 04:48:23,360
once again it sent over a subject which

9251
04:48:23,360 --> 04:48:25,360
is checking in and an actual email body.

9252
04:48:25,360 --> 04:48:26,958
So we have to fix the prompting there

9253
04:48:26,958 --> 04:48:28,798
right? But then the output which is

9254
04:48:28,798 --> 04:48:30,400
basically what that sub workflow sent

9255
04:48:30,400 --> 04:48:32,240
back said here's a slightly polished

9256
04:48:32,240 --> 04:48:33,600
version of your message for a warm and

9257
04:48:33,600 --> 04:48:35,440
clear tone blah blah blah. And then for

9258
04:48:35,440 --> 04:48:36,638
some reason it went and called that

9259
04:48:36,638 --> 04:48:38,878
email agent again. So now it says please

9260
04:48:38,878 --> 04:48:40,718
send the following email and it sends it

9261
04:48:40,718 --> 04:48:43,280
over again. And then the sub agent says

9262
04:48:43,280 --> 04:48:45,280
I can't send emails directly but here's

9263
04:48:45,280 --> 04:48:47,200
the email you can send. So, they're both

9264
04:48:47,200 --> 04:48:48,718
in this weird loop of thinking they are

9265
04:48:48,718 --> 04:48:50,160
creating them an email, but not actually

9266
04:48:50,160 --> 04:48:51,760
being able to send them. So, let's take

9267
04:48:51,760 --> 04:48:53,520
a look and see how we can fix that. All

9268
04:48:53,520 --> 04:48:55,200
right, so back in the sub workflow, what

9269
04:48:55,200 --> 04:48:56,878
we want to do now is actually let this

9270
04:48:56,878 --> 04:48:58,718
agent have the ability to send emails.

9271
04:48:58,718 --> 04:48:59,680
Otherwise, they're just going to keep

9272
04:48:59,680 --> 04:49:01,200
doing that endless loop. So, I'm going

9273
04:49:01,200 --> 04:49:03,600
to add a tool and type in Gmail. We're

9274
04:49:03,600 --> 04:49:05,280
going to change this to a send message

9275
04:49:05,280 --> 04:49:08,240
operation. I'm just going to rename this

9276
04:49:08,240 --> 04:49:10,638
send email. And we're just going to have

9277
04:49:10,638 --> 04:49:12,958
the two be defined by the model. We're

9278
04:49:12,958 --> 04:49:14,320
going to have the subject be defined by

9279
04:49:14,320 --> 04:49:16,000
the model. and we're going to have the

9280
04:49:16,000 --> 04:49:17,920
message be defined by the model. And all

9281
04:49:17,920 --> 04:49:19,440
this means is that ideally, you know,

9282
04:49:19,440 --> 04:49:21,200
this query is going to say, hey, send an

9283
04:49:21,200 --> 04:49:25,040
email to nateample.com asking what's up.

9284
04:49:25,040 --> 04:49:26,798
The agent would then interpret that and

9285
04:49:26,798 --> 04:49:28,240
it would fill out, okay, who is it going

9286
04:49:28,240 --> 04:49:29,840
to? What's the subject and what's the

9287
04:49:29,840 --> 04:49:30,958
message? It would basically just create

9288
04:49:30,958 --> 04:49:33,280
it all itself using AI. And the last

9289
04:49:33,280 --> 04:49:34,400
thing I'm going to do is just turn off

9290
04:49:34,400 --> 04:49:36,638
the Nent attribution right there. And

9291
04:49:36,638 --> 04:49:38,240
now let's give it another shot. And keep

9292
04:49:38,240 --> 04:49:39,840
in mind, there's no system prompt in

9293
04:49:39,840 --> 04:49:42,080
this actual agent. And I actually want

9294
04:49:42,080 --> 04:49:43,680
to show you guys a cool tip. So when

9295
04:49:43,680 --> 04:49:45,520
you're building these multi- aent

9296
04:49:45,520 --> 04:49:47,600
systems and you're doing things like

9297
04:49:47,600 --> 04:49:49,600
sending data between flows, if you don't

9298
04:49:49,600 --> 04:49:51,280
want to always go back to the main agent

9299
04:49:51,280 --> 04:49:53,680
to test out like how this one's working,

9300
04:49:53,680 --> 04:49:55,520
what you can do is come into here and we

9301
04:49:55,520 --> 04:49:57,520
can just edit this query and just like

9302
04:49:57,520 --> 04:49:59,360
set some mock data as if the main agent

9303
04:49:59,360 --> 04:50:00,798
was sending over some stuff. So I'm

9304
04:50:00,798 --> 04:50:02,718
going to say like we're pretending the

9305
04:50:02,718 --> 04:50:04,480
orchestrator agent sent over to the sub

9306
04:50:04,480 --> 04:50:08,638
workflow. send an email to

9307
04:50:08,840 --> 04:50:12,480
nate@example.com asking what's up and

9308
04:50:12,480 --> 04:50:14,000
we'll just get rid of that R. And then

9309
04:50:14,000 --> 04:50:15,680
now you can see that's the query. That's

9310
04:50:15,680 --> 04:50:17,120
exactly what this agent's going to be

9311
04:50:17,120 --> 04:50:18,878
looking at right here. And if we hit

9312
04:50:18,878 --> 04:50:20,958
play above this AI agent, we'll see that

9313
04:50:20,958 --> 04:50:22,240
hopefully it's going to call that send

9314
04:50:22,240 --> 04:50:24,798
email tool and we'll see what it did. So

9315
04:50:24,798 --> 04:50:25,920
it just finished up. We'll click into

9316
04:50:25,920 --> 04:50:27,920
the tool to see what it did. And as you

9317
04:50:27,920 --> 04:50:29,920
can see, it sent it to Nate example. It

9318
04:50:29,920 --> 04:50:31,600
made the subject checking in and then

9319
04:50:31,600 --> 04:50:32,798
the message was, "Hey Nate, just wanted

9320
04:50:32,798 --> 04:50:34,638
to check in and see what's up. best your

9321
04:50:34,638 --> 04:50:36,480
name. So, my thought process right now

9322
04:50:36,480 --> 04:50:38,480
is like, let's get everything working

9323
04:50:38,480 --> 04:50:39,840
the way we want it with this agent

9324
04:50:39,840 --> 04:50:41,280
before we go back to that orchestrator

9325
04:50:41,280 --> 04:50:43,120
agent and fix the prompting there. So,

9326
04:50:43,120 --> 04:50:44,240
one thing I don't like is that it's

9327
04:50:44,240 --> 04:50:46,638
signing off with best your name. So, we

9328
04:50:46,638 --> 04:50:48,080
have a few options here. We could do

9329
04:50:48,080 --> 04:50:50,240
that in the system prompt, but same

9330
04:50:50,240 --> 04:50:52,560
thing with like um specialization. If

9331
04:50:52,560 --> 04:50:54,160
this tool is specialized in sending

9332
04:50:54,160 --> 04:50:56,080
emails, we might as well instruct it how

9333
04:50:56,080 --> 04:50:58,080
to send emails in this tool. So for the

9334
04:50:58,080 --> 04:50:59,680
message, I'm going to add a description

9335
04:50:59,680 --> 04:51:01,798
and I'm going to say always sign off

9336
04:51:01,798 --> 04:51:03,400
emails

9337
04:51:03,400 --> 04:51:07,280
as Bob. And that really should do it. So

9338
04:51:07,280 --> 04:51:08,718
because we have this mock data right

9339
04:51:08,718 --> 04:51:10,638
here, I don't have to go and, you know,

9340
04:51:10,638 --> 04:51:12,400
send another message. I can just test it

9341
04:51:12,400 --> 04:51:14,240
out again and see what it's going to do.

9342
04:51:14,240 --> 04:51:15,520
So it's going to call the send email

9343
04:51:15,520 --> 04:51:17,360
tool. It's going to make that message.

9344
04:51:17,360 --> 04:51:18,718
And now we will go ahead and look and

9345
04:51:18,718 --> 04:51:20,560
see if it's signed off in a better way.

9346
04:51:20,560 --> 04:51:21,840
Right here, we can see now it's signing

9347
04:51:21,840 --> 04:51:24,400
off best, Bob. So, let's just say right

9348
04:51:24,400 --> 04:51:25,680
now we're happy with the way that our

9349
04:51:25,680 --> 04:51:28,080
sub agent's working. We can go ahead and

9350
04:51:28,080 --> 04:51:29,760
come back into the main agent and test

9351
04:51:29,760 --> 04:51:31,440
it out again. All right. So, I'm just

9352
04:51:31,440 --> 04:51:32,480
going to shoot off that same message

9353
04:51:32,480 --> 04:51:34,240
again that says, "Send an email to Nate

9354
04:51:34,240 --> 04:51:35,920
asking him how he's doing." And this

9355
04:51:35,920 --> 04:51:37,040
will be interesting. We'll see what it

9356
04:51:37,040 --> 04:51:38,718
sends over. It was one run and it says,

9357
04:51:38,718 --> 04:51:40,240
"Could you please provide Nate's email

9358
04:51:40,240 --> 04:51:42,240
address so I can send the message?" So,

9359
04:51:42,240 --> 04:51:45,120
what happened here was the subexecution

9360
04:51:45,120 --> 04:51:46,560
realized we don't have Nate's email

9361
04:51:46,560 --> 04:51:48,000
address. And that's why it basically

9362
04:51:48,000 --> 04:51:49,600
responded back to this main agent and

9363
04:51:49,600 --> 04:51:51,440
said, "I need that if I need to send the

9364
04:51:51,440 --> 04:51:53,680
message." So if I click on subexecution,

9365
04:51:53,680 --> 04:51:55,520
we will see exactly what it did and why

9366
04:51:55,520 --> 04:51:57,440
it did that and it probably didn't even

9367
04:51:57,440 --> 04:51:59,440
call that send email tool. Yeah. So it

9368
04:51:59,440 --> 04:52:01,120
actually failed and it failed because it

9369
04:52:01,120 --> 04:52:03,680
tried to fill out the two as Nate and it

9370
04:52:03,680 --> 04:52:05,760
realized that's not like a valid email

9371
04:52:05,760 --> 04:52:08,080
address. So then because this sub agent

9372
04:52:08,080 --> 04:52:09,440
responds with could you please provide

9373
04:52:09,440 --> 04:52:11,120
Nate's email address so I can send the

9374
04:52:11,120 --> 04:52:13,120
message. That's exactly what the main

9375
04:52:13,120 --> 04:52:15,120
agent saw right here in the response

9376
04:52:15,120 --> 04:52:16,718
from this agent tool. So that's how

9377
04:52:16,718 --> 04:52:17,840
they're able to talk to each other, go

9378
04:52:17,840 --> 04:52:19,040
back and forth, and then you can see

9379
04:52:19,040 --> 04:52:20,718
that the orchestrator agent prompted us

9380
04:52:20,718 --> 04:52:22,000
to actually provide Nate's email

9381
04:52:22,000 --> 04:52:23,520
address. So now we're going to try,

9382
04:52:23,520 --> 04:52:25,520
please send an email to nativeample.com

9383
04:52:25,520 --> 04:52:26,958
asking him how the project is coming

9384
04:52:26,958 --> 04:52:29,280
along. We'll shoot that off and

9385
04:52:29,280 --> 04:52:30,400
everything should go through this time

9386
04:52:30,400 --> 04:52:32,320
and it should basically say, oh, which

9387
04:52:32,320 --> 04:52:34,000
project are you referring to? This will

9388
04:52:34,000 --> 04:52:35,200
help me provide you with the most

9389
04:52:35,200 --> 04:52:37,040
accurate and relevant update. So once

9390
04:52:37,040 --> 04:52:39,280
again, the sub agent is like, okay, I

9391
04:52:39,280 --> 04:52:40,560
don't have enough information to send

9392
04:52:40,560 --> 04:52:42,878
off that message, so I'm going to

9393
04:52:42,878 --> 04:52:44,560
respond back to that orchestrator agent.

9394
04:52:44,560 --> 04:52:46,000
And just because we actually need one to

9395
04:52:46,000 --> 04:52:47,360
get through, let me shoot off one more

9396
04:52:47,360 --> 04:52:49,040
example. Okay, hopefully this one's

9397
04:52:49,040 --> 04:52:50,560
specific enough. We have an email

9398
04:52:50,560 --> 04:52:52,638
address. We have a specified name of a

9399
04:52:52,638 --> 04:52:54,080
project. And we should see that

9400
04:52:54,080 --> 04:52:55,200
hopefully it's going to send this email

9401
04:52:55,200 --> 04:52:57,200
this time. Okay, there we go. The email

9402
04:52:57,200 --> 04:52:58,878
asking Nate how Project Pan is coming

9403
04:52:58,878 --> 04:53:00,958
along. It's been sent. Anything else you

9404
04:53:00,958 --> 04:53:02,638
need? So, at this point, it would be

9405
04:53:02,638 --> 04:53:04,560
okay. Which other agents could I add to

9406
04:53:04,560 --> 04:53:06,160
the system to make it a bit easier on

9407
04:53:06,160 --> 04:53:08,240
myself? The first thing naturally to do

9408
04:53:08,240 --> 04:53:09,920
would be I need to add some sort of

9409
04:53:09,920 --> 04:53:12,480
contact agent. Or maybe I realize that I

9410
04:53:12,480 --> 04:53:14,080
don't need a full agent for that. Maybe

9411
04:53:14,080 --> 04:53:16,000
that needs to just be one tool. So

9412
04:53:16,000 --> 04:53:17,200
basically what I would do then is I'd

9413
04:53:17,200 --> 04:53:18,878
add a tool right here. I would grab an

9414
04:53:18,878 --> 04:53:20,160
air table because that's where my

9415
04:53:20,160 --> 04:53:22,080
contact information lives. And all I

9416
04:53:22,080 --> 04:53:24,920
want to do is go to contacts and choose

9417
04:53:24,920 --> 04:53:27,120
contacts. And now I just need to change

9418
04:53:27,120 --> 04:53:30,080
this to search. So now this tool's only

9419
04:53:30,080 --> 04:53:32,718
job is to return all of the contacts in

9420
04:53:32,718 --> 04:53:34,480
my contact database. I'm just going to

9421
04:53:34,480 --> 04:53:36,560
come in here and call this contacts. And

9422
04:53:36,560 --> 04:53:38,240
now keep in mind once again there's

9423
04:53:38,240 --> 04:53:39,920
still nothing in the system prompt about

9424
04:53:39,920 --> 04:53:41,120
here are the tools you have and here's

9425
04:53:41,120 --> 04:53:42,480
what you do. I just want to show you

9426
04:53:42,480 --> 04:53:44,560
guys how intelligent these models can be

9427
04:53:44,560 --> 04:53:46,160
before you even prompt them. And then

9428
04:53:46,160 --> 04:53:47,520
once you get in there and say, "Okay,

9429
04:53:47,520 --> 04:53:48,718
now you have access to these seven

9430
04:53:48,718 --> 04:53:50,320
agents. Here's what each of them are

9431
04:53:50,320 --> 04:53:53,200
good at, it gets even cooler." So, let's

9432
04:53:53,200 --> 04:53:54,878
try one more thing and see if it can use

9433
04:53:54,878 --> 04:53:56,878
the combination of contact database and

9434
04:53:56,878 --> 04:53:58,878
email agent. Okay, so I'm going to fire

9435
04:53:58,878 --> 04:54:00,718
this off. Send an email to Dexter Morgan

9436
04:54:00,718 --> 04:54:02,240
asking him if he wants to get lunch. You

9437
04:54:02,240 --> 04:54:03,600
can see that right away it used the

9438
04:54:03,600 --> 04:54:05,440
contacts database, pulled back Dexter

9439
04:54:05,440 --> 04:54:07,120
Morgan's email address, and now we can

9440
04:54:07,120 --> 04:54:08,878
see that it sent that email address over

9441
04:54:08,878 --> 04:54:10,718
to the email agent, and now we have all

9442
04:54:10,718 --> 04:54:12,000
of these different data transfers

9443
04:54:12,000 --> 04:54:13,920
talking to each other, and hopefully it

9444
04:54:13,920 --> 04:54:15,360
sent the email. All right, so here's

9445
04:54:15,360 --> 04:54:16,798
that email. Hi, Dexter. Would you like

9446
04:54:16,798 --> 04:54:18,560
to get lunch sometime soon? Best Bob.

9447
04:54:18,560 --> 04:54:19,920
The formatting is a little off. We can

9448
04:54:19,920 --> 04:54:21,680
fix that within the the tool for the

9449
04:54:21,680 --> 04:54:23,120
email agent. But let's see if we sent

9450
04:54:23,120 --> 04:54:24,920
that to the right email, which is

9451
04:54:24,920 --> 04:54:26,638
dextermiami.com. If we go into our

9452
04:54:26,638 --> 04:54:28,080
contacts database, we can see right here

9453
04:54:28,080 --> 04:54:30,958
we have dextermorggan dextermiami.com.

9454
04:54:30,958 --> 04:54:32,480
And like I showed you guys earlier, what

9455
04:54:32,480 --> 04:54:33,680
you want to do is get pretty good at

9456
04:54:33,680 --> 04:54:35,120
reading these agent logs. So you can see

9457
04:54:35,120 --> 04:54:36,878
how your agents are thinking and what

9458
04:54:36,878 --> 04:54:38,718
data they're sending between workflows.

9459
04:54:38,718 --> 04:54:40,400
And if we go to the logs here, we can

9460
04:54:40,400 --> 04:54:42,878
see first of all, it used its GPT4.1

9461
04:54:42,878 --> 04:54:45,120
mini model brain to understand what to

9462
04:54:45,120 --> 04:54:46,878
do. It understood, okay, I need to go to

9463
04:54:46,878 --> 04:54:48,798
the contacts table. So I got my contact

9464
04:54:48,798 --> 04:54:50,958
information. Then I need to call the

9465
04:54:50,958 --> 04:54:52,958
email agent. And what I sent over to the

9466
04:54:52,958 --> 04:54:55,160
email agent was send an email to

9467
04:54:55,160 --> 04:54:57,280
dextermiami.com asking him if he wants

9468
04:54:57,280 --> 04:54:59,840
to get lunch. And that was perfect. All

9469
04:54:59,840 --> 04:55:00,718
right. All right, so that's going to do

9470
04:55:00,718 --> 04:55:02,000
it for this one. Hopefully this opened

9471
04:55:02,000 --> 04:55:03,520
your eyes to the possibilities of these

9472
04:55:03,520 --> 04:55:05,520
multi- aent systems in N&N and also

9473
04:55:05,520 --> 04:55:06,480
hopefully it taught you some stuff

9474
04:55:06,480 --> 04:55:08,638
because I know all of this stuff is like

9475
04:55:08,638 --> 04:55:10,000
really buzzwordy sometimes with all

9476
04:55:10,000 --> 04:55:12,080
these agents agents agents but there are

9477
04:55:12,080 --> 04:55:13,760
use cases where it really is the best

9478
04:55:13,760 --> 04:55:15,360
path but it's all about like

9479
04:55:15,360 --> 04:55:16,718
understanding what is the end goal and

9480
04:55:16,718 --> 04:55:18,480
how do I want to evolve this workflow

9481
04:55:18,480 --> 04:55:20,200
and then deciding like what's the best

9482
04:55:20,200 --> 04:55:23,200
architecture or system to use. So that

9483
04:55:23,200 --> 04:55:24,638
was one type of architecture for a

9484
04:55:24,638 --> 04:55:26,000
multi-agent system called the

9485
04:55:26,000 --> 04:55:28,160
orchestrator architecture. But that's

9486
04:55:28,160 --> 04:55:30,000
not the only way to have multiple agents

9487
04:55:30,000 --> 04:55:32,400
within a workflow or within a system. So

9488
04:55:32,400 --> 04:55:33,760
in this next section, I'm going to break

9489
04:55:33,760 --> 04:55:35,440
down a few other architectures that you

9490
04:55:35,440 --> 04:55:37,200
can use so that you can understand

9491
04:55:37,200 --> 04:55:39,680
what's possible and which one fits your

9492
04:55:39,680 --> 04:55:42,240
use case best. So let's dive right in.

9493
04:55:42,240 --> 04:55:44,080
So in my ultimate assistant video, we

9494
04:55:44,080 --> 04:55:45,680
utilize an agentic framework called

9495
04:55:45,680 --> 04:55:47,280
parent agent. So as you can see, we have

9496
04:55:47,280 --> 04:55:48,638
a parent agent right here, which is the

9497
04:55:48,638 --> 04:55:50,560
ultimate assistant that's able to send

9498
04:55:50,560 --> 04:55:52,878
tasks to its four child agents down

9499
04:55:52,878 --> 04:55:54,240
here, which are different workflows that

9500
04:55:54,240 --> 04:55:56,080
we built out within NAND. If you haven't

9501
04:55:56,080 --> 04:55:57,280
seen that video, I'll tag it right up

9502
04:55:57,280 --> 04:55:58,638
here. But how it works is that the

9503
04:55:58,638 --> 04:55:59,920
ultimate assistant could get a query

9504
04:55:59,920 --> 04:56:01,360
from the human and decide that it needs

9505
04:56:01,360 --> 04:56:03,040
to send that query to the email agent,

9506
04:56:03,040 --> 04:56:04,400
which looks like this. And then the

9507
04:56:04,400 --> 04:56:05,760
email agent will be able to use its

9508
04:56:05,760 --> 04:56:08,320
tools in Gmail and actually take action.

9509
04:56:08,320 --> 04:56:09,680
From there, it responds to the parent

9510
04:56:09,680 --> 04:56:11,040
agent and then the parent agent is able

9511
04:56:11,040 --> 04:56:12,400
to take that response back from this

9512
04:56:12,400 --> 04:56:14,160
child agent and then respond to us in

9513
04:56:14,160 --> 04:56:15,760
Telegram. So, it's a super cool system.

9514
04:56:15,760 --> 04:56:17,520
It allows us to delegate tasks and also

9515
04:56:17,520 --> 04:56:19,280
these agents can be activated in any

9516
04:56:19,280 --> 04:56:20,480
specific order. It doesn't always have

9517
04:56:20,480 --> 04:56:22,320
to be the same. But is this framework

9518
04:56:22,320 --> 04:56:24,400
always the most effective? No. So today

9519
04:56:24,400 --> 04:56:25,440
I'm going to be going over four

9520
04:56:25,440 --> 04:56:26,878
different agentic frameworks that you

9521
04:56:26,878 --> 04:56:28,718
can use in your end workflows. The first

9522
04:56:28,718 --> 04:56:29,840
one we're going to be talking about is

9523
04:56:29,840 --> 04:56:31,440
prompt chaining. The second one is

9524
04:56:31,440 --> 04:56:32,920
routing. The third one is

9525
04:56:32,920 --> 04:56:34,878
parallelization. And the fourth one is

9526
04:56:34,878 --> 04:56:36,560
evaluator optimizer. So we're going to

9527
04:56:36,560 --> 04:56:37,760
break down how they all work, what

9528
04:56:37,760 --> 04:56:38,878
they're good at. But make sure you stick

9529
04:56:38,878 --> 04:56:40,240
around to the end because this one, the

9530
04:56:40,240 --> 04:56:41,840
evaluator optimizer, is the one that's

9531
04:56:41,840 --> 04:56:43,600
got me most excited. So before we get

9532
04:56:43,600 --> 04:56:45,120
into this first framework, if you want

9533
04:56:45,120 --> 04:56:46,798
to download these four templates for

9534
04:56:46,798 --> 04:56:48,400
free so you can follow along, you can do

9535
04:56:48,400 --> 04:56:50,240
so by joining my free school community.

9536
04:56:50,240 --> 04:56:51,680
You'll come in here, click on YouTube

9537
04:56:51,680 --> 04:56:53,760
resources, click on the post associated

9538
04:56:53,760 --> 04:56:54,878
with this video, and then you'll have

9539
04:56:54,878 --> 04:56:56,480
the workflow right here to download. So,

9540
04:56:56,480 --> 04:56:57,440
the link for that's down in the

9541
04:56:57,440 --> 04:56:58,480
description. There's also going to be a

9542
04:56:58,480 --> 04:57:00,000
link for my paid community, which is if

9543
04:57:00,000 --> 04:57:01,200
you're looking for a more hands-on

9544
04:57:01,200 --> 04:57:03,040
approach to learning NAND. We've got a

9545
04:57:03,040 --> 04:57:04,400
great community of members who are also

9546
04:57:04,400 --> 04:57:06,000
dedicated to learning NAN, sharing

9547
04:57:06,000 --> 04:57:07,600
resources, sharing challenges, sharing

9548
04:57:07,600 --> 04:57:09,040
projects, stuff like that. We've got a

9549
04:57:09,040 --> 04:57:10,240
classroom section where we're going over

9550
04:57:10,240 --> 04:57:11,680
different deep dive topics like building

9551
04:57:11,680 --> 04:57:14,000
agents, vector databases, APIs, and HTTP

9552
04:57:14,000 --> 04:57:15,600
requests. And I also just launched a new

9553
04:57:15,600 --> 04:57:16,958
course where I'm doing the step-by-step

9554
04:57:16,958 --> 04:57:18,400
tutorials of all the videos that I've

9555
04:57:18,400 --> 04:57:20,160
shown on YouTube. And finally, we've got

9556
04:57:20,160 --> 04:57:21,600
five live calls per week to make sure

9557
04:57:21,600 --> 04:57:22,958
that you're getting questions answered,

9558
04:57:22,958 --> 04:57:24,400
never getting stuck, and also networking

9559
04:57:24,400 --> 04:57:26,000
with individuals in the space. We've

9560
04:57:26,000 --> 04:57:27,520
also got guest speakers coming in in

9561
04:57:27,520 --> 04:57:29,040
February, which is super exciting. So,

9562
04:57:29,040 --> 04:57:30,718
I'd love to see you guys in these calls.

9563
04:57:30,718 --> 04:57:32,320
Anyways, back to the video here. The

9564
04:57:32,320 --> 04:57:33,120
first one we're going to be talking

9565
04:57:33,120 --> 04:57:34,718
about is prompt chaining. So, as you can

9566
04:57:34,718 --> 04:57:36,400
see, the way this works, we have three

9567
04:57:36,400 --> 04:57:38,080
agents here, and what we're doing is

9568
04:57:38,080 --> 04:57:39,920
we're passing the output of an agent

9569
04:57:39,920 --> 04:57:42,080
directly as the input into the next

9570
04:57:42,080 --> 04:57:44,160
agent, and so on so forth. So, here are

9571
04:57:44,160 --> 04:57:45,280
the main benefits of this type of

9572
04:57:45,280 --> 04:57:47,360
workflow. It's going to lead to improved

9573
04:57:47,360 --> 04:57:49,120
accuracy and quality because each step

9574
04:57:49,120 --> 04:57:51,040
focuses on a specific task which will

9575
04:57:51,040 --> 04:57:52,958
help reduce errors and hallucinations.

9576
04:57:52,958 --> 04:57:54,718
Greater control over each step. We can

9577
04:57:54,718 --> 04:57:56,320
refine the system prompt of the outline

9578
04:57:56,320 --> 04:57:57,840
writer and then we can refine the prompt

9579
04:57:57,840 --> 04:57:59,840
of the evaluator. So we can really tweak

9580
04:57:59,840 --> 04:58:01,480
what's going on and how data is being

9581
04:58:01,480 --> 04:58:03,520
transferred. Specialization is going to

9582
04:58:03,520 --> 04:58:05,280
lead to more effective agents. So as you

9583
04:58:05,280 --> 04:58:06,718
can see in this example, we're having

9584
04:58:06,718 --> 04:58:09,120
one agent write the outline. One of them

9585
04:58:09,120 --> 04:58:10,718
evaluates the outline and makes

9586
04:58:10,718 --> 04:58:12,320
suggestions. And then finally, we pass

9587
04:58:12,320 --> 04:58:14,080
that revised outline to the blog writer

9588
04:58:14,080 --> 04:58:15,440
who's in charge of actually writing the

9589
04:58:15,440 --> 04:58:17,520
blog. So this is going to lead to a much

9590
04:58:17,520 --> 04:58:20,000
more cohesive, thought through actual

9591
04:58:20,000 --> 04:58:21,840
blog in the end compared to if we would

9592
04:58:21,840 --> 04:58:24,240
just fed in all of this system prompt

9593
04:58:24,240 --> 04:58:26,000
into one agent. And then finally, with

9594
04:58:26,000 --> 04:58:27,360
this type of framework, we've got easier

9595
04:58:27,360 --> 04:58:28,878
debugging and optimization because it's

9596
04:58:28,878 --> 04:58:30,160
linear. We can see where things are

9597
04:58:30,160 --> 04:58:31,360
going wrong. Finally, it's going to be

9598
04:58:31,360 --> 04:58:32,878
more scalable and reusable as we're able

9599
04:58:32,878 --> 04:58:34,320
to plug in different agents wherever we

9600
04:58:34,320 --> 04:58:35,760
need them. Okay, so what we have to do

9601
04:58:35,760 --> 04:58:37,600
here is we're just going to enter in a

9602
04:58:37,600 --> 04:58:40,638
keyword, a topic for this um blog. So,

9603
04:58:40,638 --> 04:58:42,160
I'm just going to enter in coffee, and

9604
04:58:42,160 --> 04:58:43,600
we'll see that the agents start going to

9605
04:58:43,600 --> 04:58:44,878
work. So, the first one is an outline

9606
04:58:44,878 --> 04:58:46,560
writer. Um, one thing that's also really

9607
04:58:46,560 --> 04:58:47,680
cool about this framework and some of

9608
04:58:47,680 --> 04:58:49,120
the other ones we're going to cover is

9609
04:58:49,120 --> 04:58:50,320
that because we're splitting up the

9610
04:58:50,320 --> 04:58:52,320
different tasks, we're able to utilize

9611
04:58:52,320 --> 04:58:53,600
different large language models. So, as

9612
04:58:53,600 --> 04:58:55,040
you can see, the outline writer, we gave

9613
04:58:55,040 --> 04:58:58,080
20 Flash because it's it's free. Um,

9614
04:58:58,080 --> 04:58:59,440
it's it's powerful, but not super

9615
04:58:59,440 --> 04:59:00,560
powerful, and we just need a brief

9616
04:59:00,560 --> 04:59:02,240
outline to be written here. And then we

9617
04:59:02,240 --> 04:59:03,360
can pass this on to the next one that

9618
04:59:03,360 --> 04:59:04,798
uses 40 Mini. It's a little more

9619
04:59:04,798 --> 04:59:06,320
powerful, a little more expensive, but

9620
04:59:06,320 --> 04:59:08,718
still not too bad. and we want this more

9621
04:59:08,718 --> 04:59:10,320
powerful chat model to be doing the

9622
04:59:10,320 --> 04:59:12,400
evaluating and refining of the outline.

9623
04:59:12,400 --> 04:59:13,840
And then finally, for the actual blog

9624
04:59:13,840 --> 04:59:15,280
writing content, we want to use

9625
04:59:15,280 --> 04:59:17,280
something like Claw 3.5 or even Deepseek

9626
04:59:17,280 --> 04:59:18,798
R1 because it's going to be more

9627
04:59:18,798 --> 04:59:20,000
powerful and it's going to take that

9628
04:59:20,000 --> 04:59:21,680
revised outline and then structure a

9629
04:59:21,680 --> 04:59:24,000
really nice blog post for us. So that's

9630
04:59:24,000 --> 04:59:25,920
just part of the specialization. Not

9631
04:59:25,920 --> 04:59:27,760
only can we split up the tasks, but we

9632
04:59:27,760 --> 04:59:29,520
can plug and play different chat models

9633
04:59:29,520 --> 04:59:31,200
where we need to rather than feeding

9634
04:59:31,200 --> 04:59:33,200
everything through one, you know, one

9635
04:59:33,200 --> 04:59:35,600
Deep Seeker, one blog writer at the very

9636
04:59:35,600 --> 04:59:36,958
beginning. So, this one's finishing up

9637
04:59:36,958 --> 04:59:38,400
here. It's about to get pushed into a

9638
04:59:38,400 --> 04:59:39,680
Google doc where we'll be able to go

9639
04:59:39,680 --> 04:59:41,760
over there and take a look at the blog

9640
04:59:41,760 --> 04:59:43,680
that it got for us about coffee. So,

9641
04:59:43,680 --> 04:59:45,200
looks like it just finished up. Here we

9642
04:59:45,200 --> 04:59:47,840
go. Detailed blog post based on option

9643
04:59:47,840 --> 04:59:49,840
one, a comprehensive guide to coffee.

9644
04:59:49,840 --> 04:59:51,840
Here's our title. Um, we have a rich

9645
04:59:51,840 --> 04:59:54,480
history of coffee from bean to cup. We

9646
04:59:54,480 --> 04:59:55,920
have um different methods. We have

9647
04:59:55,920 --> 04:59:57,920
different coffee varieties. We have all

9648
04:59:57,920 --> 04:59:59,920
this kind of stuff, health benefits and

9649
04:59:59,920 --> 05:00:01,440
risks. Um, and as you can see, this

9650
05:00:01,440 --> 05:00:03,120
pretty much was a four-page blog. We've

9651
05:00:03,120 --> 05:00:04,718
got a conclusion at the end. Anyways,

9652
05:00:04,718 --> 05:00:06,240
let's dive into what's going on here.

9653
05:00:06,240 --> 05:00:08,638
So, the concept is passing the output

9654
05:00:08,638 --> 05:00:10,320
into the input and then taking that

9655
05:00:10,320 --> 05:00:11,760
output and passing it into the next

9656
05:00:11,760 --> 05:00:14,160
input. So, here we have here's the topic

9657
05:00:14,160 --> 05:00:15,600
to write a blog about which all it got

9658
05:00:15,600 --> 05:00:17,040
here was the word coffee. That's what we

9659
05:00:17,040 --> 05:00:18,878
typed in. The system message is that you

9660
05:00:18,878 --> 05:00:20,560
are an expert outline writer. Your job

9661
05:00:20,560 --> 05:00:22,160
is to generate a structured outline for

9662
05:00:22,160 --> 05:00:24,000
a blog post with section titles and key

9663
05:00:24,000 --> 05:00:25,920
points. So, here's the first draft at

9664
05:00:25,920 --> 05:00:28,480
the outline using 20 flash. Then, we

9665
05:00:28,480 --> 05:00:30,480
pass that into an outline evaluator

9666
05:00:30,480 --> 05:00:32,320
that's using for Mini. We said here's

9667
05:00:32,320 --> 05:00:34,320
the outline. We gave it the outline of

9668
05:00:34,320 --> 05:00:36,160
course and then the system message is

9669
05:00:36,160 --> 05:00:38,000
you're an expert blog evaluator. Your

9670
05:00:38,000 --> 05:00:39,520
job is to revise this outline and make

9671
05:00:39,520 --> 05:00:41,120
sure it hits these four criteria which

9672
05:00:41,120 --> 05:00:43,040
are engaging introduction, clear section

9673
05:00:43,040 --> 05:00:44,798
breakdown, logical flow, and then a

9674
05:00:44,798 --> 05:00:46,560
conclusion. So we told it to only output

9675
05:00:46,560 --> 05:00:48,320
the revised outline. So now we have a

9676
05:00:48,320 --> 05:00:50,798
new outline over here. And finally,

9677
05:00:50,798 --> 05:00:52,560
we're sending that into a Claude 3.5

9678
05:00:52,560 --> 05:00:54,320
blog writer where we gave it the revised

9679
05:00:54,320 --> 05:00:56,160
outline and just said, "You're an expert

9680
05:00:56,160 --> 05:00:58,000
blog writer. Generate a detailed blog

9681
05:00:58,000 --> 05:00:59,760
post using this outline with well

9682
05:00:59,760 --> 05:01:01,200
ststructured paragraphs and engaging

9683
05:01:01,200 --> 05:01:03,360
content." So that's how this works. You

9684
05:01:03,360 --> 05:01:04,560
can see it will be even more powerful

9685
05:01:04,560 --> 05:01:05,920
once we hook up, you know, like some

9686
05:01:05,920 --> 05:01:07,600
internet search functionality and if we

9687
05:01:07,600 --> 05:01:09,280
added like an editor at the end before

9688
05:01:09,280 --> 05:01:10,878
it actually pushed it into the the

9689
05:01:10,878 --> 05:01:12,798
Google doc or whatever it is. But that's

9690
05:01:12,798 --> 05:01:14,560
how this framework works. But let's move

9691
05:01:14,560 --> 05:01:16,718
into aic framework number two. Now we're

9692
05:01:16,718 --> 05:01:17,680
going to talk about the routing

9693
05:01:17,680 --> 05:01:19,120
framework. In this case, we have an

9694
05:01:19,120 --> 05:01:21,680
initial LLM call right here to classify

9695
05:01:21,680 --> 05:01:23,280
incoming emails. And based on that

9696
05:01:23,280 --> 05:01:24,638
classification, it's going to route it

9697
05:01:24,638 --> 05:01:26,878
up as high priority, customer support,

9698
05:01:26,878 --> 05:01:28,718
promotion, their finance, and billing.

9699
05:01:28,718 --> 05:01:29,840
And as you can see, there's different

9700
05:01:29,840 --> 05:01:31,280
actions that are going to take place. We

9701
05:01:31,280 --> 05:01:32,718
have different agents depending on what

9702
05:01:32,718 --> 05:01:34,480
type of message comes through. So the

9703
05:01:34,480 --> 05:01:35,760
first agent, which is the text

9704
05:01:35,760 --> 05:01:37,440
classifier here, basically just has to

9705
05:01:37,440 --> 05:01:39,360
decide, okay, which agent do I need to

9706
05:01:39,360 --> 05:01:41,360
send this email off to? Anyways, why

9707
05:01:41,360 --> 05:01:42,718
would you want to use routing? Because

9708
05:01:42,718 --> 05:01:43,680
you're going to have an optimized

9709
05:01:43,680 --> 05:01:45,280
response handling. So as we can see in

9710
05:01:45,280 --> 05:01:46,320
this case, we're able to set up

9711
05:01:46,320 --> 05:01:47,600
different personas for each of our

9712
05:01:47,600 --> 05:01:49,520
agents here rather than having one

9713
05:01:49,520 --> 05:01:52,160
general AI response agent. Then this can

9714
05:01:52,160 --> 05:01:54,000
be more scalable and modular. It's going

9715
05:01:54,000 --> 05:01:55,440
to be faster and more efficient. And

9716
05:01:55,440 --> 05:01:56,638
then you can also introduce human

9717
05:01:56,638 --> 05:01:58,160
escalation for critical issues like we

9718
05:01:58,160 --> 05:02:00,160
do up here with our high priority agent.

9719
05:02:00,160 --> 05:02:01,280
And finally, it's just going to be a

9720
05:02:01,280 --> 05:02:03,280
better user experience for for your team

9721
05:02:03,280 --> 05:02:06,160
and also your customers. So I hit test

9722
05:02:06,160 --> 05:02:07,440
step. What we're getting here is an

9723
05:02:07,440 --> 05:02:08,878
email that I just sent to myself that

9724
05:02:08,878 --> 05:02:10,480
says, "Hey, I need help logging into my

9725
05:02:10,480 --> 05:02:12,160
account. Can you help me?" So this email

9726
05:02:12,160 --> 05:02:13,600
classifier is going to label this as

9727
05:02:13,600 --> 05:02:15,040
customer support. As soon as we hit

9728
05:02:15,040 --> 05:02:16,400
play, it's going to send it down the

9729
05:02:16,400 --> 05:02:17,600
customer support branch right here. As

9730
05:02:17,600 --> 05:02:19,280
you can see, we got one new item. What's

9731
05:02:19,280 --> 05:02:20,718
going on in this step is that we're just

9732
05:02:20,718 --> 05:02:22,638
labeling it in our Gmail as a customer

9733
05:02:22,638 --> 05:02:24,240
support email. And then finally, we're

9734
05:02:24,240 --> 05:02:25,280
going to fire it off to the customer

9735
05:02:25,280 --> 05:02:27,280
support agent. In this case, this one is

9736
05:02:27,280 --> 05:02:29,120
trained on customer support activities.

9737
05:02:29,120 --> 05:02:30,320
Um, this is where you could hook up a

9738
05:02:30,320 --> 05:02:32,000
customer support database if you needed.

9739
05:02:32,000 --> 05:02:33,280
And then what it's going to do is it's

9740
05:02:33,280 --> 05:02:35,440
going to create an email draft for us in

9741
05:02:35,440 --> 05:02:37,040
reply to the email that we got. So,

9742
05:02:37,040 --> 05:02:38,400
let's go take a look at that. So, here's

9743
05:02:38,400 --> 05:02:39,680
the email we got. Hey, I need help

9744
05:02:39,680 --> 05:02:41,360
logging into my account. As you can see,

9745
05:02:41,360 --> 05:02:42,798
our agent was able to label it as

9746
05:02:42,798 --> 05:02:44,400
customer support. And then finally, it

9747
05:02:44,400 --> 05:02:45,680
created this email, which was, "Hey,

9748
05:02:45,680 --> 05:02:46,878
Nate, thanks for reaching out. I'd be

9749
05:02:46,878 --> 05:02:48,080
happy to assist you with logging into

9750
05:02:48,080 --> 05:02:49,440
your account. Please provide me with

9751
05:02:49,440 --> 05:02:51,120
some more details um about the issue

9752
05:02:51,120 --> 05:02:52,798
you're experiencing, blah blah blah."

9753
05:02:52,798 --> 05:02:54,080
And then this one signs off, "Best

9754
05:02:54,080 --> 05:02:55,520
regards, Kelly, because she's the

9755
05:02:55,520 --> 05:02:56,958
customer support rep." Okay, let's take

9756
05:02:56,958 --> 05:02:58,718
a look at a different example. Um, we'll

9757
05:02:58,718 --> 05:03:00,080
pull in the trigger again and this time

9758
05:03:00,080 --> 05:03:01,040
we're going to be getting a different

9759
05:03:01,040 --> 05:03:02,160
email. So, as you can see, this one

9760
05:03:02,160 --> 05:03:03,520
says, "Nate, this is urgent. We need

9761
05:03:03,520 --> 05:03:05,280
your outline tomorrow or you're fired."

9762
05:03:05,280 --> 05:03:06,878
So, hopefully this one gets labeled as

9763
05:03:06,878 --> 05:03:08,480
high priority. It's going to go up here

9764
05:03:08,480 --> 05:03:10,080
to the high priority branch. Once again,

9765
05:03:10,080 --> 05:03:11,600
we're going to label that email as high

9766
05:03:11,600 --> 05:03:13,360
priority. But instead of activating an

9767
05:03:13,360 --> 05:03:15,440
email draft reply tool, this one has

9768
05:03:15,440 --> 05:03:17,040
access to a Telegram tool. So, what it's

9769
05:03:17,040 --> 05:03:18,638
going to do is text us immediately and

9770
05:03:18,638 --> 05:03:20,080
say, "Hey, this is the email you got.

9771
05:03:20,080 --> 05:03:21,040
You need to take care of this right

9772
05:03:21,040 --> 05:03:23,360
away." Um, and obviously the logic you

9773
05:03:23,360 --> 05:03:25,040
can choose of what you want to happen

9774
05:03:25,040 --> 05:03:26,480
based on what route it is, but let's

9775
05:03:26,480 --> 05:03:28,080
see. We just got telegram message,

9776
05:03:28,080 --> 05:03:29,760
urgent email from Nate Hkelman stating

9777
05:03:29,760 --> 05:03:31,440
that an outline is needed by tomorrow or

9778
05:03:31,440 --> 05:03:33,280
there will be serious consequences,

9779
05:03:33,280 --> 05:03:35,280
potential termination. So that way it

9780
05:03:35,280 --> 05:03:36,560
notifies us right away. We're able to

9781
05:03:36,560 --> 05:03:38,320
get into our email manually, you know,

9782
05:03:38,320 --> 05:03:39,920
get get caught up on the thread and then

9783
05:03:39,920 --> 05:03:41,520
respond how we need to. And so pretty

9784
05:03:41,520 --> 05:03:42,798
much the same thing for the other two.

9785
05:03:42,798 --> 05:03:44,240
Promotional email will get labeled as

9786
05:03:44,240 --> 05:03:45,920
promotion. We come in here and see that

9787
05:03:45,920 --> 05:03:47,360
we are able to set a different persona

9788
05:03:47,360 --> 05:03:49,440
for the pro promotion agent, which is

9789
05:03:49,440 --> 05:03:50,400
you're in charge of promotional

9790
05:03:50,400 --> 05:03:52,000
opportunities. Your job is to respond to

9791
05:03:52,000 --> 05:03:53,360
inquiries in a friendly, professional

9792
05:03:53,360 --> 05:03:55,760
manner and use this email to send reply

9793
05:03:55,760 --> 05:03:57,520
to customer. Always sign off as Meredith

9794
05:03:57,520 --> 05:03:59,840
from ABC Corp. So, each agent has a

9795
05:03:59,840 --> 05:04:01,200
different sort of persona that it's able

9796
05:04:01,200 --> 05:04:03,440
to respond to. In finance agent, we have

9797
05:04:03,440 --> 05:04:05,520
we have this agent signing off as a as

9798
05:04:05,520 --> 05:04:08,958
Angela from ABC Corp. Um, anyways, what

9799
05:04:08,958 --> 05:04:10,320
I did here was I hooked them all up to

9800
05:04:10,320 --> 05:04:11,600
the same chat model and I hooked them

9801
05:04:11,600 --> 05:04:13,680
all up to the same tool because they're

9802
05:04:13,680 --> 05:04:16,080
all going to be sending an email draft

9803
05:04:16,080 --> 05:04:18,160
here. As you can see, we're using from

9804
05:04:18,160 --> 05:04:19,600
AAI to determine the subject, the

9805
05:04:19,600 --> 05:04:21,280
message, and the thread ID, which it's

9806
05:04:21,280 --> 05:04:23,200
going to pull in from the actual Gmail

9807
05:04:23,200 --> 05:04:24,958
trigger, or sorry, the Gmail trigger is

9808
05:04:24,958 --> 05:04:26,958
not using from AAI. We're we're mapping

9809
05:04:26,958 --> 05:04:29,040
in the Gmail trigger because every time

9810
05:04:29,040 --> 05:04:30,718
an email comes through, it can just look

9811
05:04:30,718 --> 05:04:33,600
at that um email in order to determine

9812
05:04:33,600 --> 05:04:36,000
the thread ID for sending out an email.

9813
05:04:36,000 --> 05:04:37,280
But you don't have to connect them up to

9814
05:04:37,280 --> 05:04:38,480
the same tool. I just did it this way

9815
05:04:38,480 --> 05:04:39,760
because then I only had to create one

9816
05:04:39,760 --> 05:04:41,280
tool. Same thing with the different chat

9817
05:04:41,280 --> 05:04:43,120
models based on the, you know,

9818
05:04:43,120 --> 05:04:44,718
importance of what's going through each

9819
05:04:44,718 --> 05:04:46,080
route. You could switch out the chat

9820
05:04:46,080 --> 05:04:47,520
models. We could have even used a

9821
05:04:47,520 --> 05:04:48,718
cheaper, easier one for the

9822
05:04:48,718 --> 05:04:50,480
classification if we wanted to, but in

9823
05:04:50,480 --> 05:04:52,000
this case, I just hooked them all up to

9824
05:04:52,000 --> 05:04:54,400
a 40 mini chat model. Anyways, this was

9825
05:04:54,400 --> 05:04:56,160
just a really simple example of routing.

9826
05:04:56,160 --> 05:04:57,600
You could have 10 different routes, you

9827
05:04:57,600 --> 05:04:58,958
could have just two different routes,

9828
05:04:58,958 --> 05:05:00,400
but the idea is that you're using one

9829
05:05:00,400 --> 05:05:02,400
agent up front to determine which way to

9830
05:05:02,400 --> 05:05:04,160
send off the data. Moving on to the

9831
05:05:04,160 --> 05:05:05,080
third framework, we've got

9832
05:05:05,080 --> 05:05:06,718
parallelization. What we're going to do

9833
05:05:06,718 --> 05:05:08,480
here is be using three different agents,

9834
05:05:08,480 --> 05:05:09,680
and then we're going to merge their

9835
05:05:09,680 --> 05:05:11,120
outputs, aggregate them together, and

9836
05:05:11,120 --> 05:05:12,878
then feed them all into a final agent to

9837
05:05:12,878 --> 05:05:14,958
sort of, you know, throw it all into one

9838
05:05:14,958 --> 05:05:16,958
response. So what this is going to do is

9839
05:05:16,958 --> 05:05:18,560
give us faster analysis rather than

9840
05:05:18,560 --> 05:05:20,480
processing everything linearly. So in

9841
05:05:20,480 --> 05:05:21,520
this case we're going to be sending in

9842
05:05:21,520 --> 05:05:22,878
some input and then we're going to have

9843
05:05:22,878 --> 05:05:25,120
one agent analyze the emotion behind it,

9844
05:05:25,120 --> 05:05:26,798
one agent do the intent behind it, and

9845
05:05:26,798 --> 05:05:29,120
then one agent analyze any bias rather

9846
05:05:29,120 --> 05:05:30,560
than doing it one by one. They're all

9847
05:05:30,560 --> 05:05:31,840
going to be working simultaneously and

9848
05:05:31,840 --> 05:05:33,600
then throwing their outputs together. So

9849
05:05:33,600 --> 05:05:35,200
it can decrease the latency there.

9850
05:05:35,200 --> 05:05:36,400
They're going to be specialized, which

9851
05:05:36,400 --> 05:05:37,920
means we could have specialized system

9852
05:05:37,920 --> 05:05:39,520
prompts like we do here. We also could

9853
05:05:39,520 --> 05:05:41,440
do specialized um large language models

9854
05:05:41,440 --> 05:05:42,718
again where we could plug in different

9855
05:05:42,718 --> 05:05:44,480
different models if we wanted to maybe

9856
05:05:44,480 --> 05:05:46,320
feed through the same prompt use cloud

9857
05:05:46,320 --> 05:05:48,400
up here, OpenAI down here and then you

9858
05:05:48,400 --> 05:05:49,920
know DeepSeek down here and then combine

9859
05:05:49,920 --> 05:05:51,120
them together to make sure we're getting

9860
05:05:51,120 --> 05:05:53,440
the best thoughtout answer. Um

9861
05:05:53,440 --> 05:05:55,040
comprehensive review and then more

9862
05:05:55,040 --> 05:05:56,718
scalability as well. But how this one's

9863
05:05:56,718 --> 05:05:57,760
going to work is we're putting in an

9864
05:05:57,760 --> 05:05:59,360
initial message which is I don't trust

9865
05:05:59,360 --> 05:06:00,878
the mainstream media anymore. They

9866
05:06:00,878 --> 05:06:02,638
always push a specific agenda and ignore

9867
05:06:02,638 --> 05:06:04,400
real issues. People need to wake up and

9868
05:06:04,400 --> 05:06:05,600
stop believing everything they see on

9869
05:06:05,600 --> 05:06:07,040
the news. So, we're having an emotion

9870
05:06:07,040 --> 05:06:08,560
agent, first of all, analyze the

9871
05:06:08,560 --> 05:06:10,878
emotional emotional tone, categorize it

9872
05:06:10,878 --> 05:06:13,600
as positive, neutral, negative, or mixed

9873
05:06:13,600 --> 05:06:15,600
with a brief explanation. The intent

9874
05:06:15,600 --> 05:06:17,040
agent is going to analyze the intent

9875
05:06:17,040 --> 05:06:18,798
behind this text, and then finally, the

9876
05:06:18,798 --> 05:06:20,958
bias agent is going to analyze this text

9877
05:06:20,958 --> 05:06:23,040
for any potential bias. So, we'll hit

9878
05:06:23,040 --> 05:06:24,878
this off. Um, we're going to get those

9879
05:06:24,878 --> 05:06:26,958
three separate analysises um or

9880
05:06:26,958 --> 05:06:28,480
analysis, and then we're going to be

9881
05:06:28,480 --> 05:06:30,480
sending that into a final agent that's

9882
05:06:30,480 --> 05:06:32,320
going to basically combine all those

9883
05:06:32,320 --> 05:06:33,760
outputs and then write a little bit of

9884
05:06:33,760 --> 05:06:36,638
report based on our input. So, as you

9885
05:06:36,638 --> 05:06:37,920
can see, right now, it's waiting here

9886
05:06:37,920 --> 05:06:40,080
for um the input from the bias agent.

9887
05:06:40,080 --> 05:06:41,360
Once that happens, it's going to get

9888
05:06:41,360 --> 05:06:42,958
aggregated, and now it's being sent into

9889
05:06:42,958 --> 05:06:44,638
the final agent, and then we'll take a

9890
05:06:44,638 --> 05:06:47,280
look at um the report that we got in our

9891
05:06:47,280 --> 05:06:49,040
Google doc. Okay, just finished up.

9892
05:06:49,040 --> 05:06:50,718
Let's hop over to Docs. We'll see we got

9893
05:06:50,718 --> 05:06:52,560
an emotional tone, intent, and bias

9894
05:06:52,560 --> 05:06:55,600
analysis report. Overview is that um the

9895
05:06:55,600 --> 05:06:57,280
incoming text has strong negative

9896
05:06:57,280 --> 05:06:59,280
sentiment towards mainstream media. Yep.

9897
05:06:59,280 --> 05:07:01,120
Emotional tone is negative sentiment.

9898
05:07:01,120 --> 05:07:03,680
Intent is persuasive goal. Um, the bias

9899
05:07:03,680 --> 05:07:05,200
analysis has political bias,

9900
05:07:05,200 --> 05:07:07,120
generalization, emotional language, lack

9901
05:07:07,120 --> 05:07:08,638
of evidence. Um, it's got

9902
05:07:08,638 --> 05:07:10,080
recommendations for how we can make this

9903
05:07:10,080 --> 05:07:12,160
text more neutral, revised message, and

9904
05:07:12,160 --> 05:07:13,920
then let's just read off the conclusion.

9905
05:07:13,920 --> 05:07:15,600
The analysis highlights a significant

9906
05:07:15,600 --> 05:07:17,120
level of negativity and bias in the

9907
05:07:17,120 --> 05:07:18,718
original message directed towards

9908
05:07:18,718 --> 05:07:20,400
mainstream media. By implementing the

9909
05:07:20,400 --> 05:07:21,760
suggested recommendations, the author

9910
05:07:21,760 --> 05:07:23,360
can promote a more balanced and credible

9911
05:07:23,360 --> 05:07:25,200
perspective that encourages critical

9912
05:07:25,200 --> 05:07:26,878
assessment of media consumption, blah

9913
05:07:26,878 --> 05:07:28,958
blah blah. So, as you can see, that's

9914
05:07:28,958 --> 05:07:30,560
going to be a much better, you know,

9915
05:07:30,560 --> 05:07:32,080
comprehensive analysis than if we would

9916
05:07:32,080 --> 05:07:34,320
have just fed the initial input into an

9917
05:07:34,320 --> 05:07:36,320
agent and said, "Hey, can you analyze

9918
05:07:36,320 --> 05:07:37,680
this text for emotion, intent, and

9919
05:07:37,680 --> 05:07:39,440
bias?" But now, we got that split up,

9920
05:07:39,440 --> 05:07:41,280
merged together, put into the final one

9921
05:07:41,280 --> 05:07:43,040
for, you know, a comprehensive review

9922
05:07:43,040 --> 05:07:45,680
and an output. And it's going to turn

9923
05:07:45,680 --> 05:07:48,400
the the, you know, data in into data out

9924
05:07:48,400 --> 05:07:49,520
process. It's going to be a lot more

9925
05:07:49,520 --> 05:07:51,200
efficient. Finally, the one that gets me

9926
05:07:51,200 --> 05:07:53,360
the most excited, um, the evaluator

9927
05:07:53,360 --> 05:07:54,878
optimizer framework, where we're going

9928
05:07:54,878 --> 05:07:56,878
to have an evaluator agent decide if

9929
05:07:56,878 --> 05:07:58,400
what's passing through is good or not.

9930
05:07:58,400 --> 05:08:00,320
If it's good, we're fine, but if it's

9931
05:08:00,320 --> 05:08:01,760
not, it's going to get optimized and

9932
05:08:01,760 --> 05:08:03,440
then sent back to the evaluator for more

9933
05:08:03,440 --> 05:08:05,040
evaluation. And this is going to be an

9934
05:08:05,040 --> 05:08:06,798
endless loop until the evaluator agent

9935
05:08:06,798 --> 05:08:08,718
says, "Okay, finally, it's good enough.

9936
05:08:08,718 --> 05:08:10,400
We'll send it off." So, if you watch my

9937
05:08:10,400 --> 05:08:11,920
human in the loop video, it's going to

9938
05:08:11,920 --> 05:08:13,120
be just like that where we were

9939
05:08:13,120 --> 05:08:14,560
providing feedback and we were the ones

9940
05:08:14,560 --> 05:08:16,000
basically deciding if it was good to go

9941
05:08:16,000 --> 05:08:17,680
or not. But in this case, we have an

9942
05:08:17,680 --> 05:08:19,440
agent that does that. So it's going to

9943
05:08:19,440 --> 05:08:21,280
be optimizing all your workflows on the

9944
05:08:21,280 --> 05:08:23,440
back end without you being in the loop.

9945
05:08:23,440 --> 05:08:24,798
So obviously the benefits here are that

9946
05:08:24,798 --> 05:08:26,080
it's going to ensure high quality

9947
05:08:26,080 --> 05:08:27,840
outputs. It's going to reduce errors and

9948
05:08:27,840 --> 05:08:29,760
manual review. It's going to be flexible

9949
05:08:29,760 --> 05:08:31,280
and scalable. And then it's going to

9950
05:08:31,280 --> 05:08:32,798
optimize the AI's performance because

9951
05:08:32,798 --> 05:08:35,280
it's sort of an iterative approach that

9952
05:08:35,280 --> 05:08:36,798
um you know focuses on continuous

9953
05:08:36,798 --> 05:08:39,000
improvement from these AI generated

9954
05:08:39,000 --> 05:08:40,958
responses. So what we're doing here is

9955
05:08:40,958 --> 05:08:42,638
we have a biography agent. What we told

9956
05:08:42,638 --> 05:08:45,200
this agent to do is um basically write a

9957
05:08:45,200 --> 05:08:46,560
biography. You're an expert biography

9958
05:08:46,560 --> 05:08:48,240
writer. You'll receive information about

9959
05:08:48,240 --> 05:08:49,920
a person. Your job is to create an

9960
05:08:49,920 --> 05:08:51,280
entire profile using the information

9961
05:08:51,280 --> 05:08:52,878
they give you. And I told it you're

9962
05:08:52,878 --> 05:08:55,360
allowed to be creative. From there,

9963
05:08:55,360 --> 05:08:56,718
we're setting the bio. And we're just

9964
05:08:56,718 --> 05:08:58,160
doing this here so that we can continue

9965
05:08:58,160 --> 05:09:00,320
to feed this back over and over. That

9966
05:09:00,320 --> 05:09:02,718
way, if we have five revisions, it'll

9967
05:09:02,718 --> 05:09:04,320
still get passed every time. The most

9968
05:09:04,320 --> 05:09:06,240
recent version to the agent and also the

9969
05:09:06,240 --> 05:09:08,240
most recent version when it's approved

9970
05:09:08,240 --> 05:09:09,840
will get pushed up here to the Google

9971
05:09:09,840 --> 05:09:11,840
doc. Then we have the evaluator agent.

9972
05:09:11,840 --> 05:09:14,400
What we told this agent to do is um

9973
05:09:14,400 --> 05:09:16,798
evaluate the biography. Your job is to

9974
05:09:16,798 --> 05:09:18,638
provide feedback. We gave a criteria.

9975
05:09:18,638 --> 05:09:20,160
So, make sure that it includes a quote

9976
05:09:20,160 --> 05:09:21,920
from the person. Make sure it's light

9977
05:09:21,920 --> 05:09:23,760
and humorous and make sure it has no

9978
05:09:23,760 --> 05:09:25,680
emojis. Only need to output the

9979
05:09:25,680 --> 05:09:27,200
feedback. If the biography is finished

9980
05:09:27,200 --> 05:09:29,040
and all criteria are met, then all you

9981
05:09:29,040 --> 05:09:31,280
need to output is finished. So, then we

9982
05:09:31,280 --> 05:09:33,040
have a check to say, okay, does the

9983
05:09:33,040 --> 05:09:34,560
output from the evaluator agent say

9984
05:09:34,560 --> 05:09:36,560
finished or is it feedback? If it's

9985
05:09:36,560 --> 05:09:37,520
feedback, it's going to go to the

9986
05:09:37,520 --> 05:09:39,120
optimizer agent and continue on this

9987
05:09:39,120 --> 05:09:41,200
loop until it says finished. Once it

9988
05:09:41,200 --> 05:09:42,718
finally says finished, as you can see,

9989
05:09:42,718 --> 05:09:45,120
we set JSON.output, output which is the

9990
05:09:45,120 --> 05:09:47,560
output from the evaluator agent equals

9991
05:09:47,560 --> 05:09:49,840
finished. When that happens, it'll go up

9992
05:09:49,840 --> 05:09:51,120
here and then we'll see it in our Google

9993
05:09:51,120 --> 05:09:52,878
doc. But then what we have in the actual

9994
05:09:52,878 --> 05:09:54,878
optimizer agent is we're giving it the

9995
05:09:54,878 --> 05:09:56,400
biography and this is where we're

9996
05:09:56,400 --> 05:09:58,080
referencing the set field where we

9997
05:09:58,080 --> 05:10:00,080
earlier right here where we set the bio.

9998
05:10:00,080 --> 05:10:01,600
This way the optimizer agent's always

9999
05:10:01,600 --> 05:10:04,000
getting the most updated version of the

10000
05:10:04,000 --> 05:10:05,280
bio. And then we're also going to get

10001
05:10:05,280 --> 05:10:06,560
the feedback. So this is going to be the

10002
05:10:06,560 --> 05:10:08,560
output from the evaluator agent because

10003
05:10:08,560 --> 05:10:10,240
if it does go down this path, the

10004
05:10:10,240 --> 05:10:12,400
evaluator agent, it means that it output

10005
05:10:12,400 --> 05:10:14,718
feedback rather than saying finished. So

10006
05:10:14,718 --> 05:10:16,000
it's getting feedback, it's getting the

10007
05:10:16,000 --> 05:10:17,360
biography, and then we're saying you're

10008
05:10:17,360 --> 05:10:19,200
an expert reviser. Your job is to take

10009
05:10:19,200 --> 05:10:20,798
the biography and optimize it based on

10010
05:10:20,798 --> 05:10:22,718
the feedback. So it gets all it needs in

10011
05:10:22,718 --> 05:10:24,878
the user message, and then it outputs us

10012
05:10:24,878 --> 05:10:26,958
a better optimized version of that

10013
05:10:26,958 --> 05:10:28,638
biography. Okay, so let's do an example

10014
05:10:28,638 --> 05:10:30,480
real quick. Um, if you remember in the

10015
05:10:30,480 --> 05:10:31,920
biography agent, well, all we have to do

10016
05:10:31,920 --> 05:10:33,840
is give it a, you know, some information

10017
05:10:33,840 --> 05:10:35,520
about a person to write a biography on.

10018
05:10:35,520 --> 05:10:36,638
So, I'm going to come in here and I'm

10019
05:10:36,638 --> 05:10:40,958
just going to say Jim 42

10020
05:10:40,958 --> 05:10:44,320
um, lives by the ocean. Okay, so that's

10021
05:10:44,320 --> 05:10:45,520
all we're going to put in. We'll see

10022
05:10:45,520 --> 05:10:47,120
that it's writing a brief biography

10023
05:10:47,120 --> 05:10:48,718
right now. And then we're going to see

10024
05:10:48,718 --> 05:10:50,718
it get evaluated. We're going to see if

10025
05:10:50,718 --> 05:10:52,718
it, you know, met those criteria. If it

10026
05:10:52,718 --> 05:10:53,840
doesn't, it's going to get sent to the

10027
05:10:53,840 --> 05:10:56,000
optimizer agent. the optimizer agent is

10028
05:10:56,000 --> 05:10:58,480
going to get um basically the criteria

10029
05:10:58,480 --> 05:11:00,718
it needs to hit as well as the original

10030
05:11:00,718 --> 05:11:02,240
biography. So here's the evaluator

10031
05:11:02,240 --> 05:11:03,840
agent. Look at that. It decides that it

10032
05:11:03,840 --> 05:11:05,200
wasn't good enough. Now it's being sent

10033
05:11:05,200 --> 05:11:07,120
to the optimizer agent who is going to

10034
05:11:07,120 --> 05:11:09,120
optimize the bio, send it back and then

10035
05:11:09,120 --> 05:11:11,040
hopefully on the second run it'll go up

10036
05:11:11,040 --> 05:11:12,878
and get published in the docs. If it's

10037
05:11:12,878 --> 05:11:14,400
not good enough yet, then it will come

10038
05:11:14,400 --> 05:11:15,680
back to the agent and it will optimize

10039
05:11:15,680 --> 05:11:17,280
it once again. But I think that this

10040
05:11:17,280 --> 05:11:18,718
agent will do a good job. There we go.

10041
05:11:18,718 --> 05:11:20,480
We can see it just got pushed up into

10042
05:11:20,480 --> 05:11:21,920
the doc. So let's take a look at our

10043
05:11:21,920 --> 05:11:24,480
Google doc. Here's a biography for Jim

10044
05:11:24,480 --> 05:11:26,480
Thompson. He lives in California. He's

10045
05:11:26,480 --> 05:11:29,760
43. Um, ocean enthusiast, passion,

10046
05:11:29,760 --> 05:11:31,600
adventure, a profound respect for

10047
05:11:31,600 --> 05:11:33,680
nature. It talks about his early life,

10048
05:11:33,680 --> 05:11:35,280
and obviously he's making all this up.

10049
05:11:35,280 --> 05:11:37,040
Talks about his education, talks about

10050
05:11:37,040 --> 05:11:38,798
his career, talks about his personal

10051
05:11:38,798 --> 05:11:40,878
life. Here we have a quote from Jim,

10052
05:11:40,878 --> 05:11:42,320
which is, "I swear the fish are just as

10053
05:11:42,320 --> 05:11:43,840
curious about me as I am about them."

10054
05:11:43,840 --> 05:11:45,840
We've even got another quote. Um, a few

10055
05:11:45,840 --> 05:11:47,600
dad jokes along the way. Why did the

10056
05:11:47,600 --> 05:11:49,120
fish blush? Because it saw the ocean's

10057
05:11:49,120 --> 05:11:50,958
bottom. So, not sure I completely get

10058
05:11:50,958 --> 05:11:53,040
that one. Oh, no. I get that one. Um

10059
05:11:53,040 --> 05:11:55,440
anyways then hobbies, philosophy, legacy

10060
05:11:55,440 --> 05:11:57,520
and a conclusion. So this is you know a

10061
05:11:57,520 --> 05:11:59,120
pretty optimized blog post. It meets all

10062
05:11:59,120 --> 05:12:00,638
the criteria that we had put into our

10063
05:12:00,638 --> 05:12:02,160
agents as far as you know this is what

10064
05:12:02,160 --> 05:12:03,760
you need to evaluate for. It's very

10065
05:12:03,760 --> 05:12:05,360
light. There's no emojis. Threw some

10066
05:12:05,360 --> 05:12:06,560
jokes in there and then it has some

10067
05:12:06,560 --> 05:12:08,400
quotes from Jim as well. So as you can

10068
05:12:08,400 --> 05:12:11,200
see all we put in was Jim 43 lives by

10069
05:12:11,200 --> 05:12:12,958
the ocean and we got a whole basically a

10070
05:12:12,958 --> 05:12:14,560
story written about this guy. And once

10071
05:12:14,560 --> 05:12:16,160
again just like all of these frameworks

10072
05:12:16,160 --> 05:12:17,760
pretty much you have the flexibility

10073
05:12:17,760 --> 05:12:19,280
here to change out your model wherever

10074
05:12:19,280 --> 05:12:20,958
you want. So let's say we don't really

10075
05:12:20,958 --> 05:12:22,400
mind up front. we could use something

10076
05:12:22,400 --> 05:12:24,000
really cheap and quick and then maybe

10077
05:12:24,000 --> 05:12:25,680
for the actual optimizer agent we want

10078
05:12:25,680 --> 05:12:27,440
to plug in something a little more um

10079
05:12:27,440 --> 05:12:28,878
you know with reasoning aspect like

10080
05:12:28,878 --> 05:12:31,040
deepse R1 potentially. Anyways, that's

10081
05:12:31,040 --> 05:12:32,240
all I've got for you guys today. Hope

10082
05:12:32,240 --> 05:12:34,320
this one was helpful. Hope this one, you

10083
05:12:34,320 --> 05:12:36,160
know, sparked some ideas for next time

10084
05:12:36,160 --> 05:12:37,440
you're going into edit end to build an

10085
05:12:37,440 --> 05:12:39,680
agentic workflow. Maybe looking at I

10086
05:12:39,680 --> 05:12:40,798
could actually have structured my

10087
05:12:40,798 --> 05:12:42,320
workflow in this framework and it would

10088
05:12:42,320 --> 05:12:43,440
have been a little more efficient than

10089
05:12:43,440 --> 05:12:44,958
the current way I'm doing it. Like I

10090
05:12:44,958 --> 05:12:46,320
said, these four templates will be in

10091
05:12:46,320 --> 05:12:47,600
the free school community if you want to

10092
05:12:47,600 --> 05:12:48,718
download them and just play around with

10093
05:12:48,718 --> 05:12:50,480
them to understand what's going on,

10094
05:12:50,480 --> 05:12:52,080
understand, you know, when to use each

10095
05:12:52,080 --> 05:12:53,840
framework, stuff like that. All right,

10096
05:12:53,840 --> 05:12:55,360
so we understand a lot of the components

10097
05:12:55,360 --> 05:12:56,718
that actually go into building an

10098
05:12:56,718 --> 05:12:58,240
effective agent or an effective agent

10099
05:12:58,240 --> 05:13:00,080
system, but we haven't really yet spent

10100
05:13:00,080 --> 05:13:02,000
a lot of time on prompting, which is

10101
05:13:02,000 --> 05:13:04,160
like 80% of an agent. It's so so

10102
05:13:04,160 --> 05:13:05,760
important. So, in this next section,

10103
05:13:05,760 --> 05:13:07,200
we're going to talk about my methodology

10104
05:13:07,200 --> 05:13:08,798
when it comes to prompting a tools

10105
05:13:08,798 --> 05:13:10,480
agent, and we're going to do a quick

10106
05:13:10,480 --> 05:13:12,320
little live prompting session near the

10107
05:13:12,320 --> 05:13:13,520
end. So, if that sounds good to you,

10108
05:13:13,520 --> 05:13:15,360
let's get started. Building AI agents

10109
05:13:15,360 --> 05:13:16,560
and hooking up different tools is fun

10110
05:13:16,560 --> 05:13:18,320
and all, but the quality and consistency

10111
05:13:18,320 --> 05:13:19,840
of the performance of your agents

10112
05:13:19,840 --> 05:13:21,600
directly ties back to the quality of the

10113
05:13:21,600 --> 05:13:23,120
system prompt that you put in there.

10114
05:13:23,120 --> 05:13:24,160
Anyways, today what we're going to be

10115
05:13:24,160 --> 05:13:25,680
talking about is what actually goes into

10116
05:13:25,680 --> 05:13:27,280
creating an effective prompt so that

10117
05:13:27,280 --> 05:13:29,520
your agents perform as you want them to.

10118
05:13:29,520 --> 05:13:30,718
I'm going to be going over the most

10119
05:13:30,718 --> 05:13:31,920
important thing that I've learned while

10120
05:13:31,920 --> 05:13:33,440
building out agents and prompting them

10121
05:13:33,440 --> 05:13:34,638
that I don't think a lot of people are

10122
05:13:34,638 --> 05:13:36,160
doing. So, let's not waste any time and

10123
05:13:36,160 --> 05:13:37,760
get straight into this one. All right,

10124
05:13:37,760 --> 05:13:39,200
so I've got a document here. If you want

10125
05:13:39,200 --> 05:13:40,638
to download this one to follow along or

10126
05:13:40,638 --> 05:13:42,240
just have it for later, you can do so by

10127
05:13:42,240 --> 05:13:43,440
joining my free school community. The

10128
05:13:43,440 --> 05:13:44,958
link for that's down in the description.

10129
05:13:44,958 --> 05:13:46,320
You'll just click on YouTube resources

10130
05:13:46,320 --> 05:13:47,840
and find the post associated with this

10131
05:13:47,840 --> 05:13:49,120
video and you'll be able to download the

10132
05:13:49,120 --> 05:13:51,280
PDF right there. Anyways, what we're

10133
05:13:51,280 --> 05:13:52,878
looking at today is how we can master

10134
05:13:52,878 --> 05:13:55,760
reactive prompting for AI agents in NAD.

10135
05:13:55,760 --> 05:13:57,200
And the objective of this document here

10136
05:13:57,200 --> 05:13:58,878
is to understand what prompting is, why

10137
05:13:58,878 --> 05:14:00,638
it matters, develop a structured

10138
05:14:00,638 --> 05:14:02,240
approach to reactive prompting when

10139
05:14:02,240 --> 05:14:04,080
building out AI agents, and then learn

10140
05:14:04,080 --> 05:14:05,840
about the essential prompt components.

10141
05:14:05,840 --> 05:14:07,520
So, let's get straight into it and start

10142
05:14:07,520 --> 05:14:09,200
off with just a brief introduction. What

10143
05:14:09,200 --> 05:14:11,280
is prompting? Make sure you stick around

10144
05:14:11,280 --> 05:14:12,480
for this one because once we get through

10145
05:14:12,480 --> 05:14:14,080
this doc, we're going to hop into NN and

10146
05:14:14,080 --> 05:14:15,920
do some live prompting examples. So,

10147
05:14:15,920 --> 05:14:17,280
within our agents, we're giving them a

10148
05:14:17,280 --> 05:14:18,958
system prompt. And this is basically

10149
05:14:18,958 --> 05:14:20,958
just coding them on how to act. But

10150
05:14:20,958 --> 05:14:22,320
don't be scared of the word code because

10151
05:14:22,320 --> 05:14:23,600
we're just using natural language

10152
05:14:23,600 --> 05:14:25,120
instead of something like Python or

10153
05:14:25,120 --> 05:14:27,120
JavaScript. A good system prompt is

10154
05:14:27,120 --> 05:14:28,560
going to ensure that your agent is

10155
05:14:28,560 --> 05:14:30,638
behaving in a very clear, very specific,

10156
05:14:30,638 --> 05:14:32,798
and a very repeatable way. So, instead

10157
05:14:32,798 --> 05:14:34,718
of us programming some sort of Python

10158
05:14:34,718 --> 05:14:36,160
agent, what we're doing is we're just

10159
05:14:36,160 --> 05:14:37,840
typing in, "You're an email agent. Your

10160
05:14:37,840 --> 05:14:39,440
job is to assist the user by using your

10161
05:14:39,440 --> 05:14:41,120
tools to take the correct action."

10162
05:14:41,120 --> 05:14:42,878
Exactly as if we were instructing an

10163
05:14:42,878 --> 05:14:45,040
intern. And why does prompting matter?

10164
05:14:45,040 --> 05:14:46,480
I'm sure by now you guys already have a

10165
05:14:46,480 --> 05:14:47,680
good reason in your head of why

10166
05:14:47,680 --> 05:14:49,280
prompting matters, and it's pretty

10167
05:14:49,280 --> 05:14:51,120
intuitive, but let's think about it like

10168
05:14:51,120 --> 05:14:53,200
this as well. Agents are meant to be

10169
05:14:53,200 --> 05:14:55,040
running autonomously, and they don't

10170
05:14:55,040 --> 05:14:56,638
allow that back and forth interaction

10171
05:14:56,638 --> 05:14:58,878
like chatbt. Now, yes, there can be some

10172
05:14:58,878 --> 05:15:00,560
human in the loop within your sort of

10173
05:15:00,560 --> 05:15:02,958
agentic workflows, but ideally you put

10174
05:15:02,958 --> 05:15:05,280
in an input, it triggers the automation,

10175
05:15:05,280 --> 05:15:06,638
triggers the agent to do something, and

10176
05:15:06,638 --> 05:15:08,000
then we're getting an output. Unlike

10177
05:15:08,000 --> 05:15:09,520
chatbt where you ask it to help you

10178
05:15:09,520 --> 05:15:10,718
write an email, and you can say, "Hey,

10179
05:15:10,718 --> 05:15:12,080
make that shorter," or you can say,

10180
05:15:12,080 --> 05:15:14,080
"Make it more professional." We don't

10181
05:15:14,080 --> 05:15:15,840
have that um luxury here. We just need

10182
05:15:15,840 --> 05:15:17,040
to trust that it's going to work

10183
05:15:17,040 --> 05:15:19,760
consistently and high quality. So, our

10184
05:15:19,760 --> 05:15:21,920
goal as prompters is to get the prompts

10185
05:15:21,920 --> 05:15:23,440
right the first time so that the agent

10186
05:15:23,440 --> 05:15:25,200
functions correctly every single time

10187
05:15:25,200 --> 05:15:26,878
it's triggered. So, the key rule here is

10188
05:15:26,878 --> 05:15:28,480
to keep the prompts clear, simple, and

10189
05:15:28,480 --> 05:15:29,840
actionable. You don't want to leave any

10190
05:15:29,840 --> 05:15:32,240
room for misinterpretation. Um, and

10191
05:15:32,240 --> 05:15:34,080
also, less is more. Sometimes I'll see

10192
05:15:34,080 --> 05:15:35,760
people just throw in a novel, and that's

10193
05:15:35,760 --> 05:15:37,040
just obviously going to be more

10194
05:15:37,040 --> 05:15:38,798
expensive for you, and also just more

10195
05:15:38,798 --> 05:15:40,638
room to confuse the agent. So, less is

10196
05:15:40,638 --> 05:15:42,638
more. So, now let's get into the biggest

10197
05:15:42,638 --> 05:15:44,080
lesson that I've learned while prompting

10198
05:15:44,080 --> 05:15:46,958
AI agents, which is prompting needs to

10199
05:15:46,958 --> 05:15:49,440
be done reactively. I see way too many

10200
05:15:49,440 --> 05:15:51,120
people doing this proactively, throwing

10201
05:15:51,120 --> 05:15:52,718
in a huge system message, and then just

10202
05:15:52,718 --> 05:15:54,560
testing things out. This is just not the

10203
05:15:54,560 --> 05:15:56,638
way to go. So let's dive into what that

10204
05:15:56,638 --> 05:15:57,878
actually means to be prompting

10205
05:15:57,878 --> 05:15:59,760
reactively. First of all, what is

10206
05:15:59,760 --> 05:16:01,360
proactive prompting? This is just

10207
05:16:01,360 --> 05:16:03,440
writing a long detailed prompt up front

10208
05:16:03,440 --> 05:16:04,878
after you have all your tools configured

10209
05:16:04,878 --> 05:16:06,638
and all of the sort of, you know,

10210
05:16:06,638 --> 05:16:08,560
standard operating procedures configured

10211
05:16:08,560 --> 05:16:10,400
and then you start testing it out. The

10212
05:16:10,400 --> 05:16:12,638
problem here is that you don't know all

10213
05:16:12,638 --> 05:16:14,638
the possible edge cases and errors in

10214
05:16:14,638 --> 05:16:16,400
advance and debugging is going to be a

10215
05:16:16,400 --> 05:16:17,600
lot more difficult because if something

10216
05:16:17,600 --> 05:16:19,280
breaks, you don't know which part of the

10217
05:16:19,280 --> 05:16:21,280
prompt is causing the issue. You may try

10218
05:16:21,280 --> 05:16:22,718
to fix something in there and then the

10219
05:16:22,718 --> 05:16:24,080
issue originally you were having is

10220
05:16:24,080 --> 05:16:26,080
fixed, but now you cause a new issue and

10221
05:16:26,080 --> 05:16:27,280
it's just going to be really messy as

10222
05:16:27,280 --> 05:16:28,718
you continue to add more and more and

10223
05:16:28,718 --> 05:16:30,320
you end up just confusing both yourself

10224
05:16:30,320 --> 05:16:32,560
and the agent. Now, reactive prompting

10225
05:16:32,560 --> 05:16:33,920
on the other hand is just starting with

10226
05:16:33,920 --> 05:16:35,920
absolutely nothing and adding a tool,

10227
05:16:35,920 --> 05:16:37,840
testing it out, and then slowly adding

10228
05:16:37,840 --> 05:16:39,600
sentence by sentence. And as you've seen

10229
05:16:39,600 --> 05:16:41,120
in some of my demos, we're able to get

10230
05:16:41,120 --> 05:16:43,200
like six tools hooked up, have no prompt

10231
05:16:43,200 --> 05:16:44,638
in there, and the agent's still working

10232
05:16:44,638 --> 05:16:46,160
pretty well. At that point, we're able

10233
05:16:46,160 --> 05:16:47,600
to start adding more lines to make the

10234
05:16:47,600 --> 05:16:49,600
system more robust.

10235
05:16:49,600 --> 05:16:50,958
But the benefits here of reactive

10236
05:16:50,958 --> 05:16:53,040
prompting are pretty clear. The first

10237
05:16:53,040 --> 05:16:54,878
one is easier debugging. You know

10238
05:16:54,878 --> 05:16:56,878
exactly what broke the agent. Whether

10239
05:16:56,878 --> 05:16:58,480
that's I added this sentence and then

10240
05:16:58,480 --> 05:16:59,760
the automation broke. All I have to do

10241
05:16:59,760 --> 05:17:01,440
is take out that sentence or I added

10242
05:17:01,440 --> 05:17:03,040
this tool and I didn't prompt the tool

10243
05:17:03,040 --> 05:17:04,240
yet. So that's what caused the

10244
05:17:04,240 --> 05:17:05,360
automation to break. So I'm just going

10245
05:17:05,360 --> 05:17:06,718
to add a sentence in right here about

10246
05:17:06,718 --> 05:17:08,638
the tool. This is also going to lead to

10247
05:17:08,638 --> 05:17:10,080
more efficient testing because you can

10248
05:17:10,080 --> 05:17:12,400
see exactly what happens before you hard

10249
05:17:12,400 --> 05:17:14,320
prompt in fixes. And essentially, you

10250
05:17:14,320 --> 05:17:15,680
know, I'll talk about hard prompting

10251
05:17:15,680 --> 05:17:17,600
more later, but essentially what it is

10252
05:17:17,600 --> 05:17:20,560
is um you're basically seeing an error

10253
05:17:20,560 --> 05:17:22,160
and then you're hard prompting in the

10254
05:17:22,160 --> 05:17:23,360
error within the system prompt and

10255
05:17:23,360 --> 05:17:25,440
saying, "Hey, like you just did this.

10256
05:17:25,440 --> 05:17:27,040
That was wrong. Don't do that again."

10257
05:17:27,040 --> 05:17:28,560
And we can only do that reactively

10258
05:17:28,560 --> 05:17:29,920
because we don't know how the agent's

10259
05:17:29,920 --> 05:17:31,840
going to react before we test it out.

10260
05:17:31,840 --> 05:17:33,360
Finally, we have the benefit that it

10261
05:17:33,360 --> 05:17:34,878
prevents over complicated prompts that

10262
05:17:34,878 --> 05:17:37,680
are hard to modify later. If you have a

10263
05:17:37,680 --> 05:17:39,040
whole novel in there and you're getting

10264
05:17:39,040 --> 05:17:40,160
errors, you're not going to know where

10265
05:17:40,160 --> 05:17:40,958
to start. You're going to be

10266
05:17:40,958 --> 05:17:43,120
overwhelmed. So, taking it step by step,

10267
05:17:43,120 --> 05:17:44,638
starting with nothing and adding on

10268
05:17:44,638 --> 05:17:46,958
things slowly is the way to go. And so,

10269
05:17:46,958 --> 05:17:48,320
if it still isn't clicking yet, let's

10270
05:17:48,320 --> 05:17:49,840
look at a real world example. Let's say

10271
05:17:49,840 --> 05:17:51,440
you're teaching a kid to ride a bike. If

10272
05:17:51,440 --> 05:17:53,440
you took a proactive approach, you'd be

10273
05:17:53,440 --> 05:17:56,160
trying to correct the child's behavior

10274
05:17:56,160 --> 05:17:57,760
before you know what he or she is going

10275
05:17:57,760 --> 05:18:00,240
to do. So, if you're telling the kid to

10276
05:18:00,240 --> 05:18:01,920
keep your back straight, lean forward,

10277
05:18:01,920 --> 05:18:03,680
you know, don't tilt a certain way,

10278
05:18:03,680 --> 05:18:05,040
that's going to be confusing because now

10279
05:18:05,040 --> 05:18:06,798
the kid is trying to adjust to all these

10280
05:18:06,798 --> 05:18:08,400
things you've said and it doesn't even

10281
05:18:08,400 --> 05:18:10,320
know what it was going to do, what he or

10282
05:18:10,320 --> 05:18:11,760
she was going to do in the in the

10283
05:18:11,760 --> 05:18:13,280
beginning. But if you're taking a

10284
05:18:13,280 --> 05:18:15,360
reactive approach and obviously maybe

10285
05:18:15,360 --> 05:18:16,638
this wasn't the best example cuz you

10286
05:18:16,638 --> 05:18:18,958
don't want your kid to fall, but you let

10287
05:18:18,958 --> 05:18:20,798
them ride, you see what they're doing,

10288
05:18:20,798 --> 05:18:22,480
you know, if they're leaning too much to

10289
05:18:22,480 --> 05:18:23,600
the left, you're going to say, "Okay,

10290
05:18:23,600 --> 05:18:24,798
well, maybe you need to lean a little

10291
05:18:24,798 --> 05:18:26,240
more to the right to center yourself

10292
05:18:26,240 --> 05:18:28,560
up." um and only correct what they

10293
05:18:28,560 --> 05:18:30,400
actually need to have corrected. This is

10294
05:18:30,400 --> 05:18:31,840
going to be more effective, fewer

10295
05:18:31,840 --> 05:18:33,920
unnecessary instructions, and just more

10296
05:18:33,920 --> 05:18:35,840
simple and less overwhelming. So, the

10297
05:18:35,840 --> 05:18:37,120
moral of the story here is to start

10298
05:18:37,120 --> 05:18:39,040
small, observe errors, and fix one

10299
05:18:39,040 --> 05:18:41,040
problem at a time. So, let's take a look

10300
05:18:41,040 --> 05:18:42,718
at some examples of reactive prompting

10301
05:18:42,718 --> 05:18:44,400
that I've done in my ultimate assistant

10302
05:18:44,400 --> 05:18:45,840
workflow. As you can see right here, I'm

10303
05:18:45,840 --> 05:18:46,878
sure you guys have seen that video by

10304
05:18:46,878 --> 05:18:48,400
now. If you haven't, I'll link it right

10305
05:18:48,400 --> 05:18:50,320
up here. But, I did a ton of reactive

10306
05:18:50,320 --> 05:18:52,000
prompting in here because I have one

10307
05:18:52,000 --> 05:18:53,200
main agent calling four different

10308
05:18:53,200 --> 05:18:55,120
agents. And then within those sub

10309
05:18:55,120 --> 05:18:56,400
agents, they all have different tools

10310
05:18:56,400 --> 05:18:58,000
that they need to call. So this was very

10311
05:18:58,000 --> 05:19:00,400
very reactive when I was prompting this

10312
05:19:00,400 --> 05:19:03,120
workflow or this system of agents. I

10313
05:19:03,120 --> 05:19:04,480
started with no persistent prompt at

10314
05:19:04,480 --> 05:19:06,080
all. I just connected a tool and I

10315
05:19:06,080 --> 05:19:07,840
tested it out to see what happened. So

10316
05:19:07,840 --> 05:19:09,360
an an example would be I hooked up an

10317
05:19:09,360 --> 05:19:10,718
email agent, but I didn't give it in any

10318
05:19:10,718 --> 05:19:12,480
instructions and I running the AI to see

10319
05:19:12,480 --> 05:19:14,080
if it will call the tool automatically.

10320
05:19:14,080 --> 05:19:16,080
A lot of times it will and then it only

10321
05:19:16,080 --> 05:19:17,520
comes to when you add another different

10322
05:19:17,520 --> 05:19:19,280
agent that you need to prompt in, hey,

10323
05:19:19,280 --> 05:19:20,480
these are the two agents you have.

10324
05:19:20,480 --> 05:19:22,798
Here's when to use each one. So anyways,

10325
05:19:22,798 --> 05:19:24,878
adding prompts based on errors. Here I

10326
05:19:24,878 --> 05:19:26,000
have my system prompts. So if you guys

10327
05:19:26,000 --> 05:19:27,280
want to pause it and read through, you

10328
05:19:27,280 --> 05:19:28,878
can take a look. But you can see it's

10329
05:19:28,878 --> 05:19:30,718
very very simple. I've got one example.

10330
05:19:30,718 --> 05:19:32,400
I've got basically one brief rule and

10331
05:19:32,400 --> 05:19:34,080
then I just have all the tools it has

10332
05:19:34,080 --> 05:19:35,920
and when to use them. And it's very very

10333
05:19:35,920 --> 05:19:38,718
concise and not overwhelming. And so

10334
05:19:38,718 --> 05:19:40,000
what I want you guys to pay attention to

10335
05:19:40,000 --> 05:19:41,760
real quick is in the overview right

10336
05:19:41,760 --> 05:19:43,520
here. I said, you know, you're the

10337
05:19:43,520 --> 05:19:44,718
ultimate personal assistant. Your job is

10338
05:19:44,718 --> 05:19:46,240
to send the user's query to the correct

10339
05:19:46,240 --> 05:19:48,000
tool. That's all I had at first. And

10340
05:19:48,000 --> 05:19:49,760
then I was getting this error where I

10341
05:19:49,760 --> 05:19:51,760
was saying, "Hey, write an email to

10342
05:19:51,760 --> 05:19:53,920
Bob." And what was happening is it

10343
05:19:53,920 --> 05:19:56,080
wasn't sending that query to the email

10344
05:19:56,080 --> 05:19:58,080
tool, which is supposed to do. It itself

10345
05:19:58,080 --> 05:19:59,360
was trying to write an email even though

10346
05:19:59,360 --> 05:20:01,200
it has no tool to write an email. So

10347
05:20:01,200 --> 05:20:03,200
then I reactively came in here and said,

10348
05:20:03,200 --> 05:20:05,040
"You should never be writing emails or

10349
05:20:05,040 --> 05:20:06,638
creating event summaries. You just need

10350
05:20:06,638 --> 05:20:08,480
to call the correct tool." And that's

10351
05:20:08,480 --> 05:20:09,600
not something I could have proactively

10352
05:20:09,600 --> 05:20:10,878
put in there because I didn't really

10353
05:20:10,878 --> 05:20:12,798
expect the agent to be doing that. So I

10354
05:20:12,798 --> 05:20:14,000
saw the error and then I basically

10355
05:20:14,000 --> 05:20:16,000
hardcoded in what it should not be doing

10356
05:20:16,000 --> 05:20:18,160
and what it should be doing. So another

10357
05:20:18,160 --> 05:20:19,840
cool example of hard coding stuff in is

10358
05:20:19,840 --> 05:20:21,520
using examples. You know, we all

10359
05:20:21,520 --> 05:20:22,718
understand that examples are going to

10360
05:20:22,718 --> 05:20:24,320
help the agent understand what it needs

10361
05:20:24,320 --> 05:20:26,160
to do based on certain inputs and how to

10362
05:20:26,160 --> 05:20:27,760
use different tools. And so right here

10363
05:20:27,760 --> 05:20:29,280
you can see I added this example, but

10364
05:20:29,280 --> 05:20:30,480
we'll also look at it down here because

10365
05:20:30,480 --> 05:20:32,560
I basically copied it in. What happened

10366
05:20:32,560 --> 05:20:34,400
was the AI failed in a very specific

10367
05:20:34,400 --> 05:20:36,400
scenario. So I added a concrete example

10368
05:20:36,400 --> 05:20:38,320
where I gave it an input, I showed the

10369
05:20:38,320 --> 05:20:40,000
actions it should take, and then I gave

10370
05:20:40,000 --> 05:20:41,680
it the output. So in this case, what

10371
05:20:41,680 --> 05:20:43,280
happened was I asked it to write an

10372
05:20:43,280 --> 05:20:45,040
email to Bob and it tried to send an

10373
05:20:45,040 --> 05:20:46,878
email or try it tried to hit the send

10374
05:20:46,878 --> 05:20:48,240
email agent, but it didn't actually have

10375
05:20:48,240 --> 05:20:49,680
Bob's email address. So the email didn't

10376
05:20:49,680 --> 05:20:51,440
get sent. So what I did here was I put

10377
05:20:51,440 --> 05:20:53,280
in the input, which was send an email to

10378
05:20:53,280 --> 05:20:55,120
Bob asking him what time he wants to

10379
05:20:55,120 --> 05:20:56,878
leave. I then showed the two actions it

10380
05:20:56,878 --> 05:20:58,560
needs to take. The first one was use the

10381
05:20:58,560 --> 05:21:00,480
contact agent to get Bob's email. Send

10382
05:21:00,480 --> 05:21:02,000
this email address to the email agent

10383
05:21:02,000 --> 05:21:03,760
tool. And then the second action is use

10384
05:21:03,760 --> 05:21:05,840
the email agent to send the email. And

10385
05:21:05,840 --> 05:21:07,040
then finally, the output that we want

10386
05:21:07,040 --> 05:21:08,400
the personal assistant to say back to

10387
05:21:08,400 --> 05:21:10,240
the human is, "The email has been sent

10388
05:21:10,240 --> 05:21:11,760
to Bob. Anything else I can help you

10389
05:21:11,760 --> 05:21:13,280
with?" The idea here is you don't need

10390
05:21:13,280 --> 05:21:14,718
to put examples in there that are pretty

10391
05:21:14,718 --> 05:21:16,080
intuitive and that the agent's going to

10392
05:21:16,080 --> 05:21:17,920
get right already. You only want to put

10393
05:21:17,920 --> 05:21:19,840
in examples where you're noticing common

10394
05:21:19,840 --> 05:21:21,600
themes of the agents failing to do this

10395
05:21:21,600 --> 05:21:23,680
every time. I may as well hardcode in

10396
05:21:23,680 --> 05:21:26,560
this example input and output and tool

10397
05:21:26,560 --> 05:21:28,878
calls. So, step four is to debug one

10398
05:21:28,878 --> 05:21:30,798
error at a time. always change one thing

10399
05:21:30,798 --> 05:21:32,638
and one thing only at a time so you know

10400
05:21:32,638 --> 05:21:34,480
exactly what you changed that broke the

10401
05:21:34,480 --> 05:21:36,560
automation. Too too often I'll see

10402
05:21:36,560 --> 05:21:38,638
people just get rid of an entire section

10403
05:21:38,638 --> 05:21:40,320
and then start running things and now

10404
05:21:40,320 --> 05:21:41,760
it's like okay well we're back at square

10405
05:21:41,760 --> 05:21:43,360
one because we don't know exactly what

10406
05:21:43,360 --> 05:21:44,718
happened. So you want to get to the

10407
05:21:44,718 --> 05:21:46,080
point where you're adding one sentence,

10408
05:21:46,080 --> 05:21:47,440
you're hitting run and it's either

10409
05:21:47,440 --> 05:21:49,200
fixing it or it's not fixing it and then

10410
05:21:49,200 --> 05:21:50,718
you know exactly what to do. You know

10411
05:21:50,718 --> 05:21:52,160
exactly what broke or fixed your

10412
05:21:52,160 --> 05:21:53,920
automation. And so one thing honestly I

10413
05:21:53,920 --> 05:21:55,760
want to admit here is I created that

10414
05:21:55,760 --> 05:21:57,200
system prompt generator on my free

10415
05:21:57,200 --> 05:21:59,360
school community. Um, and really the

10416
05:21:59,360 --> 05:22:00,718
idea there was just to help you with the

10417
05:22:00,718 --> 05:22:02,560
formatting because I don't really use

10418
05:22:02,560 --> 05:22:04,160
that thing anymore because the fact that

10419
05:22:04,160 --> 05:22:06,080
doing that is very proactive in the

10420
05:22:06,080 --> 05:22:08,320
sense that we're dropping in a sort of a

10421
05:22:08,320 --> 05:22:10,480
query into chat GBT, the custom GPT I

10422
05:22:10,480 --> 05:22:12,080
built, it's giving us a system prompt

10423
05:22:12,080 --> 05:22:13,280
and then we're putting that whole thing

10424
05:22:13,280 --> 05:22:14,638
in the agent and then just running it

10425
05:22:14,638 --> 05:22:16,400
and testing it. And in that case, you

10426
05:22:16,400 --> 05:22:17,440
don't know exactly what you should

10427
05:22:17,440 --> 05:22:19,760
change to fix little issues. So, just

10428
05:22:19,760 --> 05:22:21,120
wanted to throw that out there. I don't

10429
05:22:21,120 --> 05:22:22,638
really use that system prompt generator

10430
05:22:22,638 --> 05:22:25,440
anymore. I now always like handcraft my

10431
05:22:25,440 --> 05:22:27,440
prompts. Anyways, from there, what you

10432
05:22:27,440 --> 05:22:29,360
want to do is scale up slowly. So once

10433
05:22:29,360 --> 05:22:30,560
you confirm that the agent is

10434
05:22:30,560 --> 05:22:32,080
consistently working with its first tool

10435
05:22:32,080 --> 05:22:34,000
and its first rule in its prompt, then

10436
05:22:34,000 --> 05:22:36,718
you can slowly add more tools and more

10437
05:22:36,718 --> 05:22:38,798
prompt rules. So here's an example.

10438
05:22:38,798 --> 05:22:40,320
You'll add a tool. You'll add a sentence

10439
05:22:40,320 --> 05:22:42,320
in the prompt about the tool. Test out a

10440
05:22:42,320 --> 05:22:44,400
few scenarios. If it's working well, you

10441
05:22:44,400 --> 05:22:45,840
can then add another tool and keep

10442
05:22:45,840 --> 05:22:47,760
testing out and slowly adding pieces.

10443
05:22:47,760 --> 05:22:48,958
But if it's not, then obviously you'll

10444
05:22:48,958 --> 05:22:50,320
just hard prompt in the changes of what

10445
05:22:50,320 --> 05:22:52,240
it's doing wrong and how to fix that.

10446
05:22:52,240 --> 05:22:53,440
From there, you'll just test out a few

10447
05:22:53,440 --> 05:22:55,440
more scenarios. Um, and then you can

10448
05:22:55,440 --> 05:22:56,798
just kind of rinse and repeat until you

10449
05:22:56,798 --> 05:22:58,080
have all the functionality that you're

10450
05:22:58,080 --> 05:22:59,920
looking for. All right, now let's look

10451
05:22:59,920 --> 05:23:01,520
at the core components of an effective

10452
05:23:01,520 --> 05:23:03,440
prompt. Each agent you design should

10453
05:23:03,440 --> 05:23:04,958
follow a structured prompt to ensure

10454
05:23:04,958 --> 05:23:07,520
clarity, consistency, and efficiency.

10455
05:23:07,520 --> 05:23:09,200
Now, there's a ton of different types of

10456
05:23:09,200 --> 05:23:10,718
prompting you can do based on the role

10457
05:23:10,718 --> 05:23:12,958
of agent. Ultimately, they're going to

10458
05:23:12,958 --> 05:23:14,638
fall under one of these three buckets,

10459
05:23:14,638 --> 05:23:16,240
which is toolbased prompting,

10460
05:23:16,240 --> 05:23:17,680
conversational prompting, or like

10461
05:23:17,680 --> 05:23:19,280
content creation type prompting, and

10462
05:23:19,280 --> 05:23:20,360
then

10463
05:23:20,360 --> 05:23:22,080
categorization/ealuation prompting. And

10464
05:23:22,080 --> 05:23:23,360
the reason I wanted to highlight that is

10465
05:23:23,360 --> 05:23:24,560
because obviously if we're creating like

10466
05:23:24,560 --> 05:23:26,240
a content creation agent, we're not

10467
05:23:26,240 --> 05:23:27,600
going to say what tools it has if it has

10468
05:23:27,600 --> 05:23:29,360
no tools. But um yeah, I just wanted to

10469
05:23:29,360 --> 05:23:30,878
throw that out there. And another thing

10470
05:23:30,878 --> 05:23:32,878
to keep in mind is I really like using

10471
05:23:32,878 --> 05:23:34,480
markdown formatting for my prompts. As

10472
05:23:34,480 --> 05:23:35,920
you can see these examples, we've got

10473
05:23:35,920 --> 05:23:37,680
like different headers with pound signs

10474
05:23:37,680 --> 05:23:39,200
and we're able to specify like different

10475
05:23:39,200 --> 05:23:40,878
sections. We can use bolded lists. We

10476
05:23:40,878 --> 05:23:42,638
can use numbered lists. I've seen some

10477
05:23:42,638 --> 05:23:44,080
people talk about using XML for

10478
05:23:44,080 --> 05:23:45,920
prompting. I'm not a huge fan of it

10479
05:23:45,920 --> 05:23:48,000
because um as far as human readability,

10480
05:23:48,000 --> 05:23:49,440
I think markdown just makes a lot more

10481
05:23:49,440 --> 05:23:52,000
sense. So that's what I do. Anyways, now

10482
05:23:52,000 --> 05:23:53,280
let's talk about the main sections that

10483
05:23:53,280 --> 05:23:55,120
I include in my prompts. The first one

10484
05:23:55,120 --> 05:23:56,798
is always a background. So whether this

10485
05:23:56,798 --> 05:24:00,160
is a role or a purpose or a context, I

10486
05:24:00,160 --> 05:24:01,440
typically call it something like an

10487
05:24:01,440 --> 05:24:03,200
overview. But anyways, just giving it

10488
05:24:03,200 --> 05:24:04,958
some sort of background that defines who

10489
05:24:04,958 --> 05:24:07,280
the agent is, what its overall goal is.

10490
05:24:07,280 --> 05:24:08,958
And this really sets the foundation of,

10491
05:24:08,958 --> 05:24:10,160
you know, sort of identifying their

10492
05:24:10,160 --> 05:24:12,560
persona, their behavior. And if you

10493
05:24:12,560 --> 05:24:14,240
don't have the section, the agent is

10494
05:24:14,240 --> 05:24:16,000
kind of going to lack direction and it's

10495
05:24:16,000 --> 05:24:17,840
going to generate really generic or

10496
05:24:17,840 --> 05:24:21,280
unfocused outputs. So set its role and

10497
05:24:21,280 --> 05:24:22,400
this could be really simple. You can

10498
05:24:22,400 --> 05:24:23,760
kind of follow this template of you are

10499
05:24:23,760 --> 05:24:25,760
a blank agent designed to do blank. Your

10500
05:24:25,760 --> 05:24:27,760
goal is blank. So you are a travel

10501
05:24:27,760 --> 05:24:29,280
planning AI assistant that helps users

10502
05:24:29,280 --> 05:24:31,120
plan their vacations. Your goal is to

10503
05:24:31,120 --> 05:24:32,878
pro provide detailed personalized travel

10504
05:24:32,878 --> 05:24:35,200
itineraries based on the user's input.

10505
05:24:35,200 --> 05:24:36,878
Then we have tools. This is obviously

10506
05:24:36,878 --> 05:24:38,638
super super important when we're doing

10507
05:24:38,638 --> 05:24:40,320
sort of non-deterministic agent

10508
05:24:40,320 --> 05:24:41,680
workflows where they're going to have a

10509
05:24:41,680 --> 05:24:42,798
bunch of different tools and they have

10510
05:24:42,798 --> 05:24:44,878
to use their brain, their chat model to

10511
05:24:44,878 --> 05:24:46,718
understand which tool does what and when

10512
05:24:46,718 --> 05:24:48,718
to use each one. So, this section tells

10513
05:24:48,718 --> 05:24:50,160
the agent what tools it has access to

10514
05:24:50,160 --> 05:24:52,160
and when to use them. It ensures the AI

10515
05:24:52,160 --> 05:24:53,440
selects the right tool for the right

10516
05:24:53,440 --> 05:24:55,280
task. And a well structured tools

10517
05:24:55,280 --> 05:24:57,040
section prevents confusion and obviously

10518
05:24:57,040 --> 05:24:59,040
makes AI more efficient. So, here's an

10519
05:24:59,040 --> 05:25:00,480
example of what it could look like. We

10520
05:25:00,480 --> 05:25:02,638
have like the markdown header of tools

10521
05:25:02,638 --> 05:25:04,000
and then we have like a numbered list.

10522
05:25:04,000 --> 05:25:05,440
We're also showing that the tools are in

10523
05:25:05,440 --> 05:25:06,878
bold. This doesn't have to be the way

10524
05:25:06,878 --> 05:25:08,400
you do it, but sometimes I like to show

10525
05:25:08,400 --> 05:25:10,718
them in bold. Um, and it's you can see

10526
05:25:10,718 --> 05:25:12,240
it's really simple. It's it's not too

10527
05:25:12,240 --> 05:25:13,600
much. It's not overwhelming. It's not

10528
05:25:13,600 --> 05:25:16,240
too um you know, it's just very clear.

10529
05:25:16,240 --> 05:25:17,680
Google search, use this tool when the

10530
05:25:17,680 --> 05:25:19,680
user asks for real-time information.

10531
05:25:19,680 --> 05:25:21,360
Email sender, use this tool when the

10532
05:25:21,360 --> 05:25:22,958
user wants to send a message. Super

10533
05:25:22,958 --> 05:25:24,320
simple. And what else you can do is you

10534
05:25:24,320 --> 05:25:26,240
can define when to use each tool. So

10535
05:25:26,240 --> 05:25:27,840
right here we say we have a contact

10536
05:25:27,840 --> 05:25:29,760
database. Use this tool to get contact

10537
05:25:29,760 --> 05:25:31,920
information. You must use this before

10538
05:25:31,920 --> 05:25:34,000
using the email generator tool because

10539
05:25:34,000 --> 05:25:35,280
otherwise it won't know who to send the

10540
05:25:35,280 --> 05:25:36,798
email to. So you can actually define

10541
05:25:36,798 --> 05:25:38,878
these little rules. Keep it very clear

10542
05:25:38,878 --> 05:25:41,440
within the actual tool layer of the

10543
05:25:41,440 --> 05:25:43,440
prompt. And then we have instructions. I

10544
05:25:43,440 --> 05:25:44,958
usually call them rules as you can see.

10545
05:25:44,958 --> 05:25:46,320
Um, you could maybe even call it like a

10546
05:25:46,320 --> 05:25:48,000
standard operating procedure. But what

10547
05:25:48,000 --> 05:25:49,920
this does, it outlines specific rules

10548
05:25:49,920 --> 05:25:52,000
for the agent to follow. It dictates the

10549
05:25:52,000 --> 05:25:54,000
order of operations at a high level.

10550
05:25:54,000 --> 05:25:55,360
Just keep in mind, you don't want to say

10551
05:25:55,360 --> 05:25:57,760
do this in this order every time because

10552
05:25:57,760 --> 05:25:58,958
then it's like, why are you even using

10553
05:25:58,958 --> 05:26:00,638
an agent? The whole point of an agent is

10554
05:26:00,638 --> 05:26:01,920
that it's, you know, it's taking an

10555
05:26:01,920 --> 05:26:03,520
input and something happens in this

10556
05:26:03,520 --> 05:26:04,718
black box where it's calling different

10557
05:26:04,718 --> 05:26:06,400
tools. It may call this one twice. It

10558
05:26:06,400 --> 05:26:07,680
may call this one three times. It may

10559
05:26:07,680 --> 05:26:10,160
call them none at all. Um, the idea is

10560
05:26:10,160 --> 05:26:11,360
that it's variable. It's not

10561
05:26:11,360 --> 05:26:13,680
deterministic. So, if you're saying do

10562
05:26:13,680 --> 05:26:15,680
it and this every time, then you should

10563
05:26:15,680 --> 05:26:17,280
just be using a sequential workflow. It

10564
05:26:17,280 --> 05:26:18,638
shouldn't even be an agent. But

10565
05:26:18,638 --> 05:26:20,240
obviously, the rules section helps

10566
05:26:20,240 --> 05:26:22,000
prevent misunderstandings. So, here's

10567
05:26:22,000 --> 05:26:23,680
like a high level instruction, right?

10568
05:26:23,680 --> 05:26:25,440
You're greeting the user politely. If

10569
05:26:25,440 --> 05:26:26,560
the user provides incomplete

10570
05:26:26,560 --> 05:26:27,680
information, you ask follow-up

10571
05:26:27,680 --> 05:26:29,600
questions. Use the available tools only

10572
05:26:29,600 --> 05:26:31,280
when necessary. Structure your response

10573
05:26:31,280 --> 05:26:33,120
in clear, concise sentences. So, this

10574
05:26:33,120 --> 05:26:34,400
isn't saying like you do this in this

10575
05:26:34,400 --> 05:26:35,600
order every time. It's just saying when

10576
05:26:35,600 --> 05:26:37,440
this happens, do this. If this happens,

10577
05:26:37,440 --> 05:26:39,680
do that. So, here's an example for AI

10578
05:26:39,680 --> 05:26:41,680
task manager. When a task is added, you

10579
05:26:41,680 --> 05:26:43,520
confirm with the user. If a deadline is

10580
05:26:43,520 --> 05:26:45,440
missing, ask the user to specify one. If

10581
05:26:45,440 --> 05:26:46,958
a task priority is high, send a

10582
05:26:46,958 --> 05:26:48,958
notification. Store all tasks in the

10583
05:26:48,958 --> 05:26:50,638
task management system. So, it's very

10584
05:26:50,638 --> 05:26:52,560
clear, too. Um, we don't need all these

10585
05:26:52,560 --> 05:26:54,320
extra filler words because remember, the

10586
05:26:54,320 --> 05:26:56,160
AI can understand what you're saying as

10587
05:26:56,160 --> 05:26:58,638
long as it has like the actual context

10588
05:26:58,638 --> 05:26:59,840
words that have meaning. You don't need

10589
05:26:59,840 --> 05:27:01,600
all these little fillers. Um, you don't

10590
05:27:01,600 --> 05:27:03,840
need these long sentences. So, moving on

10591
05:27:03,840 --> 05:27:05,600
to examples, which you know, sample

10592
05:27:05,600 --> 05:27:07,840
inputs and outputs and also actions

10593
05:27:07,840 --> 05:27:09,360
within those between the inputs and

10594
05:27:09,360 --> 05:27:11,040
outputs. But this helps the AI

10595
05:27:11,040 --> 05:27:12,718
understand expectations by showing real

10596
05:27:12,718 --> 05:27:14,240
examples. And these are the things that

10597
05:27:14,240 --> 05:27:15,920
I love to hard code in there, hard

10598
05:27:15,920 --> 05:27:18,160
prompt in there. Because like I said,

10599
05:27:18,160 --> 05:27:19,840
there's no point in showing an example

10600
05:27:19,840 --> 05:27:21,520
if the AI was already going to get that

10601
05:27:21,520 --> 05:27:23,280
input and output right every time. You

10602
05:27:23,280 --> 05:27:24,718
just want to see what it's messing up on

10603
05:27:24,718 --> 05:27:26,718
and then put an example in and show it

10604
05:27:26,718 --> 05:27:28,878
how to fix itself. So more clear

10605
05:27:28,878 --> 05:27:30,160
guidance and it's going to give you more

10606
05:27:30,160 --> 05:27:31,760
accurate and consistent outputs. Here's

10607
05:27:31,760 --> 05:27:33,120
an example where we get the input that

10608
05:27:33,120 --> 05:27:34,638
says, can you generate a trip plan for

10609
05:27:34,638 --> 05:27:36,718
Paris for 5 days? The action you're

10610
05:27:36,718 --> 05:27:37,840
going to take is first call the trip

10611
05:27:37,840 --> 05:27:40,558
planner tool to get X, Y, and Z. Then

10612
05:27:40,558 --> 05:27:41,760
you're going to take another action

10613
05:27:41,760 --> 05:27:43,280
which is calling the email tool to send

10614
05:27:43,280 --> 05:27:44,958
the itinerary. And then finally, the

10615
05:27:44,958 --> 05:27:46,558
output should look something like this.

10616
05:27:46,558 --> 05:27:49,040
Here's a 5-day Paris itinerary. Day 1,

10617
05:27:49,040 --> 05:27:51,760
day 2, day 3, day 4, day 5. And then I

10618
05:27:51,760 --> 05:27:53,440
typically end my prompts with like a

10619
05:27:53,440 --> 05:27:55,200
final notes or important reminders

10620
05:27:55,200 --> 05:27:56,718
section, which just has like some

10621
05:27:56,718 --> 05:27:58,558
miscellaneous but important reminders.

10622
05:27:58,558 --> 05:27:59,840
It could be current date and time, it

10623
05:27:59,840 --> 05:28:02,320
could be rate limits, it could be um

10624
05:28:02,320 --> 05:28:03,680
something as simple as like don't put

10625
05:28:03,680 --> 05:28:07,200
any emojis in the output. Um, and

10626
05:28:07,200 --> 05:28:09,600
sometimes why I do this is because

10627
05:28:09,600 --> 05:28:11,040
something can get lost within your

10628
05:28:11,040 --> 05:28:13,040
prompt. And sometimes like I I've thrown

10629
05:28:13,040 --> 05:28:14,798
the today's date up top, but then it

10630
05:28:14,798 --> 05:28:16,320
only actually realizes it when it's in

10631
05:28:16,320 --> 05:28:18,080
the bottom. So playing around with the

10632
05:28:18,080 --> 05:28:19,600
actual like location of your things can

10633
05:28:19,600 --> 05:28:22,320
be sometimes help it out. Um, and so

10634
05:28:22,320 --> 05:28:23,600
having a final notes section at the

10635
05:28:23,600 --> 05:28:25,040
bottom, not with too many notes, but

10636
05:28:25,040 --> 05:28:26,958
just some quick things to remember like

10637
05:28:26,958 --> 05:28:28,798
always format responses as markdown.

10638
05:28:28,798 --> 05:28:30,638
Here's today's date. If unsure about an

10639
05:28:30,638 --> 05:28:31,920
answer, say I don't have that

10640
05:28:31,920 --> 05:28:33,200
information. So just little

10641
05:28:33,200 --> 05:28:35,280
miscellaneous things like that. Now, I

10642
05:28:35,280 --> 05:28:36,160
wanted to quickly talk about some

10643
05:28:36,160 --> 05:28:38,160
honorable mentions because like I said

10644
05:28:38,160 --> 05:28:40,240
earlier, the prompt sections and

10645
05:28:40,240 --> 05:28:42,638
components varies based on the actual

10646
05:28:42,638 --> 05:28:44,638
type of agent you're building. So, in

10647
05:28:44,638 --> 05:28:46,400
the case of like a content creator agent

10648
05:28:46,400 --> 05:28:48,718
that has no tools, um you wouldn't give

10649
05:28:48,718 --> 05:28:50,080
it a tool section, but you may want to

10650
05:28:50,080 --> 05:28:51,840
give it an output section. So, here's an

10651
05:28:51,840 --> 05:28:53,200
output section that I had recently done

10652
05:28:53,200 --> 05:28:55,760
for my voice travel agent. Um, which if

10653
05:28:55,760 --> 05:28:57,200
you want to see that video, I'll drop a

10654
05:28:57,200 --> 05:28:59,040
link right here. But what I did was I

10655
05:28:59,040 --> 05:29:00,320
just basically included rules for the

10656
05:29:00,320 --> 05:29:01,680
output because the output was very

10657
05:29:01,680 --> 05:29:03,840
specific with HTML format and it had to

10658
05:29:03,840 --> 05:29:05,040
be very structured and I wanted

10659
05:29:05,040 --> 05:29:07,120
horizontal lines. So I created a whole

10660
05:29:07,120 --> 05:29:09,040
section dedicated towards output format

10661
05:29:09,040 --> 05:29:11,440
as you can see. And because I used three

10662
05:29:11,440 --> 05:29:13,600
pound signs for these subsections, the

10663
05:29:13,600 --> 05:29:15,200
agent was able to understand that all

10664
05:29:15,200 --> 05:29:17,840
this rolled up into the format of the

10665
05:29:17,840 --> 05:29:19,920
output section right here. So anyways, I

10666
05:29:19,920 --> 05:29:21,280
said the email should be structured as

10667
05:29:21,280 --> 05:29:23,120
HTML that will be sent through email.

10668
05:29:23,120 --> 05:29:25,040
Use headers to separate each section.

10669
05:29:25,040 --> 05:29:26,958
Add a horizontal line to each section.

10670
05:29:26,958 --> 05:29:28,480
Um, I said what it what should be in the

10671
05:29:28,480 --> 05:29:29,920
subject. I said what should be in the

10672
05:29:29,920 --> 05:29:31,680
introduction section. I said how you

10673
05:29:31,680 --> 05:29:33,280
should list these departure dates,

10674
05:29:33,280 --> 05:29:34,878
return dates, flights for the flight

10675
05:29:34,878 --> 05:29:36,718
section. Um, here's something where I

10676
05:29:36,718 --> 05:29:39,120
basically gave it like the HTML image

10677
05:29:39,120 --> 05:29:41,200
tag and I showed how to put the image in

10678
05:29:41,200 --> 05:29:42,878
there. I showed to make I said like make

10679
05:29:42,878 --> 05:29:45,600
a inline image rather than um an

10680
05:29:45,600 --> 05:29:47,440
attachment. I said to have each resort

10681
05:29:47,440 --> 05:29:49,120
with a clickable link. I also was able

10682
05:29:49,120 --> 05:29:51,440
to adjust the actual width percentage of

10683
05:29:51,440 --> 05:29:53,440
the image by specifying that here in the

10684
05:29:53,440 --> 05:29:56,320
prompt. Um, so yeah, this was just

10685
05:29:56,320 --> 05:29:57,760
getting really detailed about the way we

10686
05:29:57,760 --> 05:29:59,440
want the actual format to be structured.

10687
05:29:59,440 --> 05:30:00,638
You can see here we have activities that

10688
05:30:00,638 --> 05:30:02,558
I actually misspelled in my agent, but

10689
05:30:02,558 --> 05:30:04,638
it didn't matter. Um, and then finally

10690
05:30:04,638 --> 05:30:06,400
just a sign off. And then just some

10691
05:30:06,400 --> 05:30:08,400
final additional honorable mentions,

10692
05:30:08,400 --> 05:30:10,000
something like memory and context

10693
05:30:10,000 --> 05:30:12,480
management, um, some reasoning, some

10694
05:30:12,480 --> 05:30:14,160
error handling, but typically I think

10695
05:30:14,160 --> 05:30:15,840
that these can be just kind of one or

10696
05:30:15,840 --> 05:30:17,280
two sentences that can usually go in

10697
05:30:17,280 --> 05:30:19,360
like the rules or instructions section,

10698
05:30:19,360 --> 05:30:21,280
but it depends on the use case, like I

10699
05:30:21,280 --> 05:30:22,558
said. So, if it needs to be pretty

10700
05:30:22,558 --> 05:30:24,320
robust, then creating an individual

10701
05:30:24,320 --> 05:30:26,638
section at the bottom called memory or

10702
05:30:26,638 --> 05:30:28,638
error handling could be worth it. It

10703
05:30:28,638 --> 05:30:31,440
just depends on, like I said, the actual

10704
05:30:31,440 --> 05:30:32,958
use case and the goal of the agent.

10705
05:30:32,958 --> 05:30:34,160
Okay, cool. So, now that we've got

10706
05:30:34,160 --> 05:30:35,360
through that document, let's hop into

10707
05:30:35,360 --> 05:30:37,040
Nitn and we'll just do some really quick

10708
05:30:37,040 --> 05:30:38,840
examples of some reactive live

10709
05:30:38,840 --> 05:30:40,638
prompting. Okay, so I'm going to hit

10710
05:30:40,638 --> 05:30:42,080
tab. I'm going to type in AI agent.

10711
05:30:42,080 --> 05:30:43,360
We're going to grab one and we're going

10712
05:30:43,360 --> 05:30:44,958
to be communicating with it through this

10713
05:30:44,958 --> 05:30:46,798
connected chat trigger node. Now, I'm

10714
05:30:46,798 --> 05:30:47,920
going to add a chat model real quick

10715
05:30:47,920 --> 05:30:49,280
just so we can get set up up and

10716
05:30:49,280 --> 05:30:51,040
running. We have our 40 Mini. We're good

10717
05:30:51,040 --> 05:30:52,958
to go. And just a reminder, there is

10718
05:30:52,958 --> 05:30:54,798
zero assistant prompt in here. All it is

10719
05:30:54,798 --> 05:30:57,200
is that you are a helpful assistant. So,

10720
05:30:57,200 --> 05:30:58,400
what's the first thing to do is we want

10721
05:30:58,400 --> 05:31:00,320
to add a tool. Test it out. So, I'm

10722
05:31:00,320 --> 05:31:03,040
going to add a um Google calendar tool.

10723
05:31:03,040 --> 05:31:05,040
I'm just going to obviously select my

10724
05:31:05,040 --> 05:31:07,600
calendar to pull from. I'm going to, you

10725
05:31:07,600 --> 05:31:08,958
know, fill in those parameters using the

10726
05:31:08,958 --> 05:31:10,638
model by clicking that button. And I'm

10727
05:31:10,638 --> 05:31:11,600
just going to say this one's called

10728
05:31:11,600 --> 05:31:14,638
create event. So, we have create event.

10729
05:31:14,638 --> 05:31:15,760
And so, now we're going to do our test

10730
05:31:15,760 --> 05:31:17,600
and see if the tool is working properly.

10731
05:31:17,600 --> 05:31:20,320
I'm going to say create an event for

10732
05:31:20,320 --> 05:31:23,760
tonight at 700 p.m. So send this off. We

10733
05:31:23,760 --> 05:31:25,760
should see the agents able to understand

10734
05:31:25,760 --> 05:31:27,360
to use this create event tool because

10735
05:31:27,360 --> 05:31:29,760
it's using an automatic description. But

10736
05:31:29,760 --> 05:31:31,600
now we see an issue. It created the

10737
05:31:31,600 --> 05:31:34,480
start time for October 12th, 2023 and

10738
05:31:34,480 --> 05:31:36,080
the end time for also October 12th,

10739
05:31:36,080 --> 05:31:38,080
2023. So this is our first instance of

10740
05:31:38,080 --> 05:31:39,840
reactive prompting. It's calling the

10741
05:31:39,840 --> 05:31:41,520
tool correctly. So we don't really need

10742
05:31:41,520 --> 05:31:43,200
to prompt in like the actual tool name

10743
05:31:43,200 --> 05:31:45,600
yet. Um it's probably best practice just

10744
05:31:45,600 --> 05:31:47,440
to just to do so. But first, I'm just

10745
05:31:47,440 --> 05:31:49,440
going to give an overview and say you

10746
05:31:49,440 --> 05:31:52,320
are a calendar. Actually, no. I'm just

10747
05:31:52,320 --> 05:31:54,400
going to say you are a helpful assistant

10748
05:31:54,400 --> 05:31:56,240
because that's all it is right now. And

10749
05:31:56,240 --> 05:31:57,360
we don't know what else we're adding

10750
05:31:57,360 --> 05:31:59,840
into this guy. But now we'll just say

10751
05:31:59,840 --> 05:32:02,638
tools is create event just so it's

10752
05:32:02,638 --> 05:32:06,878
aware. Use this to create an event. And

10753
05:32:06,878 --> 05:32:11,360
then we want to say final notes. um here

10754
05:32:11,360 --> 05:32:14,638
is the current date and time because

10755
05:32:14,638 --> 05:32:16,080
that's where it messed up is because it

10756
05:32:16,080 --> 05:32:17,520
didn't know the current date and time

10757
05:32:17,520 --> 05:32:18,958
even though it was able to call the

10758
05:32:18,958 --> 05:32:20,878
correct tool. So now we'll just send

10759
05:32:20,878 --> 05:32:22,240
this same thing off again and that

10760
05:32:22,240 --> 05:32:24,160
should have fixed it. We reactively

10761
05:32:24,160 --> 05:32:26,798
fixed the error and um we're just making

10762
05:32:26,798 --> 05:32:28,638
sure that it is working as it should

10763
05:32:28,638 --> 05:32:30,638
now. Okay, there we go. It just hit the

10764
05:32:30,638 --> 05:32:31,920
tool and it says the event has been

10765
05:32:31,920 --> 05:32:34,080
created for tonight at 7 p.m. And if I

10766
05:32:34,080 --> 05:32:35,200
click into my calendar, you can see

10767
05:32:35,200 --> 05:32:36,400
right there we have the event that was

10768
05:32:36,400 --> 05:32:38,320
just created. So cool. Now that's

10769
05:32:38,320 --> 05:32:39,680
working. What we're going to do now is

10770
05:32:39,680 --> 05:32:40,878
add another tool. So, we'll drag this

10771
05:32:40,878 --> 05:32:42,638
one over here. And let's say we want to

10772
05:32:42,638 --> 05:32:44,878
do a send email tool. We're going to

10773
05:32:44,878 --> 05:32:46,160
send a message. We're going to change

10774
05:32:46,160 --> 05:32:48,480
the name to send email. And just so you

10775
05:32:48,480 --> 05:32:50,000
guys are aware like how it's able to

10776
05:32:50,000 --> 05:32:52,000
know right here, tool description, we're

10777
05:32:52,000 --> 05:32:53,680
setting automatically. If we set

10778
05:32:53,680 --> 05:32:55,440
manually, we would just say, you know,

10779
05:32:55,440 --> 05:32:57,440
use this tool to send an email. But we

10780
05:32:57,440 --> 05:32:59,040
can just keep it simple. Leave it as set

10781
05:32:59,040 --> 05:33:01,200
automatic. I'm going to turn on to

10782
05:33:01,200 --> 05:33:04,160
subject and message as defined by the

10783
05:33:04,160 --> 05:33:06,000
model. And that's going to be it. So now

10784
05:33:06,000 --> 05:33:07,120
we just want to test this thing again

10785
05:33:07,120 --> 05:33:09,040
before we add any prompts. We'll say

10786
05:33:09,040 --> 05:33:12,040
send an email to

10787
05:33:12,040 --> 05:33:15,200
bobacample.com asking what's up. We'll

10788
05:33:15,200 --> 05:33:16,718
send this off. Hopefully it's hitting

10789
05:33:16,718 --> 05:33:17,840
the right tool. So we should see there

10790
05:33:17,840 --> 05:33:19,440
we go. It hit the send email tool and

10791
05:33:19,440 --> 05:33:21,280
the email got sent. We can come in here

10792
05:33:21,280 --> 05:33:23,040
and check everything was sent correctly.

10793
05:33:23,040 --> 05:33:24,638
Although what we noticed is it's signing

10794
05:33:24,638 --> 05:33:27,040
off as best placeholder your name and we

10795
05:33:27,040 --> 05:33:28,878
don't want to do that. So let's come in

10796
05:33:28,878 --> 05:33:31,600
here and let's add a tool section for

10797
05:33:31,600 --> 05:33:33,360
this tool and we'll tell it how to how

10798
05:33:33,360 --> 05:33:35,680
to act. So send email. That's another

10799
05:33:35,680 --> 05:33:37,280
tool it has. And we're going to say use

10800
05:33:37,280 --> 05:33:39,240
this to send an

10801
05:33:39,240 --> 05:33:41,840
email. Then we're going to say sign off

10802
05:33:41,840 --> 05:33:45,280
emails as Frank. Okay. So that's

10803
05:33:45,280 --> 05:33:47,440
reactively fixing an error we saw. I'm

10804
05:33:47,440 --> 05:33:48,798
just now going to send off that same

10805
05:33:48,798 --> 05:33:50,480
query. We already know that it knows how

10806
05:33:50,480 --> 05:33:51,520
to call the tool. So it's going to do

10807
05:33:51,520 --> 05:33:53,440
that once again. There we go. We see the

10808
05:33:53,440 --> 05:33:55,040
email was sent. And now we have a sign

10809
05:33:55,040 --> 05:33:56,958
off as Frank. So that's two problems

10810
05:33:56,958 --> 05:33:58,798
we've seen. And then we've added one

10811
05:33:58,798 --> 05:34:00,638
super short line into the system prompt

10812
05:34:00,638 --> 05:34:02,718
and fixed those problems. Now let's do

10813
05:34:02,718 --> 05:34:04,878
something else. Let's say in Gmail we

10814
05:34:04,878 --> 05:34:08,878
want to be able to label an email. And

10815
05:34:08,878 --> 05:34:10,680
in order to label an email, as you can

10816
05:34:10,680 --> 05:34:13,600
see, add label to a message, we need a

10817
05:34:13,600 --> 05:34:15,840
message ID and we need a label name or

10818
05:34:15,840 --> 05:34:17,920
an ID for that label. And this is we

10819
05:34:17,920 --> 05:34:19,440
could choose from a list, but more

10820
05:34:19,440 --> 05:34:21,040
realistically, we want the label ID to

10821
05:34:21,040 --> 05:34:23,440
be pulled in dynamically. So if we need

10822
05:34:23,440 --> 05:34:24,798
to get these two things, what we have to

10823
05:34:24,798 --> 05:34:26,878
do is first get emails and also get

10824
05:34:26,878 --> 05:34:28,798
labels. So first I'm going to do get

10825
05:34:28,798 --> 05:34:30,798
many. I'm going to say this is using,

10826
05:34:30,798 --> 05:34:32,638
you know, we're we're calling this tool

10827
05:34:32,638 --> 05:34:34,958
get get emails. And then we don't want

10828
05:34:34,958 --> 05:34:37,200
to return all. We want to do a limit.

10829
05:34:37,200 --> 05:34:38,558
And we also want to choose from a

10830
05:34:38,558 --> 05:34:40,240
sender. So we'll have this also be

10831
05:34:40,240 --> 05:34:44,080
dynamically chosen. So cool. We don't

10832
05:34:44,080 --> 05:34:45,440
have a system prompt in here about this

10833
05:34:45,440 --> 05:34:48,878
tool, but we're just going to say get my

10834
05:34:48,878 --> 05:34:52,638
last email from Nate Herkman. So we'll

10835
05:34:52,638 --> 05:34:53,840
send that off. It should be hitting the

10836
05:34:53,840 --> 05:34:55,920
get emails tool, filling in Nate Herkman

10837
05:34:55,920 --> 05:34:57,600
as the sender. And now we can see that

10838
05:34:57,600 --> 05:34:59,040
we just got this email with a subject

10839
05:34:59,040 --> 05:35:01,280
hello. We have the message ID right

10840
05:35:01,280 --> 05:35:03,120
here. So that's perfect. And now what we

10841
05:35:03,120 --> 05:35:04,718
need to do is we need to create a tool

10842
05:35:04,718 --> 05:35:06,400
to get the label ID. So I'm going to

10843
05:35:06,400 --> 05:35:08,798
come in here and I'm going to say um get

10844
05:35:08,798 --> 05:35:11,360
many and we're going to go to label.

10845
05:35:11,360 --> 05:35:14,558
We're going to do um actually we'll just

10846
05:35:14,558 --> 05:35:16,240
return all. That works. There's not too

10847
05:35:16,240 --> 05:35:17,920
many labels in there. Um and we have to

10848
05:35:17,920 --> 05:35:19,120
name this tool of course. So we're going

10849
05:35:19,120 --> 05:35:22,480
to call this get labels. So once again

10850
05:35:22,480 --> 05:35:24,480
there's no tools in or no prompt in here

10851
05:35:24,480 --> 05:35:26,798
about these two tools at all. and we're

10852
05:35:26,798 --> 05:35:29,160
gonna say get my

10853
05:35:29,160 --> 05:35:31,280
email labels. We'll see if it hits the

10854
05:35:31,280 --> 05:35:34,638
right tool. There we go. It did. And it

10855
05:35:34,638 --> 05:35:36,320
is going to basically just tell us, you

10856
05:35:36,320 --> 05:35:37,760
know, here they are. So, here are our

10857
05:35:37,760 --> 05:35:40,400
different labels. Um, and here are the

10858
05:35:40,400 --> 05:35:42,160
ones that we created. So, promotion,

10859
05:35:42,160 --> 05:35:43,440
customer support, high priority,

10860
05:35:43,440 --> 05:35:46,718
finance, and billing. Cool. So, now we

10861
05:35:46,718 --> 05:35:48,958
can try to actually label an email. So,

10862
05:35:48,958 --> 05:35:51,920
that email that we just got from um from

10863
05:35:51,920 --> 05:35:54,000
Nate Hkelman that said hello, let's try

10864
05:35:54,000 --> 05:35:55,440
to label that one. So, I'm going to add

10865
05:35:55,440 --> 05:35:57,600
another Gmail tool, and this one's going

10866
05:35:57,600 --> 05:36:00,160
to be add a label to a message. And we

10867
05:36:00,160 --> 05:36:01,840
need the message ID and the label ID.

10868
05:36:01,840 --> 05:36:03,840
So, I'm just going to fill these in with

10869
05:36:03,840 --> 05:36:05,600
the model parameter, and I'm going to

10870
05:36:05,600 --> 05:36:09,760
call this tool add label. So, there's no

10871
05:36:09,760 --> 05:36:12,638
prompting for these three tools right

10872
05:36:12,638 --> 05:36:13,680
here, but we're going to try it out

10873
05:36:13,680 --> 05:36:17,040
anyway and see what happens. So, add a

10874
05:36:17,040 --> 05:36:20,680
promotion label to my last email

10875
05:36:20,680 --> 05:36:22,760
from Nate

10876
05:36:22,760 --> 05:36:24,798
Herklman. Send that off. See what

10877
05:36:24,798 --> 05:36:27,040
happens? It's getting emails. It tried

10878
05:36:27,040 --> 05:36:29,440
to add a label before. So, now we're

10879
05:36:29,440 --> 05:36:30,798
kind of We got in that weird loop. As

10880
05:36:30,798 --> 05:36:32,718
you can see, it tried to add a label

10881
05:36:32,718 --> 05:36:34,160
before it got labels. So, it didn't know

10882
05:36:34,160 --> 05:36:36,000
what to do, right? Um, we'll click into

10883
05:36:36,000 --> 05:36:38,878
here. We'll see that I don't really

10884
05:36:38,878 --> 05:36:40,240
exactly know what happened. Category

10885
05:36:40,240 --> 05:36:42,080
promotions. Looking in my inbox,

10886
05:36:42,080 --> 05:36:43,600
anything sent from Nate Hkelman, we have

10887
05:36:43,600 --> 05:36:44,958
the email right here, but it wasn't

10888
05:36:44,958 --> 05:36:47,280
accurately labeled. So, let's go back

10889
05:36:47,280 --> 05:36:48,878
into our agent and prompt this thing a

10890
05:36:48,878 --> 05:36:50,080
little bit better to understand how to

10891
05:36:50,080 --> 05:36:52,558
use these tools. So, I'm going to

10892
05:36:52,558 --> 05:36:53,920
basically go into the tools section here

10893
05:36:53,920 --> 05:36:55,280
and I'm going to tell it about some more

10894
05:36:55,280 --> 05:36:57,760
tools that it has. So, get emails,

10895
05:36:57,760 --> 05:36:59,600
right? This one was it was already

10896
05:36:59,600 --> 05:37:01,280
working properly and we're just saying

10897
05:37:01,280 --> 05:37:04,558
use this to get emails. Now, we have to

10898
05:37:04,558 --> 05:37:07,840
add get labels. We're just saying use

10899
05:37:07,840 --> 05:37:10,040
this to get

10900
05:37:10,040 --> 05:37:13,440
labels. Um, and we know that we want it

10901
05:37:13,440 --> 05:37:14,958
to use this before actually trying to

10902
05:37:14,958 --> 05:37:16,080
add a label, but we're not going to add

10903
05:37:16,080 --> 05:37:17,280
that yet. We're going to see if it can

10904
05:37:17,280 --> 05:37:19,840
work with a more minimalistic prompt.

10905
05:37:19,840 --> 05:37:21,120
And then finally, I'm going to say add

10906
05:37:21,120 --> 05:37:24,718
labels. And this one is use this tool to

10907
05:37:24,718 --> 05:37:28,638
add a label to an email. Okay. So now

10908
05:37:28,638 --> 05:37:30,558
that we just have very basic tool

10909
05:37:30,558 --> 05:37:32,160
descriptions in here, we don't actually

10910
05:37:32,160 --> 05:37:34,320
say like when to use it or how. So I'm

10911
05:37:34,320 --> 05:37:35,280
going to try this exact same thing

10912
05:37:35,280 --> 05:37:37,840
again. Add a promotion label to my last

10913
05:37:37,840 --> 05:37:39,760
email from Nate HKman. Once again, it

10914
05:37:39,760 --> 05:37:41,360
tried to use ad label before and it

10915
05:37:41,360 --> 05:37:42,638
tried to just call it twice as you can

10916
05:37:42,638 --> 05:37:46,160
see. So not working. So back in email, I

10917
05:37:46,160 --> 05:37:47,520
just refreshed and you can see the email

10918
05:37:47,520 --> 05:37:50,000
is still not labeled correctly. So,

10919
05:37:50,000 --> 05:37:51,680
let's do some more reactive prompting.

10920
05:37:51,680 --> 05:37:53,360
What we're going to do now is just say

10921
05:37:53,360 --> 05:37:55,440
in order to add labels, so in the

10922
05:37:55,440 --> 05:37:56,958
description of the ad label tool, I'm

10923
05:37:56,958 --> 05:37:59,000
going to say you must

10924
05:37:59,000 --> 05:38:01,878
first use get

10925
05:38:01,878 --> 05:38:06,480
emails to get the message ID. And

10926
05:38:06,480 --> 05:38:07,520
actually, I want to make sure that it

10927
05:38:07,520 --> 05:38:08,798
knows that this is a tool. So, what I'm

10928
05:38:08,798 --> 05:38:10,000
going to do is I'm going to put it in in

10929
05:38:10,000 --> 05:38:11,680
a quote, and I'm going to make it the

10930
05:38:11,680 --> 05:38:13,440
exact same capitalization as we defined

10931
05:38:13,440 --> 05:38:15,440
over here. So you must first use get

10932
05:38:15,440 --> 05:38:17,080
emails to get the message

10933
05:38:17,080 --> 05:38:20,040
ID of the email to

10934
05:38:20,040 --> 05:38:24,280
label. Then you must use get

10935
05:38:24,280 --> 05:38:29,440
labels to get the label ID of the email

10936
05:38:29,440 --> 05:38:32,480
to label. Okay. So we added in this one

10937
05:38:32,480 --> 05:38:33,760
line. So if it's still not working, we

10938
05:38:33,760 --> 05:38:35,280
know that this line wasn't enough. I'm

10939
05:38:35,280 --> 05:38:36,320
going to hit save and I'm going to try

10940
05:38:36,320 --> 05:38:38,240
the exact same thing again. Add a

10941
05:38:38,240 --> 05:38:39,840
promotion label to my last email. So

10942
05:38:39,840 --> 05:38:42,000
it's getting now it's getting labels and

10943
05:38:42,000 --> 05:38:43,280
now it still had an error with adding

10944
05:38:43,280 --> 05:38:44,878
labels. So, we'll take a look in here.

10945
05:38:44,878 --> 05:38:46,878
Um, it said that it did it successfully,

10946
05:38:46,878 --> 05:38:50,040
but obviously didn't. It filled in label

10947
05:38:50,040 --> 05:38:53,200
127 blah blah blah. So, I think the

10948
05:38:53,200 --> 05:38:54,718
message ID is correct, but the label ID

10949
05:38:54,718 --> 05:38:57,120
is not. So, what I'm going to try now is

10950
05:38:57,120 --> 05:38:58,638
reactively prompting in here. I'm going

10951
05:38:58,638 --> 05:39:03,600
to say the label ID of the email to

10952
05:39:03,600 --> 05:39:05,600
label. We'll try that. We'll see if that

10953
05:39:05,600 --> 05:39:07,120
fixes it. It may not. We'll have to keep

10954
05:39:07,120 --> 05:39:09,200
going. So, now we'll see. It's going to

10955
05:39:09,200 --> 05:39:10,400
at least it fixed the order, right? So,

10956
05:39:10,400 --> 05:39:11,760
it's getting emails and getting labels

10957
05:39:11,760 --> 05:39:14,080
first. And now look at that. We

10958
05:39:14,080 --> 05:39:15,920
successfully got a labeled email. As you

10959
05:39:15,920 --> 05:39:19,520
can see, we have our um maybe we didn't.

10960
05:39:19,520 --> 05:39:20,878
We'll have to go into Gmail and actually

10961
05:39:20,878 --> 05:39:22,798
check. Okay, never mind. We did. As you

10962
05:39:22,798 --> 05:39:24,958
can see, we got the promotion email for

10963
05:39:24,958 --> 05:39:26,558
this one from Nate Hookman that says

10964
05:39:26,558 --> 05:39:28,958
hello. And um yeah, that's just going to

10965
05:39:28,958 --> 05:39:32,080
be a really cool simple example of how

10966
05:39:32,080 --> 05:39:34,240
we sort of take on the process of

10967
05:39:34,240 --> 05:39:36,160
running into errors, adding lines, and

10968
05:39:36,160 --> 05:39:37,520
being able to know exactly what caused

10969
05:39:37,520 --> 05:39:38,878
what. So, I know the video was kind of

10970
05:39:38,878 --> 05:39:39,920
simple and I went through it pretty

10971
05:39:39,920 --> 05:39:41,680
fast, but I think that it's going to be

10972
05:39:41,680 --> 05:39:43,280
a good lesson to look back on as far as

10973
05:39:43,280 --> 05:39:45,520
the mindset you have and approaching

10974
05:39:45,520 --> 05:39:46,878
reactively prompting and adding

10975
05:39:46,878 --> 05:39:48,160
different tools and testing things

10976
05:39:48,160 --> 05:39:49,840
because at the end of the day, building

10977
05:39:49,840 --> 05:39:52,718
agents is a super super testheavy

10978
05:39:52,718 --> 05:39:55,440
iterative, you know, refining process of

10979
05:39:55,440 --> 05:39:57,360
build, test, change, build, test,

10980
05:39:57,360 --> 05:39:58,320
change, all that kind of stuff. All

10981
05:39:58,320 --> 05:39:59,760
right, so these next sections are a

10982
05:39:59,760 --> 05:40:01,120
little bit more miscellaneous, but cool

10983
05:40:01,120 --> 05:40:02,480
little tips that you can play around

10984
05:40:02,480 --> 05:40:04,400
with with your AI agents. We're going to

10985
05:40:04,400 --> 05:40:06,160
be talking about output parsing, human

10986
05:40:06,160 --> 05:40:08,718
in the loop, error workflows, and having

10987
05:40:08,718 --> 05:40:11,040
an agent have a dynamic brain. So, let's

10988
05:40:11,040 --> 05:40:12,878
get into it. All right, so output

10989
05:40:12,878 --> 05:40:15,120
parsing. Let's talk about what it

10990
05:40:15,120 --> 05:40:16,638
actually means and why you need to use

10991
05:40:16,638 --> 05:40:18,878
it. So, just to show you guys what we're

10992
05:40:18,878 --> 05:40:20,320
working with, I'm just going to come in

10993
05:40:20,320 --> 05:40:21,600
here real quick and ask our agent to

10994
05:40:21,600 --> 05:40:23,680
create an email for us. And when it does

10995
05:40:23,680 --> 05:40:25,280
this, the idea is that it's going to

10996
05:40:25,280 --> 05:40:27,920
create a subject and a body so that we

10997
05:40:27,920 --> 05:40:30,718
could drag this into a Gmail node. So

10998
05:40:30,718 --> 05:40:32,240
actually before I ask it to do that,

10999
05:40:32,240 --> 05:40:33,520
let's just say we're we're dragging in a

11000
05:40:33,520 --> 05:40:36,240
Gmail node and we want to have this guy

11001
05:40:36,240 --> 05:40:38,240
send an email. We're if I can find this

11002
05:40:38,240 --> 05:40:39,760
node which is right up here. Okay, send

11003
05:40:39,760 --> 05:40:42,160
a message. Now what you can see is that

11004
05:40:42,160 --> 05:40:43,760
we have different fields that we need to

11005
05:40:43,760 --> 05:40:46,240
configure the two, the subject and the

11006
05:40:46,240 --> 05:40:48,958
message. So ideally when we're asking

11007
05:40:48,958 --> 05:40:51,440
the agent to create an email, it will be

11008
05:40:51,440 --> 05:40:52,718
able to output those three different

11009
05:40:52,718 --> 05:40:54,558
things. So let me just show an example

11010
05:40:54,558 --> 05:40:58,280
of that. Please send an email to

11011
05:40:58,280 --> 05:41:01,280
nateample.com asking what's up. We need

11012
05:41:01,280 --> 05:41:04,200
the to the subject and the

11013
05:41:04,200 --> 05:41:06,558
email. Okay, so ideally we wouldn't say

11014
05:41:06,558 --> 05:41:09,680
that every time because um we would have

11015
05:41:09,680 --> 05:41:11,440
that in the system prompt. The issue is

11016
05:41:11,440 --> 05:41:12,878
this workflow doesn't let you run if the

11017
05:41:12,878 --> 05:41:14,240
node is errored and it's errored because

11018
05:41:14,240 --> 05:41:15,360
we didn't fill out stuff. So I'm just

11019
05:41:15,360 --> 05:41:17,680
going to resend this message. But let me

11020
05:41:17,680 --> 05:41:19,120
show you guys exactly why we need to use

11021
05:41:19,120 --> 05:41:21,280
an output parser. So it outputs the two

11022
05:41:21,280 --> 05:41:23,040
to the subject and the message. And if

11023
05:41:23,040 --> 05:41:24,878
we actually click into it though, the

11024
05:41:24,878 --> 05:41:26,718
issue is that it comes through all in

11025
05:41:26,718 --> 05:41:30,240
one single, you know, item called

11026
05:41:30,240 --> 05:41:31,920
output. And so you can see we have the

11027
05:41:31,920 --> 05:41:33,600
two, the subject, and the message. And

11028
05:41:33,600 --> 05:41:35,600
now if I went into here to actually map

11029
05:41:35,600 --> 05:41:37,760
these variables, I couldn't have them

11030
05:41:37,760 --> 05:41:39,200
separated or I would need to separate

11031
05:41:39,200 --> 05:41:41,680
them in another step because I want to

11032
05:41:41,680 --> 05:41:43,680
drag in the dynamic variable, but I can

11033
05:41:43,680 --> 05:41:45,760
only reference all of it at once. So

11034
05:41:45,760 --> 05:41:47,040
that's not good. That's not what we

11035
05:41:47,040 --> 05:41:48,798
want. That's why we need to connect an

11036
05:41:48,798 --> 05:41:50,480
output parser. So I'm going to click

11037
05:41:50,480 --> 05:41:52,160
into here. And right here there's an

11038
05:41:52,160 --> 05:41:53,840
option that says require specific output

11039
05:41:53,840 --> 05:41:55,920
format. And I'm going to turn that on.

11040
05:41:55,920 --> 05:41:57,520
What that does is it just gave us

11041
05:41:57,520 --> 05:41:59,440
another option to our AI agent. So

11042
05:41:59,440 --> 05:42:00,878
typically we basically right here have

11043
05:42:00,878 --> 05:42:03,040
chat model, memory, and tool. But now we

11044
05:42:03,040 --> 05:42:04,878
have another one called output parser.

11045
05:42:04,878 --> 05:42:06,480
So this is awesome. I'm going to click

11046
05:42:06,480 --> 05:42:08,320
onto the output parser. And you can see

11047
05:42:08,320 --> 05:42:10,760
that we have basically three options.

11048
05:42:10,760 --> 05:42:12,958
99.9% of the time you are just going to

11049
05:42:12,958 --> 05:42:14,878
be using a structured output parser

11050
05:42:14,878 --> 05:42:17,440
which means you're able to give your

11051
05:42:17,440 --> 05:42:20,878
agent basically a defined JSON schema

11052
05:42:20,878 --> 05:42:22,600
and it will always output stuff in that

11053
05:42:22,600 --> 05:42:25,120
schema if you need to have it kind of be

11054
05:42:25,120 --> 05:42:28,000
a little bit automatically fixed with AI

11055
05:42:28,000 --> 05:42:29,920
like I said I almost never have to use

11056
05:42:29,920 --> 05:42:31,440
this but that's what you would use the

11057
05:42:31,440 --> 05:42:33,920
autofixing output parser for so if I

11058
05:42:33,920 --> 05:42:35,680
click on the structured output parser

11059
05:42:35,680 --> 05:42:37,520
what happens is right now we see a JSON

11060
05:42:37,520 --> 05:42:39,200
example so if we were to talk to our

11061
05:42:39,200 --> 05:42:41,120
agent and say hey can you um you know

11062
05:42:41,120 --> 05:42:42,240
tell me some information about

11063
05:42:42,240 --> 05:42:44,558
California. It would output the state in

11064
05:42:44,558 --> 05:42:48,240
one string item called state and then

11065
05:42:48,240 --> 05:42:50,798
would also output an array of cities LA,

11066
05:42:50,798 --> 05:42:53,120
San Francisco, San Diego. So what we

11067
05:42:53,120 --> 05:42:54,958
want to do is we want to quickly define

11068
05:42:54,958 --> 05:42:56,878
to our AI agent how to output

11069
05:42:56,878 --> 05:42:58,798
information and we know that we wanted

11070
05:42:58,798 --> 05:43:01,440
to output based on this node. We need a

11071
05:43:01,440 --> 05:43:03,360
two, we need a subject, and we need a

11072
05:43:03,360 --> 05:43:05,920
message. So don't worry, you're not

11073
05:43:05,920 --> 05:43:07,040
going to have to write any JSON

11074
05:43:07,040 --> 05:43:09,000
yourself. I'm going to go to chatgbt and

11075
05:43:09,000 --> 05:43:12,480
say, "Help me write a JSON example for a

11076
05:43:12,480 --> 05:43:15,440
structured output parser in NADN. I need

11077
05:43:15,440 --> 05:43:18,878
the AI agent to output a two field, a

11078
05:43:18,878 --> 05:43:22,480
subject field, and a body field." We'll

11079
05:43:22,480 --> 05:43:24,400
just go ahead and send this off. And as

11080
05:43:24,400 --> 05:43:26,320
you guys know, all LLMs are trained

11081
05:43:26,320 --> 05:43:28,240
really well on JSON. It's going to know

11082
05:43:28,240 --> 05:43:29,920
exactly what I'm asking for here. And

11083
05:43:29,920 --> 05:43:31,360
all I'm going to have to do is copy this

11084
05:43:31,360 --> 05:43:33,840
and paste that in. So once this finishes

11085
05:43:33,840 --> 05:43:36,798
up, it's very simple. Two, subject body.

11086
05:43:36,798 --> 05:43:38,160
And it's being a little extra right now

11087
05:43:38,160 --> 05:43:39,680
and giving me a whole example body, but

11088
05:43:39,680 --> 05:43:41,760
I just have to copy that. I have to go

11089
05:43:41,760 --> 05:43:43,760
into here and just replace that JSON

11090
05:43:43,760 --> 05:43:48,320
example. Super simple. And now hopefully

11091
05:43:48,320 --> 05:43:49,920
I don't even have to prompt this guy at

11092
05:43:49,920 --> 05:43:51,920
all. And we'll give it a try. But if

11093
05:43:51,920 --> 05:43:53,200
it's not working, what we would do is we

11094
05:43:53,200 --> 05:43:54,798
would prompt in here and say, "Hey, here

11095
05:43:54,798 --> 05:43:56,320
is basically how we want you to output

11096
05:43:56,320 --> 05:43:57,600
stuff. Here's your job." All that kind

11097
05:43:57,600 --> 05:43:59,280
of stuff, right? But let me just resend

11098
05:43:59,280 --> 05:44:01,040
this message. We'll take a look. We'll

11099
05:44:01,040 --> 05:44:02,480
see that it called its output parser

11100
05:44:02,480 --> 05:44:05,120
because this is green. And now let's

11101
05:44:05,120 --> 05:44:07,520
activate the Gmail node and click in.

11102
05:44:07,520 --> 05:44:09,040
Perfect. So what we see on this left

11103
05:44:09,040 --> 05:44:11,200
hand side now is we have a two, we have

11104
05:44:11,200 --> 05:44:13,040
a subject, and we have a body, which

11105
05:44:13,040 --> 05:44:14,798
makes this so much easier to actually

11106
05:44:14,798 --> 05:44:19,600
map out over here and drag in. So in

11107
05:44:19,600 --> 05:44:21,280
different agents in this course, you're

11108
05:44:21,280 --> 05:44:22,160
going to see me using different

11109
05:44:22,160 --> 05:44:24,080
structured output parsers, whether that

11110
05:44:24,080 --> 05:44:27,120
is to get to subject and body, whether

11111
05:44:27,120 --> 05:44:28,958
that is to create different stories,

11112
05:44:28,958 --> 05:44:30,480
stuff like that. Let me just show one

11113
05:44:30,480 --> 05:44:31,760
more quick example of like a different

11114
05:44:31,760 --> 05:44:32,878
way you could use this. I'm going to

11115
05:44:32,878 --> 05:44:35,760
delete this if I can actually delete it.

11116
05:44:35,760 --> 05:44:37,840
And we are going to just change up the

11117
05:44:37,840 --> 05:44:40,320
structure output parser. So let's say we

11118
05:44:40,320 --> 05:44:41,878
want an AI agent

11119
05:44:41,878 --> 05:44:44,958
to create a story for us. So I'm going

11120
05:44:44,958 --> 05:44:48,240
to just talk to this guy again. Help me

11121
05:44:48,240 --> 05:44:51,200
write a different JSON example where I

11122
05:44:51,200 --> 05:44:54,160
want to have the agent output a title of

11123
05:44:54,160 --> 05:44:57,520
the story, an array of characters, and

11124
05:44:57,520 --> 05:45:00,240
then three different scenes. Okay. So

11125
05:45:00,240 --> 05:45:01,440
we'll send that off and see what it

11126
05:45:01,440 --> 05:45:03,520
does. And just keep in mind it's

11127
05:45:03,520 --> 05:45:05,760
creating this JSON basically a template

11128
05:45:05,760 --> 05:45:07,840
that's telling your agent how to output

11129
05:45:07,840 --> 05:45:09,440
information. So we would basically say,

11130
05:45:09,440 --> 05:45:12,240
"Hey, create me a story about um a

11131
05:45:12,240 --> 05:45:14,638
forest." And it would output a title,

11132
05:45:14,638 --> 05:45:16,718
three characters, and three different

11133
05:45:16,718 --> 05:45:19,040
scenes as you can see here. So we'll

11134
05:45:19,040 --> 05:45:22,160
copy this. We'll paste this into here.

11135
05:45:22,160 --> 05:45:23,840
And once again, I'm not even going to

11136
05:45:23,840 --> 05:45:25,958
prompt the agent. And let's see how it

11137
05:45:25,958 --> 05:45:29,680
does. Please create me a story about an

11138
05:45:29,680 --> 05:45:31,520
airplane.

11139
05:45:31,520 --> 05:45:33,920
Okay, we'll go ahead and take a look at

11140
05:45:33,920 --> 05:45:35,120
what this is going to do. This one's

11141
05:45:35,120 --> 05:45:36,638
going to spin a little bit longer. Oh,

11142
05:45:36,638 --> 05:45:38,160
wow. Didn't even take too long. So, it

11143
05:45:38,160 --> 05:45:40,000
called the structured output parser. And

11144
05:45:40,000 --> 05:45:41,200
now, let's click into the agent and see

11145
05:45:41,200 --> 05:45:44,240
how it output. Perfect. So, we have the

11146
05:45:44,240 --> 05:45:47,000
title is the adventure of Skyward the

11147
05:45:47,000 --> 05:45:49,520
airplane. We have four characters,

11148
05:45:49,520 --> 05:45:51,920
Skyward, Captain Jane, Navigator Max,

11149
05:45:51,920 --> 05:45:54,400
and ground engineer Leo. And then you

11150
05:45:54,400 --> 05:45:56,240
can see we have four different scenes

11151
05:45:56,240 --> 05:45:57,920
that each come with a scene number and a

11152
05:45:57,920 --> 05:45:59,440
description. So if we wanted to, we

11153
05:45:59,440 --> 05:46:01,520
could have this be like, you know, maybe

11154
05:46:01,520 --> 05:46:03,040
we want an image prompt for each of

11155
05:46:03,040 --> 05:46:04,160
these scenes. So we can feed that into

11156
05:46:04,160 --> 05:46:05,600
an image generation model and we would

11157
05:46:05,600 --> 05:46:07,520
just have to go into that chatbt and

11158
05:46:07,520 --> 05:46:09,200
say, "Hey, for each scene, add another

11159
05:46:09,200 --> 05:46:11,040
field called image prompt." And it would

11160
05:46:11,040 --> 05:46:12,718
just basically take care of it. So just

11161
05:46:12,718 --> 05:46:14,400
wanted to show you how this works, how

11162
05:46:14,400 --> 05:46:15,760
easy it is to set up these different

11163
05:46:15,760 --> 05:46:18,160
JSON structured output parsers and why

11164
05:46:18,160 --> 05:46:21,680
it's actually valuable to do within. So

11165
05:46:21,680 --> 05:46:22,878
hopefully that opened your eyes a little

11166
05:46:22,878 --> 05:46:27,320
bit. Appreciate your time.

11167
05:46:27,600 --> 05:46:29,200
Okay, our workflow is actively listening

11168
05:46:29,200 --> 05:46:30,638
for us in Telegram and I'm going to ask

11169
05:46:30,638 --> 05:46:32,480
it to make an expost about coffee at

11170
05:46:32,480 --> 05:46:33,680
night. So, as you can see, this first

11171
05:46:33,680 --> 05:46:35,120
agent is going to search the internet

11172
05:46:35,120 --> 05:46:37,520
using Tavi and create that initial X

11173
05:46:37,520 --> 05:46:39,280
post for us. Now, we just got a message

11174
05:46:39,280 --> 05:46:41,040
back in our Telegram that says, "Hey, is

11175
05:46:41,040 --> 05:46:42,638
this post good to go?" Drinking coffee

11176
05:46:42,638 --> 05:46:44,240
at night can disrupt your sleep since

11177
05:46:44,240 --> 05:46:45,920
caffeine stays in your system for hours,

11178
05:46:45,920 --> 05:46:48,000
often leading to poorer sleep quality.

11179
05:46:48,000 --> 05:46:49,040
So, what I'm going to do is click on

11180
05:46:49,040 --> 05:46:50,558
respond. And this gives us the ability

11181
05:46:50,558 --> 05:46:52,638
to give our agent feedback on the post

11182
05:46:52,638 --> 05:46:54,160
that it initially created. So, here is

11183
05:46:54,160 --> 05:46:55,440
that response window and I'm going to

11184
05:46:55,440 --> 05:46:56,638
provide some feedback. So, I'm telling

11185
05:46:56,638 --> 05:46:58,558
the agent to add at the end of the tweet

11186
05:46:58,558 --> 05:47:00,558
unless it's decaf. And as soon as I hit

11187
05:47:00,558 --> 05:47:02,080
submit, we're going to see this go down

11188
05:47:02,080 --> 05:47:03,680
the path. It's going to get classified

11189
05:47:03,680 --> 05:47:05,280
as a denial message. And now the

11190
05:47:05,280 --> 05:47:07,200
revision agent just made those changes

11191
05:47:07,200 --> 05:47:08,480
and we have another message in our

11192
05:47:08,480 --> 05:47:10,638
telegram with a new X post. So now, as

11193
05:47:10,638 --> 05:47:11,920
you can see, we have a new post. I'm

11194
05:47:11,920 --> 05:47:13,120
going to click on respond and open up

11195
05:47:13,120 --> 05:47:14,718
that window. And what we can see here is

11196
05:47:14,718 --> 05:47:16,480
now we have the changes made that we

11197
05:47:16,480 --> 05:47:18,480
requested. At the end, it says unless

11198
05:47:18,480 --> 05:47:20,320
it's decaf. So now all we have to do is

11199
05:47:20,320 --> 05:47:21,920
respond good to go. And as soon as we

11200
05:47:21,920 --> 05:47:23,280
submit this, it's going to go up down

11201
05:47:23,280 --> 05:47:25,120
the approval route and it's going to get

11202
05:47:25,120 --> 05:47:27,040
submitted and posted to X. So, here we

11203
05:47:27,040 --> 05:47:28,400
go. Let's see that in action. I'll hit

11204
05:47:28,400 --> 05:47:29,680
submit and then we're going to watch it

11205
05:47:29,680 --> 05:47:31,760
get posted onto X. And let's go check

11206
05:47:31,760 --> 05:47:33,040
and make sure it's there. So, here's my

11207
05:47:33,040 --> 05:47:34,558
beautiful X profile. And as you can see,

11208
05:47:34,558 --> 05:47:35,840
I was playing around with some tweets

11209
05:47:35,840 --> 05:47:37,200
earlier. But right here, we can see

11210
05:47:37,200 --> 05:47:38,480
drinking coffee at night can disrupt

11211
05:47:38,480 --> 05:47:40,080
your sleep. We have the most recent

11212
05:47:40,080 --> 05:47:41,440
version because it says unless it's

11213
05:47:41,440 --> 05:47:43,200
decaf. And then we can also click into

11214
05:47:43,200 --> 05:47:45,520
the actual blog that Tavi found to pull

11215
05:47:45,520 --> 05:47:47,200
this information from. So, now that

11216
05:47:47,200 --> 05:47:48,798
we've seen this workflow in action,

11217
05:47:48,798 --> 05:47:50,240
let's break it down. So the secret that

11218
05:47:50,240 --> 05:47:51,520
we're going to be talking about today is

11219
05:47:51,520 --> 05:47:53,360
the aspect of human in the loop, which

11220
05:47:53,360 --> 05:47:55,200
basically just means somewhere along the

11221
05:47:55,200 --> 05:47:56,638
process of the workflow. In this case,

11222
05:47:56,638 --> 05:47:58,320
it's happening right here. The workflow

11223
05:47:58,320 --> 05:48:00,320
is going to pause and wait for some sort

11224
05:48:00,320 --> 05:48:02,718
of feedback from us. That way, we know

11225
05:48:02,718 --> 05:48:04,558
before anything is sent out to a client

11226
05:48:04,558 --> 05:48:06,558
or posted on social media, we've

11227
05:48:06,558 --> 05:48:08,798
basically said that we 100% agree that

11228
05:48:08,798 --> 05:48:10,320
this is good to go. And if the initial

11229
05:48:10,320 --> 05:48:12,320
message is not good to go, we have the

11230
05:48:12,320 --> 05:48:14,240
ability to have this unlimited revision

11231
05:48:14,240 --> 05:48:16,638
loop where it's going to revise the

11232
05:48:16,638 --> 05:48:18,638
output over and over until we finally

11233
05:48:18,638 --> 05:48:20,400
agree that it's good to go. So, we have

11234
05:48:20,400 --> 05:48:21,520
everything color coded and we're going

11235
05:48:21,520 --> 05:48:23,200
to break it down as simple as possible.

11236
05:48:23,200 --> 05:48:24,958
But before we do that here, I just

11237
05:48:24,958 --> 05:48:26,798
wanted to do a real quick walkthrough of

11238
05:48:26,798 --> 05:48:28,638
a more simple human in the loop because

11239
05:48:28,638 --> 05:48:30,080
what's going on up here is it's just

11240
05:48:30,080 --> 05:48:31,840
going to say, "Do you like this?" Yes or

11241
05:48:31,840 --> 05:48:33,520
no compared to down here where we

11242
05:48:33,520 --> 05:48:35,520
actually give textbased feedback. So,

11243
05:48:35,520 --> 05:48:36,718
we'll break them both down, but let's

11244
05:48:36,718 --> 05:48:37,920
start up here real quick. And by the

11245
05:48:37,920 --> 05:48:38,878
way, if you want to download the

11246
05:48:38,878 --> 05:48:40,320
template for free and play around with

11247
05:48:40,320 --> 05:48:42,080
either of these flows, you can get that

11248
05:48:42,080 --> 05:48:43,440
in my free school community. The link

11249
05:48:43,440 --> 05:48:44,240
for that will be down in the

11250
05:48:44,240 --> 05:48:45,280
description. And when it comes to human

11251
05:48:45,280 --> 05:48:47,040
in the loop in Naden, if you click on

11252
05:48:47,040 --> 05:48:48,798
the plus, you can see down here, human

11253
05:48:48,798 --> 05:48:51,040
in the loop, wait for approval or human

11254
05:48:51,040 --> 05:48:53,040
input before continuing. You click on

11255
05:48:53,040 --> 05:48:54,718
it, you can see there's a few options,

11256
05:48:54,718 --> 05:48:56,718
and they all just use the operation

11257
05:48:56,718 --> 05:48:58,718
called send and wait for response. So

11258
05:48:58,718 --> 05:48:59,760
obviously there's all these different

11259
05:48:59,760 --> 05:49:01,040
integrations, and I'm sure more will

11260
05:49:01,040 --> 05:49:03,040
even start to roll out, but in this

11261
05:49:03,040 --> 05:49:04,160
example, we're just using Telegram.

11262
05:49:04,160 --> 05:49:05,360
Okay, so taking a look at this more

11263
05:49:05,360 --> 05:49:06,638
simple workflow, we're going to send off

11264
05:49:06,638 --> 05:49:08,558
the message, make an expost about AI

11265
05:49:08,558 --> 05:49:10,000
voice agents. What's happening is the

11266
05:49:10,000 --> 05:49:11,680
exact same thing as the demo where this

11267
05:49:11,680 --> 05:49:13,040
agent is going to search the web and

11268
05:49:13,040 --> 05:49:14,558
then it's going to create that initial

11269
05:49:14,558 --> 05:49:16,480
content for us. And now we've hit that

11270
05:49:16,480 --> 05:49:18,320
human in the loop step. As you can see,

11271
05:49:18,320 --> 05:49:20,000
it's spinning here purple because it's

11272
05:49:20,000 --> 05:49:21,600
waiting for our approval. So in our

11273
05:49:21,600 --> 05:49:23,680
Telegram, we see the post. It asks us if

11274
05:49:23,680 --> 05:49:25,360
this is good to go. And let's just say

11275
05:49:25,360 --> 05:49:26,798
that we don't like this one, and we're

11276
05:49:26,798 --> 05:49:27,920
going to hit decline. So when I hit

11277
05:49:27,920 --> 05:49:29,280
decline, it goes down this decision

11278
05:49:29,280 --> 05:49:31,040
point where it basically says, you know,

11279
05:49:31,040 --> 05:49:32,878
did the human approve? Yes or no. If

11280
05:49:32,878 --> 05:49:34,958
yes, we'll post it to X. If no, it's

11281
05:49:34,958 --> 05:49:36,638
going to send us a denial message, which

11282
05:49:36,638 --> 05:49:38,798
basically just says post was denied.

11283
05:49:38,798 --> 05:49:40,320
Please submit another request. And so

11284
05:49:40,320 --> 05:49:41,520
that's really cool because it gives us

11285
05:49:41,520 --> 05:49:43,120
the ability to say, okay, do we like

11286
05:49:43,120 --> 05:49:44,558
this? Yes. And it will get posted.

11287
05:49:44,558 --> 05:49:46,878
Otherwise, just do nothing with it. But

11288
05:49:46,878 --> 05:49:48,080
what if we actually want to give it

11289
05:49:48,080 --> 05:49:49,920
feedback so that it can take this post?

11290
05:49:49,920 --> 05:49:51,360
We can give it a little bit of criticism

11291
05:49:51,360 --> 05:49:53,280
and then it will make another one for us

11292
05:49:53,280 --> 05:49:55,040
and it just stays in that loop rather

11293
05:49:55,040 --> 05:49:56,558
than having to start from square one. So

11294
05:49:56,558 --> 05:49:58,000
that's exactly what I did down here with

11295
05:49:58,000 --> 05:49:59,920
the human and loop 2.0 know where we're

11296
05:49:59,920 --> 05:50:02,240
able to give textbased feedback instead

11297
05:50:02,240 --> 05:50:04,160
of just saying yes or no. So now we're

11298
05:50:04,160 --> 05:50:05,440
going to break down what's going on

11299
05:50:05,440 --> 05:50:07,520
within every single step here. So what

11300
05:50:07,520 --> 05:50:08,480
I'm going to do is I'm going to click on

11301
05:50:08,480 --> 05:50:10,320
executions. I'm going to go to the one

11302
05:50:10,320 --> 05:50:12,718
that we did in the live demo and bring

11303
05:50:12,718 --> 05:50:14,320
that into the workflow so we can look at

11304
05:50:14,320 --> 05:50:15,760
it. So what we're going to do is just do

11305
05:50:15,760 --> 05:50:18,000
another live run and walk through step

11306
05:50:18,000 --> 05:50:20,320
by step the actual process of this

11307
05:50:20,320 --> 05:50:21,680
workflow. So I'm going to hit test

11308
05:50:21,680 --> 05:50:23,120
workflow. I'm going to pull up Telegram

11309
05:50:23,120 --> 05:50:24,718
and then I'm going to ask it to make us

11310
05:50:24,718 --> 05:50:26,400
an expost. Okay, so I'm about to fire

11311
05:50:26,400 --> 05:50:28,718
off make me an expost about crocodiles.

11312
05:50:28,718 --> 05:50:31,280
So sent that off. This expost agent is

11313
05:50:31,280 --> 05:50:34,240
using its GPT41 model as well as Tavly

11314
05:50:34,240 --> 05:50:37,200
search to do research, create that post,

11315
05:50:37,200 --> 05:50:38,638
and now we have the human in the loop

11316
05:50:38,638 --> 05:50:40,240
waiting for us. So before we go look at

11317
05:50:40,240 --> 05:50:42,240
that, let's break down what's going on

11318
05:50:42,240 --> 05:50:43,920
up front. So the first phase is the

11319
05:50:43,920 --> 05:50:45,360
initial content. This means that we have

11320
05:50:45,360 --> 05:50:46,878
a telegram trigger, and that's how we're

11321
05:50:46,878 --> 05:50:48,480
communicating with this workflow. And

11322
05:50:48,480 --> 05:50:50,000
then it gets fed into the first agent

11323
05:50:50,000 --> 05:50:52,240
here, which is the expost agent. Let's

11324
05:50:52,240 --> 05:50:53,680
click into the expost agent and just

11325
05:50:53,680 --> 05:50:54,958
kind of break down what's going on here.

11326
05:50:54,958 --> 05:50:56,240
here. So, the first thing to notice is

11327
05:50:56,240 --> 05:50:57,840
that we're looking for some sort of

11328
05:50:57,840 --> 05:50:59,760
prompt. The agent needs some sort of

11329
05:50:59,760 --> 05:51:01,600
user message that it's going to look at.

11330
05:51:01,600 --> 05:51:03,200
In this case, we're not doing the

11331
05:51:03,200 --> 05:51:04,878
connected chat trigger node. We're

11332
05:51:04,878 --> 05:51:06,718
looking within our Telegram node because

11333
05:51:06,718 --> 05:51:08,000
that's where the text is actually coming

11334
05:51:08,000 --> 05:51:09,520
through. So, on this lefth hand side, we

11335
05:51:09,520 --> 05:51:11,280
can see all I basically did was right

11336
05:51:11,280 --> 05:51:13,280
here is the text that we typed in, make

11337
05:51:13,280 --> 05:51:15,200
me an expost about crocodiles. And all I

11338
05:51:15,200 --> 05:51:17,120
did was I dragged this right into here

11339
05:51:17,120 --> 05:51:18,798
as the user message. And that is what

11340
05:51:18,798 --> 05:51:20,240
the agent is actually looking at in

11341
05:51:20,240 --> 05:51:21,680
order to take action. And then the other

11342
05:51:21,680 --> 05:51:23,680
thing we did was gave the agent a system

11343
05:51:23,680 --> 05:51:25,440
message which basically defines its

11344
05:51:25,440 --> 05:51:27,280
behavior. And so here's what we have.

11345
05:51:27,280 --> 05:51:29,040
The overview is you are an AI agent

11346
05:51:29,040 --> 05:51:31,120
responsible for creating expost based on

11347
05:51:31,120 --> 05:51:33,040
a user's request. Your instructions are

11348
05:51:33,040 --> 05:51:35,040
to always use the Tavly search tool to

11349
05:51:35,040 --> 05:51:37,040
find accurate information. Write an

11350
05:51:37,040 --> 05:51:39,200
informative engaging tweet, include a

11351
05:51:39,200 --> 05:51:40,878
brief reference to the source directly

11352
05:51:40,878 --> 05:51:43,040
in the tweet and only output the tweet.

11353
05:51:43,040 --> 05:51:45,040
We listed its tool which it only has one

11354
05:51:45,040 --> 05:51:46,878
called tavly search and we told it to

11355
05:51:46,878 --> 05:51:48,798
use this for real-time web search and

11356
05:51:48,798 --> 05:51:50,320
then just gave it an example basically

11357
05:51:50,320 --> 05:51:52,558
saying okay here's an input you may get

11358
05:51:52,558 --> 05:51:54,480
here's the action you will take and then

11359
05:51:54,480 --> 05:51:56,480
here's the output that we want you to

11360
05:51:56,480 --> 05:51:57,840
output and then we just gave them final

11361
05:51:57,840 --> 05:51:59,520
notes and I know I may be read through

11362
05:51:59,520 --> 05:52:01,120
this pretty quick but keep in mind you

11363
05:52:01,120 --> 05:52:02,480
can download the template for free and

11364
05:52:02,480 --> 05:52:03,680
the prompt will be in there and then

11365
05:52:03,680 --> 05:52:04,798
what you could do is you can click on

11366
05:52:04,798 --> 05:52:06,240
the logs for an agent and you can

11367
05:52:06,240 --> 05:52:08,000
basically look at its behavior so we can

11368
05:52:08,000 --> 05:52:11,040
see that it used its chat model GBT4.1

11369
05:52:11,040 --> 05:52:12,798
read through the system prompt decided

11370
05:52:12,798 --> 05:52:14,240
said, "Okay, I need to go use tably

11371
05:52:14,240 --> 05:52:16,080
search." So, here's how it searched for

11372
05:52:16,080 --> 05:52:18,320
crocodile information. And then it used

11373
05:52:18,320 --> 05:52:20,480
its model again to actually create that

11374
05:52:20,480 --> 05:52:22,240
short tweet right here. And then we'll

11375
05:52:22,240 --> 05:52:23,440
just take a quick look at what's going

11376
05:52:23,440 --> 05:52:25,360
on within the actual Tavi search tool

11377
05:52:25,360 --> 05:52:27,680
here. So, if you download this template,

11378
05:52:27,680 --> 05:52:28,878
all you'll have to do is plug in your

11379
05:52:28,878 --> 05:52:30,320
own credential. Everything else should

11380
05:52:30,320 --> 05:52:32,160
be set up for you. But, let me just

11381
05:52:32,160 --> 05:52:33,440
break it down real quick. So, if you go

11382
05:52:33,440 --> 05:52:35,440
to tavly.com and create an account, you

11383
05:52:35,440 --> 05:52:37,520
can get a,000 free searches per month.

11384
05:52:37,520 --> 05:52:39,280
So, that's the kind of plan I'm on. But

11385
05:52:39,280 --> 05:52:41,440
anyways, here is the documentation. You

11386
05:52:41,440 --> 05:52:42,878
can see right here we have the Tavi

11387
05:52:42,878 --> 05:52:44,878
search endpoint which is right here. All

11388
05:52:44,878 --> 05:52:46,320
we have to do is authorize ourselves. So

11389
05:52:46,320 --> 05:52:48,320
we'll have an authorization as a header

11390
05:52:48,320 --> 05:52:50,400
parameter and then we'll do bearer space

11391
05:52:50,400 --> 05:52:52,160
our API token. So that's how you'll set

11392
05:52:52,160 --> 05:52:53,440
up your own credential. And then all I

11393
05:52:53,440 --> 05:52:55,760
did was I copied this data field into

11394
05:52:55,760 --> 05:52:57,680
the HTTP request. And this is where you

11395
05:52:57,680 --> 05:52:59,200
can do some configuration. You can look

11396
05:52:59,200 --> 05:53:00,480
through the docs to see how you want to

11397
05:53:00,480 --> 05:53:02,320
make this request. But all I wanted to

11398
05:53:02,320 --> 05:53:03,760
do here was just change the search

11399
05:53:03,760 --> 05:53:05,840
query. So back in end you can see in my

11400
05:53:05,840 --> 05:53:08,160
body request I I changed the query by

11401
05:53:08,160 --> 05:53:10,000
using a placeholder. Right here it says

11402
05:53:10,000 --> 05:53:11,600
use a placeholder for any data to be

11403
05:53:11,600 --> 05:53:13,680
filled in by the model. So I changed the

11404
05:53:13,680 --> 05:53:15,280
query to a placeholder called search

11405
05:53:15,280 --> 05:53:17,120
term. And then down here I defined the

11406
05:53:17,120 --> 05:53:18,958
search term placeholder as what the user

11407
05:53:18,958 --> 05:53:20,480
is searching for. So what this means is

11408
05:53:20,480 --> 05:53:22,798
the agent is going to interpret our

11409
05:53:22,798 --> 05:53:24,798
query that we sent in telegram. It's

11410
05:53:24,798 --> 05:53:27,120
then going to use this tavly tool and

11411
05:53:27,120 --> 05:53:28,638
basically use its brain to figure out

11412
05:53:28,638 --> 05:53:30,240
what should I search for. And in this

11413
05:53:30,240 --> 05:53:31,520
case on the lefth hand side you can see

11414
05:53:31,520 --> 05:53:33,360
that it filled out the search term with

11415
05:53:33,360 --> 05:53:36,240
latest news or facts about crocodiles.

11416
05:53:36,240 --> 05:53:38,160
And then we get back our response with

11417
05:53:38,160 --> 05:53:40,638
information and a URL. And then it uses

11418
05:53:40,638 --> 05:53:42,480
all of this in order to actually create

11419
05:53:42,480 --> 05:53:44,400
that post. Okay. So, here's where it may

11420
05:53:44,400 --> 05:53:45,280
seem like it's going to get a little

11421
05:53:45,280 --> 05:53:47,120
tricky, but it's not too bad. Just bear

11422
05:53:47,120 --> 05:53:48,798
with me. And I wanted to do some color

11423
05:53:48,798 --> 05:53:50,480
coding here so we could all sort of stay

11424
05:53:50,480 --> 05:53:52,480
on the same page. So, what we're doing

11425
05:53:52,480 --> 05:53:54,320
now is we're setting the post. And this

11426
05:53:54,320 --> 05:53:56,320
is super important because we need to be

11427
05:53:56,320 --> 05:53:57,760
able to reference the post later in the

11428
05:53:57,760 --> 05:53:59,680
workflow. whether that's when we're

11429
05:53:59,680 --> 05:54:02,400
actually sending it over to X or when

11430
05:54:02,400 --> 05:54:04,240
we're making a revision and we need the

11431
05:54:04,240 --> 05:54:05,840
revision agent to look at the original

11432
05:54:05,840 --> 05:54:07,920
post as well as the feedback from the

11433
05:54:07,920 --> 05:54:10,160
human. So in the set node, all we're

11434
05:54:10,160 --> 05:54:11,840
doing is we're basically setting a field

11435
05:54:11,840 --> 05:54:13,600
called post and we're dragging in a

11436
05:54:13,600 --> 05:54:15,680
variable called JSON.output. And this

11437
05:54:15,680 --> 05:54:17,120
just means that it's going to be

11438
05:54:17,120 --> 05:54:19,200
grabbing the output from this agent or

11439
05:54:19,200 --> 05:54:20,958
the revision agent no matter what. As

11440
05:54:20,958 --> 05:54:22,400
you can see, it's looped back into this

11441
05:54:22,400 --> 05:54:24,160
set because if we're defining a variable

11442
05:54:24,160 --> 05:54:26,160
using dollar sign JSON, it means that

11443
05:54:26,160 --> 05:54:27,440
we're going to be looking for whatever

11444
05:54:27,440 --> 05:54:29,840
node immediately finished right before

11445
05:54:29,840 --> 05:54:31,280
this one. And so that's why we have to

11446
05:54:31,280 --> 05:54:32,958
keep this one kind of flexible because

11447
05:54:32,958 --> 05:54:34,320
we want to make sure that at the end of

11448
05:54:34,320 --> 05:54:36,798
the day, if we made five or six or seven

11449
05:54:36,798 --> 05:54:38,958
revisions, that only the most recent

11450
05:54:38,958 --> 05:54:41,200
version will actually be posted on X. So

11451
05:54:41,200 --> 05:54:42,718
then we move into the human in the loop

11452
05:54:42,718 --> 05:54:44,320
phase of this workflow. And as you can

11453
05:54:44,320 --> 05:54:45,360
see, it's still spinning. It's been

11454
05:54:45,360 --> 05:54:46,718
spinning this whole time while we've

11455
05:54:46,718 --> 05:54:48,400
been talking, but it's waiting for our

11456
05:54:48,400 --> 05:54:50,240
response. So anyways, it's a send and

11457
05:54:50,240 --> 05:54:51,840
wait for a response operation. As you

11458
05:54:51,840 --> 05:54:54,240
can see right here, the chat ID is

11459
05:54:54,240 --> 05:54:55,760
coming from our Telegram trigger. So if

11460
05:54:55,760 --> 05:54:57,360
I scroll down in the Telegram trigger on

11461
05:54:57,360 --> 05:54:59,120
the lefth hand side, you can see that I

11462
05:54:59,120 --> 05:55:00,798
have a chat ID right here. And all I did

11463
05:55:00,798 --> 05:55:02,400
was I dragged this in right here.

11464
05:55:02,400 --> 05:55:03,840
Basically just meaning, okay, whoever

11465
05:55:03,840 --> 05:55:05,760
communicates with this workflow, we need

11466
05:55:05,760 --> 05:55:07,440
to send and get feedback from that

11467
05:55:07,440 --> 05:55:08,798
person. So that's how we can make this

11468
05:55:08,798 --> 05:55:10,558
dynamic. And then I just made my message

11469
05:55:10,558 --> 05:55:12,240
basically say, hey, is this good to go?

11470
05:55:12,240 --> 05:55:14,718
And then I'm dragging in the post that

11471
05:55:14,718 --> 05:55:16,638
we set earlier. So this is another

11472
05:55:16,638 --> 05:55:18,480
reason why it's important is because we

11473
05:55:18,480 --> 05:55:20,080
want to request feedback on the most

11474
05:55:20,080 --> 05:55:21,840
recent version as well, not the first

11475
05:55:21,840 --> 05:55:23,280
one we made. And then like I mentioned

11476
05:55:23,280 --> 05:55:24,638
within all of these human in the loop

11477
05:55:24,638 --> 05:55:26,558
nodes, you have a few options. So you

11478
05:55:26,558 --> 05:55:28,000
can do free text, which is what we're

11479
05:55:28,000 --> 05:55:29,760
doing here. Earlier what we did was

11480
05:55:29,760 --> 05:55:31,200
approval, which is basically you can

11481
05:55:31,200 --> 05:55:32,638
say, hey, is there an approve button? Is

11482
05:55:32,638 --> 05:55:34,320
there an approve and a denial button?

11483
05:55:34,320 --> 05:55:35,840
How do you want to set that up? But this

11484
05:55:35,840 --> 05:55:37,440
is why we're doing free text because it

11485
05:55:37,440 --> 05:55:39,360
allows for us to actually give feedback,

11486
05:55:39,360 --> 05:55:40,958
not just say yes or no. Cool. So what

11487
05:55:40,958 --> 05:55:43,200
we're going to do now is actually give

11488
05:55:43,200 --> 05:55:45,280
our feedback. So, I'm going to come into

11489
05:55:45,280 --> 05:55:47,840
here. We have our post about crocodiles.

11490
05:55:47,840 --> 05:55:49,040
So, I'm going to hit respond and it's

11491
05:55:49,040 --> 05:55:50,400
going to open up this new page. And so,

11492
05:55:50,400 --> 05:55:51,680
yes, it's a little annoying that this

11493
05:55:51,680 --> 05:55:53,920
form has to pop up in the browser rather

11494
05:55:53,920 --> 05:55:56,480
than natively in Telegram or whatever,

11495
05:55:56,480 --> 05:55:58,000
you know, Slack, Gmail, wherever you're

11496
05:55:58,000 --> 05:55:59,280
doing the human in the loop, but I'm

11497
05:55:59,280 --> 05:56:00,718
sure that'll be a fix that'll come soon.

11498
05:56:00,718 --> 05:56:01,920
But, it's just right now, I think it's

11499
05:56:01,920 --> 05:56:03,520
coming through a web hook. So, they just

11500
05:56:03,520 --> 05:56:04,558
kind of have to do it like this.

11501
05:56:04,558 --> 05:56:06,080
Anyways, let's say that we want to

11502
05:56:06,080 --> 05:56:07,680
provide some feedback and say make this

11503
05:56:07,680 --> 05:56:09,760
shorter. So, I'm going to say make this

11504
05:56:09,760 --> 05:56:11,680
shorter. And as I submit it, you're

11505
05:56:11,680 --> 05:56:13,040
going to see it go to this decision

11506
05:56:13,040 --> 05:56:14,480
point and then it's going to move either

11507
05:56:14,480 --> 05:56:16,638
up or down. And this is pretty clearly a

11508
05:56:16,638 --> 05:56:18,558
denial message. So we'll watch it get

11509
05:56:18,558 --> 05:56:20,320
denied and go down to the revision agent

11510
05:56:20,320 --> 05:56:22,558
as you can see. And just like that that

11511
05:56:22,558 --> 05:56:24,718
quickly, we already have another one to

11512
05:56:24,718 --> 05:56:26,240
look at. So before we look at it and

11513
05:56:26,240 --> 05:56:28,320
give feedback, let's just look at what's

11514
05:56:28,320 --> 05:56:29,840
actually going on within this decision

11515
05:56:29,840 --> 05:56:31,680
point. So in any automation, you get to

11516
05:56:31,680 --> 05:56:32,718
a point where you have to make a

11517
05:56:32,718 --> 05:56:34,240
decision. And what's really cool about

11518
05:56:34,240 --> 05:56:36,400
AI automation is now we can use AI to

11519
05:56:36,400 --> 05:56:37,840
make a decision that typically a

11520
05:56:37,840 --> 05:56:39,760
computer couldn't because a typical

11521
05:56:39,760 --> 05:56:41,360
decision would be like is this number

11522
05:56:41,360 --> 05:56:42,958
greater than 10 or less than 10. But now

11523
05:56:42,958 --> 05:56:44,558
it can read this text that we submitted.

11524
05:56:44,558 --> 05:56:46,480
Make this shorter and it can say okay is

11525
05:56:46,480 --> 05:56:48,638
this approved or declined. And basically

11526
05:56:48,638 --> 05:56:50,558
I just gave it some short definitions of

11527
05:56:50,558 --> 05:56:52,160
like what an approval message might look

11528
05:56:52,160 --> 05:56:53,840
like and what a denial message might

11529
05:56:53,840 --> 05:56:55,200
look like. And you can look through that

11530
05:56:55,200 --> 05:56:56,558
if you download the template. But as you

11531
05:56:56,558 --> 05:56:58,558
can see here it pushed this message down

11532
05:56:58,558 --> 05:57:00,240
the declined branch because we asked it

11533
05:57:00,240 --> 05:57:01,840
to make a revision. And so it goes down

11534
05:57:01,840 --> 05:57:03,440
the denial branch which leads into the

11535
05:57:03,440 --> 05:57:05,040
revision agent. And this one's really

11536
05:57:05,040 --> 05:57:07,280
really simple. All we did here was we

11537
05:57:07,280 --> 05:57:09,840
gave it two things as the user message.

11538
05:57:09,840 --> 05:57:12,240
We said here's the post to revise. So as

11539
05:57:12,240 --> 05:57:13,520
you can see it's this is the initial

11540
05:57:13,520 --> 05:57:15,520
post that the first agent made for us.

11541
05:57:15,520 --> 05:57:17,280
And then here is the human feedback. So

11542
05:57:17,280 --> 05:57:18,558
it's going to look at this. It's going

11543
05:57:18,558 --> 05:57:19,920
to look at this and then it's going to

11544
05:57:19,920 --> 05:57:21,440
make those changes because all we said

11545
05:57:21,440 --> 05:57:23,360
in the system prompt was you're an

11546
05:57:23,360 --> 05:57:24,798
expert Twitter writer. Your job is to

11547
05:57:24,798 --> 05:57:26,400
take an incoming post and revise it

11548
05:57:26,400 --> 05:57:27,920
based on the feedback that the human

11549
05:57:27,920 --> 05:57:29,680
submitted. And as you can see here is

11550
05:57:29,680 --> 05:57:31,440
the output. it made the tweet a lot

11551
05:57:31,440 --> 05:57:32,878
shorter. And that's the beauty of using

11552
05:57:32,878 --> 05:57:34,718
the set node is because now we loop that

11553
05:57:34,718 --> 05:57:36,798
back in. The most recent version has

11554
05:57:36,798 --> 05:57:38,638
been submitted to us for feedback. So,

11555
05:57:38,638 --> 05:57:40,000
let's open that up real quick in our

11556
05:57:40,000 --> 05:57:41,680
Telegram. And now you can see that the

11557
05:57:41,680 --> 05:57:43,440
shorter tweet has been submitted to us.

11558
05:57:43,440 --> 05:57:45,280
And it's asking for a response. So, at

11559
05:57:45,280 --> 05:57:46,240
this point, let's say we're good to go

11560
05:57:46,240 --> 05:57:47,360
with this tweet. I'm going to click

11561
05:57:47,360 --> 05:57:49,280
respond. Open up this tab. Recent

11562
05:57:49,280 --> 05:57:50,798
crocodile attacks in Indonesia.

11563
05:57:50,798 --> 05:57:52,638
Highlight the need for caution in their

11564
05:57:52,638 --> 05:57:54,638
habitats. Stay safe. We've got a few

11565
05:57:54,638 --> 05:57:56,878
emojis. And I'm just going to say, let's

11566
05:57:56,878 --> 05:57:58,320
just say send it off because it can

11567
05:57:58,320 --> 05:58:00,320
interpret multiple ways of saying like

11568
05:58:00,320 --> 05:58:02,080
yes, it's good to go. So, as soon as I

11569
05:58:02,080 --> 05:58:03,760
hit submit, we're going to watch it go

11570
05:58:03,760 --> 05:58:05,360
through the decision point and then post

11571
05:58:05,360 --> 05:58:07,760
on our X. So, you see that right here,

11572
05:58:07,760 --> 05:58:09,280
text classifier, and now it has been

11573
05:58:09,280 --> 05:58:11,280
posted to X. And I just gave our X

11574
05:58:11,280 --> 05:58:12,638
account a refresh. You can see that we

11575
05:58:12,638 --> 05:58:14,400
have that short tweet about recent

11576
05:58:14,400 --> 05:58:16,160
crocodile attacks. Okay, so now that

11577
05:58:16,160 --> 05:58:17,760
we've seen another example of a live run

11578
05:58:17,760 --> 05:58:19,280
through, a little more detailed, let me

11579
05:58:19,280 --> 05:58:21,120
talk about why I made the color coding

11580
05:58:21,120 --> 05:58:23,200
like this. So the set note here, its job

11581
05:58:23,200 --> 05:58:24,878
is basically just I'm going to be

11582
05:58:24,878 --> 05:58:27,680
grabbing the most recent version of the

11583
05:58:27,680 --> 05:58:29,920
post because then I can feed it into the

11584
05:58:29,920 --> 05:58:31,760
human in the loop. I can then feed that

11585
05:58:31,760 --> 05:58:33,120
into the revision if we need to make

11586
05:58:33,120 --> 05:58:34,878
another revision because you want to be

11587
05:58:34,878 --> 05:58:36,638
able to make revisions on top of

11588
05:58:36,638 --> 05:58:38,240
revisions. You don't want to be only

11589
05:58:38,240 --> 05:58:39,760
making revisions on the first one.

11590
05:58:39,760 --> 05:58:40,878
Otherwise, you're going to be like,

11591
05:58:40,878 --> 05:58:42,240
what's the point? And then also, of

11592
05:58:42,240 --> 05:58:44,080
course, you want to post the most recent

11593
05:58:44,080 --> 05:58:46,000
version, not the original one, because

11594
05:58:46,000 --> 05:58:47,600
again, what's the point? So in here, you

11595
05:58:47,600 --> 05:58:49,680
can see there's two runs. The first one

11596
05:58:49,680 --> 05:58:52,080
was the first initial content creation

11597
05:58:52,080 --> 05:58:53,600
and then the second one was the revised

11598
05:58:53,600 --> 05:58:55,200
one. Similarly, if we click into the

11599
05:58:55,200 --> 05:58:57,280
next node which was request feedback,

11600
05:58:57,280 --> 05:58:59,440
the first time we said make this shorter

11601
05:58:59,440 --> 05:59:01,280
and then the second time we said send it

11602
05:59:01,280 --> 05:59:02,480
off. And then if we go into the next

11603
05:59:02,480 --> 05:59:04,400
node which was the text classifier, we

11604
05:59:04,400 --> 05:59:06,400
can see the first time it got denied

11605
05:59:06,400 --> 05:59:08,160
because we said make this shorter and

11606
05:59:08,160 --> 05:59:10,878
the second time it said send it off and

11607
05:59:10,878 --> 05:59:12,400
it got approved. And that's basically

11608
05:59:12,400 --> 05:59:14,878
the flow of you know initial creation.

11609
05:59:14,878 --> 05:59:16,480
We're setting the most recent version.

11610
05:59:16,480 --> 05:59:18,160
We're getting feedback. We're making a

11611
05:59:18,160 --> 05:59:20,160
decision using AI. And as you can tell

11612
05:59:20,160 --> 05:59:22,558
for the text classifier, I'm using 2.0

11613
05:59:22,558 --> 05:59:25,440
Flash rather than GPT 4.1. And then of

11614
05:59:25,440 --> 05:59:27,440
course, if it's approved, it gets

11615
05:59:27,440 --> 05:59:29,520
posted. If it's not, it makes revisions.

11616
05:59:29,520 --> 05:59:30,878
And like I said, this is unlimited

11617
05:59:30,878 --> 05:59:32,798
revisions. And it's revisions on top of

11618
05:59:32,798 --> 05:59:34,160
revisions. So when it comes to Human in

11619
05:59:34,160 --> 05:59:35,520
the Loop, you can do it in more than

11620
05:59:35,520 --> 05:59:37,040
just Telegram, too. So if you click on

11621
05:59:37,040 --> 05:59:38,558
the plus, you can see right here, Human

11622
05:59:38,558 --> 05:59:40,480
in the Loop, wait for approval or human

11623
05:59:40,480 --> 05:59:42,080
input before continuing. We've got

11624
05:59:42,080 --> 05:59:45,120
Discord, Gmail, Chat, Outlook, Telegram,

11625
05:59:45,120 --> 05:59:46,480
Slack. We have a lot of stuff you can

11626
05:59:46,480 --> 05:59:48,320
do. However, so far with my experience,

11627
05:59:48,320 --> 05:59:51,040
it's been limited to one workflow. And

11628
05:59:51,040 --> 05:59:52,718
what do I mean by that? It's kind of

11629
05:59:52,718 --> 05:59:54,480
tough to do this when you're actually

11630
05:59:54,480 --> 05:59:56,400
giving an agent a tool that's supposed

11631
05:59:56,400 --> 05:59:58,240
to be waiting for human approval. So,

11632
05:59:58,240 --> 05:59:59,360
let me show you what I mean by that.

11633
05:59:59,360 --> 06:00:00,718
Okay, so here's an agent where I tried

11634
06:00:00,718 --> 06:00:02,400
to do a human in the loop tool because

11635
06:00:02,400 --> 06:00:04,080
we have the send and wait message

11636
06:00:04,080 --> 06:00:06,798
operation as a tool for an agent. So,

11637
06:00:06,798 --> 06:00:08,400
let me show you what goes on here. We'll

11638
06:00:08,400 --> 06:00:09,920
hit test workflow. Okay, so I'm going to

11639
06:00:09,920 --> 06:00:11,840
send off get approval for this message.

11640
06:00:11,840 --> 06:00:13,200
Hey John, just wanted to see if you had

11641
06:00:13,200 --> 06:00:14,558
the meeting minutes. And you're going to

11642
06:00:14,558 --> 06:00:15,840
watch that it's going to call the get

11643
06:00:15,840 --> 06:00:19,360
approval tool, but here's the issue. So,

11644
06:00:19,360 --> 06:00:21,600
it's waiting for a response, right? And

11645
06:00:21,600 --> 06:00:23,600
we have the ability to respond, but the

11646
06:00:23,600 --> 06:00:25,600
waiting is happening at the agent level.

11647
06:00:25,600 --> 06:00:26,958
It really should be waiting down here

11648
06:00:26,958 --> 06:00:28,718
for the tool because, as you saw in the

11649
06:00:28,718 --> 06:00:30,558
previous example, the response from this

11650
06:00:30,558 --> 06:00:32,400
should be the actual feedback from the

11651
06:00:32,400 --> 06:00:33,920
human. And we haven't submitted that

11652
06:00:33,920 --> 06:00:35,520
yet. And right now, the response from

11653
06:00:35,520 --> 06:00:38,000
this tool is literally just the message.

11654
06:00:38,000 --> 06:00:40,240
So, what you'll see here is if I go back

11655
06:00:40,240 --> 06:00:41,840
into Telegram and I click on respond and

11656
06:00:41,840 --> 06:00:43,680
we open up this tab, it basically just

11657
06:00:43,680 --> 06:00:45,280
says no action required. And if I go

11658
06:00:45,280 --> 06:00:47,440
back into the workflow, you can see it's

11659
06:00:47,440 --> 06:00:49,040
still spinning here and there's no way

11660
06:00:49,040 --> 06:00:51,600
for this to give another output. So, it

11661
06:00:51,600 --> 06:00:52,878
just doesn't really work. And so, what I

11662
06:00:52,878 --> 06:00:54,240
was thinking was, okay, why don't I just

11663
06:00:54,240 --> 06:00:56,160
make another workflow where I just use

11664
06:00:56,160 --> 06:00:57,760
the actual node like we saw on the

11665
06:00:57,760 --> 06:00:59,360
previous one. That should work fine

11666
06:00:59,360 --> 06:01:00,638
because then it should just spin down

11667
06:01:00,638 --> 06:01:03,200
here on the tool level until it's ready.

11668
06:01:03,200 --> 06:01:04,400
And so, let me show you what happens if

11669
06:01:04,400 --> 06:01:05,680
we do that. Okay, so like I said, I

11670
06:01:05,680 --> 06:01:07,440
built a custom tool down here which is

11671
06:01:07,440 --> 06:01:08,878
called get approval. It would be sending

11672
06:01:08,878 --> 06:01:10,878
the data to this workflow, it would send

11673
06:01:10,878 --> 06:01:12,718
off an approval message using the send

11674
06:01:12,718 --> 06:01:14,558
and wait, and it doesn't really work. I

11675
06:01:14,558 --> 06:01:16,638
even tried adding a wait here. But what

11676
06:01:16,638 --> 06:01:18,400
happens typically is when you use a

11677
06:01:18,400 --> 06:01:20,080
workflow to call another one, it's going

11678
06:01:20,080 --> 06:01:21,760
to be waiting and looking in the last

11679
06:01:21,760 --> 06:01:23,760
node of that workflow for the response,

11680
06:01:23,760 --> 06:01:26,000
but it doesn't yet work yet with these

11681
06:01:26,000 --> 06:01:27,520
operations. And I'll show you guys why,

11682
06:01:27,520 --> 06:01:29,520
and I'm sure NNN will fix this soon, but

11683
06:01:29,520 --> 06:01:30,798
it's just not there yet. So, I'm just

11684
06:01:30,798 --> 06:01:32,240
going to send off the exact same query,

11685
06:01:32,240 --> 06:01:34,000
get approval for this message. We'll see

11686
06:01:34,000 --> 06:01:35,920
it call the tool and basically as you

11687
06:01:35,920 --> 06:01:38,000
can see it finished up instantly and now

11688
06:01:38,000 --> 06:01:40,240
it's waiting here and we already did get

11689
06:01:40,240 --> 06:01:41,520
a message back in telegram which

11690
06:01:41,520 --> 06:01:43,600
basically said ready to go hey John just

11691
06:01:43,600 --> 06:01:44,638
wanted to see if you had the meeting

11692
06:01:44,638 --> 06:01:45,920
minutes and it gives us the option to

11693
06:01:45,920 --> 06:01:48,638
approve or deny and if we click into the

11694
06:01:48,638 --> 06:01:50,240
subworkflow this one that it actually

11695
06:01:50,240 --> 06:01:51,760
sent data to. We can see that the

11696
06:01:51,760 --> 06:01:53,760
execution is waiting. So this workflow

11697
06:01:53,760 --> 06:01:55,920
is properly working because it's waiting

11698
06:01:55,920 --> 06:01:57,840
here for human approval. But if we go

11699
06:01:57,840 --> 06:01:59,760
back into the main flow it's waiting

11700
06:01:59,760 --> 06:02:01,440
here at the agent level rather than

11701
06:02:01,440 --> 06:02:03,120
waiting here. So, there's no way for the

11702
06:02:03,120 --> 06:02:05,440
agent to actually get our live feedback

11703
06:02:05,440 --> 06:02:07,920
and use that to take action how it needs

11704
06:02:07,920 --> 06:02:09,040
to. So, I just wanted to show you guys

11705
06:02:09,040 --> 06:02:10,638
that I had been experimenting with this

11706
06:02:10,638 --> 06:02:12,878
as a tool. It's not there yet, but I'm

11707
06:02:12,878 --> 06:02:14,240
sure it will be here soon. And when it

11708
06:02:14,240 --> 06:02:16,080
is, you can bet that I'll have a video

11709
06:02:16,080 --> 06:02:18,558
out about

11710
06:02:19,160 --> 06:02:21,040
it. Today, I'm going to be showing you

11711
06:02:21,040 --> 06:02:22,160
guys how you can set up an error

11712
06:02:22,160 --> 06:02:24,558
workflow in NAN so that you can log all

11713
06:02:24,558 --> 06:02:26,160
of your errors as well as get notified

11714
06:02:26,160 --> 06:02:27,760
every time one of your active workflows

11715
06:02:27,760 --> 06:02:29,600
fails. The cool part is all we have to

11716
06:02:29,600 --> 06:02:31,360
do is set up one error workflow and then

11717
06:02:31,360 --> 06:02:32,878
we can link that one to all of our

11718
06:02:32,878 --> 06:02:34,160
different active workflows. So I think

11719
06:02:34,160 --> 06:02:35,520
you'll be pretty shocked how quick and

11720
06:02:35,520 --> 06:02:37,120
easy this is to get set up. So let's get

11721
06:02:37,120 --> 06:02:38,958
into the video. All right, so here's the

11722
06:02:38,958 --> 06:02:39,840
workflow that we're going to be using

11723
06:02:39,840 --> 06:02:41,680
today as our test workflow that we're

11724
06:02:41,680 --> 06:02:43,040
going to purposely make error and then

11725
06:02:43,040 --> 06:02:44,400
we're going to capture those errors in a

11726
06:02:44,400 --> 06:02:46,000
different one and feed that into a

11727
06:02:46,000 --> 06:02:47,920
Google sheet template as well as some

11728
06:02:47,920 --> 06:02:50,000
sort of Slack or email notification. And

11729
06:02:50,000 --> 06:02:51,280
if you haven't seen my recent video on

11730
06:02:51,280 --> 06:02:52,958
using this new think tool in edit then

11731
06:02:52,958 --> 06:02:54,558
I'll tag it right up here. Anyways, in

11732
06:02:54,558 --> 06:02:56,160
order for a workflow to trigger an error

11733
06:02:56,160 --> 06:02:58,000
workflow, it has to be active. So, first

11734
06:02:58,000 --> 06:02:59,040
things first, I'm going to make this

11735
06:02:59,040 --> 06:03:00,878
workflow active. There we go. This one

11736
06:03:00,878 --> 06:03:02,080
has been activated. And now, what I'm

11737
06:03:02,080 --> 06:03:04,240
going to do is go back out to my NAD.

11738
06:03:04,240 --> 06:03:05,520
We're going to create a new workflow.

11739
06:03:05,520 --> 06:03:07,680
And this is going to be our error logger

11740
06:03:07,680 --> 06:03:09,440
workflow. Okay. So, you guys are going

11741
06:03:09,440 --> 06:03:10,558
to be pretty surprised by how simple

11742
06:03:10,558 --> 06:03:11,760
this workflow is going to be. I'm going

11743
06:03:11,760 --> 06:03:13,120
to add a first step. And I'm going to

11744
06:03:13,120 --> 06:03:14,558
type an error. And as you can see,

11745
06:03:14,558 --> 06:03:16,000
there's an error trigger, which says

11746
06:03:16,000 --> 06:03:17,360
triggers the workflow when another

11747
06:03:17,360 --> 06:03:18,958
workflow has an error. So, we're going

11748
06:03:18,958 --> 06:03:20,400
to bring this into the workflow. We

11749
06:03:20,400 --> 06:03:21,600
don't have to do anything to configure

11750
06:03:21,600 --> 06:03:23,200
it. You can see that what we could do is

11751
06:03:23,200 --> 06:03:24,878
we could fetch a test event just to see

11752
06:03:24,878 --> 06:03:27,040
what information could come back. But

11753
06:03:27,040 --> 06:03:28,480
what we're going to do is just trigger a

11754
06:03:28,480 --> 06:03:29,760
live one because we're going to get a

11755
06:03:29,760 --> 06:03:31,280
lot more information than what we're

11756
06:03:31,280 --> 06:03:33,120
seeing right here. So, quickly pay

11757
06:03:33,120 --> 06:03:34,558
attention to the fact that I named this

11758
06:03:34,558 --> 06:03:36,558
workflow error logger. I'm going to go

11759
06:03:36,558 --> 06:03:38,480
back into my ultimate assistant active

11760
06:03:38,480 --> 06:03:40,080
workflow. Up in the top right, I'm going

11761
06:03:40,080 --> 06:03:41,680
to click on these three dots, go down to

11762
06:03:41,680 --> 06:03:43,360
settings, and then right here, there's a

11763
06:03:43,360 --> 06:03:45,040
setting called error workflow, which as

11764
06:03:45,040 --> 06:03:46,958
you can see, a second workflow to run if

11765
06:03:46,958 --> 06:03:48,558
the current one fails. The second

11766
06:03:48,558 --> 06:03:50,480
workflow should always start with an

11767
06:03:50,480 --> 06:03:52,480
error trigger. And as you saw, we just

11768
06:03:52,480 --> 06:03:53,760
set that up. So, all I have to do is

11769
06:03:53,760 --> 06:03:55,520
choose a workflow. I'm going to type an

11770
06:03:55,520 --> 06:03:57,360
error and we called it error logger. So

11771
06:03:57,360 --> 06:03:59,520
I'm going to choose that one, hit save.

11772
06:03:59,520 --> 06:04:00,718
And now these two workflows are

11773
06:04:00,718 --> 06:04:02,400
basically linked so that if this

11774
06:04:02,400 --> 06:04:04,240
workflow ever has an error that stops

11775
06:04:04,240 --> 06:04:06,160
the workflow, it's going to be captured

11776
06:04:06,160 --> 06:04:08,000
in our second one over here with the

11777
06:04:08,000 --> 06:04:09,520
information. So let's see a quick

11778
06:04:09,520 --> 06:04:11,600
example of that. Okay, so this workflow

11779
06:04:11,600 --> 06:04:13,520
is active. It has a telegram trigger as

11780
06:04:13,520 --> 06:04:14,798
you can see. So I'm going to drag in my

11781
06:04:14,798 --> 06:04:16,000
telegram and I'm just going to say,

11782
06:04:16,000 --> 06:04:17,840
"Hey." And what's going to happen is

11783
06:04:17,840 --> 06:04:19,040
obviously we're going to get a response

11784
06:04:19,040 --> 06:04:21,600
back because this workflow is active and

11785
06:04:21,600 --> 06:04:23,200
it says, "How can I assist you today?"

11786
06:04:23,200 --> 06:04:24,400
Now, what I'm going to do is I'm just

11787
06:04:24,400 --> 06:04:26,240
going to get rid of the chat model. So,

11788
06:04:26,240 --> 06:04:28,558
this agent essentially has no brain. I'm

11789
06:04:28,558 --> 06:04:29,840
going to hit save. We're going to open

11790
06:04:29,840 --> 06:04:31,280
up Telegram again, and we're going to

11791
06:04:31,280 --> 06:04:33,280
say, "Hey." And now, we should see that

11792
06:04:33,280 --> 06:04:34,638
we're not going to get any response back

11793
06:04:34,638 --> 06:04:36,400
in Telegram. If we go into the

11794
06:04:36,400 --> 06:04:38,000
executions of this ultimate assistant,

11795
06:04:38,000 --> 06:04:39,760
you can see that we just got an error

11796
06:04:39,760 --> 06:04:41,440
right now. And that was when we just

11797
06:04:41,440 --> 06:04:42,958
sent off the query that said, "Hey," and

11798
06:04:42,958 --> 06:04:44,558
it errored because the chat model wasn't

11799
06:04:44,558 --> 06:04:46,638
connected. So, if we hop into our error

11800
06:04:46,638 --> 06:04:48,000
logger workflow and click on the

11801
06:04:48,000 --> 06:04:49,840
executions, we should see that we just

11802
06:04:49,840 --> 06:04:52,240
had a new execution. And if we click

11803
06:04:52,240 --> 06:04:53,840
into it, we'll see all the information

11804
06:04:53,840 --> 06:04:55,680
that came through. So what it's going to

11805
06:04:55,680 --> 06:04:57,600
tell us is the ID of the execution, the

11806
06:04:57,600 --> 06:04:59,520
URL of the workflow, the name of the

11807
06:04:59,520 --> 06:05:01,280
workflow, and then we'll also see what

11808
06:05:01,280 --> 06:05:03,280
node errored and the error message. So

11809
06:05:03,280 --> 06:05:05,200
here under the object node, we can see

11810
06:05:05,200 --> 06:05:06,718
different parameters. We can see what's

11811
06:05:06,718 --> 06:05:08,558
kind of how the node's configured. We

11812
06:05:08,558 --> 06:05:10,400
can see the prompt even. But what we're

11813
06:05:10,400 --> 06:05:11,840
interested in is down here we have the

11814
06:05:11,840 --> 06:05:13,280
name, which is ultimate assistant. And

11815
06:05:13,280 --> 06:05:14,878
then we have the message, which was a

11816
06:05:14,878 --> 06:05:17,040
chat model sub node must be connected

11817
06:05:17,040 --> 06:05:19,440
and enabled. So anyways, we have our

11818
06:05:19,440 --> 06:05:21,120
sample data. I'm going to hit copy to

11819
06:05:21,120 --> 06:05:22,638
editor, which just brings in that

11820
06:05:22,638 --> 06:05:24,320
execution into here so we can play with

11821
06:05:24,320 --> 06:05:26,798
it. And now what I want to do is map up

11822
06:05:26,798 --> 06:05:28,798
the logic of first of all logging it in

11823
06:05:28,798 --> 06:05:30,718
a Google sheet. So here's the Google

11824
06:05:30,718 --> 06:05:31,840
sheet template I'm going to be using.

11825
06:05:31,840 --> 06:05:32,878
We're going to be putting in a

11826
06:05:32,878 --> 06:05:35,280
timestamp, a workflow name, the URL of

11827
06:05:35,280 --> 06:05:36,958
the workflow, the node that errored, and

11828
06:05:36,958 --> 06:05:38,400
the error message. If you guys want to

11829
06:05:38,400 --> 06:05:39,680
get this template, you can do so by

11830
06:05:39,680 --> 06:05:40,958
joining my free school community. The

11831
06:05:40,958 --> 06:05:42,480
link for that's down in the description.

11832
06:05:42,480 --> 06:05:43,840
Once you join the community, all you

11833
06:05:43,840 --> 06:05:44,958
have to do is search for the title of

11834
06:05:44,958 --> 06:05:46,718
the video up top, or you can click on

11835
06:05:46,718 --> 06:05:48,080
YouTube resources, and you'll find the

11836
06:05:48,080 --> 06:05:49,520
post. And then in the post is where

11837
06:05:49,520 --> 06:05:51,600
you'll see the link to the Google sheet

11838
06:05:51,600 --> 06:05:53,600
template. Anyways, now that we have this

11839
06:05:53,600 --> 06:05:54,718
set up, all we have to do is go back

11840
06:05:54,718 --> 06:05:56,080
into our error logger. We're going to

11841
06:05:56,080 --> 06:05:57,840
add a new node after the trigger. And

11842
06:05:57,840 --> 06:05:59,760
I'm going to grab a sheets node. What we

11843
06:05:59,760 --> 06:06:02,080
want to do is append a row in sheets. Um

11844
06:06:02,080 --> 06:06:04,160
I'm just going to call this log error.

11845
06:06:04,160 --> 06:06:05,680
Make sure I choose the right credential.

11846
06:06:05,680 --> 06:06:06,798
And then I'm going to choose the sheet

11847
06:06:06,798 --> 06:06:08,400
which is called error logs. And so now

11848
06:06:08,400 --> 06:06:10,080
we can see we have the values we need to

11849
06:06:10,080 --> 06:06:11,680
send over to these different columns. So

11850
06:06:11,680 --> 06:06:13,120
for time stamp, all I'm going to do is

11851
06:06:13,120 --> 06:06:14,958
I'm actually going to make an expression

11852
06:06:14,958 --> 06:06:16,718
and I'm just going to do dollar sign

11853
06:06:16,718 --> 06:06:18,160
now. And this is basically just going to

11854
06:06:18,160 --> 06:06:19,680
send over to Google Sheets the current

11855
06:06:19,680 --> 06:06:21,120
time whenever this workflow gets

11856
06:06:21,120 --> 06:06:22,558
triggered. And if you don't like the way

11857
06:06:22,558 --> 06:06:23,760
this is coming through, you can play

11858
06:06:23,760 --> 06:06:26,400
around with format after dollar sign

11859
06:06:26,400 --> 06:06:27,600
now. And then you'll be able to

11860
06:06:27,600 --> 06:06:28,798
configure it a little bit more. And you

11861
06:06:28,798 --> 06:06:30,400
can also ask chat to help you out with

11862
06:06:30,400 --> 06:06:32,400
this JavaScript function. And feel free

11863
06:06:32,400 --> 06:06:34,000
to copy this if you want. I'm pulling in

11864
06:06:34,000 --> 06:06:35,920
the full year, month, day, and then the

11865
06:06:35,920 --> 06:06:37,760
time. Okay, cool. Then we're just pretty

11866
06:06:37,760 --> 06:06:38,958
much going to drag and drop the other

11867
06:06:38,958 --> 06:06:40,400
information we need. So the first thing

11868
06:06:40,400 --> 06:06:42,080
is the workflow name. And to get to

11869
06:06:42,080 --> 06:06:43,200
that, I'm going to close out of the

11870
06:06:43,200 --> 06:06:44,400
execution. and then we'll see the

11871
06:06:44,400 --> 06:06:45,920
workflow and we can pull in the name

11872
06:06:45,920 --> 06:06:47,360
right there which is ultimate personal

11873
06:06:47,360 --> 06:06:49,360
assistant. For the URL, I'm going to

11874
06:06:49,360 --> 06:06:51,680
open back up execution and grab the URL

11875
06:06:51,680 --> 06:06:54,160
from here. For node, all I have to do is

11876
06:06:54,160 --> 06:06:55,920
look within the node object. We're going

11877
06:06:55,920 --> 06:06:57,680
to scroll down until we see the name of

11878
06:06:57,680 --> 06:06:59,040
the node which is right here, the

11879
06:06:59,040 --> 06:07:01,280
ultimate assistant. And then finally,

11880
06:07:01,280 --> 06:07:02,638
the error message, which should be right

11881
06:07:02,638 --> 06:07:04,718
under that name right here. Drag that

11882
06:07:04,718 --> 06:07:06,638
in, which says a chat model sub node

11883
06:07:06,638 --> 06:07:08,320
must be connected and enabled. So now

11884
06:07:08,320 --> 06:07:09,280
that we're good to go here, I'm going to

11885
06:07:09,280 --> 06:07:10,558
test step and then we'll check our

11886
06:07:10,558 --> 06:07:11,840
Google sheet and make sure that that

11887
06:07:11,840 --> 06:07:13,920
stuff comes through correctly.

11888
06:07:13,920 --> 06:07:15,120
And as you can see, it just got

11889
06:07:15,120 --> 06:07:16,718
populated and we have the URL right

11890
06:07:16,718 --> 06:07:18,320
here, which if we clicked into, it would

11891
06:07:18,320 --> 06:07:20,480
take us to that main ultimate personal

11892
06:07:20,480 --> 06:07:22,320
assistant workflow. As you can see, when

11893
06:07:22,320 --> 06:07:23,680
this loads up, and it takes us to the

11894
06:07:23,680 --> 06:07:25,440
execution that actually failed as well,

11895
06:07:25,440 --> 06:07:27,600
so we could sort of debug. So now we

11896
06:07:27,600 --> 06:07:29,360
have an error trigger that will update a

11897
06:07:29,360 --> 06:07:31,120
Google sheet and log the information.

11898
06:07:31,120 --> 06:07:32,638
But maybe we also want to get notified

11899
06:07:32,638 --> 06:07:34,080
when there's an error. So I'm just going

11900
06:07:34,080 --> 06:07:35,840
to drag this off right below and I'm

11901
06:07:35,840 --> 06:07:38,320
going to grab the Slack node and I'm

11902
06:07:38,320 --> 06:07:40,480
going to choose to send a message right

11903
06:07:40,480 --> 06:07:41,840
here. and then we'll just configure what

11904
06:07:41,840 --> 06:07:43,600
we want to send over. Okay, so we're

11905
06:07:43,600 --> 06:07:44,798
going to be sending a message to a

11906
06:07:44,798 --> 06:07:46,558
channel. I'm going to choose the channel

11907
06:07:46,558 --> 06:07:48,878
all awesome AI stuff. And then we just

11908
06:07:48,878 --> 06:07:50,000
need to configure what the actual

11909
06:07:50,000 --> 06:07:51,360
message is going to say. So I'm going to

11910
06:07:51,360 --> 06:07:52,798
change this to an expression, make this

11911
06:07:52,798 --> 06:07:55,920
full screen and let's fill this out. So

11912
06:07:55,920 --> 06:07:57,440
pretty much just customize this however

11913
06:07:57,440 --> 06:07:58,878
you want. Let's say I want to start off

11914
06:07:58,878 --> 06:08:02,480
with workflow error and we will put the

11915
06:08:02,480 --> 06:08:04,320
name of the workflow. So I'll just close

11916
06:08:04,320 --> 06:08:06,160
out of here, throw that in there. So now

11917
06:08:06,160 --> 06:08:06,958
it's going to come through saying

11918
06:08:06,958 --> 06:08:08,400
workflow error ultimate personal

11919
06:08:08,400 --> 06:08:10,000
assistant. And then I'm going to say

11920
06:08:10,000 --> 06:08:12,320
like what node errored at what time and

11921
06:08:12,320 --> 06:08:14,080
what the error message was. So first

11922
06:08:14,080 --> 06:08:16,160
let's grab the name of the node. Um if I

11923
06:08:16,160 --> 06:08:17,680
just have to scroll down to name right

11924
06:08:17,680 --> 06:08:21,840
here. So ultimate assistant errored at

11925
06:08:21,840 --> 06:08:23,120
and I'm going to do that same dollar

11926
06:08:23,120 --> 06:08:25,920
sign now function. So it says ultimate

11927
06:08:25,920 --> 06:08:27,798
assistant errored at

11928
06:08:27,798 --> 06:08:29,920
2025417. And then I'm just going to go

11929
06:08:29,920 --> 06:08:34,718
down and say the error message was and

11930
06:08:34,718 --> 06:08:36,520
we're just going to drag in the error

11931
06:08:36,520 --> 06:08:38,958
message. There we go.

11932
06:08:38,958 --> 06:08:40,240
And then finally, we'll just provide a

11933
06:08:40,240 --> 06:08:43,400
link to the workflow. So see this

11934
06:08:43,400 --> 06:08:45,840
execution here. And then we'll drag in

11935
06:08:45,840 --> 06:08:48,000
the link, which is all the way up top.

11936
06:08:48,000 --> 06:08:49,840
And we should be good to go. And then if

11937
06:08:49,840 --> 06:08:50,798
you want to make sure you're not sending

11938
06:08:50,798 --> 06:08:52,160
over a little message at the bottom that

11939
06:08:52,160 --> 06:08:54,080
says this was sent from Nad, you're

11940
06:08:54,080 --> 06:08:55,200
going to add an option. You're going to

11941
06:08:55,200 --> 06:08:56,638
click on include link to workflow. And

11942
06:08:56,638 --> 06:08:58,080
then you're going to turn that off. And

11943
06:08:58,080 --> 06:08:59,600
now we hit test up. And we hop into

11944
06:08:59,600 --> 06:09:01,040
Slack. And we can see we got workflow

11945
06:09:01,040 --> 06:09:02,718
error ultimate personal assistant. We

11946
06:09:02,718 --> 06:09:03,840
have all this information. We can click

11947
06:09:03,840 --> 06:09:05,520
into this link. and we don't have this

11948
06:09:05,520 --> 06:09:06,958
little message here that says automated

11949
06:09:06,958 --> 06:09:09,120
with this NN workflow. So maybe you

11950
06:09:09,120 --> 06:09:10,400
could just set up a channel dedicated

11951
06:09:10,400 --> 06:09:12,638
towards error logging, whatever it is.

11952
06:09:12,638 --> 06:09:14,958
Okay, so let's save this real quick and

11953
06:09:14,958 --> 06:09:17,040
um let's just do another sort of like

11954
06:09:17,040 --> 06:09:18,958
example. Um one thing to keep in mind is

11955
06:09:18,958 --> 06:09:20,320
there's a difference between the

11956
06:09:20,320 --> 06:09:22,400
workflow actually erroring out and going

11957
06:09:22,400 --> 06:09:24,638
red and just something not working

11958
06:09:24,638 --> 06:09:25,680
correctly. And I'll show you exactly

11959
06:09:25,680 --> 06:09:27,600
what I meant by that. So this example

11960
06:09:27,600 --> 06:09:29,920
actually triggered the error workflow

11961
06:09:29,920 --> 06:09:32,000
because the execution on this side is

11962
06:09:32,000 --> 06:09:33,840
red and it shows an error. But what

11963
06:09:33,840 --> 06:09:35,600
happens is, for example, with our Tavly

11964
06:09:35,600 --> 06:09:36,958
tool right here, I have no

11965
06:09:36,958 --> 06:09:38,798
authentication pulled up. So this tool

11966
06:09:38,798 --> 06:09:40,080
is not going to work. But if I come into

11967
06:09:40,080 --> 06:09:42,958
Telegram and say search the web for

11968
06:09:42,958 --> 06:09:45,280
Apples, it's going to work. This this

11969
06:09:45,280 --> 06:09:46,718
workflow is going to go green even

11970
06:09:46,718 --> 06:09:48,000
though this tool is not going to work.

11971
06:09:48,000 --> 06:09:49,920
And we'll see exactly why. So as you can

11972
06:09:49,920 --> 06:09:51,200
see, it says I'm currently unable to

11973
06:09:51,200 --> 06:09:52,718
search the web due to a connection

11974
06:09:52,718 --> 06:09:54,718
error. So if we go into the execution,

11975
06:09:54,718 --> 06:09:56,320
we can see that this thing went green

11976
06:09:56,320 --> 06:09:57,520
even though it didn't work the way we

11977
06:09:57,520 --> 06:09:59,680
wanted to. But what happened is the tool

11978
06:09:59,680 --> 06:10:01,280
came back and it was green and it

11979
06:10:01,280 --> 06:10:02,798
basically just didn't work because our

11980
06:10:02,798 --> 06:10:04,798
authentication wasn't correct. And then

11981
06:10:04,798 --> 06:10:06,240
you can even see in the think node, it

11982
06:10:06,240 --> 06:10:07,520
basically said the web search function

11983
06:10:07,520 --> 06:10:09,360
is encountering an authentication error.

11984
06:10:09,360 --> 06:10:10,558
I need to let the user know the search

11985
06:10:10,558 --> 06:10:11,840
isn't currently available and offer

11986
06:10:11,840 --> 06:10:13,840
alternative ways to help blah blah blah.

11987
06:10:13,840 --> 06:10:15,600
But all of these nodes actually went

11988
06:10:15,600 --> 06:10:18,000
green and we're fine. So this example

11989
06:10:18,000 --> 06:10:19,840
did not trigger the error logger. As you

11990
06:10:19,840 --> 06:10:21,040
can see, if we check here, there's

11991
06:10:21,040 --> 06:10:22,480
nothing. We check in Slack, there's

11992
06:10:22,480 --> 06:10:24,320
nothing. So what we can do is we'll

11993
06:10:24,320 --> 06:10:26,240
actually make something error. So I'll

11994
06:10:26,240 --> 06:10:28,320
go into this memory and it's going to be

11995
06:10:28,320 --> 06:10:29,680
looking for a session ID within the

11996
06:10:29,680 --> 06:10:31,280
telegram trigger and I'm just going to

11997
06:10:31,280 --> 06:10:33,280
add an extra d. So this variable is not

11998
06:10:33,280 --> 06:10:34,718
going to work. It's probably going to

11999
06:10:34,718 --> 06:10:36,718
error out and now we'll actually see

12000
06:10:36,718 --> 06:10:38,000
something happen with our error

12001
06:10:38,000 --> 06:10:40,400
workflow. So I'm just going to say hey

12002
06:10:40,400 --> 06:10:42,400
and we will watch basically nothing will

12003
06:10:42,400 --> 06:10:44,718
come back

12004
06:10:44,920 --> 06:10:47,120
here. Okay, that confused me but I

12005
06:10:47,120 --> 06:10:48,558
realized I didn't save the workflow. So

12006
06:10:48,558 --> 06:10:49,840
now that we've saved it, this is not

12007
06:10:49,840 --> 06:10:51,360
going to work. So let's once again say

12008
06:10:51,360 --> 06:10:52,878
hey. And we should see that nothing's

12009
06:10:52,878 --> 06:10:54,878
going to come back over here. Um, I

12010
06:10:54,878 --> 06:10:56,240
believe if we go into our error logger,

12011
06:10:56,240 --> 06:10:57,760
we should see something pop through. We

12012
06:10:57,760 --> 06:10:59,600
just got that row and you can see the

12013
06:10:59,600 --> 06:11:01,520
node changed, the error message changed,

12014
06:11:01,520 --> 06:11:02,958
all that kind of stuff. And then in

12015
06:11:02,958 --> 06:11:04,798
Slack, we got another workflow error at

12016
06:11:04,798 --> 06:11:07,040
a new time and it was a different node.

12017
06:11:07,040 --> 06:11:08,320
And finally, we can just come into our

12018
06:11:08,320 --> 06:11:09,600
error logger workflow and click on

12019
06:11:09,600 --> 06:11:12,320
executions. And we'll see the newest run

12020
06:11:12,320 --> 06:11:14,480
was the one that we just saw in our logs

12021
06:11:14,480 --> 06:11:17,760
and in our Slack, which was the memory

12022
06:11:17,760 --> 06:11:19,120
node that aired. As you can see right

12023
06:11:19,120 --> 06:11:21,040
here, simple memory. And so really the

12024
06:11:21,040 --> 06:11:22,400
question then becomes, okay, well what

12025
06:11:22,400 --> 06:11:24,400
happens if this workflow in itself

12026
06:11:24,400 --> 06:11:26,480
errors too. I really don't foresee that

12027
06:11:26,480 --> 06:11:27,760
happening unless you're doing some sort

12028
06:11:27,760 --> 06:11:30,080
of crazy AI logic over here. But it

12029
06:11:30,080 --> 06:11:31,280
really needs to just be as simple as

12030
06:11:31,280 --> 06:11:32,958
you're mapping variables from here

12031
06:11:32,958 --> 06:11:34,638
somewhere else. So you really shouldn't

12032
06:11:34,638 --> 06:11:36,480
see any issues. Maybe an authentication

12033
06:11:36,480 --> 06:11:38,160
issue, but I don't know. Maybe if this

12034
06:11:38,160 --> 06:11:39,520
if this workflow is erring for you a

12035
06:11:39,520 --> 06:11:40,798
ton, you probably are just doing

12036
06:11:40,798 --> 06:11:42,320
something wrong. Anyways, that's going

12037
06:11:42,320 --> 06:11:43,600
to do it for this one. I know it was a

12038
06:11:43,600 --> 06:11:45,040
quicker one, but hopefully if you didn't

12039
06:11:45,040 --> 06:11:46,320
know about this, it's something that

12040
06:11:46,320 --> 06:11:50,520
you'll implement and it will be helpful.

12041
06:11:51,840 --> 06:11:53,360
If you've ever wondered which AI model

12042
06:11:53,360 --> 06:11:54,958
to use for your agents and you're tired

12043
06:11:54,958 --> 06:11:56,798
of wasting credits or overpaying for

12044
06:11:56,798 --> 06:11:58,798
basic tasks, then this video is for you

12045
06:11:58,798 --> 06:11:59,920
because today I'm going to be showing

12046
06:11:59,920 --> 06:12:01,600
you a system where the AI agent picks

12047
06:12:01,600 --> 06:12:04,240
its brain dynamically based on the task.

12048
06:12:04,240 --> 06:12:05,440
This is not only going to save you

12049
06:12:05,440 --> 06:12:06,480
money, but it's going to boost

12050
06:12:06,480 --> 06:12:08,000
performance and we're also getting full

12051
06:12:08,000 --> 06:12:09,840
visibility into the models that it's

12052
06:12:09,840 --> 06:12:11,680
choosing based on the input and we'll

12053
06:12:11,680 --> 06:12:13,360
see the output. That way, all we have to

12054
06:12:13,360 --> 06:12:14,878
do is come back over here, update the

12055
06:12:14,878 --> 06:12:16,480
prompt, and continue to optimize the

12056
06:12:16,480 --> 06:12:18,400
workflow over time. As you can see,

12057
06:12:18,400 --> 06:12:19,920
we're talking to this agent in Slack.

12058
06:12:19,920 --> 06:12:21,040
So, what I'm going to do is say, "Hey,

12059
06:12:21,040 --> 06:12:22,480
tell me a joke." You can see my failed

12060
06:12:22,480 --> 06:12:23,840
attempts over there. And it's going to

12061
06:12:23,840 --> 06:12:25,520
get this message. As you can see, it's

12062
06:12:25,520 --> 06:12:27,520
picking a model, and then it's going to

12063
06:12:27,520 --> 06:12:29,440
answer us in Slack, as well as log the

12064
06:12:29,440 --> 06:12:30,878
output. So, we can see we just got the

12065
06:12:30,878 --> 06:12:32,240
response, why don't scientists trust

12066
06:12:32,240 --> 06:12:33,680
Adams? Because they make up everything.

12067
06:12:33,680 --> 06:12:35,840
And if I go to our model log, we can see

12068
06:12:35,840 --> 06:12:37,440
we just got the input, we got the

12069
06:12:37,440 --> 06:12:38,958
output, and then we got the model which

12070
06:12:38,958 --> 06:12:40,400
was chosen, which in this case was

12071
06:12:40,400 --> 06:12:42,718
Google Gemini's 2.0 Flash. And the

12072
06:12:42,718 --> 06:12:44,160
reason it chose Flash is because this

12073
06:12:44,160 --> 06:12:45,760
was a simple input with a very simple

12074
06:12:45,760 --> 06:12:47,280
output and it wanted to choose a free

12075
06:12:47,280 --> 06:12:48,958
model so we're not wasting credits for

12076
06:12:48,958 --> 06:12:50,160
no reason. All right, let's try

12077
06:12:50,160 --> 06:12:51,520
something else. I'm going to ask it to

12078
06:12:51,520 --> 06:12:53,520
create a calendar event at 1 p.m. today

12079
06:12:53,520 --> 06:12:55,600
for lunch. Once this workflow fires off,

12080
06:12:55,600 --> 06:12:56,958
it's going to choose the model. As you

12081
06:12:56,958 --> 06:12:58,638
can see, it's sending that over to the

12082
06:12:58,638 --> 06:13:00,718
dynamic agent to create that calendar

12083
06:13:00,718 --> 06:13:02,320
event. It's going to log that output and

12084
06:13:02,320 --> 06:13:04,958
then send us a message in Slack. So,

12085
06:13:04,958 --> 06:13:06,400
there we go. I just have created the

12086
06:13:06,400 --> 06:13:07,680
calendar event for lunch at 1 p.m.

12087
06:13:07,680 --> 06:13:09,040
today. If you need anything else, just

12088
06:13:09,040 --> 06:13:10,558
let me know. We click into the calendar

12089
06:13:10,558 --> 06:13:12,080
real quick. There is our launch event at

12090
06:13:12,080 --> 06:13:14,080
one. And if we go to our log, we can see

12091
06:13:14,080 --> 06:13:16,878
that this time it used OpenAI's GBT 4.1

12092
06:13:16,878 --> 06:13:18,718
mini. All right, we'll just do one more

12093
06:13:18,718 --> 06:13:20,000
and then we'll break it down. So, I'm

12094
06:13:20,000 --> 06:13:21,360
going to ask it to do some research on

12095
06:13:21,360 --> 06:13:23,760
AI voice agents and create a blog post.

12096
06:13:23,760 --> 06:13:25,440
Here we go. It chose a model. It's going

12097
06:13:25,440 --> 06:13:27,600
to hit Tavi to do some web research.

12098
06:13:27,600 --> 06:13:29,760
It's going to create us a blog post, log

12099
06:13:29,760 --> 06:13:31,840
the output, and send it to us in Slack.

12100
06:13:31,840 --> 06:13:33,520
So, I'll check in when that's done. All

12101
06:13:33,520 --> 06:13:35,200
right, so it just finished up and as you

12102
06:13:35,200 --> 06:13:36,958
can see, it called the Tavly tool four

12103
06:13:36,958 --> 06:13:38,480
times. So, it did some in-depth

12104
06:13:38,480 --> 06:13:40,160
research. It logged the output and we

12105
06:13:40,160 --> 06:13:42,080
just got our blog back in Slack as you

12106
06:13:42,080 --> 06:13:45,200
can see. Wow. It is pretty thorough. It

12107
06:13:45,200 --> 06:13:47,280
talks about AI voice agents, the rise of

12108
06:13:47,280 --> 06:13:49,600
voice agents. Um there's key trends like

12109
06:13:49,600 --> 06:13:51,680
emotionally intelligent interactions,

12110
06:13:51,680 --> 06:13:53,600
advanced NLP, real-time multilingual

12111
06:13:53,600 --> 06:13:55,280
support, all this kind of stuff. Um

12112
06:13:55,280 --> 06:13:56,480
that's the whole blog, right? It ends

12113
06:13:56,480 --> 06:13:57,600
with a conclusion. And if you're

12114
06:13:57,600 --> 06:13:58,878
wondering what model it used for this

12115
06:13:58,878 --> 06:14:00,798
task, let's go look at our log. We can

12116
06:14:00,798 --> 06:14:03,200
see that it ended up using Claude 3.7

12117
06:14:03,200 --> 06:14:04,958
sonnet. And like I said, it knew it had

12118
06:14:04,958 --> 06:14:06,480
to do research. So it hit the tabletly

12119
06:14:06,480 --> 06:14:08,080
tool four different times. The first

12120
06:14:08,080 --> 06:14:09,760
time it searched for AI voice agents

12121
06:14:09,760 --> 06:14:12,080
trends, then it searched for case

12122
06:14:12,080 --> 06:14:14,400
studies, then it searched for growth

12123
06:14:14,400 --> 06:14:16,558
statistics, and then it searched for

12124
06:14:16,558 --> 06:14:18,878
ethical considerations. So, it made us a

12125
06:14:18,878 --> 06:14:21,360
pretty like holistic blog. Anyways, now

12126
06:14:21,360 --> 06:14:22,558
that you've seen a quick demo of how

12127
06:14:22,558 --> 06:14:24,558
this works, let's break down how I set

12128
06:14:24,558 --> 06:14:26,160
this up. So, the first things first,

12129
06:14:26,160 --> 06:14:27,760
we're talking to it in Slack and we're

12130
06:14:27,760 --> 06:14:29,680
getting a response back in Slack. And as

12131
06:14:29,680 --> 06:14:31,360
you can see, if I scroll up here, I had

12132
06:14:31,360 --> 06:14:33,040
a a few fails at the beginning when I

12133
06:14:33,040 --> 06:14:34,480
was setting up this trigger. So, if

12134
06:14:34,480 --> 06:14:35,840
you're trying to get it set up in Slack,

12135
06:14:35,840 --> 06:14:37,040
um it can be a little bit frustrating,

12136
06:14:37,040 --> 06:14:38,480
but I have a video right up here where I

12137
06:14:38,480 --> 06:14:40,160
walk through exactly how to do that.

12138
06:14:40,160 --> 06:14:41,760
Anyways, the key here is that we're

12139
06:14:41,760 --> 06:14:44,000
using Open Router as the chat model. So,

12140
06:14:44,000 --> 06:14:45,520
if you've never used Open Router, it's

12141
06:14:45,520 --> 06:14:47,040
basically a chat model that you can

12142
06:14:47,040 --> 06:14:48,878
connect to and it basically will let you

12143
06:14:48,878 --> 06:14:50,798
route to any model that you want. So, as

12144
06:14:50,798 --> 06:14:52,320
you can see, there's 300 plus models

12145
06:14:52,320 --> 06:14:54,480
that you can access through Open Router.

12146
06:14:54,480 --> 06:14:56,000
So, the idea here is that we have the

12147
06:14:56,000 --> 06:14:57,600
first agent, which is using a free model

12148
06:14:57,600 --> 06:15:00,400
like Gemini 2.0 Flash. we have this one

12149
06:15:00,400 --> 06:15:02,558
choosing which model to use based on the

12150
06:15:02,558 --> 06:15:04,240
input. And then whatever this model

12151
06:15:04,240 --> 06:15:05,840
chooses, we're using down here

12152
06:15:05,840 --> 06:15:07,760
dynamically for the second agent to

12153
06:15:07,760 --> 06:15:09,680
actually use in order to use its tools

12154
06:15:09,680 --> 06:15:11,680
or produce some sort of output for us.

12155
06:15:11,680 --> 06:15:12,878
And just so you can see what that looks

12156
06:15:12,878 --> 06:15:14,240
like, if I come in here, you can see

12157
06:15:14,240 --> 06:15:15,840
we're using a variable. But if I got rid

12158
06:15:15,840 --> 06:15:17,520
of that and we change this to fixed, you

12159
06:15:17,520 --> 06:15:18,958
can see that we have all of these models

12160
06:15:18,958 --> 06:15:21,200
within our open router dynamic brain to

12161
06:15:21,200 --> 06:15:23,280
choose from. But what we do is instead

12162
06:15:23,280 --> 06:15:24,718
of just choosing from one of these

12163
06:15:24,718 --> 06:15:26,480
models, we're basically just pulling the

12164
06:15:26,480 --> 06:15:28,878
output from the model selector agent

12165
06:15:28,878 --> 06:15:30,480
right into here. And that's the one that

12166
06:15:30,480 --> 06:15:33,040
it uses to process the next steps. Cool.

12167
06:15:33,040 --> 06:15:34,798
So let's first take a look at the model

12168
06:15:34,798 --> 06:15:36,798
selector. What happens in here is we're

12169
06:15:36,798 --> 06:15:38,878
feeding in the actual text that we sent

12170
06:15:38,878 --> 06:15:40,958
over in Slack. So that's pretty simple.

12171
06:15:40,958 --> 06:15:42,638
We're just sending over the message. And

12172
06:15:42,638 --> 06:15:44,320
then in the system message here, this is

12173
06:15:44,320 --> 06:15:45,760
where we actually can configure the

12174
06:15:45,760 --> 06:15:47,360
different models that the AI agent has

12175
06:15:47,360 --> 06:15:49,200
access to. So I said, "You're an agent

12176
06:15:49,200 --> 06:15:50,400
responsible for selecting the most

12177
06:15:50,400 --> 06:15:52,000
suitable large language model to handle

12178
06:15:52,000 --> 06:15:54,000
a given user request. Choose only one

12179
06:15:54,000 --> 06:15:55,840
model from the list below based strictly

12180
06:15:55,840 --> 06:15:57,920
on each model's strengths." So we told

12181
06:15:57,920 --> 06:15:59,280
it to analyze the request and then

12182
06:15:59,280 --> 06:16:01,360
return only the name of the model. We

12183
06:16:01,360 --> 06:16:02,878
gave it four models. Obviously, you

12184
06:16:02,878 --> 06:16:04,400
could give it more if you wanted to. And

12185
06:16:04,400 --> 06:16:05,680
down here, available models and

12186
06:16:05,680 --> 06:16:07,520
strengths. We gave it four models and we

12187
06:16:07,520 --> 06:16:09,040
basically defined what each one's good

12188
06:16:09,040 --> 06:16:10,558
at. You could give it more than four if

12189
06:16:10,558 --> 06:16:12,080
you wanted to, but just for this sake of

12190
06:16:12,080 --> 06:16:13,840
the demo, I only gave it four. And then

12191
06:16:13,840 --> 06:16:16,080
we basically said, return only one of

12192
06:16:16,080 --> 06:16:17,600
the following strings. And as you can

12193
06:16:17,600 --> 06:16:19,200
see in this example, it returned

12194
06:16:19,200 --> 06:16:21,840
anthropic claude 3.7 sonnet. And so one

12195
06:16:21,840 --> 06:16:23,600
quick thing to note here is when you use

12196
06:16:23,600 --> 06:16:25,840
Gemini 2.0 flash, for some reason it

12197
06:16:25,840 --> 06:16:28,320
likes to output a new line after a lot

12198
06:16:28,320 --> 06:16:29,958
of these

12199
06:16:29,958 --> 06:16:32,400
strings. So all I had to do later is I

12200
06:16:32,400 --> 06:16:33,680
clean up this new line and I'll show you

12201
06:16:33,680 --> 06:16:35,680
exactly what I mean by that. But now we

12202
06:16:35,680 --> 06:16:37,520
have the output of our model and then we

12203
06:16:37,520 --> 06:16:38,958
move on to the actual Smartyp Pants

12204
06:16:38,958 --> 06:16:40,638
agent. So in this one, we're giving it

12205
06:16:40,638 --> 06:16:42,798
the same user message as the previous

12206
06:16:42,798 --> 06:16:44,080
agent where we're just basically coming

12207
06:16:44,080 --> 06:16:45,760
to our Slack trigger and we're dragging

12208
06:16:45,760 --> 06:16:47,840
in the text from Slack. And what I

12209
06:16:47,840 --> 06:16:49,280
wanted to show you guys is that here we

12210
06:16:49,280 --> 06:16:51,120
have a system message and all I gave it

12211
06:16:51,120 --> 06:16:52,638
was the current date and time. So I

12212
06:16:52,638 --> 06:16:54,240
didn't tell it anything about using Tavi

12213
06:16:54,240 --> 06:16:55,600
for web search. I didn't tell it how to

12214
06:16:55,600 --> 06:16:57,200
use its calendar tools. This is just

12215
06:16:57,200 --> 06:16:58,480
going to show you that it's choosing a

12216
06:16:58,480 --> 06:17:00,320
model intelligent enough to understand

12217
06:17:00,320 --> 06:17:02,400
the tools that it has and how to use

12218
06:17:02,400 --> 06:17:04,320
them. And then of course the actual

12219
06:17:04,320 --> 06:17:06,160
dynamic brain part. We looked at this a

12220
06:17:06,160 --> 06:17:07,680
little bit, but basically all I did is I

12221
06:17:07,680 --> 06:17:09,840
pulled in the output of the previous

12222
06:17:09,840 --> 06:17:12,000
agent, the model selector agent. And

12223
06:17:12,000 --> 06:17:13,760
then, like I said, we had to just trim

12224
06:17:13,760 --> 06:17:16,240
up the end because if you just dragged

12225
06:17:16,240 --> 06:17:18,558
this in and Open Router was trying to

12226
06:17:18,558 --> 06:17:20,160
reference a model that had a new line

12227
06:17:20,160 --> 06:17:21,760
character after it, it would basically

12228
06:17:21,760 --> 06:17:23,200
just fail and say this model isn't

12229
06:17:23,200 --> 06:17:25,040
available. So, I trimmed up the end and

12230
06:17:25,040 --> 06:17:26,718
that's why. And you can see in my Open

12231
06:17:26,718 --> 06:17:29,200
Router account, if I go to my activity,

12232
06:17:29,200 --> 06:17:31,200
we can see which models we've used and

12233
06:17:31,200 --> 06:17:32,878
how much they've costed. So, anyways,

12234
06:17:32,878 --> 06:17:35,120
Gemini 2.0 Flash is a free model, but if

12235
06:17:35,120 --> 06:17:36,558
we use it through open router, they have

12236
06:17:36,558 --> 06:17:38,080
to take a little bit of a, you know,

12237
06:17:38,080 --> 06:17:39,360
they got to get some kickback there. So,

12238
06:17:39,360 --> 06:17:41,040
it's not exactly free, but it's really,

12239
06:17:41,040 --> 06:17:42,878
really cheap. But the idea here is, you

12240
06:17:42,878 --> 06:17:44,958
know, Claude 3.7 sonnet is more

12241
06:17:44,958 --> 06:17:46,480
expensive and we don't need to use it

12242
06:17:46,480 --> 06:17:48,080
all the time, but if we want our agent

12243
06:17:48,080 --> 06:17:50,080
to have the capability of using Claude

12244
06:17:50,080 --> 06:17:51,840
at some point, then we probably would

12245
06:17:51,840 --> 06:17:53,760
just have to plug in Claude. But now, if

12246
06:17:53,760 --> 06:17:55,360
you use this method, if you want to talk

12247
06:17:55,360 --> 06:17:56,798
to the agent just about some general

12248
06:17:56,798 --> 06:17:58,320
things or looking up something on your

12249
06:17:58,320 --> 06:18:00,080
calendar or sending an email, you don't

12250
06:18:00,080 --> 06:18:01,280
have to use Claude and waste these

12251
06:18:01,280 --> 06:18:02,798
credits. You could go ahead and use a

12252
06:18:02,798 --> 06:18:05,120
free model like 2.0 Flash or still a

12253
06:18:05,120 --> 06:18:07,760
very powerful cheap model like GPT 4.1

12254
06:18:07,760 --> 06:18:09,520
Mini. And that's not to say that 2.0

12255
06:18:09,520 --> 06:18:11,280
Flash isn't super powerful. It's just

12256
06:18:11,280 --> 06:18:12,878
more of a lightweight model. It's very

12257
06:18:12,878 --> 06:18:14,480
cheap. Anyways, that's just another cool

12258
06:18:14,480 --> 06:18:15,600
thing about Open Router. That's why I've

12259
06:18:15,600 --> 06:18:16,878
gotten in the habit of using it because

12260
06:18:16,878 --> 06:18:19,280
we can see the tokens, the cost, and the

12261
06:18:19,280 --> 06:18:20,480
breakdown of different models we've

12262
06:18:20,480 --> 06:18:22,000
used. From there, we're feeding the

12263
06:18:22,000 --> 06:18:23,520
output into a Google sheet template,

12264
06:18:23,520 --> 06:18:24,958
which by the way, you can download this

12265
06:18:24,958 --> 06:18:26,638
workflow as well as these other ones

12266
06:18:26,638 --> 06:18:28,160
down here that we'll look at in a sec.

12267
06:18:28,160 --> 06:18:29,440
You can download all this for free by

12268
06:18:29,440 --> 06:18:31,120
joining my Free School community. All

12269
06:18:31,120 --> 06:18:32,558
you have to do is go to YouTube

12270
06:18:32,558 --> 06:18:34,240
resources or search for the title of

12271
06:18:34,240 --> 06:18:35,600
this video and when you click on the

12272
06:18:35,600 --> 06:18:37,360
post associated with this video, you'll

12273
06:18:37,360 --> 06:18:39,200
have the JSON which is the end workflow

12274
06:18:39,200 --> 06:18:41,040
to download as well as you'll see this

12275
06:18:41,040 --> 06:18:42,798
Google sheet template somewhere in that

12276
06:18:42,798 --> 06:18:44,558
post so that you can just basically copy

12277
06:18:44,558 --> 06:18:46,000
it over and then you can plug everything

12278
06:18:46,000 --> 06:18:48,558
into your environment. Anyways, just

12279
06:18:48,558 --> 06:18:50,160
logging the output of course and we're

12280
06:18:50,160 --> 06:18:51,760
sending over a timestamp. So I just

12281
06:18:51,760 --> 06:18:53,040
said, you know, whatever time this

12282
06:18:53,040 --> 06:18:54,080
actually runs, you're going to send that

12283
06:18:54,080 --> 06:18:56,160
over the input. So the Slack message

12284
06:18:56,160 --> 06:18:57,920
that triggered this workflow. The

12285
06:18:57,920 --> 06:18:59,600
output, I'm basically just bringing the

12286
06:18:59,600 --> 06:19:01,040
output from the Smartyp Pants agent

12287
06:19:01,040 --> 06:19:02,798
right here. And then the model is the

12288
06:19:02,798 --> 06:19:04,958
output from the model selector agent.

12289
06:19:04,958 --> 06:19:06,400
And then all that's left to do is send

12290
06:19:06,400 --> 06:19:08,160
the response back to the human in Slack

12291
06:19:08,160 --> 06:19:09,760
where we connected to that same channel

12292
06:19:09,760 --> 06:19:11,760
and we're just sending the output from

12293
06:19:11,760 --> 06:19:14,000
the agent. So hopefully this is just

12294
06:19:14,000 --> 06:19:15,280
going to open your eyes to how you can

12295
06:19:15,280 --> 06:19:17,280
set up a system so that your actual main

12296
06:19:17,280 --> 06:19:19,440
agent is dynamically picking a brain to

12297
06:19:19,440 --> 06:19:21,840
optimize your cost and performance. And

12298
06:19:21,840 --> 06:19:23,840
in a space like AI where new models are

12299
06:19:23,840 --> 06:19:25,280
coming out all the time, it's important

12300
06:19:25,280 --> 06:19:26,798
to be able to test out different ones

12301
06:19:26,798 --> 06:19:28,400
for their outputs and see like what's

12302
06:19:28,400 --> 06:19:30,558
going on here, but also to be able to

12303
06:19:30,558 --> 06:19:32,240
compare them. So, two quick tools I'll

12304
06:19:32,240 --> 06:19:34,000
show you guys. This first one is Vellum,

12305
06:19:34,000 --> 06:19:35,520
which is an LLM leaderboard. You can

12306
06:19:35,520 --> 06:19:38,240
look at like reasoning, math, coding,

12307
06:19:38,240 --> 06:19:40,320
tool use. You have all this stuff. You

12308
06:19:40,320 --> 06:19:41,840
can compare models right here where you

12309
06:19:41,840 --> 06:19:43,878
can select them and look at their

12310
06:19:43,878 --> 06:19:45,840
differences. And then also down here is

12311
06:19:45,840 --> 06:19:48,160
model comparison with um all these

12312
06:19:48,160 --> 06:19:49,280
different statistics you can look at.

12313
06:19:49,280 --> 06:19:50,958
You can look at context, window, cost,

12314
06:19:50,958 --> 06:19:53,040
and speed. So, this is a good website to

12315
06:19:53,040 --> 06:19:54,400
look at, but just keep in mind it may

12316
06:19:54,400 --> 06:19:55,920
not always be completely up to date.

12317
06:19:55,920 --> 06:19:57,600
Right here, it was updated on April

12318
06:19:57,600 --> 06:20:00,080
17th, and today is the 30th, so doesn't

12319
06:20:00,080 --> 06:20:02,240
have like the 4.1 models. Anyways,

12320
06:20:02,240 --> 06:20:04,000
another one you could look at is this LM

12321
06:20:04,000 --> 06:20:05,360
Arena. So, I'll leave the link for this

12322
06:20:05,360 --> 06:20:07,040
one also down in the description. You

12323
06:20:07,040 --> 06:20:08,160
can basically compare different models

12324
06:20:08,160 --> 06:20:09,760
by chatting with them like side by side

12325
06:20:09,760 --> 06:20:11,920
or direct. People give ratings and then

12326
06:20:11,920 --> 06:20:13,200
you can look at the leaderboard for like

12327
06:20:13,200 --> 06:20:16,080
an overview or for text or for vision or

12328
06:20:16,080 --> 06:20:17,760
for whatever it is. just another good

12329
06:20:17,760 --> 06:20:19,920
tool to sort of compare some models.

12330
06:20:19,920 --> 06:20:21,280
Anyways, we'll just do one more quick

12331
06:20:21,280 --> 06:20:22,718
before we go on to the example down

12332
06:20:22,718 --> 06:20:24,718
below. Um because we haven't used the

12333
06:20:24,718 --> 06:20:26,240
reasoning model yet and those are

12334
06:20:26,240 --> 06:20:28,160
obviously more expensive. So, I'm asking

12335
06:20:28,160 --> 06:20:29,600
you a riddle. I said you have three

12336
06:20:29,600 --> 06:20:31,520
boxes. One has apples, one has only

12337
06:20:31,520 --> 06:20:33,440
oranges, and one has a mix of both.

12338
06:20:33,440 --> 06:20:35,360
They're all incorrectly labeled and you

12339
06:20:35,360 --> 06:20:36,878
can pick one fruit from the box without

12340
06:20:36,878 --> 06:20:38,878
looking. How can you label all boxes

12341
06:20:38,878 --> 06:20:40,878
correctly? So, let's see what it does.

12342
06:20:40,878 --> 06:20:42,000
Hopefully, it's using the reasoning

12343
06:20:42,000 --> 06:20:44,160
model. Okay, so it responded with a

12344
06:20:44,160 --> 06:20:45,920
succinct way to see it is to pick one

12345
06:20:45,920 --> 06:20:47,360
piece of fruit from the box labeled

12346
06:20:47,360 --> 06:20:49,040
apples and oranges. Since that label is

12347
06:20:49,040 --> 06:20:50,718
wrong, the box must actually contain

12348
06:20:50,718 --> 06:20:53,280
only apples or only oranges. Whatever

12349
06:20:53,280 --> 06:20:54,718
fruit you draw tells you which single

12350
06:20:54,718 --> 06:20:56,878
fruit box that really is. Once you know

12351
06:20:56,878 --> 06:20:58,718
which box is purely apples or purely

12352
06:20:58,718 --> 06:21:00,958
oranges, you can use the fact that all

12353
06:21:00,958 --> 06:21:02,400
labels are incorrect to deduce the

12354
06:21:02,400 --> 06:21:04,080
proper labels for the remaining two

12355
06:21:04,080 --> 06:21:06,320
boxes. And obviously, I had chatbt sort

12356
06:21:06,320 --> 06:21:07,760
of give me that riddle and that's

12357
06:21:07,760 --> 06:21:09,440
basically the answer it gave back. So,

12358
06:21:09,440 --> 06:21:11,280
real quick, let's go into our log and

12359
06:21:11,280 --> 06:21:13,440
we'll see which model it used. And it

12360
06:21:13,440 --> 06:21:16,160
used OpenAI's 01 reasoning model. And of

12361
06:21:16,160 --> 06:21:17,280
course, we can just verify that by

12362
06:21:17,280 --> 06:21:18,878
looking right here. And we can see it is

12363
06:21:18,878 --> 06:21:20,878
OpenAI 01. So, one thing I wanted to

12364
06:21:20,878 --> 06:21:22,400
throw out there real quick is that Open

12365
06:21:22,400 --> 06:21:24,480
Router does have sort of like an auto

12366
06:21:24,480 --> 06:21:26,200
option. You can see right here, Open

12367
06:21:26,200 --> 06:21:28,160
Router/auto, but it's not going to give

12368
06:21:28,160 --> 06:21:30,080
you as much control over which models

12369
06:21:30,080 --> 06:21:31,840
you can choose from, and it may not be

12370
06:21:31,840 --> 06:21:34,718
as costefficient as being able to define

12371
06:21:34,718 --> 06:21:36,000
here are the four models you have, and

12372
06:21:36,000 --> 06:21:37,840
here's when to use each one. So, just to

12373
06:21:37,840 --> 06:21:39,280
show you guys like what that would do if

12374
06:21:39,280 --> 06:21:40,638
I said, "Hey," it's going to use its

12375
06:21:40,638 --> 06:21:42,000
model and it's going to pick one based

12376
06:21:42,000 --> 06:21:43,760
on the input. And here you can see that

12377
06:21:43,760 --> 06:21:46,400
it used GPT4 mini. And then if I go

12378
06:21:46,400 --> 06:21:47,920
ahead and send in that same riddle that

12379
06:21:47,920 --> 06:21:49,840
I sent in earlier, remember earlier it

12380
06:21:49,840 --> 06:21:51,680
chose the reasoning model, but now it's

12381
06:21:51,680 --> 06:21:52,878
going to choose probably not the

12382
06:21:52,878 --> 06:21:54,320
reasoning model. So anyways, looks like

12383
06:21:54,320 --> 06:21:55,600
it got the riddle right. And we can see

12384
06:21:55,600 --> 06:21:57,040
that the model that it chose here was

12385
06:21:57,040 --> 06:21:59,360
just GPT40. So I guess the argument is

12386
06:21:59,360 --> 06:22:00,878
yes, this is cheaper than using 01. So

12387
06:22:00,878 --> 06:22:02,000
if you want to just test out your

12388
06:22:02,000 --> 06:22:04,240
workflows by using the auto function, go

12389
06:22:04,240 --> 06:22:05,840
for it. But if you do want more control

12390
06:22:05,840 --> 06:22:07,520
over which models to use, when to use

12391
06:22:07,520 --> 06:22:08,798
each one, and you want to get some

12392
06:22:08,798 --> 06:22:10,480
higher outputs in certain scenarios,

12393
06:22:10,480 --> 06:22:12,080
then you want to take probably the more

12394
06:22:12,080 --> 06:22:13,680
custom route. Anyways, just thought I'd

12395
06:22:13,680 --> 06:22:14,798
drop that in there. But let's get back

12396
06:22:14,798 --> 06:22:16,160
to the video. All right, so now that

12397
06:22:16,160 --> 06:22:17,520
you've seen how this agent can choose

12398
06:22:17,520 --> 06:22:19,280
between all those four models, let's

12399
06:22:19,280 --> 06:22:20,558
look at like a different type of example

12400
06:22:20,558 --> 06:22:22,080
here. Okay, so down here we have a rag

12401
06:22:22,080 --> 06:22:23,520
agent. And this is a really good use

12402
06:22:23,520 --> 06:22:25,600
case in my mind because sometimes you're

12403
06:22:25,600 --> 06:22:26,798
going to be chatting with a knowledge

12404
06:22:26,798 --> 06:22:28,240
base and it could be a really simple

12405
06:22:28,240 --> 06:22:30,080
query like, can you just remind me what

12406
06:22:30,080 --> 06:22:31,360
our shipping policy is? Or something

12407
06:22:31,360 --> 06:22:33,040
like that. But if you wanted to have

12408
06:22:33,040 --> 06:22:35,200
like a comparison and like a deep lookup

12409
06:22:35,200 --> 06:22:36,638
for something in the knowledge base,

12410
06:22:36,638 --> 06:22:38,798
you'd probably want more of a, you know,

12411
06:22:38,798 --> 06:22:40,320
a more intelligent model. So we're doing

12412
06:22:40,320 --> 06:22:41,920
a very similar thing here, right? This

12413
06:22:41,920 --> 06:22:43,680
agent is choosing the model with a free

12414
06:22:43,680 --> 06:22:45,120
model and then it's going to feed in

12415
06:22:45,120 --> 06:22:47,200
that selection to the dynamic brain for

12416
06:22:47,200 --> 06:22:49,280
the rag agent to do its lookup. And um

12417
06:22:49,280 --> 06:22:51,040
what I did down here is I just put a

12418
06:22:51,040 --> 06:22:52,638
very simple flow if you wanted to

12419
06:22:52,638 --> 06:22:55,360
download a file into Superbase just so

12420
06:22:55,360 --> 06:22:57,040
you can test out this Superbase rag

12421
06:22:57,040 --> 06:22:59,040
agent up here. But let's chat with this

12422
06:22:59,040 --> 06:23:00,638
thing real quick. Okay, so here is my

12423
06:23:00,638 --> 06:23:02,878
policy and FAQ document, right? And then

12424
06:23:02,878 --> 06:23:04,718
I have my Subbase table where I have

12425
06:23:04,718 --> 06:23:06,480
these four vectors in the documents

12426
06:23:06,480 --> 06:23:07,760
table. So what we're going to do is

12427
06:23:07,760 --> 06:23:09,280
query this agent for stuff that's in

12428
06:23:09,280 --> 06:23:11,600
that policy and FAQ document. And we're

12429
06:23:11,600 --> 06:23:13,200
going to see which model it uses based

12430
06:23:13,200 --> 06:23:15,600
on how complex the query is. So if I go

12431
06:23:15,600 --> 06:23:17,040
ahead and fire off what is our shipping

12432
06:23:17,040 --> 06:23:18,638
policy, we'll see that the model

12433
06:23:18,638 --> 06:23:20,240
selector is going to choose a model,

12434
06:23:20,240 --> 06:23:22,000
send it over, and now the agent is

12435
06:23:22,000 --> 06:23:23,600
querying Superbase and it's going to

12436
06:23:23,600 --> 06:23:25,520
respond with here's Tech Haven's

12437
06:23:25,520 --> 06:23:26,958
shipping policy. Orders are processed

12438
06:23:26,958 --> 06:23:28,558
within 1 to two days. standard shipping

12439
06:23:28,558 --> 06:23:29,840
takes 3 to seven business days, blah

12440
06:23:29,840 --> 06:23:31,440
blah blah. And if we compare that with

12441
06:23:31,440 --> 06:23:33,200
the actual documentation, you can see

12442
06:23:33,200 --> 06:23:35,120
that that is exactly what it should have

12443
06:23:35,120 --> 06:23:36,798
responded with. And you'll also notice

12444
06:23:36,798 --> 06:23:38,160
that in this example, we we're not

12445
06:23:38,160 --> 06:23:39,360
logging the outputs just because I

12446
06:23:39,360 --> 06:23:41,120
wanted to show a simple setup. But we

12447
06:23:41,120 --> 06:23:43,040
can see the model that it chose right

12448
06:23:43,040 --> 06:23:46,878
here was GPT 4.1 mini. And if we look in

12449
06:23:46,878 --> 06:23:48,320
this actual agent, you can see that we

12450
06:23:48,320 --> 06:23:50,080
only gave it two options, which was GPT

12451
06:23:50,080 --> 06:23:52,878
4.1 mini and anthropic cloud 3.5 sonnet,

12452
06:23:52,878 --> 06:23:54,240
just because of course I just wanted to

12453
06:23:54,240 --> 06:23:56,480
show a simple example. But you could up

12454
06:23:56,480 --> 06:23:58,878
this to multiple models if you'd like.

12455
06:23:58,878 --> 06:24:00,320
And just to show that this is working

12456
06:24:00,320 --> 06:24:02,080
dynamically, I'm going to say what's the

12457
06:24:02,080 --> 06:24:03,440
difference between our privacy policy

12458
06:24:03,440 --> 06:24:05,360
and our payment policy. And what happens

12459
06:24:05,360 --> 06:24:06,958
if someone wants to cancel their order

12460
06:24:06,958 --> 06:24:08,718
or return an item? So, we'll see.

12461
06:24:08,718 --> 06:24:10,240
Hopefully, it's choosing the cloud model

12462
06:24:10,240 --> 06:24:11,680
because this is a little bit more

12463
06:24:11,680 --> 06:24:14,240
complex. Um, it just searched the vector

12464
06:24:14,240 --> 06:24:15,760
database. We'll see if it has to go back

12465
06:24:15,760 --> 06:24:17,200
again or if it's writing an answer. It

12466
06:24:17,200 --> 06:24:18,480
looks like it's writing an answer right

12467
06:24:18,480 --> 06:24:20,400
now. And we'll see if this is accurate.

12468
06:24:20,400 --> 06:24:22,480
So, privacy versus payment. We have

12469
06:24:22,480 --> 06:24:24,160
privacy focuses on data protection.

12470
06:24:24,160 --> 06:24:26,080
payment covers accepted payment methods.

12471
06:24:26,080 --> 06:24:27,280
Um what happens if someone wants to

12472
06:24:27,280 --> 06:24:28,480
cancel the order? We have order

12473
06:24:28,480 --> 06:24:30,320
cancellation can be cancelled within 12

12474
06:24:30,320 --> 06:24:32,080
hours. And we have a refund policy as

12475
06:24:32,080 --> 06:24:34,240
well. And if we go in here, we could

12476
06:24:34,240 --> 06:24:36,400
validate that all this information is on

12477
06:24:36,400 --> 06:24:38,000
here. And we can see this is how you

12478
06:24:38,000 --> 06:24:41,200
cancel. And then this is how you refund.

12479
06:24:41,200 --> 06:24:42,638
Oh yeah, right here. Visit our returns

12480
06:24:42,638 --> 06:24:44,400
and refund page. And we'll see what it

12481
06:24:44,400 --> 06:24:46,000
says is that here is our return and

12482
06:24:46,000 --> 06:24:47,600
refund policy. And all this information

12483
06:24:47,600 --> 06:24:50,798
matches exactly what it says down here.

12484
06:24:50,798 --> 06:24:52,080
Okay. So those are the two flows I

12485
06:24:52,080 --> 06:24:53,360
wanted to share with you guys today.

12486
06:24:53,360 --> 06:24:54,558
Really, I just hope that this is going

12487
06:24:54,558 --> 06:24:56,080
to open your eyes to the fact that you

12488
06:24:56,080 --> 06:24:58,638
can have models be dynamic based on the

12489
06:24:58,638 --> 06:25:00,480
input, which really in the long run will

12490
06:25:00,480 --> 06:25:02,798
save you a lot of tokens for your

12491
06:25:02,798 --> 06:25:04,480
different chat models. All right, so now

12492
06:25:04,480 --> 06:25:05,600
we're going to move on to web hooks,

12493
06:25:05,600 --> 06:25:06,798
which I remember seemed really

12494
06:25:06,798 --> 06:25:08,638
intimidating as well, just like APIs and

12495
06:25:08,638 --> 06:25:10,958
HTTP requests, but they're really even

12496
06:25:10,958 --> 06:25:12,798
simpler. So, we're going to dive into

12497
06:25:12,798 --> 06:25:14,240
what exactly they are and show an

12498
06:25:14,240 --> 06:25:16,000
example of how that works in NN. And

12499
06:25:16,000 --> 06:25:17,120
then I'm going to show you guys two

12500
06:25:17,120 --> 06:25:19,440
workflows that are triggered by NAN web

12501
06:25:19,440 --> 06:25:21,280
hooks and then we send data back to that

12502
06:25:21,280 --> 06:25:22,878
web hook. So, don't worry, you guys will

12503
06:25:22,878 --> 06:25:24,160
see exactly what I'm talking about.

12504
06:25:24,160 --> 06:25:27,680
Let's get into it. Okay, web hooks. So,

12505
06:25:27,680 --> 06:25:29,520
I remember when I first learned about

12506
06:25:29,520 --> 06:25:31,878
APIs and HTTP requests, and then I was

12507
06:25:31,878 --> 06:25:34,638
like, what in the world is a web hook?

12508
06:25:34,638 --> 06:25:36,798
They're pretty much the same thing

12509
06:25:36,798 --> 06:25:38,878
except for, think about it like this.

12510
06:25:38,878 --> 06:25:41,920
The web hook, rather than us sending off

12511
06:25:41,920 --> 06:25:43,680
data somewhere or like sending off an

12512
06:25:43,680 --> 06:25:46,400
API call, we are the one that's waiting

12513
06:25:46,400 --> 06:25:48,558
for an API call. We're just waiting and

12514
06:25:48,558 --> 06:25:51,840
listening for data. So let me show you

12515
06:25:51,840 --> 06:25:53,240
an example of what that actually looks

12516
06:25:53,240 --> 06:25:55,360
like. So here you can see we have a web

12517
06:25:55,360 --> 06:25:57,040
hook trigger and a web hook is always

12518
06:25:57,040 --> 06:25:58,400
going to come in the form of a trigger

12519
06:25:58,400 --> 06:26:01,200
because essentially our end workflow is

12520
06:26:01,200 --> 06:26:03,040
waiting for data to be sent to it.

12521
06:26:03,040 --> 06:26:04,558
Whether that's like a form is submitted

12522
06:26:04,558 --> 06:26:07,200
and now the web hook gets it or whatever

12523
06:26:07,200 --> 06:26:09,200
that is we are waiting for the data

12524
06:26:09,200 --> 06:26:10,878
here. So when I click into the web hook

12525
06:26:10,878 --> 06:26:13,440
what we see is we have a URL and this is

12526
06:26:13,440 --> 06:26:15,840
basically the URL that wherever we're

12527
06:26:15,840 --> 06:26:18,638
sending data from is going to send data

12528
06:26:18,638 --> 06:26:21,200
to. So later in this course, I'm going

12529
06:26:21,200 --> 06:26:22,480
to show you an example where I do like

12530
06:26:22,480 --> 06:26:25,200
an 11labs voice agent. And so our end

12531
06:26:25,200 --> 06:26:28,160
web hook URL right here, that's where 11

12532
06:26:28,160 --> 06:26:29,840
Labs is sending data to. Or I'll show

12533
06:26:29,840 --> 06:26:31,200
you an example with lovable where I

12534
06:26:31,200 --> 06:26:33,120
build a little app and then our app is

12535
06:26:33,120 --> 06:26:35,360
sending data to this URL. So that's how

12536
06:26:35,360 --> 06:26:37,360
it works, right? Important things to

12537
06:26:37,360 --> 06:26:38,798
remember is you still have to set up

12538
06:26:38,798 --> 06:26:40,798
your method. So if you are setting up

12539
06:26:40,798 --> 06:26:42,638
some sort of request on a different

12540
06:26:42,638 --> 06:26:44,160
service and you're sending data to this

12541
06:26:44,160 --> 06:26:45,680
web hook, it's probably going to be a

12542
06:26:45,680 --> 06:26:47,200
post. So, you'll want to change that and

12543
06:26:47,200 --> 06:26:49,680
make sure that these actually align.

12544
06:26:49,680 --> 06:26:51,200
Anyways, what we're going to do is we're

12545
06:26:51,200 --> 06:26:52,320
going to change this to a post because I

12546
06:26:52,320 --> 06:26:54,160
I just know it's going to be post. And

12547
06:26:54,160 --> 06:26:56,320
this is our web hook URL, which is a

12548
06:26:56,320 --> 06:26:59,440
test URL. So, I'm going to click on the

12549
06:26:59,440 --> 06:27:01,200
button to copy it. And what I'm going to

12550
06:27:01,200 --> 06:27:02,878
do is take this and I'm going to go into

12551
06:27:02,878 --> 06:27:04,638
Postman, which is just kind of like an

12552
06:27:04,638 --> 06:27:06,638
API platform that I use to show some

12553
06:27:06,638 --> 06:27:08,478
demos of how we can send these requests.

12554
06:27:08,478 --> 06:27:10,200
So, I'm going to click on send an API

12555
06:27:10,200 --> 06:27:12,400
request in here. This basically just

12556
06:27:12,400 --> 06:27:14,160
lets us test out and see if our web

12557
06:27:14,160 --> 06:27:16,558
hook's working. So what I'm going to do

12558
06:27:16,558 --> 06:27:18,000
is I'm going to change the request to

12559
06:27:18,000 --> 06:27:20,240
post. I'm going to enter the web hook

12560
06:27:20,240 --> 06:27:23,760
URL from my NAND web hook. Okay. And now

12561
06:27:23,760 --> 06:27:25,280
basically what we have is the ability to

12562
06:27:25,280 --> 06:27:27,360
send over certain information. So I'm

12563
06:27:27,360 --> 06:27:28,958
just going to go to body. I'm going to

12564
06:27:28,958 --> 06:27:31,200
send over form data. And now you can see

12565
06:27:31,200 --> 06:27:33,440
just like JSON, it's key value pairs. So

12566
06:27:33,440 --> 06:27:35,840
I'm just going to send over a field

12567
06:27:35,840 --> 06:27:37,440
called text. And the actual value is

12568
06:27:37,440 --> 06:27:39,760
going to be hello. Okay. So that's it.

12569
06:27:39,760 --> 06:27:41,840
I'm going to click on send. But what

12570
06:27:41,840 --> 06:27:43,200
happens is we're going to get a request

12571
06:27:43,200 --> 06:27:45,680
back which is a 404 error. It says the

12572
06:27:45,680 --> 06:27:48,080
web hook is not registered and basically

12573
06:27:48,080 --> 06:27:50,000
there's a hint that says click the test

12574
06:27:50,000 --> 06:27:53,760
workflow button. So because this

12575
06:27:53,760 --> 06:27:55,840
workflow I'm sorry because the web hook

12576
06:27:55,840 --> 06:27:57,360
is supposed to be listening right now

12577
06:27:57,360 --> 06:27:58,958
it's not listening. And the reason it's

12578
06:27:58,958 --> 06:28:00,638
not listening is because we are in an

12579
06:28:00,638 --> 06:28:02,400
act inactive workflow like we've talked

12580
06:28:02,400 --> 06:28:03,920
about before and we haven't clicked

12581
06:28:03,920 --> 06:28:05,760
listen for test event. So if I click

12582
06:28:05,760 --> 06:28:08,878
listen now you can see it is listening

12583
06:28:08,878 --> 06:28:11,600
for this URL. Okay. So, I go back into

12584
06:28:11,600 --> 06:28:13,920
Postman. I hit send. And now it's going

12585
06:28:13,920 --> 06:28:15,920
to say workflow was started. I come back

12586
06:28:15,920 --> 06:28:17,360
into here. We can see that the node has

12587
06:28:17,360 --> 06:28:20,160
executed. And what we have is our text

12588
06:28:20,160 --> 06:28:21,520
that we entered right there in the body,

12589
06:28:21,520 --> 06:28:23,600
which was text equals hello. We also get

12590
06:28:23,600 --> 06:28:24,958
all this other random stuff that we

12591
06:28:24,958 --> 06:28:27,200
don't really need. Um, I don't even know

12592
06:28:27,200 --> 06:28:28,478
what this stuff really stands for. We

12593
06:28:28,478 --> 06:28:30,400
can see our host was our our nit cloud

12594
06:28:30,400 --> 06:28:33,680
account. All this kind of stuff. Um, but

12595
06:28:33,680 --> 06:28:35,360
that's not super important for us right

12596
06:28:35,360 --> 06:28:36,798
now, right? I just wanted to show that

12597
06:28:36,798 --> 06:28:38,958
that's how it works. So, they're both

12598
06:28:38,958 --> 06:28:41,680
configured as post. Our postman is

12599
06:28:41,680 --> 06:28:45,200
sending data to this address and we saw

12600
06:28:45,200 --> 06:28:47,600
that it worked right. So what comes next

12601
06:28:47,600 --> 06:28:50,080
is the fact that we can respond to this

12602
06:28:50,080 --> 06:28:52,080
web hook. So right now we're set to

12603
06:28:52,080 --> 06:28:54,400
respond immediately which would be

12604
06:28:54,400 --> 06:28:56,400
sending data back right away. But let's

12605
06:28:56,400 --> 06:28:58,400
say later you'll see an example in 11

12606
06:28:58,400 --> 06:29:00,798
labs and my end workflow we where we

12607
06:29:00,798 --> 06:29:02,798
want to grab data do something with it

12608
06:29:02,798 --> 06:29:04,478
and send something back. And how that

12609
06:29:04,478 --> 06:29:05,600
would work is we would change this

12610
06:29:05,600 --> 06:29:08,478
method to using respond to web hook node

12611
06:29:08,478 --> 06:29:09,920
and then we basically like add like

12612
06:29:09,920 --> 06:29:11,600
maybe an AI agent right here and then

12613
06:29:11,600 --> 06:29:13,200
after the AI agent we would basically

12614
06:29:13,200 --> 06:29:15,680
just go respond to web hook and as you

12615
06:29:15,680 --> 06:29:17,360
can see it just returns data to that

12616
06:29:17,360 --> 06:29:18,958
same web hook address. So that would

12617
06:29:18,958 --> 06:29:21,520
just be sending data back to lovable 11s

12618
06:29:21,520 --> 06:29:23,280
postman wherever we actually got the

12619
06:29:23,280 --> 06:29:25,360
initial request from we would do

12620
06:29:25,360 --> 06:29:26,798
something with that data and send it

12621
06:29:26,798 --> 06:29:29,680
back to that web hook. So really, it's

12622
06:29:29,680 --> 06:29:31,120
the exact same way that we think about

12623
06:29:31,120 --> 06:29:33,520
APIs except for we are now the API

12624
06:29:33,520 --> 06:29:35,040
server rather than the person who's

12625
06:29:35,040 --> 06:29:36,638
sending the request. So if you think

12626
06:29:36,638 --> 06:29:39,760
about the example with um being at a

12627
06:29:39,760 --> 06:29:41,840
restaurant, you know, like we would look

12628
06:29:41,840 --> 06:29:44,160
at the menu, we would send off a request

12629
06:29:44,160 --> 06:29:46,080
through the waiter to the kitchen and

12630
06:29:46,080 --> 06:29:47,840
then the kitchen would get that request

12631
06:29:47,840 --> 06:29:50,160
via a web hook. They would create the

12632
06:29:50,160 --> 06:29:52,958
food and then they would send it back to

12633
06:29:52,958 --> 06:29:55,440
the actual person via responding to web

12634
06:29:55,440 --> 06:29:56,878
hook. So that's all it is. is we are

12635
06:29:56,878 --> 06:29:59,040
just on the other side of the table now.

12636
06:29:59,040 --> 06:30:00,478
And then one last important thing to

12637
06:30:00,478 --> 06:30:03,600
know about web hooks in NN is ideally

12638
06:30:03,600 --> 06:30:05,280
you have to make it active. So we would

12639
06:30:05,280 --> 06:30:06,878
click on active but what it's going to

12640
06:30:06,878 --> 06:30:09,360
tell us is that you can now make calls

12641
06:30:09,360 --> 06:30:11,840
to your production web hook URL no

12642
06:30:11,840 --> 06:30:14,400
longer the test URL. So if you remember

12643
06:30:14,400 --> 06:30:16,558
in here we have test and production and

12644
06:30:16,558 --> 06:30:18,638
what I copied into Postman was the test.

12645
06:30:18,638 --> 06:30:20,520
So if I go back into Postman and I hit

12646
06:30:20,520 --> 06:30:23,760
send, nothing happens, right? But if I

12647
06:30:23,760 --> 06:30:26,120
now go to production URL, copy the

12648
06:30:26,120 --> 06:30:28,558
production, go into Postman and paste in

12649
06:30:28,558 --> 06:30:30,958
the production URL, hit send. There we

12650
06:30:30,958 --> 06:30:33,760
go. Workflow was started because that's

12651
06:30:33,760 --> 06:30:35,520
the actual active workflow production

12652
06:30:35,520 --> 06:30:38,080
URL. So I can click on executions and we

12653
06:30:38,080 --> 06:30:40,000
can see this is the newest one we just

12654
06:30:40,000 --> 06:30:41,840
got when we made our workflow active and

12655
06:30:41,840 --> 06:30:43,600
it did in fact start. And just to prove

12656
06:30:43,600 --> 06:30:45,440
to you that that's how it works, let me

12657
06:30:45,440 --> 06:30:47,360
change the body which now instead of

12658
06:30:47,360 --> 06:30:49,160
saying hello, it's going to

12659
06:30:49,160 --> 06:30:53,840
say active run.

12660
06:30:54,680 --> 06:30:57,040
Oops. And we'll send that off. Go into

12661
06:30:57,040 --> 06:30:58,958
edit end and we'll basically just watch

12662
06:30:58,958 --> 06:31:01,280
a new execution will pop up because it's

12663
06:31:01,280 --> 06:31:02,478
actively listening. I'm not doing

12664
06:31:02,478 --> 06:31:03,920
anything. There you go. You see it pop

12665
06:31:03,920 --> 06:31:06,360
up. And if we click into the actual web

12666
06:31:06,360 --> 06:31:08,718
hook data, we will see right here the

12667
06:31:08,718 --> 06:31:11,280
text says active run. Cool. So that's

12668
06:31:11,280 --> 06:31:12,878
web hooks. Hopefully that clears up any

12669
06:31:12,878 --> 06:31:13,920
confusion that you may have had

12670
06:31:13,920 --> 06:31:15,760
regarding web hooks. But let's dive into

12671
06:31:15,760 --> 06:31:17,520
some examples in NAND where we have a

12672
06:31:17,520 --> 06:31:18,958
web hook trigger and then we're also

12673
06:31:18,958 --> 06:31:20,958
configuring that other third party app

12674
06:31:20,958 --> 06:31:22,558
that's going to send data to our web

12675
06:31:22,558 --> 06:31:25,920
hook and trigger the

12676
06:31:27,000 --> 06:31:29,520
workflow. Hey there, I'm Archer. What

12677
06:31:29,520 --> 06:31:31,760
can I do for you? Hey Archer, can you

12678
06:31:31,760 --> 06:31:32,920
help me send an

12679
06:31:32,920 --> 06:31:35,440
email? Of course, I'd be delighted to

12680
06:31:35,440 --> 06:31:37,920
help. Who's the email for and what's it

12681
06:31:37,920 --> 06:31:40,400
about? Just give me the details and I'll

12682
06:31:40,400 --> 06:31:43,040
get it sent out. Awesome. Yeah, I just

12683
06:31:43,040 --> 06:31:44,878
wanted to send one to Phil. I wanted to

12684
06:31:44,878 --> 06:31:46,558
ask about an update for the project that

12685
06:31:46,558 --> 06:31:49,680
we discussed last week. Got it. So, you

12686
06:31:49,680 --> 06:31:51,360
want to send an email to Phil asking

12687
06:31:51,360 --> 06:31:53,638
about a project update? No

12688
06:31:53,638 --> 06:31:55,920
problem. I'll handle that. Just hang

12689
06:31:55,920 --> 06:31:58,160
tight while I send this off. All done.

12690
06:31:58,160 --> 06:32:00,000
It's been sent to Phil. He'll be getting

12691
06:32:00,000 --> 06:32:02,080
that email any minute. Anything else I

12692
06:32:02,080 --> 06:32:03,520
can help you with? Yeah, could you

12693
06:32:03,520 --> 06:32:04,478
actually go ahead and help me send

12694
06:32:04,478 --> 06:32:06,478
another one?

12695
06:32:06,478 --> 06:32:08,478
Of course. I'm always happy to lend a

12696
06:32:08,478 --> 06:32:10,478
hand, or rather an email address. Who is

12697
06:32:10,478 --> 06:32:12,558
this email for and what's it about? Just

12698
06:32:12,558 --> 06:32:15,040
give me the details and I'll whip it up.

12699
06:32:15,040 --> 06:32:16,958
Just another one to Phil. I forgot to

12700
06:32:16,958 --> 06:32:18,478
mention that I wanted to see if he wants

12701
06:32:18,478 --> 06:32:21,958
to get lunch tomorrow.

12702
06:32:22,638 --> 06:32:24,878
All right, another email to Phil. This

12703
06:32:24,878 --> 06:32:26,798
time to ask about lunch tomorrow. I'm on

12704
06:32:26,798 --> 06:32:29,360
it. Just a sec. Gotcha. The email is on

12705
06:32:29,360 --> 06:32:31,040
its way to Phil. He'll be sure to see

12706
06:32:31,040 --> 06:32:32,878
your invitation for lunch tomorrow. Let

12707
06:32:32,878 --> 06:32:35,200
me know if you need anything else. No,

12708
06:32:35,200 --> 06:32:37,520
that's going to be it. Thanks, Archer.

12709
06:32:37,520 --> 06:32:39,520
You're very welcome. Always happy to

12710
06:32:39,520 --> 06:32:40,958
help, especially when it comes to

12711
06:32:40,958 --> 06:32:42,958
emails. happy to handle any other

12712
06:32:42,958 --> 06:32:44,878
messages you need to send in the future.

12713
06:32:44,878 --> 06:32:46,878
Have a great day. Okay, so that was a

12714
06:32:46,878 --> 06:32:48,160
quick demo of the super cool

12715
06:32:48,160 --> 06:32:49,760
conversational voice agent that we built

12716
06:32:49,760 --> 06:32:52,638
using 11 Labs and Nad. His name's Archer

12717
06:32:52,638 --> 06:32:54,320
and he helps us send emails. As you can

12718
06:32:54,320 --> 06:32:56,240
tell, he was very enthusiastic about

12719
06:32:56,240 --> 06:32:58,080
sending emails. So, here's that first

12720
06:32:58,080 --> 06:32:59,600
email that we asked Archer to send to

12721
06:32:59,600 --> 06:33:01,200
Phil. Hi, Phil. I hope this message

12722
06:33:01,200 --> 06:33:02,558
finds you well. I'm writing to inquire

12723
06:33:02,558 --> 06:33:03,840
about the project update we discussed

12724
06:33:03,840 --> 06:33:05,200
last week. Could you please share the

12725
06:33:05,200 --> 06:33:06,478
latest developments at your earliest

12726
06:33:06,478 --> 06:33:07,920
convenience? Looking forward to your

12727
06:33:07,920 --> 06:33:09,760
response. Best Nate. And then we asked

12728
06:33:09,760 --> 06:33:11,280
Archer to send another email just asking

12729
06:33:11,280 --> 06:33:12,958
if he wants to get lunch tomorrow to

12730
06:33:12,958 --> 06:33:15,120
Phil. So, hi Phil. I was wondering if

12731
06:33:15,120 --> 06:33:16,240
you're available for lunch tomorrow. Let

12732
06:33:16,240 --> 06:33:17,680
me know what works for you. Best Nate.

12733
06:33:17,680 --> 06:33:19,120
So, now that we've seen a quick demo, we

12734
06:33:19,120 --> 06:33:20,638
heard the voice. We've seen the emails

12735
06:33:20,638 --> 06:33:21,680
actually come through. We're going to

12736
06:33:21,680 --> 06:33:22,878
hop back into Nad and we're going to

12737
06:33:22,878 --> 06:33:24,478
explain what's going on here so that you

12738
06:33:24,478 --> 06:33:26,000
guys can get this sort of system up and

12739
06:33:26,000 --> 06:33:27,440
running for yourselves. Okay, so there

12740
06:33:27,440 --> 06:33:28,478
are a few things that I want to break

12741
06:33:28,478 --> 06:33:30,320
down here. First of all, just within

12742
06:33:30,320 --> 06:33:32,080
NAN, whenever you're building an AI

12743
06:33:32,080 --> 06:33:33,680
agent, as you guys should know, there's

12744
06:33:33,680 --> 06:33:35,840
going to be an input and then that input

12745
06:33:35,840 --> 06:33:37,440
is going to be fed into the agent. The

12746
06:33:37,440 --> 06:33:38,878
agent's going to use its system prompt

12747
06:33:38,878 --> 06:33:41,040
and its brain to understand what tools

12748
06:33:41,040 --> 06:33:42,718
it needs to hit. It's going to use those

12749
06:33:42,718 --> 06:33:44,080
tools to take action and then there's

12750
06:33:44,080 --> 06:33:46,000
going to be some sort of output. So, in

12751
06:33:46,000 --> 06:33:47,840
the past when we've done tutorials on

12752
06:33:47,840 --> 06:33:49,360
personal assistants, email agents,

12753
06:33:49,360 --> 06:33:51,440
whatever it was, rag agents, usually

12754
06:33:51,440 --> 06:33:52,958
that the input that we've been using has

12755
06:33:52,958 --> 06:33:56,080
been something like Telegram or Gmail or

12756
06:33:56,080 --> 06:33:58,718
even just the NAN chat trigger. Pretty

12757
06:33:58,718 --> 06:33:59,920
much all we're switching out here for

12758
06:33:59,920 --> 06:34:02,478
the input and the output is 11 Labs. So,

12759
06:34:02,478 --> 06:34:04,160
we're going to be getting a post request

12760
06:34:04,160 --> 06:34:05,520
from 11 Labs, which is going to send

12761
06:34:05,520 --> 06:34:07,360
over the body parameters like who the

12762
06:34:07,360 --> 06:34:09,920
email is going to, um, what the message

12763
06:34:09,920 --> 06:34:11,440
is going to say, stuff like that. And

12764
06:34:11,440 --> 06:34:12,798
then the agent once it actually does

12765
06:34:12,798 --> 06:34:14,558
that, it's going to respond using this

12766
06:34:14,558 --> 06:34:16,160
respond to web hook node. So, we'll get

12767
06:34:16,160 --> 06:34:17,520
into 11 Labs and I'll show you guys how

12768
06:34:17,520 --> 06:34:18,878
I prompted the agent and everything like

12769
06:34:18,878 --> 06:34:21,040
that in 11 Labs. But first, let's take a

12770
06:34:21,040 --> 06:34:22,798
quick look at what's going on in the

12771
06:34:22,798 --> 06:34:25,360
super simple agent setup here in NN. So,

12772
06:34:25,360 --> 06:34:26,638
these are tools that I've used multiple

12773
06:34:26,638 --> 06:34:28,240
times on videos on my channel. The first

12774
06:34:28,240 --> 06:34:30,240
one is contact data. So, it's just a

12775
06:34:30,240 --> 06:34:31,520
simple Google sheet. This is what it

12776
06:34:31,520 --> 06:34:33,040
looks like. Here's Phil's information

12777
06:34:33,040 --> 06:34:34,478
with the correct Gmail that we were

12778
06:34:34,478 --> 06:34:36,080
having information sent to. And then I

12779
06:34:36,080 --> 06:34:37,360
just put other ones in here just to sort

12780
06:34:37,360 --> 06:34:39,600
of dummy data. But all we're doing is

12781
06:34:39,600 --> 06:34:42,000
we're hooking up the tool um Google

12782
06:34:42,000 --> 06:34:44,558
Sheets. It's going to be reading get

12783
06:34:44,558 --> 06:34:46,240
rows sheet within the document. We link

12784
06:34:46,240 --> 06:34:47,600
the document. That's pretty much all we

12785
06:34:47,600 --> 06:34:49,280
had to do. Um and then we just called it

12786
06:34:49,280 --> 06:34:50,478
contact data so that when we're

12787
06:34:50,478 --> 06:34:52,080
prompting the agent, it knows when to

12788
06:34:52,080 --> 06:34:54,798
use this tool, what it has. And then the

12789
06:34:54,798 --> 06:34:56,878
actual tool that sends emails is the

12790
06:34:56,878 --> 06:34:58,638
send email tool. So in here we're

12791
06:34:58,638 --> 06:35:01,760
connecting a Gmail tool. Um this one is

12792
06:35:01,760 --> 06:35:03,040
you know we're using all the from AI

12793
06:35:03,040 --> 06:35:05,000
functions which makes it really really

12794
06:35:05,000 --> 06:35:07,600
easy. Um we're sending a message of

12795
06:35:07,600 --> 06:35:09,440
course and so the from AI function

12796
06:35:09,440 --> 06:35:11,360
basically takes the query coming in from

12797
06:35:11,360 --> 06:35:14,160
the agent and understands um dynamically

12798
06:35:14,160 --> 06:35:16,080
the AI is looking for okay what's the

12799
06:35:16,080 --> 06:35:17,920
email address based on the user's

12800
06:35:17,920 --> 06:35:19,920
message. Okay we grab the email address

12801
06:35:19,920 --> 06:35:20,878
we're going to put it in the two

12802
06:35:20,878 --> 06:35:22,798
parameter. How can we make a subject out

12803
06:35:22,798 --> 06:35:24,478
of this message? We'll put it here. And

12804
06:35:24,478 --> 06:35:26,000
then how can we actually construct an

12805
06:35:26,000 --> 06:35:28,080
email body and we put it there. So

12806
06:35:28,080 --> 06:35:29,440
that's all that's going on here. Here

12807
06:35:29,440 --> 06:35:31,200
we've got our tools. We've obviously got

12808
06:35:31,200 --> 06:35:32,638
a chat model. In this case, we're just

12809
06:35:32,638 --> 06:35:34,680
using um

12810
06:35:34,680 --> 06:35:37,280
GPT40. And then we have the actual

12811
06:35:37,280 --> 06:35:39,840
what's taking place within the agent. So

12812
06:35:39,840 --> 06:35:41,360
obviously there's an input coming in. So

12813
06:35:41,360 --> 06:35:43,360
that's where we define this information.

12814
06:35:43,360 --> 06:35:46,478
Input agent output and then the actual

12815
06:35:46,478 --> 06:35:48,160
system message for the agent. So the

12816
06:35:48,160 --> 06:35:49,360
system message is a little bit different

12817
06:35:49,360 --> 06:35:51,280
than the user agent. The system message

12818
06:35:51,280 --> 06:35:53,760
is defining the role. This is your job

12819
06:35:53,760 --> 06:35:55,280
as an agent. This is what you should be

12820
06:35:55,280 --> 06:35:57,040
doing. These are the tools you have. And

12821
06:35:57,040 --> 06:35:58,958
then the user message is like each

12822
06:35:58,958 --> 06:36:01,440
execution, each each run, each time that

12823
06:36:01,440 --> 06:36:03,680
we interact with the agent through 11

12824
06:36:03,680 --> 06:36:05,120
Labs, it's going to be a different user

12825
06:36:05,120 --> 06:36:06,478
message coming in, but the system

12826
06:36:06,478 --> 06:36:07,680
message is always going to remain the

12827
06:36:07,680 --> 06:36:09,840
same as it's the prompt for the AI

12828
06:36:09,840 --> 06:36:11,840
agents behavior. Anyways, let's take a

12829
06:36:11,840 --> 06:36:13,320
look at the prompt that we have here.

12830
06:36:13,320 --> 06:36:15,760
First, the overview is that you are an

12831
06:36:15,760 --> 06:36:17,520
AI agent responsible for drafting and

12832
06:36:17,520 --> 06:36:19,280
sending professional emails based on the

12833
06:36:19,280 --> 06:36:20,958
user's instructions. You have access to

12834
06:36:20,958 --> 06:36:23,280
two tools, contact data to find email

12835
06:36:23,280 --> 06:36:25,200
addresses and send email to compose and

12836
06:36:25,200 --> 06:36:27,360
send emails. Your objective is to

12837
06:36:27,360 --> 06:36:28,798
identify the recipient's contact

12838
06:36:28,798 --> 06:36:31,120
information, draft a professional email

12839
06:36:31,120 --> 06:36:34,000
and sign off as Nate before sending. The

12840
06:36:34,000 --> 06:36:36,160
tools you have obviously uh contact

12841
06:36:36,160 --> 06:36:37,840
data. It retrieves email addresses based

12842
06:36:37,840 --> 06:36:39,680
on the name. So we have an example input

12843
06:36:39,680 --> 06:36:41,600
John Doe. Example output an email

12844
06:36:41,600 --> 06:36:43,360
address and then send email. Sends an

12845
06:36:43,360 --> 06:36:45,040
email with a subject and a body. The

12846
06:36:45,040 --> 06:36:47,120
example input here is an email address.

12847
06:36:47,120 --> 06:36:49,520
Um subject and a body with example email

12848
06:36:49,520 --> 06:36:52,638
subject body. Um so that's what we have

12849
06:36:52,638 --> 06:36:55,760
for the system message. And then for the

12850
06:36:55,760 --> 06:36:57,680
um user message, as you can see, we're

12851
06:36:57,680 --> 06:36:59,680
basically just saying um okay, so the

12852
06:36:59,680 --> 06:37:01,280
email is going to be for this person and

12853
06:37:01,280 --> 06:37:02,798
the email content is going to be this.

12854
06:37:02,798 --> 06:37:04,798
So in this case, this execution it was

12855
06:37:04,798 --> 06:37:06,478
the email's for Phil and the email

12856
06:37:06,478 --> 06:37:08,718
content is asking about lunch tomorrow.

12857
06:37:08,718 --> 06:37:10,478
So that's all that we're being fed in

12858
06:37:10,478 --> 06:37:13,680
from 11 Labs. And then the agent takes

12859
06:37:13,680 --> 06:37:15,760
that information to grab the contact

12860
06:37:15,760 --> 06:37:17,840
information and then it uses its AI

12861
06:37:17,840 --> 06:37:20,478
brain to make the email message.

12862
06:37:20,478 --> 06:37:22,320
Finally, it basically just responds to

12863
06:37:22,320 --> 06:37:25,360
the web hook with um the email to Phil

12864
06:37:25,360 --> 06:37:26,638
regarding lunch tomorrow has been

12865
06:37:26,638 --> 06:37:28,638
successfully sent and then 11 Labs

12866
06:37:28,638 --> 06:37:30,400
captures that response back and then it

12867
06:37:30,400 --> 06:37:32,718
can respond to us with gotcha. We were

12868
06:37:32,718 --> 06:37:33,920
able to send that off for you. Is there

12869
06:37:33,920 --> 06:37:35,840
anything else you need? So, that's

12870
06:37:35,840 --> 06:37:37,360
pretty much all that's going on here. Um

12871
06:37:37,360 --> 06:37:39,760
if you see in the actual web hook, what

12872
06:37:39,760 --> 06:37:41,680
we're getting here is, you know, there's

12873
06:37:41,680 --> 06:37:42,878
different things coming back. We have

12874
06:37:42,878 --> 06:37:44,320
different little technical parameters,

12875
06:37:44,320 --> 06:37:46,240
all this kind of stuff. all that we want

12876
06:37:46,240 --> 06:37:48,000
to configure and I'll show you guys how

12877
06:37:48,000 --> 06:37:50,160
we configure this in 11 Labs is the the

12878
06:37:50,160 --> 06:37:52,160
JSON body request that's being sent

12879
06:37:52,160 --> 06:37:54,080
over. So we're in table format. If we

12880
06:37:54,080 --> 06:37:56,000
went to JSON, we could see down here

12881
06:37:56,000 --> 06:37:58,000
we're looking at body. In the body, we

12882
06:37:58,000 --> 06:38:00,000
set up two fields to send over from 11

12883
06:38:00,000 --> 06:38:02,798
Labs to Nidend using that post request

12884
06:38:02,798 --> 06:38:05,040
web hook. The first field that we set up

12885
06:38:05,040 --> 06:38:07,680
was two. And as you can see, that's when

12886
06:38:07,680 --> 06:38:11,680
the 11 Labs model based on what we say

12887
06:38:11,680 --> 06:38:13,040
figures out who the email is going to

12888
06:38:13,040 --> 06:38:15,280
and puts that there and then figures out

12889
06:38:15,280 --> 06:38:16,638
what's the email content. What do you

12890
06:38:16,638 --> 06:38:17,920
want me to say in this email? And then

12891
06:38:17,920 --> 06:38:20,958
throws that in here. So, um, that's how

12892
06:38:20,958 --> 06:38:22,240
that's going to work as far as setting

12893
06:38:22,240 --> 06:38:25,200
up the actual web hook node right here.

12894
06:38:25,200 --> 06:38:27,520
Um, we have a we wanted to switch this

12895
06:38:27,520 --> 06:38:29,840
to a post method because 11 Labs is

12896
06:38:29,840 --> 06:38:32,000
sending us information. Um, we have a

12897
06:38:32,000 --> 06:38:34,558
test URL and a production URL. The test

12898
06:38:34,558 --> 06:38:36,160
one we use for now and we have to

12899
06:38:36,160 --> 06:38:38,160
manually have naden listen for a test

12900
06:38:38,160 --> 06:38:41,520
event. Um I will show an example of what

12901
06:38:41,520 --> 06:38:42,798
happens if we don't actually do this

12902
06:38:42,798 --> 06:38:44,638
later in the video. But when you push

12903
06:38:44,638 --> 06:38:46,798
the app into production, you make the

12904
06:38:46,798 --> 06:38:48,638
workflow active, you would want to put

12905
06:38:48,638 --> 06:38:50,958
this web hook in 11 Labs as the

12906
06:38:50,958 --> 06:38:52,958
production URL rather than the test URL

12907
06:38:52,958 --> 06:38:54,478
so that you can make sure that the

12908
06:38:54,478 --> 06:38:56,798
stuff's actually coming over. We put our

12909
06:38:56,798 --> 06:38:59,040
path as end just to clean up this URL.

12910
06:38:59,040 --> 06:39:01,200
All that it does is changes the URL. Um

12911
06:39:01,200 --> 06:39:03,120
and then authentication we put none. And

12912
06:39:03,120 --> 06:39:04,638
then finally for response instead of

12913
06:39:04,638 --> 06:39:06,558
doing immediately or wait when last node

12914
06:39:06,558 --> 06:39:08,798
finishes we want to do using respond to

12915
06:39:08,798 --> 06:39:11,200
web hook node. That way we get the

12916
06:39:11,200 --> 06:39:12,558
information the agent takes place and

12917
06:39:12,558 --> 06:39:13,840
then responds and then all we have here

12918
06:39:13,840 --> 06:39:15,680
is respond to web hook. So it's very

12919
06:39:15,680 --> 06:39:17,600
simple as you can see it's only you know

12920
06:39:17,600 --> 06:39:19,520
really four nodes you know the email the

12921
06:39:19,520 --> 06:39:22,400
brain um and then the two tools and the

12922
06:39:22,400 --> 06:39:24,958
web hooks. So um hopefully that all made

12923
06:39:24,958 --> 06:39:28,320
sense. We are going to hop into 11 labs

12924
06:39:28,320 --> 06:39:29,440
and start playing around with this

12925
06:39:29,440 --> 06:39:31,040
stuff. Also, quick side note, if you

12926
06:39:31,040 --> 06:39:32,558
want to hop into this workflow, check

12927
06:39:32,558 --> 06:39:34,000
out the prompts, play around with how I

12928
06:39:34,000 --> 06:39:36,000
configured things. Um, you'll be able to

12929
06:39:36,000 --> 06:39:37,680
download this workflow for free in the

12930
06:39:37,680 --> 06:39:39,200
free school community. Link for that

12931
06:39:39,200 --> 06:39:40,638
will be down in the description. You'll

12932
06:39:40,638 --> 06:39:41,680
just come into here, you'll click on

12933
06:39:41,680 --> 06:39:43,520
YouTube resources, you will click on the

12934
06:39:43,520 --> 06:39:45,360
post associated with this video, and

12935
06:39:45,360 --> 06:39:46,400
then you're able to download the

12936
06:39:46,400 --> 06:39:48,000
workflow right here. Once you download

12937
06:39:48,000 --> 06:39:49,600
the workflow, you can import it from

12938
06:39:49,600 --> 06:39:52,400
file, and then you will have this exact

12939
06:39:52,400 --> 06:39:54,478
canvas pop up on your screen. Then, if

12940
06:39:54,478 --> 06:39:55,360
you're looking to take your skills with

12941
06:39:55,360 --> 06:39:56,878
Naden a little bit farther, feel free to

12942
06:39:56,878 --> 06:39:58,240
check out my paid community. The link

12943
06:39:58,240 --> 06:39:59,440
for that will also be down in the

12944
06:39:59,440 --> 06:40:01,280
description. Great community in here. A

12945
06:40:01,280 --> 06:40:03,040
lot of people obviously are learning NAN

12946
06:40:03,040 --> 06:40:05,760
and um asking questions, sharing builds,

12947
06:40:05,760 --> 06:40:07,840
sharing resources. Got a great classroom

12948
06:40:07,840 --> 06:40:09,200
section going over, you know, client

12949
06:40:09,200 --> 06:40:11,280
builds and some deep dive topics as well

12950
06:40:11,280 --> 06:40:13,040
as five live calls per week. So, you can

12951
06:40:13,040 --> 06:40:13,920
always make sure you're getting your

12952
06:40:13,920 --> 06:40:15,920
questions answered. Okay. Anyways, back

12953
06:40:15,920 --> 06:40:18,080
to the video. So, in 11 Labs, this is

12954
06:40:18,080 --> 06:40:19,520
the email agent. This is just the test

12955
06:40:19,520 --> 06:40:20,958
environment where we're going to be

12956
06:40:20,958 --> 06:40:22,478
talking to it to try things out. So,

12957
06:40:22,478 --> 06:40:23,760
we'll go back and we'll see how we

12958
06:40:23,760 --> 06:40:25,840
actually configured this agent. And if

12959
06:40:25,840 --> 06:40:26,718
you're wondering why I named him

12960
06:40:26,718 --> 06:40:28,000
Marcher, it's just because his actual

12961
06:40:28,000 --> 06:40:30,478
voice is Archer. So, um, that wasn't my

12962
06:40:30,478 --> 06:40:32,160
creativity there. Anyways, once we are

12963
06:40:32,160 --> 06:40:34,160
in the configuration section of the

12964
06:40:34,160 --> 06:40:35,680
actual agent, we need to set up a few

12965
06:40:35,680 --> 06:40:37,840
things. So, first is the first message.

12966
06:40:37,840 --> 06:40:39,600
Um, we pretty much just when we click on

12967
06:40:39,600 --> 06:40:40,878
call the agent, it's going to say, "Hey

12968
06:40:40,878 --> 06:40:42,080
there, I'm Marcher. What can I do for

12969
06:40:42,080 --> 06:40:43,920
you?" Otherwise, um, if we leave this

12970
06:40:43,920 --> 06:40:45,920
blank, then we will be the ones to start

12971
06:40:45,920 --> 06:40:47,600
the conversation. But from there, you

12972
06:40:47,600 --> 06:40:49,840
will set up a system prompt. So in here,

12973
06:40:49,840 --> 06:40:51,680
this is a prompt I have is you are a

12974
06:40:51,680 --> 06:40:53,040
friendly and funny personal assistant

12975
06:40:53,040 --> 06:40:54,958
who loves helping the user with tasks in

12976
06:40:54,958 --> 06:40:56,958
an upbeat and approachable way. Your

12977
06:40:56,958 --> 06:40:58,718
role is to assist the user with sending

12978
06:40:58,718 --> 06:41:00,718
emails. When the user provides details

12979
06:41:00,718 --> 06:41:02,478
like who the email is for and what's it

12980
06:41:02,478 --> 06:41:04,320
about, you will pass that information to

12981
06:41:04,320 --> 06:41:06,638
the NAN tool and wait for its response.

12982
06:41:06,638 --> 06:41:08,718
I'll show you guys in a sec how we

12983
06:41:08,718 --> 06:41:10,320
configure the NAN tool and how all that

12984
06:41:10,320 --> 06:41:12,240
works. But anyways, once you get

12985
06:41:12,240 --> 06:41:14,000
confirmation from NAN that the email was

12986
06:41:14,000 --> 06:41:15,920
sent, cheerfully let the user know it's

12987
06:41:15,920 --> 06:41:17,200
done and ask if there's anything else

12988
06:41:17,200 --> 06:41:19,120
you can help with. Keep your tone light,

12989
06:41:19,120 --> 06:41:20,878
friendly, and witty while remaining

12990
06:41:20,878 --> 06:41:22,798
efficient and clear in your responses.

12991
06:41:22,798 --> 06:41:24,478
So, as you can see in the system prompt,

12992
06:41:24,478 --> 06:41:25,920
I didn't even really put in anything

12993
06:41:25,920 --> 06:41:27,360
about the way it should be conversating

12994
06:41:27,360 --> 06:41:30,558
as far as like sounding natural and

12995
06:41:30,558 --> 06:41:33,040
using filler words and um and sometimes

12996
06:41:33,040 --> 06:41:34,718
I do that to make it sound more natural,

12997
06:41:34,718 --> 06:41:36,320
but this voice I found just sounded

12998
06:41:36,320 --> 06:41:38,320
pretty good just as is. Then, we're

12999
06:41:38,320 --> 06:41:40,000
setting up the large language model. Um,

13000
06:41:40,000 --> 06:41:42,000
right now we're using Gemini 1.5 Flash

13001
06:41:42,000 --> 06:41:43,520
just because it says it's the fastest.

13002
06:41:43,520 --> 06:41:44,798
You have other things you can use here,

13003
06:41:44,798 --> 06:41:46,400
but I'm just sticking with this one. And

13004
06:41:46,400 --> 06:41:48,558
so this is what it uses to extract

13005
06:41:48,558 --> 06:41:50,320
information pretty much out of the

13006
06:41:50,320 --> 06:41:52,638
conversation to pass it to NAND or

13007
06:41:52,638 --> 06:41:53,920
figure out how it's going to respond to

13008
06:41:53,920 --> 06:41:55,920
you. That's what's going on here. And

13009
06:41:55,920 --> 06:41:57,680
then with temperature, um, I talked

13010
06:41:57,680 --> 06:41:59,040
about I like to put a little bit higher,

13011
06:41:59,040 --> 06:42:00,638
especially for some fun use cases like

13012
06:42:00,638 --> 06:42:02,558
this. Um, basically this is just the

13013
06:42:02,558 --> 06:42:03,840
randomness and creativity of the

13014
06:42:03,840 --> 06:42:05,600
responses generated so that it's always

13015
06:42:05,600 --> 06:42:06,558
going to be a little different and it's

13016
06:42:06,558 --> 06:42:08,240
going to be a little fun um, the higher

13017
06:42:08,240 --> 06:42:09,520
you put it. But if you wanted it to be

13018
06:42:09,520 --> 06:42:11,120
more consistent and you had like, you

13019
06:42:11,120 --> 06:42:12,878
know, you were trying to get some sort

13020
06:42:12,878 --> 06:42:15,120
of information back

13021
06:42:15,120 --> 06:42:16,478
um right the way you want it, then you

13022
06:42:16,478 --> 06:42:17,680
would probably want to lower this a

13023
06:42:17,680 --> 06:42:19,840
little bit. Um and then you have stuff

13024
06:42:19,840 --> 06:42:21,760
like knowledge base. So if this was

13025
06:42:21,760 --> 06:42:24,638
maybe like um a customer support, you'd

13026
06:42:24,638 --> 06:42:25,680
be able to put some knowledge base in

13027
06:42:25,680 --> 06:42:27,840
there. Or if you watch my previous voice

13028
06:42:27,840 --> 06:42:30,160
video about um sort of doing voice rag,

13029
06:42:30,160 --> 06:42:32,000
you could still do the sending it to

13030
06:42:32,000 --> 06:42:33,760
NADN, hitting a vector database from

13031
06:42:33,760 --> 06:42:35,120
Naden and then getting the response

13032
06:42:35,120 --> 06:42:38,000
back. But anyways, um, in this case,

13033
06:42:38,000 --> 06:42:39,520
this is where we set up the tool that we

13034
06:42:39,520 --> 06:42:41,520
were able to call up here as you saw in

13035
06:42:41,520 --> 06:42:44,160
the system prompt. So the tool NAN, this

13036
06:42:44,160 --> 06:42:45,840
is where you're putting the web hook

13037
06:42:45,840 --> 06:42:49,200
from your the web hook URL from NAN.

13038
06:42:49,200 --> 06:42:50,080
That's where you're putting that right

13039
06:42:50,080 --> 06:42:52,360
here. As you can see, um, web hook- test

13040
06:42:52,360 --> 06:42:54,478
NAN. The method is going to be a post.

13041
06:42:54,478 --> 06:42:56,798
So we can send information from 11 Labs

13042
06:42:56,798 --> 06:43:00,080
to NAN. And we just named it Naden to

13043
06:43:00,080 --> 06:43:01,440
make the system prompt make more sense

13044
06:43:01,440 --> 06:43:03,360
for um just just for me when I was

13045
06:43:03,360 --> 06:43:05,040
creating this. It makes sense to send

13046
06:43:05,040 --> 06:43:07,240
something to the tool called Naden.

13047
06:43:07,240 --> 06:43:09,280
Anyways, as you can see, the description

13048
06:43:09,280 --> 06:43:11,040
is use this tool to take action upon the

13049
06:43:11,040 --> 06:43:12,798
user's request. And so we can pretty

13050
06:43:12,798 --> 06:43:14,240
much just leave it as that. We don't

13051
06:43:14,240 --> 06:43:15,680
have any headers or authorization going

13052
06:43:15,680 --> 06:43:17,440
in here, but we do need to send over

13053
06:43:17,440 --> 06:43:19,680
body parameters. Um otherwise, if we

13054
06:43:19,680 --> 06:43:20,958
didn't have this, nothing would be sent

13055
06:43:20,958 --> 06:43:23,760
over to Naden at all. So the description

13056
06:43:23,760 --> 06:43:26,320
of the body parameters is in a friendly

13057
06:43:26,320 --> 06:43:28,878
way ask the user to provide the name of

13058
06:43:28,878 --> 06:43:30,320
the recipient and what the email is

13059
06:43:30,320 --> 06:43:31,920
about unless they already provided that

13060
06:43:31,920 --> 06:43:34,160
information. So the LLM is understanding

13061
06:43:34,160 --> 06:43:36,320
when it's conversating with the human it

13062
06:43:36,320 --> 06:43:38,638
needs to extract the name of this person

13063
06:43:38,638 --> 06:43:41,040
to send an an email to and then actually

13064
06:43:41,040 --> 06:43:42,638
what is the email going to have. As you

13065
06:43:42,638 --> 06:43:44,638
can see we didn't have to put in like oh

13066
06:43:44,638 --> 06:43:46,240
what's the subject of the email because

13067
06:43:46,240 --> 06:43:49,280
our AI agent in N8N can use its brain to

13068
06:43:49,280 --> 06:43:51,360
figure out a subject. So we have two

13069
06:43:51,360 --> 06:43:53,520
parameters that we're setting over. If

13070
06:43:53,520 --> 06:43:55,200
you remember when we were in here, we

13071
06:43:55,200 --> 06:43:56,718
got the two parameters from the body

13072
06:43:56,718 --> 06:43:58,718
right here, which was two and email

13073
06:43:58,718 --> 06:44:00,718
content. And so that's as you can see

13074
06:44:00,718 --> 06:44:02,000
what we set up here. So the first one

13075
06:44:02,000 --> 06:44:04,160
was a string. It was called two and this

13076
06:44:04,160 --> 06:44:06,080
is who the email is going to. And then

13077
06:44:06,080 --> 06:44:07,760
the second one was also a string. It's

13078
06:44:07,760 --> 06:44:09,600
called email content. And this is what

13079
06:44:09,600 --> 06:44:12,080
is the email about. So we hit save

13080
06:44:12,080 --> 06:44:13,920
changes. Now we have a tool that gets

13081
06:44:13,920 --> 06:44:16,400
called whenever um the voice agent

13082
06:44:16,400 --> 06:44:18,160
realizes it has information to send over

13083
06:44:18,160 --> 06:44:20,718
to N to send an email. and it has the

13084
06:44:20,718 --> 06:44:22,160
right parameters to do so. So now we

13085
06:44:22,160 --> 06:44:23,520
have this voice agent pretty much set up

13086
06:44:23,520 --> 06:44:24,958
here with its tools and its system

13087
06:44:24,958 --> 06:44:26,878
prompt. We're going to test the agent.

13088
06:44:26,878 --> 06:44:28,478
And remember earlier I talked about the

13089
06:44:28,478 --> 06:44:30,080
fact that right now we're testing. So we

13090
06:44:30,080 --> 06:44:31,680
have to have the web hook actively

13091
06:44:31,680 --> 06:44:33,360
listening. Once this is in production,

13092
06:44:33,360 --> 06:44:34,798
it's going to be listening all the time.

13093
06:44:34,798 --> 06:44:36,160
But right now we have to manually hit

13094
06:44:36,160 --> 06:44:38,000
test event before we call it. Otherwise,

13095
06:44:38,000 --> 06:44:39,600
it's not going to work. So I'm going to

13096
06:44:39,600 --> 06:44:41,280
talk to Archer, ask him to send an

13097
06:44:41,280 --> 06:44:42,718
email. It's going to go through and then

13098
06:44:42,718 --> 06:44:43,760
we're going to ask him to send another

13099
06:44:43,760 --> 06:44:45,920
email where we don't hit this web hook

13100
06:44:45,920 --> 06:44:47,520
test event and then we'll see what he

13101
06:44:47,520 --> 06:44:49,200
says. You're probably just going to say

13102
06:44:49,200 --> 06:44:51,040
he couldn't access the database or he

13103
06:44:51,040 --> 06:44:52,558
couldn't find the contact information.

13104
06:44:52,558 --> 06:44:53,920
Something like that. Hey there, I'm

13105
06:44:53,920 --> 06:44:56,160
Archer. What can I do for you? Hey

13106
06:44:56,160 --> 06:44:58,558
Archer, can you help me send an email?

13107
06:44:58,558 --> 06:45:00,478
Of course. I'd love to help. Who's the

13108
06:45:00,478 --> 06:45:02,400
email for and what's it about? Tell me

13109
06:45:02,400 --> 06:45:03,840
the details and I'll whip it up in a

13110
06:45:03,840 --> 06:45:06,400
jiffy. Sweet. Um, it's going to be for

13111
06:45:06,400 --> 06:45:09,360
Phil. Okay, so the email is for Phil.

13112
06:45:09,360 --> 06:45:10,958
What's it about? I'm ready to get this

13113
06:45:10,958 --> 06:45:13,680
email sent out. Yeah, just let him know

13114
06:45:13,680 --> 06:45:15,360
that I'm caught in traffic and I'm going

13115
06:45:15,360 --> 06:45:17,440
to be late to the meeting.

13116
06:45:17,440 --> 06:45:19,600
Got it. So, you want to let Phil know

13117
06:45:19,600 --> 06:45:21,440
you're running late because of traffic.

13118
06:45:21,440 --> 06:45:24,080
I'll get that email sent out right away.

13119
06:45:24,080 --> 06:45:26,320
All done. I just sent the email to Phil

13120
06:45:26,320 --> 06:45:28,000
letting him know you're running late.

13121
06:45:28,000 --> 06:45:30,240
Anything else I can help you with? Yeah,

13122
06:45:30,240 --> 06:45:31,360
I'm actually going to need to send

13123
06:45:31,360 --> 06:45:34,240
another one. No problem. Who's this one

13124
06:45:34,240 --> 06:45:35,840
for and what's it about? I'm ready to

13125
06:45:35,840 --> 06:45:38,798
send email number two. Yeah. Can you let

13126
06:45:38,798 --> 06:45:40,958
Phil know that um I actually just drove

13127
06:45:40,958 --> 06:45:43,120
my car off a bridge?

13128
06:45:43,120 --> 06:45:45,360
Oh my goodness. I can't send an email

13129
06:45:45,360 --> 06:45:47,360
like that. Maybe you should call Phil

13130
06:45:47,360 --> 06:45:49,280
instead. Is there someone else you want

13131
06:45:49,280 --> 06:45:53,000
to send an email to?

13132
06:45:53,200 --> 06:45:56,160
Um, no. Can you send an email to Phil?

13133
06:45:56,160 --> 06:45:58,160
I'm so sorry, but I can't send an email

13134
06:45:58,160 --> 06:45:59,840
like that. It sounds like you're in a

13135
06:45:59,840 --> 06:46:02,000
difficult situation. Is there someone

13136
06:46:02,000 --> 06:46:06,000
else you can reach out to for help?

13137
06:46:06,000 --> 06:46:07,520
Okay, didn't expect that. So, I guess

13138
06:46:07,520 --> 06:46:08,798
the model doesn't want to say something

13139
06:46:08,798 --> 06:46:11,840
like that. We'll try again. Um, workflow

13140
06:46:11,840 --> 06:46:14,000
is not active. So, let's see. Hey there,

13141
06:46:14,000 --> 06:46:16,718
I'm Archer. What can I do for you? Hey,

13142
06:46:16,718 --> 06:46:19,440
Archer, can you send an email?

13143
06:46:19,440 --> 06:46:21,360
Of course, I'd be happy to help you with

13144
06:46:21,360 --> 06:46:23,440
that. Who is the email for and what is

13145
06:46:23,440 --> 06:46:25,200
it about? I'll get it sent out in a

13146
06:46:25,200 --> 06:46:26,878
jify.

13147
06:46:26,878 --> 06:46:28,798
Just wanted to touch base with Phil

13148
06:46:28,798 --> 06:46:32,320
about um the meeting later today.

13149
06:46:32,320 --> 06:46:34,240
Okay. So, you want to send an email to

13150
06:46:34,240 --> 06:46:36,240
Phil about the meeting later today. Got

13151
06:46:36,240 --> 06:46:38,080
it. I'll get this done right away.

13152
06:46:38,080 --> 06:46:39,920
Anything else I can help with today?

13153
06:46:39,920 --> 06:46:41,600
Oops. Looks like there was an error

13154
06:46:41,600 --> 06:46:43,280
sending that email. It's possible

13155
06:46:43,280 --> 06:46:45,280
there's a typo in the email address or

13156
06:46:45,280 --> 06:46:47,360
something is wrong on my end. Let me try

13157
06:46:47,360 --> 06:46:48,958
again. Can you please double check the

13158
06:46:48,958 --> 06:46:50,878
email address? Okay. Anyway, so that's

13159
06:46:50,878 --> 06:46:52,558
how that works. As you can see, the

13160
06:46:52,558 --> 06:46:54,160
second time the web hook wasn't active,

13161
06:46:54,160 --> 06:46:56,718
so wasn't able to send that um that

13162
06:46:56,718 --> 06:47:01,040
email for us because it pretty much

13163
06:47:01,160 --> 06:47:03,120
endnot passed through. So, that's going

13164
06:47:03,120 --> 06:47:04,160
to be it for this one. I hope that

13165
06:47:04,160 --> 06:47:05,840
everything made sense. Um it's just

13166
06:47:05,840 --> 06:47:07,520
really cool how easy it basically is to

13167
06:47:07,520 --> 06:47:09,200
switch out an input and you can have the

13168
06:47:09,200 --> 06:47:11,040
agent function the same. Obviously, a

13169
06:47:11,040 --> 06:47:12,240
few things would change as you start to

13170
06:47:12,240 --> 06:47:14,160
add more tools. Your user message would

13171
06:47:14,160 --> 06:47:15,600
have to be tweaked a little bit. You'd

13172
06:47:15,600 --> 06:47:16,958
have to tweak the actual system prompts

13173
06:47:16,958 --> 06:47:18,000
a little bit. But, as you can see in

13174
06:47:18,000 --> 06:47:19,520
this one, kept it very, very simple.

13175
06:47:19,520 --> 06:47:21,280
Basically, just told it its role. Gave

13176
06:47:21,280 --> 06:47:23,200
it the the two tools and how to use

13177
06:47:23,200 --> 06:47:25,280
them. And as you can see, um it was

13178
06:47:25,280 --> 06:47:27,520
pretty seamless as far as being able to

13179
06:47:27,520 --> 06:47:29,520
have the agent fill in things, make the

13180
06:47:29,520 --> 06:47:32,878
messages, and then send them off pretty

13181
06:47:33,558 --> 06:47:35,520
easily. Today, we're going to be talking

13182
06:47:35,520 --> 06:47:36,798
about how you can build anything with

13183
06:47:36,798 --> 06:47:38,958
Lovable and NAN. So we're going to be

13184
06:47:38,958 --> 06:47:40,558
doing a live build of spinning up a web

13185
06:47:40,558 --> 06:47:42,160
page with lovable and then also building

13186
06:47:42,160 --> 06:47:44,320
the backend on nit. But first of all, I

13187
06:47:44,320 --> 06:47:46,000
wanted to go over high level what this

13188
06:47:46,000 --> 06:47:47,600
architecture looks like. So right here

13189
06:47:47,600 --> 06:47:49,040
is lovable. This is what we're starting

13190
06:47:49,040 --> 06:47:50,240
off with. And this is where we're going

13191
06:47:50,240 --> 06:47:52,000
to be creating the interface that the

13192
06:47:52,000 --> 06:47:53,760
user is interacting with. What we do

13193
06:47:53,760 --> 06:47:55,680
here is we type in a prompt in natural

13194
06:47:55,680 --> 06:47:57,680
language and Lovable basically spins up

13195
06:47:57,680 --> 06:47:59,600
that app in seconds. And then we're able

13196
06:47:59,600 --> 06:48:01,360
to talk back and forth and have it make

13197
06:48:01,360 --> 06:48:03,280
minor fixes for us. So what we can do is

13198
06:48:03,280 --> 06:48:05,040
when the user inputs information into

13199
06:48:05,040 --> 06:48:07,360
our lovable website it can send that

13200
06:48:07,360 --> 06:48:09,760
data to nadn the nadn workflow that

13201
06:48:09,760 --> 06:48:11,760
we're going to set up can you know use

13202
06:48:11,760 --> 06:48:13,360
an agent to take action in something

13203
06:48:13,360 --> 06:48:15,360
like gmail or slack air tableable or

13204
06:48:15,360 --> 06:48:17,600
quickbooks and then naden can send the

13205
06:48:17,600 --> 06:48:20,160
data back to lovable and display it to

13206
06:48:20,160 --> 06:48:21,600
the user and this is really just the tip

13207
06:48:21,600 --> 06:48:23,120
of the iceberg there's also some really

13208
06:48:23,120 --> 06:48:25,200
cool integrations with lovable and

13209
06:48:25,200 --> 06:48:27,840
superbase or stripe or resend so there's

13210
06:48:27,840 --> 06:48:29,520
a lot of ways you can really use lovable

13211
06:48:29,520 --> 06:48:31,360
to develop a full web app and so while

13212
06:48:31,360 --> 06:48:32,718
we're talking high We just wanted to

13213
06:48:32,718 --> 06:48:34,160
show you an example flow of what this

13214
06:48:34,160 --> 06:48:35,920
naden could look like where we're

13215
06:48:35,920 --> 06:48:37,360
capturing the information the user is

13216
06:48:37,360 --> 06:48:40,000
sending from lovable via web hook. We're

13217
06:48:40,000 --> 06:48:41,520
feeding that to a large language model

13218
06:48:41,520 --> 06:48:43,040
to create some sort of content for us

13219
06:48:43,040 --> 06:48:44,638
and then we're sending that back and it

13220
06:48:44,638 --> 06:48:46,240
will be displayed in the Lovable web

13221
06:48:46,240 --> 06:48:48,080
app. So let's head over to Lovable and

13222
06:48:48,080 --> 06:48:49,600
get started. So if you've never used

13223
06:48:49,600 --> 06:48:51,120
Lovable before, don't worry. I'm going

13224
06:48:51,120 --> 06:48:52,718
to show you guys how simple it is. You

13225
06:48:52,718 --> 06:48:54,160
can also sign up using the link in the

13226
06:48:54,160 --> 06:48:56,000
description for double the credits.

13227
06:48:56,000 --> 06:48:57,200
Okay, so this is all I'm going to start

13228
06:48:57,200 --> 06:48:58,638
with just to show you guys how simple

13229
06:48:58,638 --> 06:49:00,320
this is. I said, "Help me create a web

13230
06:49:00,320 --> 06:49:02,000
app called Get Me Out of This, where a

13231
06:49:02,000 --> 06:49:03,440
user can submit a problem they're

13232
06:49:03,440 --> 06:49:05,040
having." Then I said to use this image

13233
06:49:05,040 --> 06:49:07,040
as design inspiration. So, I Googled

13234
06:49:07,040 --> 06:49:09,360
landing page design inspiration, and I'm

13235
06:49:09,360 --> 06:49:10,718
just going to take a quick screenshot of

13236
06:49:10,718 --> 06:49:12,878
this landing page, copy that, and then

13237
06:49:12,878 --> 06:49:14,798
paste it into Lovable. And then we'll

13238
06:49:14,798 --> 06:49:16,320
fire this off. Cool. So, I just sent

13239
06:49:16,320 --> 06:49:17,760
that off. And on the right hand side,

13240
06:49:17,760 --> 06:49:19,280
we're seeing it's going to spin up a

13241
06:49:19,280 --> 06:49:20,878
preview. So, this is where we'll see the

13242
06:49:20,878 --> 06:49:22,478
actual web app that it's created and get

13243
06:49:22,478 --> 06:49:24,080
to interact with it. Right now, it's

13244
06:49:24,080 --> 06:49:25,200
going to come through and start creating

13245
06:49:25,200 --> 06:49:26,718
some code. And then on the lefth hand

13246
06:49:26,718 --> 06:49:27,840
side is where we're going to have that

13247
06:49:27,840 --> 06:49:29,920
back and forth chat window to talk to

13248
06:49:29,920 --> 06:49:31,840
lovable in order to make changes for us.

13249
06:49:31,840 --> 06:49:33,040
So right now, as you can see, it's going

13250
06:49:33,040 --> 06:49:34,558
to be creating some of this code. We

13251
06:49:34,558 --> 06:49:36,080
don't need to worry about this. Let's go

13252
06:49:36,080 --> 06:49:37,600
into nit real quick and get this

13253
06:49:37,600 --> 06:49:40,320
workflow ready to send data to. Okay, so

13254
06:49:40,320 --> 06:49:42,000
here we are in Nen. If you also haven't

13255
06:49:42,000 --> 06:49:43,440
used this app before, there'll be a link

13256
06:49:43,440 --> 06:49:44,878
for it down in the description. It's

13257
06:49:44,878 --> 06:49:45,920
basically just going to be a workflow

13258
06:49:45,920 --> 06:49:47,360
builder and you can get a free trial

13259
06:49:47,360 --> 06:49:49,760
just to get started. So you can see I

13260
06:49:49,760 --> 06:49:50,718
have different workflows here. We're

13261
06:49:50,718 --> 06:49:52,240
going to come in and create a new one.

13262
06:49:52,240 --> 06:49:53,520
And what I'm going to do is we're gonna

13263
06:49:53,520 --> 06:49:54,958
add a first step that's basically

13264
06:49:54,958 --> 06:49:56,478
saying, okay, what actually triggers

13265
06:49:56,478 --> 06:49:58,400
this workflow. So I'm gonna grab a web

13266
06:49:58,400 --> 06:50:00,798
hook. And so all a web hook is is, you

13267
06:50:00,798 --> 06:50:02,400
know, it looks like this. And this is

13268
06:50:02,400 --> 06:50:04,000
basically just a trigger that's going to

13269
06:50:04,000 --> 06:50:06,718
be actively listening for something to

13270
06:50:06,718 --> 06:50:08,718
send data to it. And and data is

13271
06:50:08,718 --> 06:50:10,638
received at this URL. And so right now

13272
06:50:10,638 --> 06:50:11,760
there's a test URL and there's a

13273
06:50:11,760 --> 06:50:13,360
production URL. Don't worry about that.

13274
06:50:13,360 --> 06:50:15,440
We're going to click on this URL to copy

13275
06:50:15,440 --> 06:50:17,360
it to our clipboard. And basically we

13276
06:50:17,360 --> 06:50:18,958
can give this to Lovable and say, "Okay,

13277
06:50:18,958 --> 06:50:21,040
whenever a user puts in a problem

13278
06:50:21,040 --> 06:50:22,718
they're having, you're going to send the

13279
06:50:22,718 --> 06:50:24,718
data to this web hook." Cool. So hopping

13280
06:50:24,718 --> 06:50:26,080
over to Lovable. As you can see, it's

13281
06:50:26,080 --> 06:50:27,520
still coding away and looks like it's

13282
06:50:27,520 --> 06:50:29,280
finishing up right now. And it's saying,

13283
06:50:29,280 --> 06:50:30,878
"I've created a modern problem-solving

13284
06:50:30,878 --> 06:50:32,798
web app with a hero section, submission

13285
06:50:32,798 --> 06:50:34,638
form, and feature section in blue

13286
06:50:34,638 --> 06:50:36,400
color." Um, looks like there's an error.

13287
06:50:36,400 --> 06:50:37,760
So all we have to do is click on try to

13288
06:50:37,760 --> 06:50:39,280
fix, and it should go back in there and

13289
06:50:39,280 --> 06:50:40,798
continue to spin up some more code.

13290
06:50:40,798 --> 06:50:42,080
Okay, so now it looks like it finished

13291
06:50:42,080 --> 06:50:44,080
that up. And as you can see, we have the

13292
06:50:44,080 --> 06:50:46,080
website filled up. And so it created all

13293
06:50:46,080 --> 06:50:48,320
of this with just uh an image as

13294
06:50:48,320 --> 06:50:50,000
inspiration as well as just me telling

13295
06:50:50,000 --> 06:50:51,760
it one sentence, help me create a web

13296
06:50:51,760 --> 06:50:53,280
app called get me out of this where a

13297
06:50:53,280 --> 06:50:54,400
user can submit a problem they're

13298
06:50:54,400 --> 06:50:55,600
having. So hopefully this should already

13299
06:50:55,600 --> 06:50:57,280
open your eyes to how powerful this is.

13300
06:50:57,280 --> 06:50:59,120
But let's say for the sake of this demo,

13301
06:50:59,120 --> 06:51:00,718
we don't want all this. We just kind of

13302
06:51:00,718 --> 06:51:02,798
want one simple landing page where they

13303
06:51:02,798 --> 06:51:04,320
send a problem in. So all I'd have to do

13304
06:51:04,320 --> 06:51:05,760
is on this lefth hand side, scroll down

13305
06:51:05,760 --> 06:51:09,760
here and say make this page more simple.

13306
06:51:09,760 --> 06:51:12,440
We only need one

13307
06:51:12,440 --> 06:51:15,718
field which is what

13308
06:51:15,718 --> 06:51:19,360
problem can we help with? So we'll just

13309
06:51:19,360 --> 06:51:21,040
send that off. Very simple query as if

13310
06:51:21,040 --> 06:51:22,638
we were just kind of talking to a

13311
06:51:22,638 --> 06:51:24,000
developer who was building this website

13312
06:51:24,000 --> 06:51:26,240
for us and we'll see it modify the code

13313
06:51:26,240 --> 06:51:27,760
and then we'll see what happens. So down

13314
06:51:27,760 --> 06:51:29,280
here you can see it's modifying the code

13315
06:51:29,280 --> 06:51:31,040
and now we'll see what happens. It's

13316
06:51:31,040 --> 06:51:32,958
just one interface right here. So it's

13317
06:51:32,958 --> 06:51:34,240
created like a title. It has these

13318
06:51:34,240 --> 06:51:35,360
different buttons and we could easily

13319
06:51:35,360 --> 06:51:36,718
say like, okay, when someone clicks on

13320
06:51:36,718 --> 06:51:38,638
the home button, take them here. Or when

13321
06:51:38,638 --> 06:51:40,000
someone clicks on the contact button,

13322
06:51:40,000 --> 06:51:41,440
take them here. And so there's all this

13323
06:51:41,440 --> 06:51:42,638
different stuff we can do, but for the

13324
06:51:42,638 --> 06:51:43,840
sake of this video, we're just going to

13325
06:51:43,840 --> 06:51:45,520
be worrying about this interface right

13326
06:51:45,520 --> 06:51:46,798
here. And just to give it some more

13327
06:51:46,798 --> 06:51:49,040
personality, what we could do is add in

13328
06:51:49,040 --> 06:51:51,600
a logo. So I can go to Google and search

13329
06:51:51,600 --> 06:51:54,478
for a thumbs up logo PNG. And then I can

13330
06:51:54,478 --> 06:51:59,280
say add this logo in the top left. So

13331
06:51:59,280 --> 06:52:01,520
I'll just paste in that image. We'll

13332
06:52:01,520 --> 06:52:03,280
fire this off to lovable. And it should

13333
06:52:03,280 --> 06:52:05,440
put that either right up here or right

13334
06:52:05,440 --> 06:52:07,120
up here. We'll see what it does. But

13335
06:52:07,120 --> 06:52:08,718
either way, if it's not where we like

13336
06:52:08,718 --> 06:52:10,240
it, we can just tell it where to put it.

13337
06:52:10,240 --> 06:52:11,600
Cool. So, as you can see, now we have

13338
06:52:11,600 --> 06:52:13,280
that logo right up there. And let's say

13339
06:52:13,280 --> 06:52:14,638
we didn't like this, all we'd have to do

13340
06:52:14,638 --> 06:52:16,558
is come up to a previous version, hit on

13341
06:52:16,558 --> 06:52:18,240
these three dots, and hit restore. And

13342
06:52:18,240 --> 06:52:19,520
then it would just basically remove

13343
06:52:19,520 --> 06:52:21,120
those changes it just made. Okay. So,

13344
06:52:21,120 --> 06:52:22,320
let's test out the functionality over

13345
06:52:22,320 --> 06:52:24,878
here. Let's say a problem is we want to

13346
06:52:24,878 --> 06:52:26,958
get out of Oh, looks like the font is

13347
06:52:26,958 --> 06:52:28,080
coming through white. So, we need to

13348
06:52:28,080 --> 06:52:31,638
make sure this is changed.

13349
06:52:39,760 --> 06:52:41,440
And boom, we just told it to change the

13350
06:52:41,440 --> 06:52:43,120
text to black and now it's black and we

13351
06:52:43,120 --> 06:52:45,200
can see it. So anyways, I want to say

13352
06:52:45,200 --> 06:52:49,840
get me out of a boring meeting. So we'll

13353
06:52:49,840 --> 06:52:51,440
hit get me out of this and we'll see

13354
06:52:51,440 --> 06:52:53,920
what happens. It says submitting and

13355
06:52:53,920 --> 06:52:55,440
nothing really happens. Even though it

13356
06:52:55,440 --> 06:52:56,878
told us, you know, we'll get back to you

13357
06:52:56,878 --> 06:52:58,638
soon. Nothing really happened. So, what

13358
06:52:58,638 --> 06:53:00,320
we want to do is we want to make sure

13359
06:53:00,320 --> 06:53:02,000
that it knows when we hit this button,

13360
06:53:02,000 --> 06:53:03,440
it's going to send that data to our

13361
06:53:03,440 --> 06:53:05,520
Naden web hook. So, we've already copied

13362
06:53:05,520 --> 06:53:06,958
that web hook to our clipboard, but I'm

13363
06:53:06,958 --> 06:53:08,320
just going to go back into Naden. We

13364
06:53:08,320 --> 06:53:09,760
have the web hook. We'll click on this

13365
06:53:09,760 --> 06:53:11,840
right here back into lovable. Basically

13366
06:53:11,840 --> 06:53:13,360
just saying when I click get me out of

13367
06:53:13,360 --> 06:53:14,958
this, so this button right here, send

13368
06:53:14,958 --> 06:53:16,798
the data to this web hook. And also,

13369
06:53:16,798 --> 06:53:20,280
what we want to do is say as a

13370
06:53:20,280 --> 06:53:22,718
post request because it's going to be

13371
06:53:22,718 --> 06:53:24,000
sending data. So, we're going to send

13372
06:53:24,000 --> 06:53:25,760
that off. And while it's making that

13373
06:53:25,760 --> 06:53:27,520
change to the code, real quick, we want

13374
06:53:27,520 --> 06:53:29,040
to go into edit end and make sure that

13375
06:53:29,040 --> 06:53:31,120
our method for this web hook is indeed

13376
06:53:31,120 --> 06:53:32,958
post. So I don't want to dive into too

13377
06:53:32,958 --> 06:53:35,440
much what that means really, but Lovable

13378
06:53:35,440 --> 06:53:37,200
is going to be sending a post request to

13379
06:53:37,200 --> 06:53:38,478
our web hook. Meaning there's going to

13380
06:53:38,478 --> 06:53:40,558
be stuff within this web hook like body

13381
06:53:40,558 --> 06:53:42,320
parameters and different things. And so

13382
06:53:42,320 --> 06:53:43,920
if this wasn't configured as a post

13383
06:53:43,920 --> 06:53:46,080
request, it might not work. So you'll

13384
06:53:46,080 --> 06:53:47,920
see once we actually get the data and we

13385
06:53:47,920 --> 06:53:49,520
catch it in any of them. But anyways,

13386
06:53:49,520 --> 06:53:51,200
now when the users click on get me out

13387
06:53:51,200 --> 06:53:53,600
of this, the form will send the problem

13388
06:53:53,600 --> 06:53:55,200
description to your web hook via a post

13389
06:53:55,200 --> 06:53:57,200
request. So let's test it out. So we're

13390
06:53:57,200 --> 06:53:58,638
going to say I forgot to prepare a brief

13391
06:53:58,638 --> 06:54:00,080
for my meeting. We're going to go back

13392
06:54:00,080 --> 06:54:01,520
and end it in real quick and make sure

13393
06:54:01,520 --> 06:54:03,680
we hit listen for test event. So now our

13394
06:54:03,680 --> 06:54:05,360
web hook is actively listening back in

13395
06:54:05,360 --> 06:54:06,878
lovable. We'll click get me out of this

13396
06:54:06,878 --> 06:54:08,638
and we will see what happens. We can

13397
06:54:08,638 --> 06:54:10,320
come and end it in and we can now see we

13398
06:54:10,320 --> 06:54:12,400
got this information. So here's the body

13399
06:54:12,400 --> 06:54:13,760
I was talking about where we're

13400
06:54:13,760 --> 06:54:15,920
capturing a problem which is I forgot to

13401
06:54:15,920 --> 06:54:18,000
prepare a brief for my meeting. So, we

13402
06:54:18,000 --> 06:54:19,840
now know that Lovable is able to send

13403
06:54:19,840 --> 06:54:22,000
data to NAND. And now it's on us to

13404
06:54:22,000 --> 06:54:24,080
configure what we want to happen in NAND

13405
06:54:24,080 --> 06:54:26,160
so we can send the data back to Lovable.

13406
06:54:26,160 --> 06:54:27,520
Cool. So, what I'm going to do is I'm

13407
06:54:27,520 --> 06:54:28,878
going to click on the plus that's coming

13408
06:54:28,878 --> 06:54:30,400
off of the web hook. And I'm going to

13409
06:54:30,400 --> 06:54:32,958
grab an AI agent. What this is going to

13410
06:54:32,958 --> 06:54:34,718
do is allow us to connect to a different

13411
06:54:34,718 --> 06:54:36,478
chat model and then the agent's going to

13412
06:54:36,478 --> 06:54:38,240
be able to take this problem and produce

13413
06:54:38,240 --> 06:54:40,240
a response. And I'm going to walk

13414
06:54:40,240 --> 06:54:41,600
through the step by step, but if you

13415
06:54:41,600 --> 06:54:42,558
don't really want to worry about this

13416
06:54:42,558 --> 06:54:43,600
and you just want to worry about the

13417
06:54:43,600 --> 06:54:45,280
lovable side of things, you can download

13418
06:54:45,280 --> 06:54:47,440
the finished template from my free

13419
06:54:47,440 --> 06:54:48,798
school community. I'll link that down in

13420
06:54:48,798 --> 06:54:50,240
the description. That way, you can just

13421
06:54:50,240 --> 06:54:52,000
plug in this workflow and just give

13422
06:54:52,000 --> 06:54:53,760
lovable your noden web hook and you'll

13423
06:54:53,760 --> 06:54:55,440
be set up. But anyways, if you join the

13424
06:54:55,440 --> 06:54:56,798
free school community, you'll click on

13425
06:54:56,798 --> 06:54:58,638
YouTube resources, click on the post

13426
06:54:58,638 --> 06:55:00,400
associated with this video, and you'll

13427
06:55:00,400 --> 06:55:02,320
be able to download the JSON right here.

13428
06:55:02,320 --> 06:55:03,840
And then when you have that JSON, you

13429
06:55:03,840 --> 06:55:05,440
can come into Nadn, open up a new

13430
06:55:05,440 --> 06:55:07,200
workflow, click these three dots on the

13431
06:55:07,200 --> 06:55:08,878
top, and then click import from file.

13432
06:55:08,878 --> 06:55:10,400
And when you open that up, it'll just

13433
06:55:10,400 --> 06:55:12,000
have the finished workflow for you right

13434
06:55:12,000 --> 06:55:13,680
here. But anyways, what I'm going to do

13435
06:55:13,680 --> 06:55:15,200
is click into the AI agent. And the

13436
06:55:15,200 --> 06:55:17,840
first thing is we have to configure what

13437
06:55:17,840 --> 06:55:19,360
information the agent is going to

13438
06:55:19,360 --> 06:55:21,280
actually read. So first of all, we're

13439
06:55:21,280 --> 06:55:22,958
going to set up that as a user prompt.

13440
06:55:22,958 --> 06:55:24,400
We're going to change this from

13441
06:55:24,400 --> 06:55:26,558
connected chat trigger node to define

13442
06:55:26,558 --> 06:55:28,080
below because we don't have a connected

13443
06:55:28,080 --> 06:55:29,440
chat trigger node. We're using a web

13444
06:55:29,440 --> 06:55:31,120
hook as we all know. So we're going to

13445
06:55:31,120 --> 06:55:33,040
click on define below and we are

13446
06:55:33,040 --> 06:55:34,638
basically just going to scroll down

13447
06:55:34,638 --> 06:55:36,798
within the web hook node where the

13448
06:55:36,798 --> 06:55:38,718
actual data we want to look at is which

13449
06:55:38,718 --> 06:55:40,240
is just the problem that was submitted

13450
06:55:40,240 --> 06:55:42,400
by the user. So down here in the body we

13451
06:55:42,400 --> 06:55:44,558
have a problem and we can just drag that

13452
06:55:44,558 --> 06:55:46,160
right in there and that's basically all

13453
06:55:46,160 --> 06:55:47,600
we have to do. And maybe we just want to

13454
06:55:47,600 --> 06:55:48,878
define to the agent what it's looking

13455
06:55:48,878 --> 06:55:52,400
at. So we'll just say like the problem

13456
06:55:52,400 --> 06:55:53,920
and then we'll put a colon. So now you

13457
06:55:53,920 --> 06:55:55,360
can see in the result panel this is what

13458
06:55:55,360 --> 06:55:57,040
the agent will be looking at. And next

13459
06:55:57,040 --> 06:55:58,638
we need to give it a system message to

13460
06:55:58,638 --> 06:56:00,558
understand what it's doing. So, I'm

13461
06:56:00,558 --> 06:56:02,558
going to click on add option, open up a

13462
06:56:02,558 --> 06:56:04,400
system message, and I am going to

13463
06:56:04,400 --> 06:56:06,400
basically tell it what to do. So, here's

13464
06:56:06,400 --> 06:56:07,760
a system message that I came up with

13465
06:56:07,760 --> 06:56:09,920
just for a demo. You're an AI excuse

13466
06:56:09,920 --> 06:56:11,760
generator. Your job is to create clever,

13467
06:56:11,760 --> 06:56:13,360
creative, and context appropriate

13468
06:56:13,360 --> 06:56:15,360
excuses that someone could use to avoid

13469
06:56:15,360 --> 06:56:17,440
or get out of a situation. And then we

13470
06:56:17,440 --> 06:56:19,360
told it to only return the excuse and

13471
06:56:19,360 --> 06:56:21,040
also to add a touch of humor to the

13472
06:56:21,040 --> 06:56:22,958
excuses. So, now before we can actually

13473
06:56:22,958 --> 06:56:24,558
run this to see how it's working, we

13474
06:56:24,558 --> 06:56:26,080
need to connect its brain, which is

13475
06:56:26,080 --> 06:56:27,840
going to be an AI chat model. So, what

13476
06:56:27,840 --> 06:56:28,878
I'm going to do is I'm going to click on

13477
06:56:28,878 --> 06:56:31,040
this plus under chat model. For this

13478
06:56:31,040 --> 06:56:33,360
demo, we'll do an OpenAI chat model. And

13479
06:56:33,360 --> 06:56:34,958
you have to connect a credential if you

13480
06:56:34,958 --> 06:56:36,478
haven't done so already. So, you would

13481
06:56:36,478 --> 06:56:37,760
basically come into here, click create

13482
06:56:37,760 --> 06:56:39,280
new credential, and you would just have

13483
06:56:39,280 --> 06:56:41,840
to insert your API key. So, you can just

13484
06:56:41,840 --> 06:56:44,320
Google OpenAI API. You'll click on API

13485
06:56:44,320 --> 06:56:46,320
platform. You can log in, and once

13486
06:56:46,320 --> 06:56:47,520
you're logged in, you just have to go to

13487
06:56:47,520 --> 06:56:48,798
your dashboard, and then on the left,

13488
06:56:48,798 --> 06:56:50,638
you'll have an API key section. All

13489
06:56:50,638 --> 06:56:52,638
you'll have to do is create a new key.

13490
06:56:52,638 --> 06:56:56,400
We can call this one um test lovable.

13491
06:56:56,400 --> 06:56:58,000
And then when you create that, you just

13492
06:56:58,000 --> 06:56:59,920
copy this value. Go back into Nitn.

13493
06:56:59,920 --> 06:57:01,280
Paste that right here. And then when you

13494
06:57:01,280 --> 06:57:03,280
hit save, you are now connected to

13495
06:57:03,280 --> 06:57:05,920
OpenAI's API. And we can finally run

13496
06:57:05,920 --> 06:57:07,440
this agent real quick. If I come in here

13497
06:57:07,440 --> 06:57:09,280
and hit test step, we will see that it's

13498
06:57:09,280 --> 06:57:11,440
going to create an excuse for I forgot

13499
06:57:11,440 --> 06:57:13,200
to prepare a brief for my meeting, which

13500
06:57:13,200 --> 06:57:15,120
is sorry, I was too busy trying to bond

13501
06:57:15,120 --> 06:57:16,958
with my coffee machine. Turns out it

13502
06:57:16,958 --> 06:57:19,120
doesn't have a prepare briefs setting.

13503
06:57:19,120 --> 06:57:20,558
So basically what we have is we're

13504
06:57:20,558 --> 06:57:22,718
capturing the problem that a user had.

13505
06:57:22,718 --> 06:57:25,040
We're using an AI agent to create a

13506
06:57:25,040 --> 06:57:26,558
excuse. And then we need to send the

13507
06:57:26,558 --> 06:57:28,558
data back to Lovable. So all we have to

13508
06:57:28,558 --> 06:57:30,160
do here is add the plus coming off of

13509
06:57:30,160 --> 06:57:32,000
the agent. We're going to call this a

13510
06:57:32,000 --> 06:57:34,080
respond to web hook node. And we're just

13511
06:57:34,080 --> 06:57:35,520
going to respond with the first incoming

13512
06:57:35,520 --> 06:57:37,600
item, which is going to be the actual

13513
06:57:37,600 --> 06:57:39,280
response from the agent. But all we have

13514
06:57:39,280 --> 06:57:41,520
to do also to configure this is back in

13515
06:57:41,520 --> 06:57:43,200
the web hook node, there's a section

13516
06:57:43,200 --> 06:57:45,200
right here that says respond, instead of

13517
06:57:45,200 --> 06:57:46,798
responding immediately, we want to

13518
06:57:46,798 --> 06:57:49,040
respond using the respond to web hook

13519
06:57:49,040 --> 06:57:51,360
node. So now it will be looking over

13520
06:57:51,360 --> 06:57:52,638
here, and that's how it's going to send

13521
06:57:52,638 --> 06:57:54,718
data back to lovable. So this is pretty

13522
06:57:54,718 --> 06:57:56,240
much configured the way we need it, but

13523
06:57:56,240 --> 06:57:58,400
we have to configure Lovable now to wait

13524
06:57:58,400 --> 06:58:00,638
for this response. Okay. So what I'm

13525
06:58:00,638 --> 06:58:02,240
telling Lovable is when the data gets

13526
06:58:02,240 --> 06:58:04,240
sent to the web hook, we wait for the

13527
06:58:04,240 --> 06:58:06,478
response from the web hook, then output

13528
06:58:06,478 --> 06:58:08,240
that in a field that says here is your

13529
06:58:08,240 --> 06:58:09,840
excuse. So we'll send this off to

13530
06:58:09,840 --> 06:58:12,000
Lovable and see what it comes up with.

13531
06:58:12,000 --> 06:58:13,360
Okay, so now it said that I've added a

13532
06:58:13,360 --> 06:58:14,798
new section that displays here is your

13533
06:58:14,798 --> 06:58:16,400
excuse along with the response message

13534
06:58:16,400 --> 06:58:18,400
from the web hook when it's received. So

13535
06:58:18,400 --> 06:58:20,160
let's test it out. First, I'm going to

13536
06:58:20,160 --> 06:58:21,360
go back and edit in and we're going to

13537
06:58:21,360 --> 06:58:23,040
hit test workflow. So the web hook is

13538
06:58:23,040 --> 06:58:24,718
now listening for us. So we'll come into

13539
06:58:24,718 --> 06:58:26,878
our lovable web app and say I want to

13540
06:58:26,878 --> 06:58:30,240
skip a boring meeting. We'll hit get me

13541
06:58:30,240 --> 06:58:32,080
out of this. So now that data should be

13542
06:58:32,080 --> 06:58:34,320
captured in Naden. It's running. And now

13543
06:58:34,320 --> 06:58:36,558
the output is I just realized my pet

13544
06:58:36,558 --> 06:58:38,798
goldfish has a lifealtering decision to

13545
06:58:38,798 --> 06:58:40,478
make regarding his tank decorations and

13546
06:58:40,478 --> 06:58:41,920
I simply cannot miss this important

13547
06:58:41,920 --> 06:58:43,920
family meeting. So it doesn't look

13548
06:58:43,920 --> 06:58:45,520
great, but it worked. And if we go into

13549
06:58:45,520 --> 06:58:47,120
edit end, we can see that this run did

13550
06:58:47,120 --> 06:58:48,958
indeed finish up. And the output over

13551
06:58:48,958 --> 06:58:50,878
here was I just realized my pet goldfish

13552
06:58:50,878 --> 06:58:52,400
has a lifealtering decision blah blah

13553
06:58:52,400 --> 06:58:54,160
blah. So basically what what's happening

13554
06:58:54,160 --> 06:58:56,638
is the web hook is returning JSON which

13555
06:58:56,638 --> 06:58:57,920
is coming through in a field called

13556
06:58:57,920 --> 06:58:59,600
output and then we have our actual

13557
06:58:59,600 --> 06:59:02,160
response which is exactly what lovable

13558
06:59:02,160 --> 06:59:03,680
sent through. So it's not very pretty

13559
06:59:03,680 --> 06:59:04,958
and we can basically just tell it to

13560
06:59:04,958 --> 06:59:06,638
clean that up. So what I just did is I

13561
06:59:06,638 --> 06:59:09,040
said only return the output fields value

13562
06:59:09,040 --> 06:59:11,200
from the web hook response not the raw

13563
06:59:11,200 --> 06:59:13,200
JSON. So we wanted to just output this

13564
06:59:13,200 --> 06:59:15,440
right here which is the actual excuse.

13565
06:59:15,440 --> 06:59:16,718
And so some of you guys may not even

13566
06:59:16,718 --> 06:59:18,478
have had this problem pop up. I did a

13567
06:59:18,478 --> 06:59:20,320
demo of this earlier just for testing

13568
06:59:20,320 --> 06:59:21,920
and I basically walked through these

13569
06:59:21,920 --> 06:59:23,840
same steps and this wasn't happening.

13570
06:59:23,840 --> 06:59:26,240
But you know sometimes it happens.

13571
06:59:26,240 --> 06:59:27,920
Anyways, now it says the form only

13572
06:59:27,920 --> 06:59:29,440
displays the value from the output

13573
06:59:29,440 --> 06:59:31,280
field. So let's give it another try. So

13574
06:59:31,280 --> 06:59:32,638
back in we're going to hit test

13575
06:59:32,638 --> 06:59:34,638
workflow. So it's listening for us in

13576
06:59:34,638 --> 06:59:35,840
lovable. We're going to give it a

13577
06:59:35,840 --> 06:59:37,440
problem. So I'm saying I overslept and

13578
06:59:37,440 --> 06:59:38,638
I'm running late. I'm going to click get

13579
06:59:38,638 --> 06:59:39,840
me out of this. And we'll see the

13580
06:59:39,840 --> 06:59:41,760
workflow just finished up. And now we

13581
06:59:41,760 --> 06:59:43,440
have the response in a clean format

13582
06:59:43,440 --> 06:59:44,798
which is I accidentally hit the snooze

13583
06:59:44,798 --> 06:59:46,400
button until it filed for a restraining

13584
06:59:46,400 --> 06:59:48,400
order against me for harassment. Okay.

13585
06:59:48,400 --> 06:59:49,760
So now that we know that the

13586
06:59:49,760 --> 06:59:51,680
functionality within N is working. It's

13587
06:59:51,680 --> 06:59:53,760
sending data back. We want to customize

13588
06:59:53,760 --> 06:59:55,280
our actual interface a little bit. So

13589
06:59:55,280 --> 06:59:56,478
the first thing I want to do just for

13590
06:59:56,478 --> 06:59:58,478
fun is create a level system. So every

13591
06:59:58,478 --> 07:00:00,160
time someone submits a problem, they're

13592
07:00:00,160 --> 07:00:01,360
going to get a point. And if they get

13593
07:00:01,360 --> 07:00:02,798
five points, they'll level up. If they

13594
07:00:02,798 --> 07:00:04,478
get 20 total points, they'll level up

13595
07:00:04,478 --> 07:00:06,718
again. Okay. So I just sent off create a

13596
07:00:06,718 --> 07:00:08,958
dynamic level system. Every time a user

13597
07:00:08,958 --> 07:00:11,120
submits a problem, they get a point.

13598
07:00:11,120 --> 07:00:12,718
Everyone starts at level one and after

13599
07:00:12,718 --> 07:00:14,400
five points, they reach level two. Then

13600
07:00:14,400 --> 07:00:15,920
after 50 more points, they reach level

13601
07:00:15,920 --> 07:00:17,360
three. And obviously, we'd have to bake

13602
07:00:17,360 --> 07:00:18,958
in the rest of the the levels and how

13603
07:00:18,958 --> 07:00:20,558
many points you need. But this is just

13604
07:00:20,558 --> 07:00:21,920
to show you that this is going to

13605
07:00:21,920 --> 07:00:23,280
increase every time that we submit a

13606
07:00:23,280 --> 07:00:24,878
problem. And also, you'd want to have

13607
07:00:24,878 --> 07:00:26,320
some sort of element where people

13608
07:00:26,320 --> 07:00:28,160
actually log in and get authenticated.

13609
07:00:28,160 --> 07:00:29,840
And you can store that data in Superbase

13610
07:00:29,840 --> 07:00:31,680
or in um you know, Firebase, whatever it

13611
07:00:31,680 --> 07:00:33,600
is, so that everyone's levels are being

13612
07:00:33,600 --> 07:00:36,878
saved and it's specific to that person.

13613
07:00:36,878 --> 07:00:38,638
Okay, so looks like it just created a

13614
07:00:38,638 --> 07:00:40,240
level system. It's reloading up our

13615
07:00:40,240 --> 07:00:41,680
preview so we can see what that looks

13616
07:00:41,680 --> 07:00:43,920
like now. Um, looks like there may have

13617
07:00:43,920 --> 07:00:45,520
been an error, but now, as you can see

13618
07:00:45,520 --> 07:00:47,440
right here, we have a level system. So,

13619
07:00:47,440 --> 07:00:48,718
let's give it another try. I'm going to

13620
07:00:48,718 --> 07:00:50,240
go into Nitn. We're going to hit test

13621
07:00:50,240 --> 07:00:52,000
workflow. So, it's listening once again,

13622
07:00:52,000 --> 07:00:53,280
and we're going to describe a problem.

13623
07:00:53,280 --> 07:00:54,798
So, I'm saying my boss is mean. I don't

13624
07:00:54,798 --> 07:00:56,080
want to talk to him. We're going to hit

13625
07:00:56,080 --> 07:00:58,000
submit. The NN workflow is running right

13626
07:00:58,000 --> 07:00:59,680
now on the back end. And we just got a

13627
07:00:59,680 --> 07:01:01,440
message back, which is, I'd love to

13628
07:01:01,440 --> 07:01:02,718
chat, but I've got a hot date with my

13629
07:01:02,718 --> 07:01:04,000
couch and binge watching the entire

13630
07:01:04,000 --> 07:01:05,840
season of Awkward Bosses. And you can

13631
07:01:05,840 --> 07:01:07,520
see that we got a point. So, four more

13632
07:01:07,520 --> 07:01:09,280
points to unlock level two. But before

13633
07:01:09,280 --> 07:01:10,798
we continue to throw more prompts so

13634
07:01:10,798 --> 07:01:12,478
that we get up to level two, let's add

13635
07:01:12,478 --> 07:01:13,878
in one more cool

13636
07:01:13,878 --> 07:01:16,080
functionality. Okay, so I'm just firing

13637
07:01:16,080 --> 07:01:18,080
off this message that says add a drop

13638
07:01:18,080 --> 07:01:20,160
down after what problem can we help with

13639
07:01:20,160 --> 07:01:22,320
that gives the user the option to pick a

13640
07:01:22,320 --> 07:01:24,320
tone for the response. So the options

13641
07:01:24,320 --> 07:01:26,558
can be realistic, funny, ridiculous, or

13642
07:01:26,558 --> 07:01:28,638
outrageous. And this data of course

13643
07:01:28,638 --> 07:01:31,200
should be passed along in that web hook

13644
07:01:31,200 --> 07:01:33,360
to NADN because then we can tell the

13645
07:01:33,360 --> 07:01:35,520
agent to say okay here's the problem and

13646
07:01:35,520 --> 07:01:37,680
here's the tone of an excuse the user is

13647
07:01:37,680 --> 07:01:39,680
requesting and now it can make a request

13648
07:01:39,680 --> 07:01:42,400
or a response for us. So looks like it's

13649
07:01:42,400 --> 07:01:44,000
creating that change right now. So now

13650
07:01:44,000 --> 07:01:45,600
we can see our dropown menu that has

13651
07:01:45,600 --> 07:01:47,120
realistic, funny, ridiculous, and

13652
07:01:47,120 --> 07:01:48,798
outrageous. As you can see before you

13653
07:01:48,798 --> 07:01:50,320
click on it, it's maybe not super clear

13654
07:01:50,320 --> 07:01:51,840
that this is actually a drop down. So

13655
07:01:51,840 --> 07:01:53,360
let's make that more clear. And what I'm

13656
07:01:53,360 --> 07:01:54,240
going to do is I'm going to take a

13657
07:01:54,240 --> 07:01:56,240
screenshot of this section right here.

13658
07:01:56,240 --> 07:01:58,240
I'm going to copy this and I'm just

13659
07:01:58,240 --> 07:02:00,000
going to paste it in here and say make

13660
07:02:00,000 --> 07:02:04,718
this more clear that it is a drop-own

13661
07:02:04,718 --> 07:02:06,320
selection and we'll see what it does

13662
07:02:06,320 --> 07:02:08,638
here. Okay, perfect. So, it just added a

13663
07:02:08,638 --> 07:02:10,240
little arrow as well as a placeholder

13664
07:02:10,240 --> 07:02:12,160
text. So, that's way more clear. And now

13665
07:02:12,160 --> 07:02:13,520
what we want to do is test this out.

13666
07:02:13,520 --> 07:02:14,958
Okay, so now to test this out, we're

13667
07:02:14,958 --> 07:02:16,400
going to hit test workflow. But just

13668
07:02:16,400 --> 07:02:18,240
keep in mind that this agent isn't yet

13669
07:02:18,240 --> 07:02:20,638
configured to also look at the tone. So

13670
07:02:20,638 --> 07:02:22,240
this tone won't be accounted for yet.

13671
07:02:22,240 --> 07:02:23,600
But what we're going to do is we have I

13672
07:02:23,600 --> 07:02:25,040
overslept and the response is going to

13673
07:02:25,040 --> 07:02:28,878
be funny. We'll hit generate me a or

13674
07:02:28,878 --> 07:02:30,718
sorry get me out of this. So we have a

13675
07:02:30,718 --> 07:02:32,320
response and our level went up. We got

13676
07:02:32,320 --> 07:02:34,798
another point. But if we go into Nit, we

13677
07:02:34,798 --> 07:02:36,160
can see that it didn't actually account

13678
07:02:36,160 --> 07:02:37,840
for the tone yet. So all we have to do

13679
07:02:37,840 --> 07:02:40,080
is in the actual user message, we're

13680
07:02:40,080 --> 07:02:41,520
basically just going to open this up and

13681
07:02:41,520 --> 07:02:43,840
also add a tone. And we can scroll all

13682
07:02:43,840 --> 07:02:45,600
the way down here and we can grab the

13683
07:02:45,600 --> 07:02:48,160
tone from the body request. And now it's

13684
07:02:48,160 --> 07:02:50,160
getting the problem as well as the tone.

13685
07:02:50,160 --> 07:02:51,760
And now in the system prompt, which is

13686
07:02:51,760 --> 07:02:53,520
basically just defining to the agent its

13687
07:02:53,520 --> 07:02:55,680
role. We have to tell it how to account

13688
07:02:55,680 --> 07:02:57,600
for different tones. Okay, so here's

13689
07:02:57,600 --> 07:02:58,958
what I came up with. I gave it some more

13690
07:02:58,958 --> 07:03:00,160
instructions and I said, "You're going

13691
07:03:00,160 --> 07:03:02,240
to receive a problem as well as a tone.

13692
07:03:02,240 --> 07:03:03,600
And here are the possible tones, which

13693
07:03:03,600 --> 07:03:05,680
are realistic, funny, ridiculous, and

13694
07:03:05,680 --> 07:03:07,600
outrageous." And I kind of said what

13695
07:03:07,600 --> 07:03:09,200
that means. And then I said, "Your

13696
07:03:09,200 --> 07:03:10,718
excuse should be one to three sentences

13697
07:03:10,718 --> 07:03:12,798
long, and match the selected tone." So

13698
07:03:12,798 --> 07:03:13,840
that's all we're going to do. We're

13699
07:03:13,840 --> 07:03:15,200
going to hit save. Okay. So now that

13700
07:03:15,200 --> 07:03:16,400
it's looking at everything, we're going

13701
07:03:16,400 --> 07:03:18,080
to hit test workflow. The web hook's

13702
07:03:18,080 --> 07:03:19,520
listening. We'll come back into here and

13703
07:03:19,520 --> 07:03:20,638
we're going to submit. I broke my

13704
07:03:20,638 --> 07:03:22,400
friend's iPhone and the response tone

13705
07:03:22,400 --> 07:03:23,920
should be outrageous. So, we're going to

13706
07:03:23,920 --> 07:03:26,000
send that off. And it's loading because

13707
07:03:26,000 --> 07:03:27,680
our end workflow is triggering. And now

13708
07:03:27,680 --> 07:03:29,280
we just got it. We also got a message

13709
07:03:29,280 --> 07:03:31,200
that says we earned a point. So, right

13710
07:03:31,200 --> 07:03:32,798
here, we now only need two more for

13711
07:03:32,798 --> 07:03:34,878
level two. But the excuse is I was

13712
07:03:34,878 --> 07:03:36,240
trying to summon a unicorn with my

13713
07:03:36,240 --> 07:03:38,400
telekinetic powers and accidentally

13714
07:03:38,400 --> 07:03:39,920
transformed your iPhone into a rogue

13715
07:03:39,920 --> 07:03:41,920
toaster that launched itself off the

13716
07:03:41,920 --> 07:03:43,520
counter. I swear it was just trying to

13717
07:03:43,520 --> 07:03:45,440
toast a bagel. Okay, so obviously that's

13718
07:03:45,440 --> 07:03:46,718
pretty outrageous and that's how we know

13719
07:03:46,718 --> 07:03:48,160
it's working. So, I'm sure you guys are

13720
07:03:48,160 --> 07:03:49,680
wondering what would you want to do if

13721
07:03:49,680 --> 07:03:51,280
you didn't want to come in here and

13722
07:03:51,280 --> 07:03:53,520
every single time make this thing, you

13723
07:03:53,520 --> 07:03:55,120
know, test workflow. What you would do

13724
07:03:55,120 --> 07:03:56,638
is you'd switch this to an active

13725
07:03:56,638 --> 07:03:59,200
workflow. Now, basically, we're not

13726
07:03:59,200 --> 07:04:00,638
going to see the executions live anymore

13727
07:04:00,638 --> 07:04:03,040
with all these green outlines. But

13728
07:04:03,040 --> 07:04:04,958
what's happening now is it's using the

13729
07:04:04,958 --> 07:04:06,558
production URL. So, we're going to have

13730
07:04:06,558 --> 07:04:08,558
to copy the production URL, come back

13731
07:04:08,558 --> 07:04:11,160
into Lovable, and just basically say I

13732
07:04:11,160 --> 07:04:14,718
switched the URL or sorry, let's call I

13733
07:04:14,718 --> 07:04:17,600
switched the web hook to this. And we'll

13734
07:04:17,600 --> 07:04:19,200
paste that in there, and it should just

13735
07:04:19,200 --> 07:04:21,920
change the data. The logic should be all

13736
07:04:21,920 --> 07:04:23,760
the exact same because we've already

13737
07:04:23,760 --> 07:04:25,520
built that into this app, but we're just

13738
07:04:25,520 --> 07:04:26,878
going to switch the web hook. So, now we

13739
07:04:26,878 --> 07:04:28,558
don't have to go click test workflow

13740
07:04:28,558 --> 07:04:31,280
every time in NAN. And super excited. We

13741
07:04:31,280 --> 07:04:32,718
have two more problems to submit and

13742
07:04:32,718 --> 07:04:34,478
then we'll be level two. So now it says

13743
07:04:34,478 --> 07:04:36,240
the web hook URL has been updated. So

13744
07:04:36,240 --> 07:04:37,920
let's test it out. As you can see in

13745
07:04:37,920 --> 07:04:39,840
here, we have an active workflow. We're

13746
07:04:39,840 --> 07:04:41,360
not hitting test workflow. We're going

13747
07:04:41,360 --> 07:04:42,718
to come in here and submit a new

13748
07:04:42,718 --> 07:04:45,600
problem. So we are going to say um I

13749
07:04:45,600 --> 07:04:51,160
want to take four weeks off work, but my

13750
07:04:51,160 --> 07:04:54,878
boss won't let me. We are going to make

13751
07:04:54,878 --> 07:04:56,478
the response tone. Let's just do a

13752
07:04:56,478 --> 07:04:58,320
realistic one. And we'll click get me

13753
07:04:58,320 --> 07:05:00,080
out of this. It's now calling that

13754
07:05:00,080 --> 07:05:01,360
workflow that's active and it's

13755
07:05:01,360 --> 07:05:02,958
listening. So we got a point. We got our

13756
07:05:02,958 --> 07:05:04,558
response which is I've been dealing with

13757
07:05:04,558 --> 07:05:06,160
some unforeseen family matters that need

13758
07:05:06,160 --> 07:05:08,000
my attention. I believe taking 4 weeks

13759
07:05:08,000 --> 07:05:09,680
off will help me address them properly.

13760
07:05:09,680 --> 07:05:11,360
I plan this time to use this time to

13761
07:05:11,360 --> 07:05:12,718
ensure everything is in order so I can

13762
07:05:12,718 --> 07:05:14,558
return more focused and productive. I

13763
07:05:14,558 --> 07:05:15,440
would definitely say that that's

13764
07:05:15,440 --> 07:05:17,440
realistic. What we can do is come into

13765
07:05:17,440 --> 07:05:19,280
NAN. We can click up here on our

13766
07:05:19,280 --> 07:05:20,878
executions and we can see what just

13767
07:05:20,878 --> 07:05:22,718
happened. So this is our most recent

13768
07:05:22,718 --> 07:05:25,200
execution and if we click into here it

13769
07:05:25,200 --> 07:05:26,718
should have been getting the problem

13770
07:05:26,718 --> 07:05:28,160
which was I want to take four weeks off

13771
07:05:28,160 --> 07:05:30,558
work and the tone which was realistic.

13772
07:05:30,558 --> 07:05:31,600
Cool. Cool. So, now that we know that

13773
07:05:31,600 --> 07:05:33,680
our active new web hook is working,

13774
07:05:33,680 --> 07:05:36,080
let's just do one more query and let's

13775
07:05:36,080 --> 07:05:38,400
earn our level two status. I'm also

13776
07:05:38,400 --> 07:05:39,680
curious to see, you know, we haven't

13777
07:05:39,680 --> 07:05:41,280
worked in any logic of what happens when

13778
07:05:41,280 --> 07:05:42,798
you hit level two. Maybe there's some

13779
07:05:42,798 --> 07:05:44,080
confetti. Maybe it's just a little

13780
07:05:44,080 --> 07:05:46,240
notification. We're about to find out.

13781
07:05:46,240 --> 07:05:47,760
Okay, so I said I got invited on a

13782
07:05:47,760 --> 07:05:49,360
camping trip, but I hate nature. We're

13783
07:05:49,360 --> 07:05:50,798
going to go with ridiculous and we're

13784
07:05:50,798 --> 07:05:52,878
going to send this off. See what we get

13785
07:05:52,878 --> 07:05:55,440
and see what level two looks like. Okay,

13786
07:05:55,440 --> 07:05:57,040
so nothing crazy. We could have worked

13787
07:05:57,040 --> 07:05:58,160
in like, hey, you know, make some

13788
07:05:58,160 --> 07:06:00,320
confetti pop up. All we do is we get

13789
07:06:00,320 --> 07:06:01,760
promoted to level two up here. But, you

13790
07:06:01,760 --> 07:06:02,878
know, as you can see, the bar was

13791
07:06:02,878 --> 07:06:04,638
dynamic. It moved and it did promote us

13792
07:06:04,638 --> 07:06:06,798
to level two. But the excuse is, I'd

13793
07:06:06,798 --> 07:06:08,400
love to join, but unfortunately, I just

13794
07:06:08,400 --> 07:06:10,000
installed a new home system that detects

13795
07:06:10,000 --> 07:06:11,760
the presence of grass, trees, and

13796
07:06:11,760 --> 07:06:13,760
anything remotely outdoorsy. If I go

13797
07:06:13,760 --> 07:06:15,120
camping, my house might launch an

13798
07:06:15,120 --> 07:06:16,920
automated rescue mission to drag me back

13799
07:06:16,920 --> 07:06:19,360
indoors. So, that's pretty ridiculous.

13800
07:06:19,360 --> 07:06:20,878
And also, by the way, up in the preview,

13801
07:06:20,878 --> 07:06:22,320
you can make it mobile. So, we can see

13802
07:06:22,320 --> 07:06:23,520
what this would look like on mobile.

13803
07:06:23,520 --> 07:06:24,878
Obviously, it's not completely optimized

13804
07:06:24,878 --> 07:06:26,878
yet, so we'd have to work on that. But

13805
07:06:26,878 --> 07:06:28,718
that's the ability to do both desktop

13806
07:06:28,718 --> 07:06:30,320
and mobile. And then when you're finally

13807
07:06:30,320 --> 07:06:31,920
good with your app, up in the top right,

13808
07:06:31,920 --> 07:06:33,520
we can hit publish, which is just going

13809
07:06:33,520 --> 07:06:34,958
to show us that we can connect it to a

13810
07:06:34,958 --> 07:06:37,120
custom domain or we can publish it at

13811
07:06:37,120 --> 07:06:38,638
this domain that is made for us right

13812
07:06:38,638 --> 07:06:40,400
here. Anyways, that is going to be it

13813
07:06:40,400 --> 07:06:42,240
for today's video. This is really just

13814
07:06:42,240 --> 07:06:43,600
the tip of the iceberg with, you know,

13815
07:06:43,600 --> 07:06:45,920
nodn already has basically unlimited

13816
07:06:45,920 --> 07:06:47,600
capabilities. But when you connect that

13817
07:06:47,600 --> 07:06:49,760
to a custom front end when you don't

13818
07:06:49,760 --> 07:06:51,040
have to have any sort of coding

13819
07:06:51,040 --> 07:06:52,718
knowledge, as you can see, all of these

13820
07:06:52,718 --> 07:06:54,400
prompts that I use in here was just me

13821
07:06:54,400 --> 07:06:56,478
talking to it as if I was talking to a

13822
07:06:56,478 --> 07:06:58,160
developer. And it's really, really cool

13823
07:06:58,160 --> 07:06:59,760
how quick we spun this up. All right,

13824
07:06:59,760 --> 07:07:00,798
hopefully you guys thought that was

13825
07:07:00,798 --> 07:07:02,320
cool. I think that 11 Labs is awesome

13826
07:07:02,320 --> 07:07:04,000
and it's cool to integrate agents with

13827
07:07:04,000 --> 07:07:06,478
that as well as lovable or bolt. or

13828
07:07:06,478 --> 07:07:08,558
these other vibe coding apps that let

13829
07:07:08,558 --> 07:07:09,840
you build things. That would have taken

13830
07:07:09,840 --> 07:07:11,360
so much longer and you would have kind

13831
07:07:11,360 --> 07:07:13,040
of had to know how to code. So, really

13832
07:07:13,040 --> 07:07:14,478
cool. So, we're nearing the end of the

13833
07:07:14,478 --> 07:07:16,320
course, but it would be pretty shameful

13834
07:07:16,320 --> 07:07:18,718
if I didn't at least cover what MCP

13835
07:07:18,718 --> 07:07:20,638
servers are because they're only going

13836
07:07:20,638 --> 07:07:23,600
to get more commonly used as we evolve

13837
07:07:23,600 --> 07:07:25,360
through the space. So, we're going to

13838
07:07:25,360 --> 07:07:26,798
talk about MCP servers. We're going to

13839
07:07:26,798 --> 07:07:28,558
break it down as simple as possible. And

13840
07:07:28,558 --> 07:07:30,000
then I'm going to do a live setup where

13841
07:07:30,000 --> 07:07:31,920
I'm self-hosting NADN in front of you

13842
07:07:31,920 --> 07:07:33,760
guys step by step. and then I'm going to

13843
07:07:33,760 --> 07:07:36,160
connect to a community node in NN that

13844
07:07:36,160 --> 07:07:38,320
lets us access some MCP servers. So,

13845
07:07:38,320 --> 07:07:40,878
let's get into it. Okay, so model

13846
07:07:40,878 --> 07:07:43,680
context protocol. I swear the past week

13847
07:07:43,680 --> 07:07:45,520
it's been the only thing I've seen in

13848
07:07:45,520 --> 07:07:47,440
YouTube comments, YouTube videos,

13849
07:07:47,440 --> 07:07:49,920
Twitter, LinkedIn, it's just all over.

13850
07:07:49,920 --> 07:07:51,520
And I don't know about you guys, but

13851
07:07:51,520 --> 07:07:52,878
when I first started reading about this

13852
07:07:52,878 --> 07:07:55,280
kind of stuff, I was kind of intimidated

13853
07:07:55,280 --> 07:07:56,558
by it. I didn't completely understand

13854
07:07:56,558 --> 07:07:58,718
what was going on. It was very techy

13855
07:07:58,718 --> 07:08:00,958
and, you know, kind of abstract. I also

13856
07:08:00,958 --> 07:08:02,320
felt like I was getting different

13857
07:08:02,320 --> 07:08:04,878
information based on every source. So,

13858
07:08:04,878 --> 07:08:06,240
we're going to break it down as simple

13859
07:08:06,240 --> 07:08:08,718
as possible how it makes AI agents more

13860
07:08:08,718 --> 07:08:10,000
intelligent. Okay, so we're going to

13861
07:08:10,000 --> 07:08:11,680
start with the basics here. Let's just

13862
07:08:11,680 --> 07:08:13,600
pretend we're going back to Chad GBT,

13863
07:08:13,600 --> 07:08:15,120
which is, you know, a large language

13864
07:08:15,120 --> 07:08:17,520
model. What we have is an input on the

13865
07:08:17,520 --> 07:08:19,120
left. We're able to ask it a question.

13866
07:08:19,120 --> 07:08:20,718
You know, help me write this email, tell

13867
07:08:20,718 --> 07:08:22,718
me a joke, whatever it is. We feed in an

13868
07:08:22,718 --> 07:08:25,200
input. The LM thinks about it and

13869
07:08:25,200 --> 07:08:26,878
provides some sort of answer to us as an

13870
07:08:26,878 --> 07:08:28,638
output. And that's really all that

13871
07:08:28,638 --> 07:08:30,958
happens. The next evolution was when we

13872
07:08:30,958 --> 07:08:33,760
started to give LLM tools and that's

13873
07:08:33,760 --> 07:08:36,000
when we got AI agents because now we

13874
07:08:36,000 --> 07:08:37,840
could ask it to do something like write

13875
07:08:37,840 --> 07:08:39,520
an email but rather than just writing

13876
07:08:39,520 --> 07:08:41,280
the email and giving it back to us it

13877
07:08:41,280 --> 07:08:42,958
could call a tool to actually write that

13878
07:08:42,958 --> 07:08:45,040
email and then it would tell us there

13879
07:08:45,040 --> 07:08:46,718
you go the job's done. And so this

13880
07:08:46,718 --> 07:08:47,920
really started to expand the

13881
07:08:47,920 --> 07:08:49,680
capabilities of these LLM because they

13882
07:08:49,680 --> 07:08:51,440
could actually take action on our behalf

13883
07:08:51,440 --> 07:08:53,040
rather than just sort of assisting us

13884
07:08:53,040 --> 07:08:55,440
and getting us 70% of the way there. And

13885
07:08:55,440 --> 07:08:57,440
so before we start talking about MCP

13886
07:08:57,440 --> 07:08:59,680
servers and how that enhances our agents

13887
07:08:59,680 --> 07:09:01,600
abilities, we need to talk about how

13888
07:09:01,600 --> 07:09:03,360
these tools work and sort of the

13889
07:09:03,360 --> 07:09:05,120
limitations of them. Okay, so sticking

13890
07:09:05,120 --> 07:09:06,798
with that email example, let's pretend

13891
07:09:06,798 --> 07:09:08,160
that this is an email agent that's

13892
07:09:08,160 --> 07:09:10,320
helping us take action in email. What

13893
07:09:10,320 --> 07:09:12,320
it's going to do is each tool has a very

13894
07:09:12,320 --> 07:09:14,160
specific function. So this first tool

13895
07:09:14,160 --> 07:09:15,360
over here, you can see this one is going

13896
07:09:15,360 --> 07:09:17,280
to label emails. The second tool in the

13897
07:09:17,280 --> 07:09:18,798
middle is going to get emails and then

13898
07:09:18,798 --> 07:09:20,160
this third one on the right is going to

13899
07:09:20,160 --> 07:09:21,840
send emails. So if you watched my

13900
07:09:21,840 --> 07:09:23,040
ultimate assistant video, if you

13901
07:09:23,040 --> 07:09:24,718
haven't, I'll tag it right up here. What

13902
07:09:24,718 --> 07:09:26,000
happened was we had a main agent and

13903
07:09:26,000 --> 07:09:27,760
then it was calling on a separate agent

13904
07:09:27,760 --> 07:09:29,920
that was an email agent. And as you can

13905
07:09:29,920 --> 07:09:31,440
see here was all of its different tools

13906
07:09:31,440 --> 07:09:33,520
and each one had one very specific

13907
07:09:33,520 --> 07:09:35,200
function that it could do. And it was

13908
07:09:35,200 --> 07:09:36,478
basically just up to the email agent

13909
07:09:36,478 --> 07:09:38,160
right here to decide which one to use

13910
07:09:38,160 --> 07:09:40,478
based on the incoming query. And so the

13911
07:09:40,478 --> 07:09:42,080
reason that these tools aren't super

13912
07:09:42,080 --> 07:09:44,280
flexible is because within each of these

13913
07:09:44,280 --> 07:09:46,638
configurations, we basically have to

13914
07:09:46,638 --> 07:09:48,878
hardcode in what is the operation I'm

13915
07:09:48,878 --> 07:09:50,718
doing here and what's the resource. And

13916
07:09:50,718 --> 07:09:52,240
then we can feed in some dynamic things

13917
07:09:52,240 --> 07:09:54,798
like different message ids or label ids.

13918
07:09:54,798 --> 07:09:56,798
Over here you know the operation is get

13919
07:09:56,798 --> 07:09:58,320
the resources message. So that won't

13920
07:09:58,320 --> 07:10:00,080
change. And then over here the operation

13921
07:10:00,080 --> 07:10:02,400
is that we're sending a message. And so

13922
07:10:02,400 --> 07:10:04,400
this was really cool because agents were

13923
07:10:04,400 --> 07:10:06,080
able to use their brains whatever large

13924
07:10:06,080 --> 07:10:07,760
language model we had plugged into them

13925
07:10:07,760 --> 07:10:09,440
to understand which tool do I need to

13926
07:10:09,440 --> 07:10:11,360
use. And it still works pretty well. But

13927
07:10:11,360 --> 07:10:12,638
when it comes to being able to scale

13928
07:10:12,638 --> 07:10:14,240
this up and you want to interact with

13929
07:10:14,240 --> 07:10:15,520
multiple different things, not just

13930
07:10:15,520 --> 07:10:17,680
Gmail and Google Calendar, you also want

13931
07:10:17,680 --> 07:10:19,878
to interact with a CRM and different

13932
07:10:19,878 --> 07:10:22,558
databases, that's where it starts to get

13933
07:10:22,558 --> 07:10:24,878
a little confusing. So now we start to

13934
07:10:24,878 --> 07:10:26,958
interact with something called an MCP

13935
07:10:26,958 --> 07:10:28,798
server. And it's basically just going to

13936
07:10:28,798 --> 07:10:30,958
be a layer between your agent and

13937
07:10:30,958 --> 07:10:32,400
between the tools that you want to hit,

13938
07:10:32,400 --> 07:10:33,760
which would be right here. And so when

13939
07:10:33,760 --> 07:10:35,280
the agent sends a request to the

13940
07:10:35,280 --> 07:10:37,280
specific MCP server, in this case, let's

13941
07:10:37,280 --> 07:10:39,120
pretend it's notion, it's going to get

13942
07:10:39,120 --> 07:10:41,040
more information back than hey, what

13943
07:10:41,040 --> 07:10:42,400
tools do I have? And what's the

13944
07:10:42,400 --> 07:10:43,840
functionality here? It's also going to

13945
07:10:43,840 --> 07:10:45,200
get information about like what are the

13946
07:10:45,200 --> 07:10:46,878
resources there, what are the schemas

13947
07:10:46,878 --> 07:10:48,798
there, what are the prompts there, and

13948
07:10:48,798 --> 07:10:51,200
it uses all of that to understand how to

13949
07:10:51,200 --> 07:10:53,120
actually take the action that we asked

13950
07:10:53,120 --> 07:10:54,798
back here in the whole input that

13951
07:10:54,798 --> 07:10:56,478
triggered the workflow. when it comes to

13952
07:10:56,478 --> 07:10:57,600
different services talking to each

13953
07:10:57,600 --> 07:11:01,040
other. So in this case Nadn and notion

13954
07:11:01,040 --> 07:11:03,040
there's been you know a standard in the

13955
07:11:03,040 --> 07:11:04,718
way that we send data across and we get

13956
07:11:04,718 --> 07:11:07,040
data back which has been the rest APIs

13957
07:11:07,040 --> 07:11:08,478
and these standards are really important

13958
07:11:08,478 --> 07:11:10,638
because we have to understand how can we

13959
07:11:10,638 --> 07:11:12,478
actually format our data and send it

13960
07:11:12,478 --> 07:11:14,000
over and know that it's going to be

13961
07:11:14,000 --> 07:11:16,000
received in the way that we intend it to

13962
07:11:16,000 --> 07:11:17,840
be. And so that's exactly what was going

13963
07:11:17,840 --> 07:11:19,760
on back up here where every time that we

13964
07:11:19,760 --> 07:11:21,520
wanted to interact with a specific tool

13965
07:11:21,520 --> 07:11:24,240
we were hitting a specific endpoint. So

13966
07:11:24,240 --> 07:11:25,840
the endpoint for labeling emails was

13967
07:11:25,840 --> 07:11:27,200
different for the endpoint for sending

13968
07:11:27,200 --> 07:11:29,360
emails. And besides just those endpoints

13969
07:11:29,360 --> 07:11:31,280
or functions being different, there was

13970
07:11:31,280 --> 07:11:32,638
also different things that we had to

13971
07:11:32,638 --> 07:11:35,600
configure within each tool call. So over

13972
07:11:35,600 --> 07:11:37,280
here you can see what we had to do was

13973
07:11:37,280 --> 07:11:39,120
in order to send an email, we have to

13974
07:11:39,120 --> 07:11:41,120
give it who it's going to, what the

13975
07:11:41,120 --> 07:11:43,040
subject is, the email type, and the

13976
07:11:43,040 --> 07:11:44,558
message, which is different from the

13977
07:11:44,558 --> 07:11:45,760
information we need to send to this

13978
07:11:45,760 --> 07:11:47,600
tool, which is what's the message ID you

13979
07:11:47,600 --> 07:11:49,840
want to label, and what is the label

13980
07:11:49,840 --> 07:11:52,240
name or ID to give to that message. By

13981
07:11:52,240 --> 07:11:54,400
going through the MCP server, it's

13982
07:11:54,400 --> 07:11:55,760
basically going to be a universal

13983
07:11:55,760 --> 07:11:57,440
translator that takes the information

13984
07:11:57,440 --> 07:12:00,240
from the LLM and it enriches that with

13985
07:12:00,240 --> 07:12:01,760
all of the information that we need in

13986
07:12:01,760 --> 07:12:03,440
order to hit the right tool with the

13987
07:12:03,440 --> 07:12:04,798
right schema, fill in the right

13988
07:12:04,798 --> 07:12:07,120
parameters, access the right resources,

13989
07:12:07,120 --> 07:12:08,878
all that kind of stuff. The reason I put

13990
07:12:08,878 --> 07:12:10,718
notion here for an example of an MCP

13991
07:12:10,718 --> 07:12:13,120
server is because within your notion,

13992
07:12:13,120 --> 07:12:14,878
you'll have multiple different databases

13993
07:12:14,878 --> 07:12:16,400
and within those databases, you're going

13994
07:12:16,400 --> 07:12:18,638
to have tons of different columns and

13995
07:12:18,638 --> 07:12:20,080
then all of those, you know, are going

13996
07:12:20,080 --> 07:12:21,840
to have different pages. So, being able

13997
07:12:21,840 --> 07:12:23,920
to have the MCP server translate back to

13998
07:12:23,920 --> 07:12:25,600
your agent, here are all of the

13999
07:12:25,600 --> 07:12:27,840
databases you have. Here is the schema

14000
07:12:27,840 --> 07:12:29,760
or the different fields or columns that

14001
07:12:29,760 --> 07:12:32,000
are in each of your databases. Um, and

14002
07:12:32,000 --> 07:12:33,600
also here are the actions you can take.

14003
07:12:33,600 --> 07:12:35,840
Now, using that information, what do you

14004
07:12:35,840 --> 07:12:37,760
want to do? Real quick, hopping back to

14005
07:12:37,760 --> 07:12:39,520
the example of the ultimate assistant.

14006
07:12:39,520 --> 07:12:41,040
What we have up here is the main agent

14007
07:12:41,040 --> 07:12:43,520
and then it had four child workflows,

14008
07:12:43,520 --> 07:12:45,760
child agents that it could hit that had

14009
07:12:45,760 --> 07:12:48,000
specializations in certain areas. So the

14010
07:12:48,000 --> 07:12:49,440
Gmail agent, which we talked about right

14011
07:12:49,440 --> 07:12:51,760
down here, the Google calendar agent,

14012
07:12:51,760 --> 07:12:54,080
the contact agent, which was Air Table,

14013
07:12:54,080 --> 07:12:56,080
and then the content creator agent. So

14014
07:12:56,080 --> 07:12:57,920
all that this agent had to do was

14015
07:12:57,920 --> 07:12:59,440
understand, okay, based on what's coming

14016
07:12:59,440 --> 07:13:01,520
in, based on the request from the human,

14017
07:13:01,520 --> 07:13:03,200
which of these different tools do I

14018
07:13:03,200 --> 07:13:04,958
actually access? And we can honestly

14019
07:13:04,958 --> 07:13:07,360
kind of think of these as MCP servers.

14020
07:13:07,360 --> 07:13:09,200
Because once the query gets passed off

14021
07:13:09,200 --> 07:13:11,600
to the Gmail agent, the Gmail agent down

14022
07:13:11,600 --> 07:13:13,200
here is the one that understands here

14023
07:13:13,200 --> 07:13:14,878
are the tools I have, here are the

14024
07:13:14,878 --> 07:13:16,240
different like, you know, parameters I

14025
07:13:16,240 --> 07:13:17,600
need to fill out. I'm going to take care

14026
07:13:17,600 --> 07:13:18,878
of it and then we're going to respond

14027
07:13:18,878 --> 07:13:21,200
back to the main agent. This system made

14028
07:13:21,200 --> 07:13:22,478
things a little more dynamic and

14029
07:13:22,478 --> 07:13:24,000
flexible because then we didn't have to

14030
07:13:24,000 --> 07:13:25,840
have the ultimate assistant hooked up to

14031
07:13:25,840 --> 07:13:28,160
like 40 different tools, you know, all

14032
07:13:28,160 --> 07:13:29,760
the combinations of all of these. And it

14033
07:13:29,760 --> 07:13:31,200
made its job a little more easier by

14034
07:13:31,200 --> 07:13:32,958
just delegating the work to different

14035
07:13:32,958 --> 07:13:35,200
MCP servers. And obviously, these aren't

14036
07:13:35,200 --> 07:13:36,878
MCP servers, but it's kind of the same

14037
07:13:36,878 --> 07:13:39,040
concept. The difference here is that

14038
07:13:39,040 --> 07:13:41,040
let's say all of a sudden Gmail adds

14039
07:13:41,040 --> 07:13:42,558
more functionality. We would have to

14040
07:13:42,558 --> 07:13:44,878
come in here and add more tools in this

14041
07:13:44,878 --> 07:13:46,878
case. But what's going on with the MCP

14042
07:13:46,878 --> 07:13:48,878
servers is whatever MCP server that

14043
07:13:48,878 --> 07:13:51,440
you're accessing, it's on them to

14044
07:13:51,440 --> 07:13:53,520
continuously keep that server updated so

14045
07:13:53,520 --> 07:13:56,320
that people can always access it and do

14046
07:13:56,320 --> 07:13:58,320
what they need to do. By this point, it

14047
07:13:58,320 --> 07:13:59,520
should be starting to click, but maybe

14048
07:13:59,520 --> 07:14:01,280
it's not 100% clear. So, we're going to

14049
07:14:01,280 --> 07:14:03,040
look at an actual example of like what

14050
07:14:03,040 --> 07:14:05,200
this really looks like in action. But

14051
07:14:05,200 --> 07:14:06,718
before we do, just want to cover one

14052
07:14:06,718 --> 07:14:08,400
thing, which is, you know, the agent

14053
07:14:08,400 --> 07:14:10,558
sending over a request to a server. the

14054
07:14:10,558 --> 07:14:12,240
server translates it in order to get all

14055
07:14:12,240 --> 07:14:14,160
this information and get the tool calls,

14056
07:14:14,160 --> 07:14:16,080
all that kind of stuff. Um, and what's

14057
07:14:16,080 --> 07:14:18,478
going on here is called MCP protocol.

14058
07:14:18,478 --> 07:14:20,080
So, we have the client, which is just

14059
07:14:20,080 --> 07:14:21,520
the interface that we're using. In this

14060
07:14:21,520 --> 07:14:23,600
case, it's NN. It could be your claude

14061
07:14:23,600 --> 07:14:25,280
or your, you know, coding window,

14062
07:14:25,280 --> 07:14:27,040
whatever it is. And then we're sending

14063
07:14:27,040 --> 07:14:29,040
over something to the MCP server, and

14064
07:14:29,040 --> 07:14:31,120
that's called MCP protocol. Also, one

14065
07:14:31,120 --> 07:14:32,400
thing to keep in mind here that I'm not

14066
07:14:32,400 --> 07:14:34,160
going to dive into, but if you were to

14067
07:14:34,160 --> 07:14:35,840
create your own MCP server and it had

14068
07:14:35,840 --> 07:14:37,600
access to all of your own resources,

14069
07:14:37,600 --> 07:14:39,200
your schemas, your tools, all that kind

14070
07:14:39,200 --> 07:14:40,478
of stuff, you just got to be careful

14071
07:14:40,478 --> 07:14:42,080
there. There's some security concerns

14072
07:14:42,080 --> 07:14:44,080
because if anyone was getting into that

14073
07:14:44,080 --> 07:14:45,840
server, they could basically ask for

14074
07:14:45,840 --> 07:14:47,840
anything back. So, that's something that

14075
07:14:47,840 --> 07:14:49,600
was brought up in my paid community. We

14076
07:14:49,600 --> 07:14:51,360
were having a great discussion about MCP

14077
07:14:51,360 --> 07:14:53,360
and stuff like that. So, just keep it in

14078
07:14:53,360 --> 07:14:55,280
mind. So, let's look more at an example

14079
07:14:55,280 --> 07:14:57,600
in Naden once again. So coming down

14080
07:14:57,600 --> 07:14:59,760
here, let's pretend that we have this

14081
07:14:59,760 --> 07:15:01,600
beautiful air table agent that we built

14082
07:15:01,600 --> 07:15:04,638
out in NAN. As you can see, it has these

14083
07:15:04,638 --> 07:15:06,878
um seven different tools, which is get

14084
07:15:06,878 --> 07:15:09,120
record, update record, get bases, create

14085
07:15:09,120 --> 07:15:10,878
record, search record, delete record,

14086
07:15:10,878 --> 07:15:12,878
and get bases schema. The reason we

14087
07:15:12,878 --> 07:15:14,320
needed all of these different tools is

14088
07:15:14,320 --> 07:15:15,920
because, as you know, they each have

14089
07:15:15,920 --> 07:15:17,840
different operations inside of them, and

14090
07:15:17,840 --> 07:15:19,200
then they each have different parameters

14091
07:15:19,200 --> 07:15:20,958
to be filled out. So the agent takes

14092
07:15:20,958 --> 07:15:22,878
care of all of that. But this could be a

14093
07:15:22,878 --> 07:15:24,798
lot more lean of a system if we were

14094
07:15:24,798 --> 07:15:27,440
able to access Air Table's MCP server as

14095
07:15:27,440 --> 07:15:28,878
you see what we're doing right here

14096
07:15:28,878 --> 07:15:30,478
because this is able to list all the

14097
07:15:30,478 --> 07:15:32,558
tools that we have available in Air

14098
07:15:32,558 --> 07:15:34,000
Table. So here you can see I asked the

14099
07:15:34,000 --> 07:15:36,400
Air Table agent what actions do I have?

14100
07:15:36,400 --> 07:15:38,000
It then listed these 13 different

14101
07:15:38,000 --> 07:15:39,440
actions that we have which are actually

14102
07:15:39,440 --> 07:15:40,878
more than the seven we had built out

14103
07:15:40,878 --> 07:15:42,798
here. And we can see we have list

14104
07:15:42,798 --> 07:15:45,680
records, search records, and then 11

14105
07:15:45,680 --> 07:15:47,040
more. And this is actually just the

14106
07:15:47,040 --> 07:15:48,958
agent telling us the human what we have

14107
07:15:48,958 --> 07:15:51,120
access to. But what the actual agent

14108
07:15:51,120 --> 07:15:52,878
would look at in order to use the tool

14109
07:15:52,878 --> 07:15:54,638
is a list of the tools where it would be

14110
07:15:54,638 --> 07:15:56,240
here's the name, here's the description

14111
07:15:56,240 --> 07:15:57,920
of when you use this tool, and then

14112
07:15:57,920 --> 07:16:00,080
here's the schema of what you need to

14113
07:16:00,080 --> 07:16:01,760
send over to this tool. Because when

14114
07:16:01,760 --> 07:16:03,200
we're listing records, we have to send

14115
07:16:03,200 --> 07:16:04,798
over different information like the base

14116
07:16:04,798 --> 07:16:07,120
ID, the table ID, max records, how we

14117
07:16:07,120 --> 07:16:08,718
want to filter, which is different than

14118
07:16:08,718 --> 07:16:10,478
if we want to list tables because we

14119
07:16:10,478 --> 07:16:12,718
need a base ID and a detail label. So

14120
07:16:12,718 --> 07:16:14,080
all of this information coming back from

14121
07:16:14,080 --> 07:16:17,280
the MCP server tells the agent how it

14122
07:16:17,280 --> 07:16:18,478
needs to fill out all of these

14123
07:16:18,478 --> 07:16:19,680
parameters that we were talking about

14124
07:16:19,680 --> 07:16:21,920
earlier where it's like send email. You

14125
07:16:21,920 --> 07:16:22,958
have different things than you need to

14126
07:16:22,958 --> 07:16:25,600
fill out for labeling emails. So once

14127
07:16:25,600 --> 07:16:27,280
the agent gets this information back

14128
07:16:27,280 --> 07:16:29,520
from the MCP server, it's going to say

14129
07:16:29,520 --> 07:16:31,520
okay well I know that I need to use the

14130
07:16:31,520 --> 07:16:33,600
search records tool because the user

14131
07:16:33,600 --> 07:16:35,440
asked me to search for records with the

14132
07:16:35,440 --> 07:16:38,320
name Bob in it. So I have this schema

14133
07:16:38,320 --> 07:16:39,840
that I need to use and I'm going to use

14134
07:16:39,840 --> 07:16:41,680
my air tableable execute tool in order

14135
07:16:41,680 --> 07:16:43,520
to do so. And basically what it's going

14136
07:16:43,520 --> 07:16:44,878
to do is going to choose which tool it

14137
07:16:44,878 --> 07:16:46,400
needs based on the information it was

14138
07:16:46,400 --> 07:16:48,240
fed previously. So in this case the air

14139
07:16:48,240 --> 07:16:50,160
table execute tool would search records

14140
07:16:50,160 --> 07:16:52,000
and it would do it by filling in this

14141
07:16:52,000 --> 07:16:53,760
schema of information that we need to

14142
07:16:53,760 --> 07:16:55,520
pass over to air tableable. So now I

14143
07:16:55,520 --> 07:16:57,040
hope you can see how basically what's

14144
07:16:57,040 --> 07:16:59,600
going on in this tool is all 13 tools

14145
07:16:59,600 --> 07:17:01,120
wrapped up into one and then what's

14146
07:17:01,120 --> 07:17:03,040
going on here is just feeding all the

14147
07:17:03,040 --> 07:17:04,718
information we need in order to make the

14148
07:17:04,718 --> 07:17:06,400
correct decision. So, this is the

14149
07:17:06,400 --> 07:17:07,760
workflow we were looking at for the

14150
07:17:07,760 --> 07:17:09,440
demo. We're not going to dive into this

14151
07:17:09,440 --> 07:17:10,718
one because it's just a lot to look at.

14152
07:17:10,718 --> 07:17:12,478
I just wanted to put a ton of MCP

14153
07:17:12,478 --> 07:17:14,558
servers in one agent and see that even

14154
07:17:14,558 --> 07:17:16,638
if we had no system prompt, if it could

14155
07:17:16,638 --> 07:17:18,000
understand which one to use and then

14156
07:17:18,000 --> 07:17:19,520
still understand how to call its tools.

14157
07:17:19,520 --> 07:17:20,478
So, I just thought that was a cool

14158
07:17:20,478 --> 07:17:22,240
experiment. Obviously, what's next is

14159
07:17:22,240 --> 07:17:23,360
I'm going to try to build some sort of

14160
07:17:23,360 --> 07:17:25,360
huge, you know, personal type assistant

14161
07:17:25,360 --> 07:17:27,440
with a ton of MCP servers. But for now,

14162
07:17:27,440 --> 07:17:28,798
let's just kind of break it down as

14163
07:17:28,798 --> 07:17:30,718
simple as possible by looking at an

14164
07:17:30,718 --> 07:17:33,920
individual MCP agent. And so I I don't

14165
07:17:33,920 --> 07:17:35,920
know why I called it an MCP agent. In

14166
07:17:35,920 --> 07:17:36,878
this case, it's just kind of like a

14167
07:17:36,878 --> 07:17:39,120
firecrawl agent with access to firecraws

14168
07:17:39,120 --> 07:17:42,320
MCP server. So yeah. Okay. So taking a

14169
07:17:42,320 --> 07:17:43,680
look at firecraw agent, we're going to

14170
07:17:43,680 --> 07:17:45,440
ask what tools do you have? It's hitting

14171
07:17:45,440 --> 07:17:48,160
the firecrawl actions right now in order

14172
07:17:48,160 --> 07:17:50,320
to pull back all of the resources. And

14173
07:17:50,320 --> 07:17:51,360
as you can see, it's going to come back

14174
07:17:51,360 --> 07:17:52,718
and say, hey, we have these, you know,

14175
07:17:52,718 --> 07:17:54,320
nine actions you can take. I don't know

14176
07:17:54,320 --> 07:17:55,360
if it's nine, but it's going to be

14177
07:17:55,360 --> 07:17:57,280
something like that. It was nine. So as

14178
07:17:57,280 --> 07:17:58,878
you can see, we have access to scrape,

14179
07:17:58,878 --> 07:18:01,040
map, crawl, batch scrape, all this other

14180
07:18:01,040 --> 07:18:02,718
stuff. And what's really cool is that if

14181
07:18:02,718 --> 07:18:04,638
we click into here, we can see that we

14182
07:18:04,638 --> 07:18:06,000
have a description for when to use each

14183
07:18:06,000 --> 07:18:07,680
tool and what you actually need to send

14184
07:18:07,680 --> 07:18:09,520
over. So if we want to scrape, it's a

14185
07:18:09,520 --> 07:18:11,360
different schema to fill out than if we

14186
07:18:11,360 --> 07:18:13,200
want to do something like extract. So

14187
07:18:13,200 --> 07:18:14,798
let's try actually asking it to do

14188
07:18:14,798 --> 07:18:19,400
something. So let's say um extract the

14189
07:18:19,400 --> 07:18:23,280
rewards program name from um

14190
07:18:23,280 --> 07:18:25,360
chipotle.com. So we'll see what it does

14191
07:18:25,360 --> 07:18:27,360
here. Obviously, it's going to do the

14192
07:18:27,360 --> 07:18:28,958
same thing, listing its actions, and

14193
07:18:28,958 --> 07:18:31,520
then it should be using the firecrawl

14194
07:18:31,520 --> 07:18:34,160
extract method. So, we'll see what comes

14195
07:18:34,160 --> 07:18:36,558
back out of that tool. Okay, it went

14196
07:18:36,558 --> 07:18:37,760
green. Hopefully, we actually got a

14197
07:18:37,760 --> 07:18:39,680
response. It's hitting it again. So,

14198
07:18:39,680 --> 07:18:41,120
we'll see what happened. We'll dive into

14199
07:18:41,120 --> 07:18:43,280
the logs after this. Okay, so on the

14200
07:18:43,280 --> 07:18:44,878
third run, it finally says the rewards

14201
07:18:44,878 --> 07:18:47,120
program is called Chipotle Rewards. So,

14202
07:18:47,120 --> 07:18:49,760
let's take a look at run one. It used

14203
07:18:49,760 --> 07:18:51,600
firecrawl extract and it basically

14204
07:18:51,600 --> 07:18:53,280
filled in the prompt extract the name of

14205
07:18:53,280 --> 07:18:54,878
the rewards program. It put it in as a

14206
07:18:54,878 --> 07:18:56,638
string. We got a request failed with

14207
07:18:56,638 --> 07:18:58,320
status code 400. So, not sure what

14208
07:18:58,320 --> 07:19:00,000
happened there. Run two, it did a

14209
07:19:00,000 --> 07:19:01,920
firecross scrape. We also got a status

14210
07:19:01,920 --> 07:19:04,718
code 400. And then run three, what it

14211
07:19:04,718 --> 07:19:06,798
did was a firecall scrape once again,

14212
07:19:06,798 --> 07:19:08,320
and it was able to scrape the entire

14213
07:19:08,320 --> 07:19:09,760
thing. And then it used its brain to

14214
07:19:09,760 --> 07:19:11,200
figure out what the rewards program was

14215
07:19:11,200 --> 07:19:12,558
called. Taking a quick look at the

14216
07:19:12,558 --> 07:19:14,160
firewall documentation, we can see that

14217
07:19:14,160 --> 07:19:16,320
a 400 error code means that the

14218
07:19:16,320 --> 07:19:18,000
parameters weren't filled out correctly.

14219
07:19:18,000 --> 07:19:20,400
So what happened here was basically it

14220
07:19:20,400 --> 07:19:21,920
just didn't fill these out exactly

14221
07:19:21,920 --> 07:19:23,600
correctly the schema of like the prompt

14222
07:19:23,600 --> 07:19:25,040
and everything to send over. And so

14223
07:19:25,040 --> 07:19:26,400
really these kind of issues just come

14224
07:19:26,400 --> 07:19:28,160
down to a matter of you know making the

14225
07:19:28,160 --> 07:19:31,200
tool parameters more robust and also

14226
07:19:31,200 --> 07:19:32,400
more prompting within the actual

14227
07:19:32,400 --> 07:19:34,638
firecrawl agent itself. But it's pretty

14228
07:19:34,638 --> 07:19:36,160
cool that it was able to understand okay

14229
07:19:36,160 --> 07:19:37,600
this didn't work. Let me just try some

14230
07:19:37,600 --> 07:19:39,760
other things. Okay, so real quick just

14231
07:19:39,760 --> 07:19:41,040
wanted to say if you want to hop into

14232
07:19:41,040 --> 07:19:43,520
Nit and test out these MCP nodes, you're

14233
07:19:43,520 --> 07:19:44,718
going to have to self-host your

14234
07:19:44,718 --> 07:19:46,718
environment because you need to use the

14235
07:19:46,718 --> 07:19:48,240
community nodes and you can only access

14236
07:19:48,240 --> 07:19:50,878
those if you are

14237
07:19:51,878 --> 07:19:53,600
self-hosted. Today we're going to be

14238
07:19:53,600 --> 07:19:54,958
going through the full setup of

14239
07:19:54,958 --> 07:19:57,200
connecting MCP servers to NN. I'm going

14240
07:19:57,200 --> 07:19:58,478
to walk through how you self-host your

14241
07:19:58,478 --> 07:19:59,920
NN. I'm going to walk through how you

14242
07:19:59,920 --> 07:20:01,600
can install the community node and then

14243
07:20:01,600 --> 07:20:02,958
how to actually set up the community

14244
07:20:02,958 --> 07:20:04,718
node. The best part is you don't have to

14245
07:20:04,718 --> 07:20:06,478
open up a terminal or a shell and type

14246
07:20:06,478 --> 07:20:08,320
in any install commands. All we have to

14247
07:20:08,320 --> 07:20:09,840
do is connect to the servers through

14248
07:20:09,840 --> 07:20:11,760
NIND. So, if that sounds like something

14249
07:20:11,760 --> 07:20:13,600
that interests you, let's dive into it.

14250
07:20:13,600 --> 07:20:14,638
Make sure you guys stick around for the

14251
07:20:14,638 --> 07:20:15,680
end of this one because we're going to

14252
07:20:15,680 --> 07:20:17,040
talk about the current limitations of

14253
07:20:17,040 --> 07:20:18,798
these MCP nodes. We're going to talk

14254
07:20:18,798 --> 07:20:20,240
about some problems you may face that no

14255
07:20:20,240 --> 07:20:21,920
one else is talking about and really

14256
07:20:21,920 --> 07:20:23,280
what does it mean to actually be able to

14257
07:20:23,280 --> 07:20:25,200
scale these agents with MCP servers.

14258
07:20:25,200 --> 07:20:26,240
Now, there are a ton of different

14259
07:20:26,240 --> 07:20:28,080
platforms that you can use to host NN.

14260
07:20:28,080 --> 07:20:29,520
The reason I'm using Alstio is because

14261
07:20:29,520 --> 07:20:30,718
it's going to be really simple for

14262
07:20:30,718 --> 07:20:32,638
deploying and managing open- source

14263
07:20:32,638 --> 07:20:34,160
software. Especially with something like

14264
07:20:34,160 --> 07:20:35,840
NN, you can pretty much deploy it in

14265
07:20:35,840 --> 07:20:37,440
just a few clicks and it's going to take

14266
07:20:37,440 --> 07:20:39,520
care of installation, configuration,

14267
07:20:39,520 --> 07:20:41,760
security, backups, updates, all this

14268
07:20:41,760 --> 07:20:43,200
kind of stuff. So, there's no need for

14269
07:20:43,200 --> 07:20:44,638
you to have that DevOps knowledge

14270
07:20:44,638 --> 07:20:47,440
because I certainly don't. So, that's

14271
07:20:47,440 --> 07:20:49,200
why we're going with Alstio. It's also

14272
07:20:49,200 --> 07:20:51,760
SOCK 2 and GDPR compliant. So, that's

14273
07:20:51,760 --> 07:20:53,360
important. Anyways, like I said, we're

14274
07:20:53,360 --> 07:20:54,320
going to be going through the full

14275
07:20:54,320 --> 07:20:55,680
process. So, I'm going to click on free

14276
07:20:55,680 --> 07:20:57,280
trial. I'm going to sign up with a new

14277
07:20:57,280 --> 07:20:58,400
account. So, I'm going to log out and

14278
07:20:58,400 --> 07:21:00,160
sign up as a new user. Okay. Now that I

14279
07:21:00,160 --> 07:21:01,600
entered that, we're already good to go.

14280
07:21:01,600 --> 07:21:02,878
The first thing I'm going to do is set

14281
07:21:02,878 --> 07:21:04,160
up a payment method so that we can

14282
07:21:04,160 --> 07:21:05,920
actually spin up a service. So, I went

14283
07:21:05,920 --> 07:21:07,200
down to my account in the lefth hand

14284
07:21:07,200 --> 07:21:08,320
side and then I clicked on payment

14285
07:21:08,320 --> 07:21:09,760
options and I'm going to add a card real

14286
07:21:09,760 --> 07:21:11,360
quick. Now that that's been added, it's

14287
07:21:11,360 --> 07:21:12,558
going to take a few minutes for our

14288
07:21:12,558 --> 07:21:14,000
account to actually be approved. So, I'm

14289
07:21:14,000 --> 07:21:15,440
just going to wait for that. You can see

14290
07:21:15,440 --> 07:21:16,878
we have a support ticket that got opened

14291
07:21:16,878 --> 07:21:19,160
up, which is just waiting for account

14292
07:21:19,160 --> 07:21:21,040
activation. Also, here's the approval

14293
07:21:21,040 --> 07:21:22,558
email I got. Just keep in mind it says

14294
07:21:22,558 --> 07:21:23,840
it'll be activated in a few minutes

14295
07:21:23,840 --> 07:21:25,200
during business hours, but if you're

14296
07:21:25,200 --> 07:21:26,320
doing this at night or on the weekends,

14297
07:21:26,320 --> 07:21:28,080
it may take a little longer. Okay, there

14298
07:21:28,080 --> 07:21:29,520
we go. We are now activated. So, I'm

14299
07:21:29,520 --> 07:21:30,798
going to come up here to services and

14300
07:21:30,798 --> 07:21:32,798
I'm going to add a new service. What

14301
07:21:32,798 --> 07:21:34,320
we're going to do is just type in nadn

14302
07:21:34,320 --> 07:21:35,760
and it's going to be a really quick

14303
07:21:35,760 --> 07:21:37,920
oneclick install. Basically, I'm going

14304
07:21:37,920 --> 07:21:39,760
to just be deploying on htzner as a

14305
07:21:39,760 --> 07:21:41,280
cloud provider. I'm going to switch to

14306
07:21:41,280 --> 07:21:43,040
my region and then you have different

14307
07:21:43,040 --> 07:21:44,958
options for service plans. So, these

14308
07:21:44,958 --> 07:21:46,240
options obviously have different numbers

14309
07:21:46,240 --> 07:21:48,240
of CPUs, different amount of RAM and

14310
07:21:48,240 --> 07:21:50,080
storage. I'm going to start right now on

14311
07:21:50,080 --> 07:21:51,600
just the medium. I would keep in mind

14312
07:21:51,600 --> 07:21:53,760
that MCP servers can be kind of resource

14313
07:21:53,760 --> 07:21:55,440
intensive. So, if you are running

14314
07:21:55,440 --> 07:21:57,200
multiple of them and your environment is

14315
07:21:57,200 --> 07:21:58,638
crashing, then you're probably just

14316
07:21:58,638 --> 07:21:59,520
going to want to come in here and

14317
07:21:59,520 --> 07:22:01,360
upgrade your service plan. So, we can

14318
07:22:01,360 --> 07:22:02,638
see down here, here is the estimated

14319
07:22:02,638 --> 07:22:04,160
hourly price. Here's the plan we're

14320
07:22:04,160 --> 07:22:05,200
going with. And I'm going to go ahead

14321
07:22:05,200 --> 07:22:06,558
and move forward. Now, we're going to

14322
07:22:06,558 --> 07:22:08,080
set up the name. So, this will pop up as

14323
07:22:08,080 --> 07:22:10,160
your domain for your NAND environment.

14324
07:22:10,160 --> 07:22:11,920
Then, I went ahead and called this Nad-

14325
07:22:11,920 --> 07:22:13,760
demo. What you can do here is you can

14326
07:22:13,760 --> 07:22:15,200
add more volume. So, if you wanted to,

14327
07:22:15,200 --> 07:22:16,320
you could increase the amount of

14328
07:22:16,320 --> 07:22:17,760
storage. And as you can see down here,

14329
07:22:17,760 --> 07:22:18,878
it's going to increase your hourly

14330
07:22:18,878 --> 07:22:20,478
price. I'm not going to do that, but you

14331
07:22:20,478 --> 07:22:22,160
do have that option. And then of course

14332
07:22:22,160 --> 07:22:24,000
you have some advanced configuration for

14333
07:22:24,000 --> 07:22:25,440
software updates and system updates.

14334
07:22:25,440 --> 07:22:26,878
Once again, I'm just going to leave that

14335
07:22:26,878 --> 07:22:28,638
as is. And then you can also choose the

14336
07:22:28,638 --> 07:22:30,400
level of support that you need. You can

14337
07:22:30,400 --> 07:22:31,360
scan through your different options

14338
07:22:31,360 --> 07:22:32,878
here. Obviously, you'll have a different

14339
07:22:32,878 --> 07:22:34,958
price associated with it. But on the

14340
07:22:34,958 --> 07:22:36,400
default plan, I'm just going to continue

14341
07:22:36,400 --> 07:22:38,718
with level one support. And now I'm

14342
07:22:38,718 --> 07:22:40,160
going to click on create service. Okay.

14343
07:22:40,160 --> 07:22:41,680
So, I don't have enough credits to

14344
07:22:41,680 --> 07:22:42,958
actually deploy this service. So, I'm

14345
07:22:42,958 --> 07:22:44,558
going to have to go add some credits in

14346
07:22:44,558 --> 07:22:46,080
my account. So, back in the account, I

14347
07:22:46,080 --> 07:22:47,440
went to add credits. And now that I have

14348
07:22:47,440 --> 07:22:49,440
a card, I can actually add some credits.

14349
07:22:49,440 --> 07:22:50,638
So, I'm going to agree to the terms and

14350
07:22:50,638 --> 07:22:52,878
add funds. Payment successful. Nice. We

14351
07:22:52,878 --> 07:22:54,000
have some money to play with. Down here,

14352
07:22:54,000 --> 07:22:55,840
we can see 10 credits. This is also

14353
07:22:55,840 --> 07:22:57,280
where we'll see how much we're spending

14354
07:22:57,280 --> 07:22:59,040
per hour once we have this service up

14355
07:22:59,040 --> 07:23:00,558
and running. Unfortunately, we have to

14356
07:23:00,558 --> 07:23:01,840
do that all again. So, let me get back

14357
07:23:01,840 --> 07:23:03,760
to the screen we were just on. Okay, now

14358
07:23:03,760 --> 07:23:04,798
we're back here. I'm going to click

14359
07:23:04,798 --> 07:23:06,320
create service. We're deploying your

14360
07:23:06,320 --> 07:23:07,920
service. Please wait. And this is

14361
07:23:07,920 --> 07:23:08,798
basically just going to take a few

14362
07:23:08,798 --> 07:23:10,558
minutes to spin up. Okay, so now what we

14363
07:23:10,558 --> 07:23:11,920
see is the service is currently running.

14364
07:23:11,920 --> 07:23:13,680
We can click into the service and we

14365
07:23:13,680 --> 07:23:14,798
should be able to get a link that's

14366
07:23:14,798 --> 07:23:16,638
going to take us to our NN instance. So,

14367
07:23:16,638 --> 07:23:17,600
here's what it looks like. We can see

14368
07:23:17,600 --> 07:23:18,558
it's running. and we have all these

14369
07:23:18,558 --> 07:23:19,520
different tabs and all these different

14370
07:23:19,520 --> 07:23:20,718
things to look through. We're going to

14371
07:23:20,718 --> 07:23:22,080
keep it simple today and not really dive

14372
07:23:22,080 --> 07:23:23,440
into it. But what we're going to do is

14373
07:23:23,440 --> 07:23:24,878
come down here to our network and this

14374
07:23:24,878 --> 07:23:27,280
is our actual domain to go to. So if I

14375
07:23:27,280 --> 07:23:29,280
select all of this and I just click go

14376
07:23:29,280 --> 07:23:31,120
to this app, it's going to spin up our

14377
07:23:31,120 --> 07:23:32,638
NN environment and because this is the

14378
07:23:32,638 --> 07:23:34,160
first time we're visiting it. We just

14379
07:23:34,160 --> 07:23:35,840
have to do the setup. Okay. So once we

14380
07:23:35,840 --> 07:23:37,200
have that configured, going to hit next.

14381
07:23:37,200 --> 07:23:38,878
We have to do some fun little onboarding

14382
07:23:38,878 --> 07:23:39,840
where it's going to ask us some

14383
07:23:39,840 --> 07:23:41,120
questions right here. So then when

14384
07:23:41,120 --> 07:23:42,000
you're done with that, you just got to

14385
07:23:42,000 --> 07:23:44,000
click get started and you now have this

14386
07:23:44,000 --> 07:23:45,200
option to get some paid features for

14387
07:23:45,200 --> 07:23:47,200
free. I'm going to hit skip and we're

14388
07:23:47,200 --> 07:23:49,280
good to go. We are in NAN. So what's

14389
07:23:49,280 --> 07:23:50,878
next is we need to install a community

14390
07:23:50,878 --> 07:23:52,798
node. So if you come down here to your

14391
07:23:52,798 --> 07:23:55,120
settings and you click on settings, um

14392
07:23:55,120 --> 07:23:56,240
you can see you're on the community

14393
07:23:56,240 --> 07:23:58,160
plan. We can go all the way down here to

14394
07:23:58,160 --> 07:23:59,680
community nodes. And now we have to

14395
07:23:59,680 --> 07:24:01,520
install a community node. So in the

14396
07:24:01,520 --> 07:24:02,638
description we have the GitHub

14397
07:24:02,638 --> 07:24:05,280
repository for this NAD nodes MCP that

14398
07:24:05,280 --> 07:24:06,638
was made by Nerding. And you can see

14399
07:24:06,638 --> 07:24:07,760
there's some information on how to

14400
07:24:07,760 --> 07:24:09,200
actually install this. But all we have

14401
07:24:09,200 --> 07:24:10,958
to do is basically just copy this line

14402
07:24:10,958 --> 07:24:12,798
right here. I'm just going to copy NAN-

14403
07:24:12,798 --> 07:24:15,600
Nodes MCP. Click on install community

14404
07:24:15,600 --> 07:24:17,600
node. Put that in there. Hit understand.

14405
07:24:17,600 --> 07:24:18,718
And so the reason you can only do this

14406
07:24:18,718 --> 07:24:20,400
on self-hosted is because these nodes

14407
07:24:20,400 --> 07:24:23,120
are not a native verified node from

14408
07:24:23,120 --> 07:24:24,718
Naden. So it's just like, you know,

14409
07:24:24,718 --> 07:24:25,920
we're downloading it from a public

14410
07:24:25,920 --> 07:24:27,600
source, at least the code. And then we

14411
07:24:27,600 --> 07:24:29,840
hit install. Package installed. We can

14412
07:24:29,840 --> 07:24:31,280
now see we have one community node,

14413
07:24:31,280 --> 07:24:33,440
which is the MCP. Cool. So I'm going to

14414
07:24:33,440 --> 07:24:35,040
leave my settings and I'm going to open

14415
07:24:35,040 --> 07:24:36,958
up a new workflow. And we're just going

14416
07:24:36,958 --> 07:24:38,558
to hit tab to see if we have the actual

14417
07:24:38,558 --> 07:24:40,558
node. So if I type in MCP, we can see

14418
07:24:40,558 --> 07:24:42,320
that we have MCP client and we have this

14419
07:24:42,320 --> 07:24:43,680
little block, which just means that it

14420
07:24:43,680 --> 07:24:45,920
is part of the community node. So, I'm

14421
07:24:45,920 --> 07:24:47,440
going to click into here, and we can see

14422
07:24:47,440 --> 07:24:48,878
we have some different options. We can

14423
07:24:48,878 --> 07:24:50,400
execute a tool. We can get a prompt

14424
07:24:50,400 --> 07:24:52,320
template. We can list available prompts,

14425
07:24:52,320 --> 07:24:54,320
list available resources, list available

14426
07:24:54,320 --> 07:24:56,558
tools, and read a resource. Right now,

14427
07:24:56,558 --> 07:24:58,638
let's go with list available tools. Um,

14428
07:24:58,638 --> 07:24:59,920
the main one we'll be looking at is

14429
07:24:59,920 --> 07:25:01,760
listing tools and then executing tools.

14430
07:25:01,760 --> 07:25:03,360
So, quick plug for the school community.

14431
07:25:03,360 --> 07:25:04,638
If you're looking for a more hands-on

14432
07:25:04,638 --> 07:25:06,160
learning experience, as well as wanting

14433
07:25:06,160 --> 07:25:08,240
to connect with over 700 members who are

14434
07:25:08,240 --> 07:25:10,080
also dedicated to this rapidly evolving

14435
07:25:10,080 --> 07:25:11,600
space, then definitely give this

14436
07:25:11,600 --> 07:25:13,120
community a look. We have great

14437
07:25:13,120 --> 07:25:14,718
discussions, great guest speakers as you

14438
07:25:14,718 --> 07:25:16,080
can see. We also have a classroom

14439
07:25:16,080 --> 07:25:17,840
section with stuff like building agents,

14440
07:25:17,840 --> 07:25:20,400
vector databases, APIs and HTTP request,

14441
07:25:20,400 --> 07:25:22,160
step-by-step builds. All the live calls

14442
07:25:22,160 --> 07:25:23,600
are recorded, all this kind of stuff.

14443
07:25:23,600 --> 07:25:24,798
So, if this sounds interesting to you,

14444
07:25:24,798 --> 07:25:26,478
then I'd love to see you in a live call.

14445
07:25:26,478 --> 07:25:28,000
Anyways, let's get back to the video.

14446
07:25:28,000 --> 07:25:29,440
So, obviously, we have the operation,

14447
07:25:29,440 --> 07:25:31,360
but we haven't set up a credential yet.

14448
07:25:31,360 --> 07:25:32,798
So now what you're going to do is go to

14449
07:25:32,798 --> 07:25:34,400
a different link in the description

14450
07:25:34,400 --> 07:25:36,160
which is the GitHub repository for

14451
07:25:36,160 --> 07:25:38,718
different MCP servers and we can pretty

14452
07:25:38,718 --> 07:25:40,478
much connect to any of these like I said

14453
07:25:40,478 --> 07:25:42,718
without having to run any code in our

14454
07:25:42,718 --> 07:25:44,638
terminal and install some stuff at least

14455
07:25:44,638 --> 07:25:46,240
because we're hosting in the cloud. If

14456
07:25:46,240 --> 07:25:47,760
we're hosting locally it may be a little

14457
07:25:47,760 --> 07:25:49,120
different. Okay, so I've seen a ton of

14458
07:25:49,120 --> 07:25:50,958
tutorials go over like Brave Search or

14459
07:25:50,958 --> 07:25:52,718
Firecrawl. Um so let's try to do

14460
07:25:52,718 --> 07:25:53,840
something a little more fun. I think

14461
07:25:53,840 --> 07:25:55,280
first we'll start off with Airbnb

14462
07:25:55,280 --> 07:25:56,798
because this one is going to be free.

14463
07:25:56,798 --> 07:25:58,080
You don't even have to go get an API

14464
07:25:58,080 --> 07:25:59,440
key. So that's really cool. So, I'm

14465
07:25:59,440 --> 07:26:01,440
going to click into this Airbnb MCP

14466
07:26:01,440 --> 07:26:02,958
server. There's a bunch of stuff going

14467
07:26:02,958 --> 07:26:04,558
on here. And if you understand GitHub

14468
07:26:04,558 --> 07:26:06,798
and repositories and some code, you can

14469
07:26:06,798 --> 07:26:08,080
look through like the Docker file and

14470
07:26:08,080 --> 07:26:09,920
everything, which is pretty cool. But

14471
07:26:09,920 --> 07:26:12,320
for us non techies, all we have to do is

14472
07:26:12,320 --> 07:26:13,520
come down here. It's going to tell us

14473
07:26:13,520 --> 07:26:15,200
what tools are available. But we just

14474
07:26:15,200 --> 07:26:16,558
need to look at how to actually install

14475
07:26:16,558 --> 07:26:18,320
this. And so, all we're looking for is

14476
07:26:18,320 --> 07:26:21,680
the MPX type installer. And so after my

14477
07:26:21,680 --> 07:26:23,680
testing, I tried this one first, but it

14478
07:26:23,680 --> 07:26:25,360
wouldn't let us execute the tool because

14479
07:26:25,360 --> 07:26:26,958
we need to use this thing that is ignore

14480
07:26:26,958 --> 07:26:28,638
robots text, which just basically lets

14481
07:26:28,638 --> 07:26:30,958
us actually access the platform. So you

14482
07:26:30,958 --> 07:26:32,240
can see here we have a command, which is

14483
07:26:32,240 --> 07:26:33,840
npx, and then we have an array of

14484
07:26:33,840 --> 07:26:36,798
arguments, which is -y, this open B&B

14485
07:26:36,798 --> 07:26:38,398
thing, and then also the ignore robots

14486
07:26:38,398 --> 07:26:39,760
text. So first of all, I'm just going to

14487
07:26:39,760 --> 07:26:42,000
grab the command, which is npx. Copy

14488
07:26:42,000 --> 07:26:43,920
that. Go back and edit in, and we're

14489
07:26:43,920 --> 07:26:45,120
going to create a new credential. This

14490
07:26:45,120 --> 07:26:47,040
one's going to be for Airbnb. So I'm

14491
07:26:47,040 --> 07:26:48,160
just going to name this so we have it

14492
07:26:48,160 --> 07:26:49,600
kept. And then we're just going to paste

14493
07:26:49,600 --> 07:26:52,240
the command right into there, mpx. Now

14494
07:26:52,240 --> 07:26:53,520
we can see we have arguments to fill

14495
07:26:53,520 --> 07:26:55,040
out. So I'm going to go back into that

14496
07:26:55,040 --> 07:26:57,040
documentation. We can see the arguments

14497
07:26:57,040 --> 07:26:59,760
are -ash-y. And then the next one is the

14498
07:26:59,760 --> 07:27:01,840
open B&B. And then the next one is

14499
07:27:01,840 --> 07:27:03,360
ignore robots text. So we're going to

14500
07:27:03,360 --> 07:27:05,440
put them in one by one. So first is the

14501
07:27:05,440 --> 07:27:07,440
dashy. Now I'm going to go back and grab

14502
07:27:07,440 --> 07:27:09,000
the at@

14503
07:27:09,000 --> 07:27:11,360
openb put a space and then paste it in

14504
07:27:11,360 --> 07:27:12,558
there. And then I'm going to put another

14505
07:27:12,558 --> 07:27:14,160
space. And then we're going to grab this

14506
07:27:14,160 --> 07:27:16,478
last part which is the ignore robots

14507
07:27:16,478 --> 07:27:18,558
txt. So once we paste that in there, we

14508
07:27:18,558 --> 07:27:20,240
can basically just hit save. As you can

14509
07:27:20,240 --> 07:27:21,920
see, we've connected successfully. Um

14510
07:27:21,920 --> 07:27:23,440
the credential is now in our space and

14511
07:27:23,440 --> 07:27:24,958
we didn't have to type in anything in a

14512
07:27:24,958 --> 07:27:26,558
terminal. And now if we hit test step,

14513
07:27:26,558 --> 07:27:28,398
we should be able to pull in the tools

14514
07:27:28,398 --> 07:27:30,878
that this MCP server gives us access to.

14515
07:27:30,878 --> 07:27:32,398
So it's as easy as that. As you can see,

14516
07:27:32,398 --> 07:27:33,920
there are two tools. The first one is

14517
07:27:33,920 --> 07:27:35,920
Airbnb search. Here's when you use it,

14518
07:27:35,920 --> 07:27:37,440
and then here's the schema to send over

14519
07:27:37,440 --> 07:27:39,600
to that tool. And then the second one is

14520
07:27:39,600 --> 07:27:41,760
Airbnb listing details. Here's when you

14521
07:27:41,760 --> 07:27:43,040
want to use that, and then here's the

14522
07:27:43,040 --> 07:27:44,878
schema that you would send over. And now

14523
07:27:44,878 --> 07:27:46,320
from here, which is really cool, we can

14524
07:27:46,320 --> 07:27:47,920
click on another node, which is going to

14525
07:27:47,920 --> 07:27:49,840
be an MCP client once again. And this

14526
07:27:49,840 --> 07:27:51,520
time, we want to execute a tool. We

14527
07:27:51,520 --> 07:27:53,040
already have our credential set up. We

14528
07:27:53,040 --> 07:27:54,638
just did that together. And now all we

14529
07:27:54,638 --> 07:27:56,000
have to do is configure the tool name

14530
07:27:56,000 --> 07:27:57,920
and the tool parameters. So just as a

14531
07:27:57,920 --> 07:27:59,600
quick demo that this actually works. The

14532
07:27:59,600 --> 07:28:01,840
tool name, we're going to drag in Airbnb

14533
07:28:01,840 --> 07:28:03,600
search, as you can see. And then for the

14534
07:28:03,600 --> 07:28:04,798
parameter, we can see these are the

14535
07:28:04,798 --> 07:28:05,840
different things that we need to fill

14536
07:28:05,840 --> 07:28:07,520
out. And so all I'm going to do is just

14537
07:28:07,520 --> 07:28:10,000
send over a location. So I obviously

14538
07:28:10,000 --> 07:28:12,240
hardcoded in location equals Los

14539
07:28:12,240 --> 07:28:13,680
Angeles. That's all we're going to try.

14540
07:28:13,680 --> 07:28:14,958
And now we're going to hit test step and

14541
07:28:14,958 --> 07:28:16,478
we should see that we're getting Airbnbs

14542
07:28:16,478 --> 07:28:19,120
back that are in Los Angeles. There we

14543
07:28:19,120 --> 07:28:21,520
go. We have um ton of different items

14544
07:28:21,520 --> 07:28:23,600
here. So, let's actually take a look at

14545
07:28:23,600 --> 07:28:25,760
this listing. So, if I just copy this

14546
07:28:25,760 --> 07:28:27,120
into the browser, we should see an

14547
07:28:27,120 --> 07:28:29,680
Airbnb arts district guest house. This

14548
07:28:29,680 --> 07:28:31,680
is in Culver City, California. And

14549
07:28:31,680 --> 07:28:32,958
obviously, we could make our search more

14550
07:28:32,958 --> 07:28:34,878
refined if we were able to also put in

14551
07:28:34,878 --> 07:28:36,558
like a check-in and checkout date, how

14552
07:28:36,558 --> 07:28:38,320
many adults, how many children, how many

14553
07:28:38,320 --> 07:28:40,320
pets. We could specify the price, all

14554
07:28:40,320 --> 07:28:42,080
this kind of stuff. Okay, cool. So that

14555
07:28:42,080 --> 07:28:43,440
was an example of how we search through

14556
07:28:43,440 --> 07:28:45,120
an MCP server to get the tools and then

14557
07:28:45,120 --> 07:28:46,798
how we can actually execute upon that

14558
07:28:46,798 --> 07:28:48,718
tool. But now if we want to give our

14559
07:28:48,718 --> 07:28:51,120
agent access to an MCP server, what we

14560
07:28:51,120 --> 07:28:52,240
would do is obviously we're going to add

14561
07:28:52,240 --> 07:28:54,638
an AI agent. We are first of all going

14562
07:28:54,638 --> 07:28:56,878
to come down here, give it a chat input

14563
07:28:56,878 --> 07:28:58,398
so we can actually talk to the agent. So

14564
07:28:58,398 --> 07:29:00,240
we'll add that right here. And now we

14565
07:29:00,240 --> 07:29:01,760
obviously need to connect a chat model

14566
07:29:01,760 --> 07:29:03,360
so that the agent has a brain and then

14567
07:29:03,360 --> 07:29:05,040
give it the MCP tools. So first of all,

14568
07:29:05,040 --> 07:29:06,638
just to connect a chat model, I'm just

14569
07:29:06,638 --> 07:29:08,240
going to grab an open AI. I'm sorry for

14570
07:29:08,240 --> 07:29:09,600
being boring, but all we have to do is

14571
07:29:09,600 --> 07:29:11,520
create a credential. So, if you go to

14572
07:29:11,520 --> 07:29:13,760
your OpenAI account and grab an API key.

14573
07:29:13,760 --> 07:29:15,200
So, here's my account. As you can see, I

14574
07:29:15,200 --> 07:29:16,320
have a ton of different keys, but I'm

14575
07:29:16,320 --> 07:29:17,440
just going to create a new one. This is

14576
07:29:17,440 --> 07:29:19,520
going to be MCP test and then all we

14577
07:29:19,520 --> 07:29:21,360
have to do is copy that key. Come back

14578
07:29:21,360 --> 07:29:23,120
and end it in and we're going to paste

14579
07:29:23,120 --> 07:29:25,040
that right in here. So, there's our key.

14580
07:29:25,040 --> 07:29:26,878
Hit save. We'll go green. We're good to

14581
07:29:26,878 --> 07:29:29,120
go. We're connected to OpenAI. And now

14582
07:29:29,120 --> 07:29:30,798
we can choose our model. So, for Mini is

14583
07:29:30,798 --> 07:29:32,160
going to work just fine here. Now, to

14584
07:29:32,160 --> 07:29:33,600
add a tool once again, we're going to

14585
07:29:33,600 --> 07:29:35,920
add the MCP client tool right here. And

14586
07:29:35,920 --> 07:29:38,000
let's just do Airbnb one more time. So,

14587
07:29:38,000 --> 07:29:40,240
we're connected to Airbnb list tools and

14588
07:29:40,240 --> 07:29:43,398
I'm just going to say what tools do I

14589
07:29:43,398 --> 07:29:46,160
have and what's going to happen is it

14590
07:29:46,160 --> 07:29:49,280
errored because the NAND nodes MCP tool

14591
07:29:49,280 --> 07:29:50,958
is not recognized yet even though the

14592
07:29:50,958 --> 07:29:53,200
MCP nodes are. So, we have to go back

14593
07:29:53,200 --> 07:29:55,440
into Alstio real quick and change one

14594
07:29:55,440 --> 07:29:57,040
thing. So, coming back into the GitHub

14595
07:29:57,040 --> 07:29:59,520
repository for the NN MCP node, we can

14596
07:29:59,520 --> 07:30:01,040
see it gives us some installation

14597
07:30:01,040 --> 07:30:03,200
information, right? But if we go all the

14598
07:30:03,200 --> 07:30:05,600
way down to how to use it as a tool, um

14599
07:30:05,600 --> 07:30:06,798
if I can scroll all the way down here.

14600
07:30:06,798 --> 07:30:08,638
So here is an example of using it as a

14601
07:30:08,638 --> 07:30:10,558
tool. You have to set up the environment

14602
07:30:10,558 --> 07:30:12,240
variable within your hosting

14603
07:30:12,240 --> 07:30:14,398
environment. So whether it's Allesio or

14604
07:30:14,398 --> 07:30:16,000
Render or Digital Ocean or wherever

14605
07:30:16,000 --> 07:30:17,280
you're doing it, it'll be a little

14606
07:30:17,280 --> 07:30:18,718
different, but you just have to navigate

14607
07:30:18,718 --> 07:30:19,840
down to where you have environment

14608
07:30:19,840 --> 07:30:23,958
variables. We have to set nad community

14609
07:30:23,958 --> 07:30:26,558
package_allow tool usage. We have to set

14610
07:30:26,558 --> 07:30:28,240
that to equal true. So I'm going to come

14611
07:30:28,240 --> 07:30:30,398
back into our Alstio service. And right

14612
07:30:30,398 --> 07:30:32,080
here we have the software which is NAN

14613
07:30:32,080 --> 07:30:33,840
version latest. And what we can do is we

14614
07:30:33,840 --> 07:30:35,920
can you know restart, view app logs. We

14615
07:30:35,920 --> 07:30:37,520
can change the version here or we can

14616
07:30:37,520 --> 07:30:39,520
update the config which if we open this

14617
07:30:39,520 --> 07:30:41,600
up it may look a little intimidating but

14618
07:30:41,600 --> 07:30:43,360
all we're looking for is right here we

14619
07:30:43,360 --> 07:30:45,360
have environment and we can see we have

14620
07:30:45,360 --> 07:30:47,200
like different stuff with our Postgress

14621
07:30:47,200 --> 07:30:49,200
with our web hook tunnel URLs all this

14622
07:30:49,200 --> 07:30:50,718
kind of stuff and so at the bottom I'm

14623
07:30:50,718 --> 07:30:52,080
just going to add a new line and I'm

14624
07:30:52,080 --> 07:30:53,280
just going to paste in that command we

14625
07:30:53,280 --> 07:30:55,200
had which was nadn community packages

14626
07:30:55,200 --> 07:30:57,120
allow and then instead of an equal I'm

14627
07:30:57,120 --> 07:30:59,600
going to put a colon and now we have

14628
07:30:59,600 --> 07:31:02,000
that nadn community packages allow is

14629
07:31:02,000 --> 07:31:03,920
set to true and I'm just adding a space

14630
07:31:03,920 --> 07:31:06,160
after the colon so now it's link and all

14631
07:31:06,160 --> 07:31:07,360
we're just going to do is hit update and

14632
07:31:07,360 --> 07:31:09,200
restart. And so this is going to respin

14633
07:31:09,200 --> 07:31:10,878
up our instance. Okay, so it looks like

14634
07:31:10,878 --> 07:31:12,320
we are now finished up. I'm going to go

14635
07:31:12,320 --> 07:31:13,680
ahead and close out of this. We can see

14636
07:31:13,680 --> 07:31:15,440
that our instance is running. So now I'm

14637
07:31:15,440 --> 07:31:16,718
going to come back into here and I

14638
07:31:16,718 --> 07:31:18,398
actually refresh this. So our agent's

14639
07:31:18,398 --> 07:31:20,320
gone. So let me get him back real quick.

14640
07:31:20,320 --> 07:31:21,680
All right, so we have our agent back.

14641
07:31:21,680 --> 07:31:23,200
We're going to go ahead and add that MCP

14642
07:31:23,200 --> 07:31:25,680
tool once again. Right here we are going

14643
07:31:25,680 --> 07:31:27,280
to have our credential already set up.

14644
07:31:27,280 --> 07:31:28,958
The operation is list tools. And now

14645
07:31:28,958 --> 07:31:31,280
let's try one more time asking it what

14646
07:31:31,280 --> 07:31:33,920
tools do you have?

14647
07:31:33,920 --> 07:31:35,360
And it knows to use this node because

14648
07:31:35,360 --> 07:31:37,040
it's the operation here is list tools.

14649
07:31:37,040 --> 07:31:38,160
So it's going to be pretty intelligent

14650
07:31:38,160 --> 07:31:40,080
about it. Now it's able to actually call

14651
07:31:40,080 --> 07:31:41,520
that tool because we set up that

14652
07:31:41,520 --> 07:31:43,280
environment variable. So let's see what

14653
07:31:43,280 --> 07:31:44,958
Airbnb responds with as far as what

14654
07:31:44,958 --> 07:31:47,200
tools it actually can use. Cool. So I

14655
07:31:47,200 --> 07:31:48,320
have access to the following tools.

14656
07:31:48,320 --> 07:31:50,718
Airbnb search and listing details. Now

14657
07:31:50,718 --> 07:31:52,240
let's add the actual tool that's going

14658
07:31:52,240 --> 07:31:56,080
to execute on that tool. So Airbnb um

14659
07:31:56,080 --> 07:31:57,280
once again we have a credential already

14660
07:31:57,280 --> 07:31:58,558
set up. The operation we're going to

14661
07:31:58,558 --> 07:32:00,718
choose execute tool instead. And now we

14662
07:32:00,718 --> 07:32:02,558
have to set up what is going on within

14663
07:32:02,558 --> 07:32:04,638
this tool. So the idea here is that when

14664
07:32:04,638 --> 07:32:06,478
the client responds with okay I have

14665
07:32:06,478 --> 07:32:08,958
Airbnb search and I have Airbnb listing

14666
07:32:08,958 --> 07:32:10,878
details the agent will then figure out

14667
07:32:10,878 --> 07:32:13,200
based on what we asked which one do I

14668
07:32:13,200 --> 07:32:15,120
use and the agent has to pass that over

14669
07:32:15,120 --> 07:32:16,958
to this next one which is actually going

14670
07:32:16,958 --> 07:32:19,280
to execute. So what we want to do here

14671
07:32:19,280 --> 07:32:21,360
is the tool name cannot be fixed because

14672
07:32:21,360 --> 07:32:23,040
we want to make this dynamic. So, I'm

14673
07:32:23,040 --> 07:32:24,398
going to change this to an expression

14674
07:32:24,398 --> 07:32:26,160
and I'm going to use the handy from AI

14675
07:32:26,160 --> 07:32:27,760
function here, which is basically we're

14676
07:32:27,760 --> 07:32:30,320
just going to tell the AI agent, okay?

14677
07:32:30,320 --> 07:32:32,718
You know, based on what's going on, you

14678
07:32:32,718 --> 07:32:34,240
choose which tool to use and you're

14679
07:32:34,240 --> 07:32:35,840
going to put that in here. So, I'm going

14680
07:32:35,840 --> 07:32:38,638
to put in quotes tool and then I'm going

14681
07:32:38,638 --> 07:32:40,478
to just define what that means. And in

14682
07:32:40,478 --> 07:32:43,040
quotes after a comma, I'm going to say

14683
07:32:43,040 --> 07:32:45,840
the tool selected. So, we'll just leave

14684
07:32:45,840 --> 07:32:47,360
it as simple as that. And then what's

14685
07:32:47,360 --> 07:32:49,200
really cool is for the tool parameters,

14686
07:32:49,200 --> 07:32:51,120
this is going to change based on the

14687
07:32:51,120 --> 07:32:52,638
actual tool selected because there's

14688
07:32:52,638 --> 07:32:54,638
different schemas or parameters that you

14689
07:32:54,638 --> 07:32:57,520
can send over to the different tools. So

14690
07:32:57,520 --> 07:32:58,798
we're going to start off by just hitting

14691
07:32:58,798 --> 07:33:00,638
this button, which lets the model define

14692
07:33:00,638 --> 07:33:02,320
this parameter. It's going to get back

14693
07:33:02,320 --> 07:33:04,160
what not only what tool am I using, but

14694
07:33:04,160 --> 07:33:05,920
what schema do I need to send over. So

14695
07:33:05,920 --> 07:33:07,120
it should be intelligent enough to

14696
07:33:07,120 --> 07:33:09,200
figure it out for simple queries. So

14697
07:33:09,200 --> 07:33:12,280
let's change this name to Airbnb

14698
07:33:12,280 --> 07:33:14,398
execute. I'm going to change this other

14699
07:33:14,398 --> 07:33:17,520
one to Airbnb tools and then we'll have

14700
07:33:17,520 --> 07:33:18,798
the agent try to figure out what's going

14701
07:33:18,798 --> 07:33:20,958
on. And just a reminder, there's no

14702
07:33:20,958 --> 07:33:22,478
system prompt in here. It literally just

14703
07:33:22,478 --> 07:33:24,080
says your helpful assistant. So, we'll

14704
07:33:24,080 --> 07:33:25,840
see how intelligent this stuff is. Okay,

14705
07:33:25,840 --> 07:33:27,440
so I'm asking it to search for Airbnbs

14706
07:33:27,440 --> 07:33:29,600
in Chicago for four adults. Let's try

14707
07:33:29,600 --> 07:33:31,520
that off. We should obviously be using

14708
07:33:31,520 --> 07:33:34,398
the Airbnb search tool. And then we want

14709
07:33:34,398 --> 07:33:35,680
to see if it can fill out the parameters

14710
07:33:35,680 --> 07:33:37,360
with a location, but also how many

14711
07:33:37,360 --> 07:33:38,878
adults are going to be there because

14712
07:33:38,878 --> 07:33:41,200
earlier all we did was location. So, we

14713
07:33:41,200 --> 07:33:43,280
got a successful response already back.

14714
07:33:43,280 --> 07:33:45,280
Once this finishes up, we should see

14715
07:33:45,280 --> 07:33:46,878
potentially a few links down here that

14716
07:33:46,878 --> 07:33:49,360
actually link to places. So, here we go.

14717
07:33:49,360 --> 07:33:51,600
Um, luxury designer penthouse Gold

14718
07:33:51,600 --> 07:33:53,280
Coast. It's apartment. It has three

14719
07:33:53,280 --> 07:33:54,878
bedrooms, eight beds. So, that

14720
07:33:54,878 --> 07:33:56,638
definitely fits four guests. And you can

14721
07:33:56,638 --> 07:33:57,840
also see it's going to give us the price

14722
07:33:57,840 --> 07:33:59,440
per night as well as, you know, the

14723
07:33:59,440 --> 07:34:01,280
rating and just some other information.

14724
07:34:01,280 --> 07:34:02,638
So, let's click into this one real quick

14725
07:34:02,638 --> 07:34:03,840
and we'll take a look. Make sure it

14726
07:34:03,840 --> 07:34:05,680
actually is in Chicago and it has all

14727
07:34:05,680 --> 07:34:07,600
the stuff. This one does have 10 guests.

14728
07:34:07,600 --> 07:34:09,440
So, awesome. And we can see we got five

14729
07:34:09,440 --> 07:34:12,080
total listings. So without having to

14730
07:34:12,080 --> 07:34:14,240
configure, you know, here's the API

14731
07:34:14,240 --> 07:34:15,600
documentation and here's how we set up

14732
07:34:15,600 --> 07:34:18,000
our HTTP request, we're already able to

14733
07:34:18,000 --> 07:34:20,080
do some pretty cool Airbnb searches. So

14734
07:34:20,080 --> 07:34:21,840
let's take a look in the Airbnb execute

14735
07:34:21,840 --> 07:34:24,000
tool. We can see that what it sent over

14736
07:34:24,000 --> 07:34:25,760
was a location as well as a number of

14737
07:34:25,760 --> 07:34:27,840
adults, which is absolutely perfect. The

14738
07:34:27,840 --> 07:34:29,280
model was able to determine how to

14739
07:34:29,280 --> 07:34:31,520
format that and send it over as JSON.

14740
07:34:31,520 --> 07:34:33,200
And then we got back our actual search

14741
07:34:33,200 --> 07:34:34,558
results. And now we're going to do

14742
07:34:34,558 --> 07:34:35,840
something where you actually do need an

14743
07:34:35,840 --> 07:34:37,920
API key because most of these you are

14744
07:34:37,920 --> 07:34:39,680
going to need an API key. So we're going

14745
07:34:39,680 --> 07:34:40,958
to go ahead and do Brave search because

14746
07:34:40,958 --> 07:34:42,958
you can search the web um using Brave

14747
07:34:42,958 --> 07:34:44,398
Search API. So we're going to click into

14748
07:34:44,398 --> 07:34:46,638
this and all we have to do is once again

14749
07:34:46,638 --> 07:34:48,398
we can see the tools here but we want to

14750
07:34:48,398 --> 07:34:49,840
scroll down and see how you actually

14751
07:34:49,840 --> 07:34:51,600
configure it. So the first step is to go

14752
07:34:51,600 --> 07:34:53,680
to Brave Search and get an API key. You

14753
07:34:53,680 --> 07:34:55,120
can click on this link right here and

14754
07:34:55,120 --> 07:34:56,878
you'll be able to sign in and get 2,000

14755
07:34:56,878 --> 07:34:58,558
free queries and then you'll grab your

14756
07:34:58,558 --> 07:34:59,920
API key. So I'm going to log in real

14757
07:34:59,920 --> 07:35:01,920
quick. So it may send you a code to your

14758
07:35:01,920 --> 07:35:03,520
email to verify it. You'll just put in

14759
07:35:03,520 --> 07:35:04,798
the code, of course, and then we're

14760
07:35:04,798 --> 07:35:06,638
here. As you can see, I've only done one

14761
07:35:06,638 --> 07:35:08,320
request so far. I'm going to click on

14762
07:35:08,320 --> 07:35:10,320
API keys on this lefth hand side, and

14763
07:35:10,320 --> 07:35:11,760
we're just going to copy this token, and

14764
07:35:11,760 --> 07:35:12,958
then we can put it into our

14765
07:35:12,958 --> 07:35:14,398
configuration. So, let's walk through

14766
07:35:14,398 --> 07:35:15,680
how we're going to do that. So, I'm

14767
07:35:15,680 --> 07:35:16,718
going to come in here and add a new

14768
07:35:16,718 --> 07:35:18,558
tool. We're going to add another MCP

14769
07:35:18,558 --> 07:35:19,920
client tool, and we're going to create a

14770
07:35:19,920 --> 07:35:21,360
new credential because we're no longer

14771
07:35:21,360 --> 07:35:23,440
connecting to Airbnb's server. We're

14772
07:35:23,440 --> 07:35:26,000
connecting to Brave Search Server. So,

14773
07:35:26,000 --> 07:35:27,520
create new credential. Let me just name

14774
07:35:27,520 --> 07:35:28,878
this one real quick so we don't get

14775
07:35:28,878 --> 07:35:30,478
confused. And then of course we have to

14776
07:35:30,478 --> 07:35:32,240
set up our command, our arguments, and

14777
07:35:32,240 --> 07:35:33,840
our environments. And this is where

14778
07:35:33,840 --> 07:35:35,600
we're going to put our actual API key.

14779
07:35:35,600 --> 07:35:37,120
Okay, so first things first, the

14780
07:35:37,120 --> 07:35:38,798
command. Coming back into the Brave

14781
07:35:38,798 --> 07:35:41,200
Search MCP server documentation, we can

14782
07:35:41,200 --> 07:35:42,798
see that we can either do Docker, but

14783
07:35:42,798 --> 07:35:44,320
what we're doing every time we're

14784
07:35:44,320 --> 07:35:46,000
connecting to this in NN is going to be

14785
07:35:46,000 --> 07:35:49,280
MPX. So our command once again is MPX.

14786
07:35:49,280 --> 07:35:51,120
Copy that, paste it into the command.

14787
07:35:51,120 --> 07:35:52,240
And now let's go back and get our

14788
07:35:52,240 --> 07:35:53,520
arguments, which is always going to

14789
07:35:53,520 --> 07:35:55,320
start off with

14790
07:35:55,320 --> 07:35:57,920
-ashy. Then after that, put a space.

14791
07:35:57,920 --> 07:35:59,520
We're going to connect to this MCP

14792
07:35:59,520 --> 07:36:01,280
server, which is the Brave Search. And

14793
07:36:01,280 --> 07:36:02,638
then you can see that's it. In the

14794
07:36:02,638 --> 07:36:04,320
Airbnb one, we had to add the robots

14795
07:36:04,320 --> 07:36:05,920
text. In this one, we didn't. So,

14796
07:36:05,920 --> 07:36:07,200
everyone is going to configure a little

14797
07:36:07,200 --> 07:36:08,958
bit differently, but all you have to do

14798
07:36:08,958 --> 07:36:10,558
is just read through the command, the

14799
07:36:10,558 --> 07:36:11,680
arguments, and then the environment

14800
07:36:11,680 --> 07:36:13,760
variables. And in this case, unlike the

14801
07:36:13,760 --> 07:36:15,680
Airbnb one, we actually do need an API

14802
07:36:15,680 --> 07:36:16,958
key. So, what we're going to do is we're

14803
07:36:16,958 --> 07:36:19,878
going to put in all caps

14804
07:36:19,878 --> 07:36:21,680
brave_api_key. So, in the environment

14805
07:36:21,680 --> 07:36:22,718
variables, I'm going to change this to

14806
07:36:22,718 --> 07:36:24,000
an expression just so we can actually

14807
07:36:24,000 --> 07:36:27,280
see. Brave API_key. And then I'm going

14808
07:36:27,280 --> 07:36:29,200
to put an equals and then it says to put

14809
07:36:29,200 --> 07:36:30,718
your actual API key. So that's where

14810
07:36:30,718 --> 07:36:32,320
we're going to paste in the API key from

14811
07:36:32,320 --> 07:36:34,398
Brave Search. Okay. So I put in my API

14812
07:36:34,398 --> 07:36:35,760
key. Obviously I'm going to remove that

14813
07:36:35,760 --> 07:36:37,360
after this video gets uploaded. But now

14814
07:36:37,360 --> 07:36:38,558
we'll hit save and we'll make sure that

14815
07:36:38,558 --> 07:36:40,718
we're good to go. Cool. And now we're

14816
07:36:40,718 --> 07:36:41,920
going to actually test this out. So I'm

14817
07:36:41,920 --> 07:36:44,200
going to call this

14818
07:36:44,200 --> 07:36:48,000
Brave Search Tools. Um and then before

14819
07:36:48,000 --> 07:36:49,760
we add the actual execute tool, I'm just

14820
07:36:49,760 --> 07:36:52,120
going to ask and make sure it works. So

14821
07:36:52,120 --> 07:36:57,040
what Brave Search tools do you have?

14822
07:36:57,040 --> 07:36:58,398
And it knows of course to hit the brave

14823
07:36:58,398 --> 07:37:00,478
search because we gave it a good name.

14824
07:37:00,478 --> 07:37:01,920
And it should be pulling back with its

14825
07:37:01,920 --> 07:37:02,958
different functions which I believe

14826
07:37:02,958 --> 07:37:04,280
there are

14827
07:37:04,280 --> 07:37:06,558
two. Okay. So we have Brave web search

14828
07:37:06,558 --> 07:37:08,558
and we have Brave local search. We also

14829
07:37:08,558 --> 07:37:09,600
have, you know, of course the

14830
07:37:09,600 --> 07:37:11,360
description of when to use each one and

14831
07:37:11,360 --> 07:37:13,440
the actual schemas to send over. So

14832
07:37:13,440 --> 07:37:15,040
let's add a tool and make sure that it's

14833
07:37:15,040 --> 07:37:16,240
working. We're going to click on the

14834
07:37:16,240 --> 07:37:18,160
plus. We're going to add an MCP client

14835
07:37:18,160 --> 07:37:19,280
tool. We already have our Brave

14836
07:37:19,280 --> 07:37:20,798
credential connected. We're going to

14837
07:37:20,798 --> 07:37:23,040
change the operation to execute tool.

14838
07:37:23,040 --> 07:37:24,320
And once again, we're going to fill in

14839
07:37:24,320 --> 07:37:26,160
the tool name and the parameters. So for

14840
07:37:26,160 --> 07:37:28,160
the tool name, same exact thing. We're

14841
07:37:28,160 --> 07:37:30,398
going to do from AI. And once again,

14842
07:37:30,398 --> 07:37:32,398
this is just telling the AI what to fill

14843
07:37:32,398 --> 07:37:34,160
in here. So we're going to call it tool.

14844
07:37:34,160 --> 07:37:35,280
We're going to give it a very brief

14845
07:37:35,280 --> 07:37:37,320
description of the tool

14846
07:37:37,320 --> 07:37:39,520
selected. And then we are just going to

14847
07:37:39,520 --> 07:37:41,040
enable the tool parameters to be filled

14848
07:37:41,040 --> 07:37:42,878
out by the model automatically. Final

14849
07:37:42,878 --> 07:37:46,440
thing is just to call this Brave search

14850
07:37:46,440 --> 07:37:48,878
execute. Cool. There we go. So now we

14851
07:37:48,878 --> 07:37:52,240
have um two functions for Airbnb, two

14852
07:37:52,240 --> 07:37:53,520
for Brave search, and let's make sure

14853
07:37:53,520 --> 07:37:54,958
that the agent can actually distinguish

14854
07:37:54,958 --> 07:37:57,040
between which one to use. So I'm going

14855
07:37:57,040 --> 07:38:00,440
to say search the web for information

14856
07:38:00,440 --> 07:38:04,398
about AI agents. So we'll send that off.

14857
07:38:04,398 --> 07:38:05,440
Looks like it's going straight to the

14858
07:38:05,440 --> 07:38:07,120
Brave Search execute. So we may have to

14859
07:38:07,120 --> 07:38:08,718
get into the system prompt and tweak it

14860
07:38:08,718 --> 07:38:10,320
a little bit. Now it's going back to the

14861
07:38:10,320 --> 07:38:12,240
Brave Search tools to understand, okay,

14862
07:38:12,240 --> 07:38:14,000
what actions can I take? And now it's

14863
07:38:14,000 --> 07:38:15,520
going back to the Brave Search execute

14864
07:38:15,520 --> 07:38:17,040
tool. And hopefully this time it'll get

14865
07:38:17,040 --> 07:38:19,440
it right. So, it looks like it's going

14866
07:38:19,440 --> 07:38:21,680
to compile an answer right now based on

14867
07:38:21,680 --> 07:38:23,360
its search result and then we'll see

14868
07:38:23,360 --> 07:38:25,360
exactly what happened. There we go. So,

14869
07:38:25,360 --> 07:38:27,520
we have looks like Oh, wow. It gave us

14870
07:38:27,520 --> 07:38:30,160
nine different articles. Um, what are AI

14871
07:38:30,160 --> 07:38:32,398
agents by IBM? We can click into here to

14872
07:38:32,398 --> 07:38:34,080
read more. So, this takes us straight to

14873
07:38:34,080 --> 07:38:36,638
IBM's article about AI agents. We have

14874
07:38:36,638 --> 07:38:38,878
one also from AWS. We can click into

14875
07:38:38,878 --> 07:38:40,798
there. There's Amazon. And let's go all

14876
07:38:40,798 --> 07:38:42,160
the way to the bottom. We also have one

14877
07:38:42,160 --> 07:38:44,398
on agents from Cloudflare. So, let's

14878
07:38:44,398 --> 07:38:46,240
click into here. And we can see it took

14879
07:38:46,240 --> 07:38:48,320
us exactly to the right place. So super

14880
07:38:48,320 --> 07:38:50,000
cool. We didn't have to configure any

14881
07:38:50,000 --> 07:38:51,680
sort of API documentation. As you can

14882
07:38:51,680 --> 07:38:53,760
see in Brave Search, if we wanted to

14883
07:38:53,760 --> 07:38:55,040
connect to this a different way, we

14884
07:38:55,040 --> 07:38:56,240
would have had to copy this curl

14885
07:38:56,240 --> 07:38:58,320
command, statically set up the different

14886
07:38:58,320 --> 07:39:00,320
headers and the parameters. But now with

14887
07:39:00,320 --> 07:39:02,240
this server, we can just hit it right

14888
07:39:02,240 --> 07:39:04,240
away. So let's take a look in the agent

14889
07:39:04,240 --> 07:39:05,600
logs, though, because we want to see

14890
07:39:05,600 --> 07:39:07,360
what happened. So the first time it

14891
07:39:07,360 --> 07:39:09,200
tried to go straight to the execute tool

14892
07:39:09,200 --> 07:39:10,558
and as you can see it filled in the

14893
07:39:10,558 --> 07:39:12,558
parameters incorrectly as well as the

14894
07:39:12,558 --> 07:39:14,240
actual tool name because it didn't have

14895
07:39:14,240 --> 07:39:16,320
the information from the server. Then it

14896
07:39:16,320 --> 07:39:18,240
realized okay I need to go here first so

14897
07:39:18,240 --> 07:39:20,240
that I can find out what I can do. I

14898
07:39:20,240 --> 07:39:22,080
tried to use a tool called web search as

14899
07:39:22,080 --> 07:39:24,080
you can see earlier web search. But what

14900
07:39:24,080 --> 07:39:25,600
I needed to do was use a tool called

14901
07:39:25,600 --> 07:39:28,320
brave web search. So now on the second

14902
07:39:28,320 --> 07:39:30,558
try back to the tool it got it right and

14903
07:39:30,558 --> 07:39:32,718
it said brave web search. It also filled

14904
07:39:32,718 --> 07:39:34,000
out some other information like how many

14905
07:39:34,000 --> 07:39:35,680
articles are we looking for and what's

14906
07:39:35,680 --> 07:39:37,360
the offset. So if we were to come back

14907
07:39:37,360 --> 07:39:41,398
in here and say get me one article

14908
07:39:41,398 --> 07:39:43,920
on dogs. Let's see what it would do. So

14909
07:39:43,920 --> 07:39:44,798
hopefully it's going to fill in the

14910
07:39:44,798 --> 07:39:46,638
count as one. Once again it went

14911
07:39:46,638 --> 07:39:48,558
straight to the tool and it may I was

14912
07:39:48,558 --> 07:39:50,240
going to say if we had memory in the

14913
07:39:50,240 --> 07:39:51,600
agent it probably would have worked

14914
07:39:51,600 --> 07:39:52,878
because it would have seen that it used

14915
07:39:52,878 --> 07:39:55,360
brave web search previously but there's

14916
07:39:55,360 --> 07:39:56,958
no memory here. So, it did the exact

14917
07:39:56,958 --> 07:39:58,638
same pattern and we would basically just

14918
07:39:58,638 --> 07:40:00,878
have to prompt in this agent, hey,

14919
07:40:00,878 --> 07:40:03,200
search the MCP server to get the tools

14920
07:40:03,200 --> 07:40:05,200
before you try to execute a tool. But

14921
07:40:05,200 --> 07:40:07,040
now we can see it found one article.

14922
07:40:07,040 --> 07:40:08,878
It's called it's just Wikipedia. So, we

14923
07:40:08,878 --> 07:40:10,520
can click in here and see it's dog on

14924
07:40:10,520 --> 07:40:12,398
Wikipedia. But if we click into the

14925
07:40:12,398 --> 07:40:14,478
actual Brave search execute tool, we can

14926
07:40:14,478 --> 07:40:15,600
see that what it filled out for the

14927
07:40:15,600 --> 07:40:17,520
query was dogs and it also knew to make

14928
07:40:17,520 --> 07:40:19,600
the count one rather than last time it

14929
07:40:19,600 --> 07:40:21,280
was 10. Okay. Okay, so something I want

14930
07:40:21,280 --> 07:40:22,798
you guys to keep in mind is when you're

14931
07:40:22,798 --> 07:40:25,760
connecting to different MCP servers, the

14932
07:40:25,760 --> 07:40:27,200
setup will always be the same where

14933
07:40:27,200 --> 07:40:29,040
you'll look in the GitHub repository,

14934
07:40:29,040 --> 07:40:30,240
you'll look at the command, which will

14935
07:40:30,240 --> 07:40:32,558
be npx, you'll look at the arguments,

14936
07:40:32,558 --> 07:40:35,280
which will be -ashy, space, the name of

14937
07:40:35,280 --> 07:40:36,558
the server, and then sometimes there'll

14938
07:40:36,558 --> 07:40:38,160
be more. And then after that, you'll do

14939
07:40:38,160 --> 07:40:39,360
your environment variable, which is

14940
07:40:39,360 --> 07:40:40,958
going to be a credential, some sort of

14941
07:40:40,958 --> 07:40:43,040
API key. So here, what we did was we

14942
07:40:43,040 --> 07:40:44,878
asked Air Table to list its actions. And

14943
07:40:44,878 --> 07:40:46,958
in this case, as you can see, it has 13

14944
07:40:46,958 --> 07:40:48,160
different actions. And within each

14945
07:40:48,160 --> 07:40:49,280
action, there's going to be different

14946
07:40:49,280 --> 07:40:51,280
parameters to send over. So, when you

14947
07:40:51,280 --> 07:40:52,958
start to scale up to some of these MCP

14948
07:40:52,958 --> 07:40:54,558
servers that have more actions and more

14949
07:40:54,558 --> 07:40:56,240
parameters, you're going to have to be a

14950
07:40:56,240 --> 07:40:57,878
little more specific with your

14951
07:40:57,878 --> 07:41:00,240
prompting. As you can see in this agent,

14952
07:41:00,240 --> 07:41:01,760
there's no prompting going on. It's just

14953
07:41:01,760 --> 07:41:03,440
your helpful assistant. And what I'm

14954
07:41:03,440 --> 07:41:05,520
going to try is in my Air Table, I have

14955
07:41:05,520 --> 07:41:07,440
a base called contacts, a table called

14956
07:41:07,440 --> 07:41:09,600
leads, and then we have this one record.

14957
07:41:09,600 --> 07:41:11,280
So, let's try to ask it to get that

14958
07:41:11,280 --> 07:41:12,798
record. Okay. So, I'm asking it to get

14959
07:41:12,798 --> 07:41:14,638
the records in my Air Table base called

14960
07:41:14,638 --> 07:41:16,958
contacts, in my table called leads.

14961
07:41:16,958 --> 07:41:19,200
Okay, so we got the error receive tool

14962
07:41:19,200 --> 07:41:21,520
input did not match expected schema. And

14963
07:41:21,520 --> 07:41:23,040
so this really is because what has to

14964
07:41:23,040 --> 07:41:24,958
happen here is kind of complex. It has

14965
07:41:24,958 --> 07:41:26,878
to first of all go get the bases to grab

14966
07:41:26,878 --> 07:41:28,958
the base ID and then it has to go grab

14967
07:41:28,958 --> 07:41:31,440
the tables in that base to get the table

14968
07:41:31,440 --> 07:41:33,200
ID and then it has to formulate that

14969
07:41:33,200 --> 07:41:35,360
over in a response over here. As you can

14970
07:41:35,360 --> 07:41:36,878
see, if the operation was to list

14971
07:41:36,878 --> 07:41:38,878
records, it has to fill out the base ID

14972
07:41:38,878 --> 07:41:40,638
and the table ID in order to actually

14973
07:41:40,638 --> 07:41:42,240
get those records back. So that's why

14974
07:41:42,240 --> 07:41:43,920
it's having trouble with that. And so a

14975
07:41:43,920 --> 07:41:45,840
great example of that is within my email

14976
07:41:45,840 --> 07:41:48,080
agent for my ultimate assistant. In

14977
07:41:48,080 --> 07:41:50,398
order to do something like label emails,

14978
07:41:50,398 --> 07:41:52,240
we have to send over the message ID of

14979
07:41:52,240 --> 07:41:54,000
the email that we want to label. And we

14980
07:41:54,000 --> 07:41:56,160
have to send over the ID of the label to

14981
07:41:56,160 --> 07:41:57,760
actually add to that message. And in

14982
07:41:57,760 --> 07:41:59,520
order to do those two things, we first

14983
07:41:59,520 --> 07:42:01,520
have to get all emails to get the

14984
07:42:01,520 --> 07:42:02,958
message ID. And then we have to get

14985
07:42:02,958 --> 07:42:04,718
labels to get the label ID. So it's a

14986
07:42:04,718 --> 07:42:06,718
multi-step process. And that's why this

14987
07:42:06,718 --> 07:42:08,798
agent with minimal prompting and not a

14988
07:42:08,798 --> 07:42:10,398
super robust parameter in here. It's

14989
07:42:10,398 --> 07:42:12,160
literally just defining by the model,

14990
07:42:12,160 --> 07:42:13,760
it's a little bit tough. But if I said

14991
07:42:13,760 --> 07:42:16,718
something like get my air table bases,

14992
07:42:16,718 --> 07:42:18,000
we'll see if it can handle that because

14993
07:42:18,000 --> 07:42:20,240
that's more of a one-step function. And

14994
07:42:20,240 --> 07:42:21,280
it looks like it's having trouble

14995
07:42:21,280 --> 07:42:23,040
because if we click into this actions,

14996
07:42:23,040 --> 07:42:24,638
we can see that the operation of listing

14997
07:42:24,638 --> 07:42:28,080
bases sends over an empty array. So it's

14998
07:42:28,080 --> 07:42:29,680
having trouble being able to like send

14999
07:42:29,680 --> 07:42:31,440
that data over. Okay, so I'm curious

15000
07:42:31,440 --> 07:42:33,600
though. I went into my Air Table and I

15001
07:42:33,600 --> 07:42:35,280
grabbed a base ID. Now I'm going to ask

15002
07:42:35,280 --> 07:42:37,040
what tables are in this air table base

15003
07:42:37,040 --> 07:42:39,360
ID and I gave it the base ID directly so

15004
07:42:39,360 --> 07:42:40,878
it won't have to do that list basis

15005
07:42:40,878 --> 07:42:42,558
function. And now we can see it actually

15006
07:42:42,558 --> 07:42:44,638
is able to call the tool hopefully. So

15007
07:42:44,638 --> 07:42:46,160
it's green and it probably put in that

15008
07:42:46,160 --> 07:42:48,080
base ID and we'll be able to see what

15009
07:42:48,080 --> 07:42:50,478
it's doing here. But this just shows you

15010
07:42:50,478 --> 07:42:51,680
there are still obviously some

15011
07:42:51,680 --> 07:42:53,520
limitations and I'm hoping that Nad will

15012
07:42:53,520 --> 07:42:55,840
make a native you know MCP server node.

15013
07:42:55,840 --> 07:42:57,520
But look what it was able to do now is

15014
07:42:57,520 --> 07:42:59,360
it has here are the tables within the

15015
07:42:59,360 --> 07:43:01,520
air table base ID that we provided and

15016
07:43:01,520 --> 07:43:03,040
these are the four tables and this is

15017
07:43:03,040 --> 07:43:04,718
correct. And so now I'm asking it what

15018
07:43:04,718 --> 07:43:06,718
records are in the air table base ID of

15019
07:43:06,718 --> 07:43:09,040
this one and the table ID of this one.

15020
07:43:09,040 --> 07:43:10,320
And it should be able to actually use

15021
07:43:10,320 --> 07:43:12,718
its list records tool now in order to

15022
07:43:12,718 --> 07:43:14,478
fill in those different parameters. And

15023
07:43:14,478 --> 07:43:16,320
hopefully we can see our record back

15024
07:43:16,320 --> 07:43:18,798
which should be Robert California. So we

15025
07:43:18,798 --> 07:43:20,558
got a successful tool execute as you can

15026
07:43:20,558 --> 07:43:22,718
see. Let's wait for this to pop back

15027
07:43:22,718 --> 07:43:24,320
into the agent and then respond to us.

15028
07:43:24,320 --> 07:43:25,680
So now we have our actual correct

15029
07:43:25,680 --> 07:43:28,080
record. Robert California Saber custom

15030
07:43:28,080 --> 07:43:29,920
AI solution all this kind of stuff. And

15031
07:43:29,920 --> 07:43:31,120
as you can see, that's exactly what

15032
07:43:31,120 --> 07:43:32,878
we're looking at within our actual Air

15033
07:43:32,878 --> 07:43:34,398
Table base. And so, I just thought that

15034
07:43:34,398 --> 07:43:36,320
that would be important to show off here

15035
07:43:36,320 --> 07:43:38,240
how this is like really cool, but it's

15036
07:43:38,240 --> 07:43:39,840
not fully there yet. So, I definitely

15037
07:43:39,840 --> 07:43:41,040
think it will get there, especially if

15038
07:43:41,040 --> 07:43:42,240
we get some more native integrations

15039
07:43:42,240 --> 07:43:43,920
with Naden. But, I thought that that

15040
07:43:43,920 --> 07:43:45,280
would be a good demo to show the way

15041
07:43:45,280 --> 07:43:46,398
that it needs to fill in these

15042
07:43:46,398 --> 07:43:49,520
parameters in order to get records. And,

15043
07:43:49,520 --> 07:43:51,120
you know, this type of example applies

15044
07:43:51,120 --> 07:43:52,718
to tons of different things that you'll

15045
07:43:52,718 --> 07:43:55,120
do within MCP servers. So, there's one

15046
07:43:55,120 --> 07:43:56,320
more thing I want to show you guys real

15047
07:43:56,320 --> 07:43:58,000
quick, just so you will not be banging

15048
07:43:58,000 --> 07:43:59,600
your head against the wall the way I was

15049
07:43:59,600 --> 07:44:01,040
a couple days ago when I was trying to

15050
07:44:01,040 --> 07:44:02,638
set up Perplexity. So, because you have

15051
07:44:02,638 --> 07:44:03,760
all these different servers to choose

15052
07:44:03,760 --> 07:44:05,360
from, you may just trust that they're

15053
07:44:05,360 --> 07:44:06,478
all going to be the exact same and

15054
07:44:06,478 --> 07:44:07,760
they're going to work the same. So, when

15055
07:44:07,760 --> 07:44:10,000
I went to set up the Plexity ask MCP

15056
07:44:10,000 --> 07:44:11,680
server, I was pretty excited. Command

15057
07:44:11,680 --> 07:44:13,760
was mpx. I put in my arguments. I put in

15058
07:44:13,760 --> 07:44:15,360
my environment variable, which was my

15059
07:44:15,360 --> 07:44:17,200
perplexity API key. And you can see I

15060
07:44:17,200 --> 07:44:18,798
set this up exactly as it should be. My

15061
07:44:18,798 --> 07:44:20,718
API keys in there. I triple checked to

15062
07:44:20,718 --> 07:44:22,000
make sure it was correct. And then when

15063
07:44:22,000 --> 07:44:23,680
I went to test step, basically what

15064
07:44:23,680 --> 07:44:25,920
happened was couldn't connect to the MCP

15065
07:44:25,920 --> 07:44:27,760
server. Connection closed. And so after

15066
07:44:27,760 --> 07:44:29,600
digging into what this meant, because I

15067
07:44:29,600 --> 07:44:31,120
set up all these other ones, as you can

15068
07:44:31,120 --> 07:44:32,558
see in here, I did these and I have more

15069
07:44:32,558 --> 07:44:34,878
that I've connected to. The reason why

15070
07:44:34,878 --> 07:44:37,040
this one isn't working, I imagine, is

15071
07:44:37,040 --> 07:44:38,638
because on the server side of things, on

15072
07:44:38,638 --> 07:44:40,718
Perplexity side of things, it's either

15073
07:44:40,718 --> 07:44:42,638
going undergoing maintenance or it's not

15074
07:44:42,638 --> 07:44:44,478
fully published yet. And it's not

15075
07:44:44,478 --> 07:44:45,920
anything wrong with the way that you're

15076
07:44:45,920 --> 07:44:47,360
deploying it. So, I just wanted to throw

15077
07:44:47,360 --> 07:44:48,558
that out there because there may be some

15078
07:44:48,558 --> 07:44:50,398
other ones in this big list that are not

15079
07:44:50,398 --> 07:44:52,240
fully there yet. So, if you are

15080
07:44:52,240 --> 07:44:53,520
experiencing that error and you know

15081
07:44:53,520 --> 07:44:54,798
that you're filling out that, you know,

15082
07:44:54,798 --> 07:44:56,320
MPX and the arguments and the

15083
07:44:56,320 --> 07:44:58,240
environment variable correct, then

15084
07:44:58,240 --> 07:45:00,398
that's probably why don't spend all day

15085
07:45:00,398 --> 07:45:01,680
on it. Just wanted to throw that out

15086
07:45:01,680 --> 07:45:04,478
there because, you know, I had I had a

15087
07:45:04,478 --> 07:45:06,160
moment the other day. Well, it's been a

15088
07:45:06,160 --> 07:45:07,360
fun journey. I appreciate you guys

15089
07:45:07,360 --> 07:45:08,958
spending all this time with me. We've

15090
07:45:08,958 --> 07:45:11,280
got one more section to close off on and

15091
07:45:11,280 --> 07:45:12,398
this is going to be kind of just the

15092
07:45:12,398 --> 07:45:14,160
biggest lessons that I had learned over

15093
07:45:14,160 --> 07:45:16,000
the first six months of me building AI

15094
07:45:16,000 --> 07:45:18,638
agents as a non-programmer. Let's go.

15095
07:45:18,638 --> 07:45:20,080
Because everyone's talking about this

15096
07:45:20,080 --> 07:45:21,600
kind of stuff, there's a lot of hype and

15097
07:45:21,600 --> 07:45:22,878
there's a lot of noise to cut through.

15098
07:45:22,878 --> 07:45:24,080
So, the first thing I want to do is talk

15099
07:45:24,080 --> 07:45:25,840
about the hard truths about AI agents

15100
07:45:25,840 --> 07:45:27,360
and then I'll get into the seven lessons

15101
07:45:27,360 --> 07:45:28,878
that I've learned over the past six

15102
07:45:28,878 --> 07:45:30,638
months building these things. So, the

15103
07:45:30,638 --> 07:45:32,240
first one is that most AI agent demos

15104
07:45:32,240 --> 07:45:34,878
online are just that, they're demos. So,

15105
07:45:34,878 --> 07:45:35,680
the kind of stuff that you're going to

15106
07:45:35,680 --> 07:45:38,478
see on LinkedIn, blog posts, YouTube,

15107
07:45:38,478 --> 07:45:40,558
admittedly, my own videos as well, these

15108
07:45:40,558 --> 07:45:42,000
are not going to be productionready

15109
07:45:42,000 --> 07:45:43,840
builds or productionready templates that

15110
07:45:43,840 --> 07:45:45,280
you could immediately start to plug into

15111
07:45:45,280 --> 07:45:46,958
your own business or try to sell to

15112
07:45:46,958 --> 07:45:48,558
other businesses. You'll see all sorts

15113
07:45:48,558 --> 07:45:50,878
of cool use cases like web researchers,

15114
07:45:50,878 --> 07:45:52,878
salespeople, travel agents. Just for

15115
07:45:52,878 --> 07:45:54,558
some context, these are screenshots of

15116
07:45:54,558 --> 07:45:56,240
some of the videos I've made on YouTube.

15117
07:45:56,240 --> 07:45:57,920
This one is like a content creator. This

15118
07:45:57,920 --> 07:45:59,840
one is a human and loop calendar agent.

15119
07:45:59,840 --> 07:46:01,680
We've got a technical analyst. We have a

15120
07:46:01,680 --> 07:46:02,958
personal assistant with all its agents

15121
07:46:02,958 --> 07:46:04,798
over here. stuff like that. But the

15122
07:46:04,798 --> 07:46:06,240
reality is that all of these pretty much

15123
07:46:06,240 --> 07:46:07,680
are just going to be, you know, proof of

15124
07:46:07,680 --> 07:46:09,520
concepts. They're meant to open

15125
07:46:09,520 --> 07:46:11,120
everyone's eyes to what this kind of

15126
07:46:11,120 --> 07:46:12,878
stuff looks like visually, how you can

15127
07:46:12,878 --> 07:46:14,240
spin this kind of stuff up, the

15128
07:46:14,240 --> 07:46:15,760
fundamentals that go into building these

15129
07:46:15,760 --> 07:46:17,360
workflows. And at least me personally,

15130
07:46:17,360 --> 07:46:18,958
my biggest motivation in making these

15131
07:46:18,958 --> 07:46:21,120
videos is to show you guys how you can

15132
07:46:21,120 --> 07:46:22,558
actually start to build some really cool

15133
07:46:22,558 --> 07:46:24,878
stuff with zero programming background.

15134
07:46:24,878 --> 07:46:26,320
And so why do I give all those templates

15135
07:46:26,320 --> 07:46:27,920
away for free? It's because I want you

15136
07:46:27,920 --> 07:46:30,000
guys to download them, hit run, see the

15137
07:46:30,000 --> 07:46:31,760
data flow through and understand what's

15138
07:46:31,760 --> 07:46:33,360
going on within each node rather than

15139
07:46:33,360 --> 07:46:34,798
being able to sell that or use it

15140
07:46:34,798 --> 07:46:36,160
directly in your business because

15141
07:46:36,160 --> 07:46:37,680
everyone has different integrations.

15142
07:46:37,680 --> 07:46:38,558
Everyone's going to have different

15143
07:46:38,558 --> 07:46:40,320
system prompting and different little

15144
07:46:40,320 --> 07:46:42,478
tweaks that they need for an automation

15145
07:46:42,478 --> 07:46:44,798
to be actually high value for them.

15146
07:46:44,798 --> 07:46:46,160
Besides that, a lot of this is meant to

15147
07:46:46,160 --> 07:46:47,680
be within a testing environment, but if

15148
07:46:47,680 --> 07:46:48,878
you push it into production and you

15149
07:46:48,878 --> 07:46:50,478
expose it to all the different edge

15150
07:46:50,478 --> 07:46:52,398
cases and tons of different users,

15151
07:46:52,398 --> 07:46:53,280
things are going to come through

15152
07:46:53,280 --> 07:46:54,798
differently and the automation is going

15153
07:46:54,798 --> 07:46:56,320
to break. And what you need to think

15154
07:46:56,320 --> 07:46:58,240
about is even these massive companies in

15155
07:46:58,240 --> 07:47:00,718
the space like Apple, Google, Amazon,

15156
07:47:00,718 --> 07:47:02,398
they're also having issues with AI

15157
07:47:02,398 --> 07:47:04,478
reliability like what we saw with Apple

15158
07:47:04,478 --> 07:47:06,080
intelligence having to be delayed. So if

15159
07:47:06,080 --> 07:47:07,520
a company like this with a massive

15160
07:47:07,520 --> 07:47:09,280
amount of resources is struggling with

15161
07:47:09,280 --> 07:47:10,398
some of these productionready

15162
07:47:10,398 --> 07:47:12,320
deployments, then it's kind of

15163
07:47:12,320 --> 07:47:14,000
unrealistic to think that a beginner or

15164
07:47:14,000 --> 07:47:16,240
non-programmer in these tools can spin

15165
07:47:16,240 --> 07:47:18,000
up something in a few days that would be

15166
07:47:18,000 --> 07:47:20,080
fully production ready. And by that I

15167
07:47:20,080 --> 07:47:21,600
just mean like the stuff you see online.

15168
07:47:21,600 --> 07:47:23,360
You could easily get into nodn, build

15169
07:47:23,360 --> 07:47:25,280
something, test it, and get it really

15170
07:47:25,280 --> 07:47:27,280
robust in order to sell it. That's not

15171
07:47:27,280 --> 07:47:28,638
what I'm saying at all. Just kind of the

15172
07:47:28,638 --> 07:47:31,040
stuff you see online isn't there yet.

15173
07:47:31,040 --> 07:47:32,398
Now, the second thing is being able to

15174
07:47:32,398 --> 07:47:33,920
understand the difference between AI

15175
07:47:33,920 --> 07:47:36,080
agents and AI workflows. And it's one of

15176
07:47:36,080 --> 07:47:37,520
those buzzwords that everyone's kind of

15177
07:47:37,520 --> 07:47:39,280
calling everything an agent when in

15178
07:47:39,280 --> 07:47:41,200
reality that's not the truth. So, a lot

15179
07:47:41,200 --> 07:47:42,638
of times people are calling things AI

15180
07:47:42,638 --> 07:47:44,320
agents, even if they're just sort of

15181
07:47:44,320 --> 07:47:46,320
like an AI powered workflow. Now, what's

15182
07:47:46,320 --> 07:47:48,000
an AI powered workflow? Well, as you can

15183
07:47:48,000 --> 07:47:49,440
see right down here, this is one that I

15184
07:47:49,440 --> 07:47:51,360
had built out. And this is an AI powered

15185
07:47:51,360 --> 07:47:53,520
workflow because it's very sequential.

15186
07:47:53,520 --> 07:47:55,120
As you can see, the data moves from here

15187
07:47:55,120 --> 07:47:57,520
to here to here to here to here to here.

15188
07:47:57,520 --> 07:47:59,040
And it goes down that process every

15189
07:47:59,040 --> 07:48:00,398
time. Even though there are some

15190
07:48:00,398 --> 07:48:02,320
elements in here using AI like this

15191
07:48:02,320 --> 07:48:04,000
basic chain and this email writing

15192
07:48:04,000 --> 07:48:05,760
agent. Now, this has a fixed amount of

15193
07:48:05,760 --> 07:48:07,680
steps and it flows in this path every

15194
07:48:07,680 --> 07:48:09,360
single time. Whereas something over here

15195
07:48:09,360 --> 07:48:11,280
like an AI agent, it has different tools

15196
07:48:11,280 --> 07:48:13,040
that it's able to call and based on the

15197
07:48:13,040 --> 07:48:14,478
input, we're not sure if it's going to

15198
07:48:14,478 --> 07:48:16,398
call each one once or it's going to call

15199
07:48:16,398 --> 07:48:17,920
this one four times or if it's going to

15200
07:48:17,920 --> 07:48:19,520
call this one and then this one. So

15201
07:48:19,520 --> 07:48:20,958
that's more of a non-deterministic

15202
07:48:20,958 --> 07:48:22,558
workflow. And that's when you need to

15203
07:48:22,558 --> 07:48:24,638
use something like an AI agent. The

15204
07:48:24,638 --> 07:48:25,680
difference here is that it's choosing

15205
07:48:25,680 --> 07:48:27,920
its own steps. The process is not

15206
07:48:27,920 --> 07:48:29,440
predefined, meaning every time we throw

15207
07:48:29,440 --> 07:48:31,040
an input, we're not sure what's going to

15208
07:48:31,040 --> 07:48:32,878
happen and what we're going to get back.

15209
07:48:32,878 --> 07:48:35,680
And then the agent also loops, calls its

15210
07:48:35,680 --> 07:48:37,600
tools, it observes what happens, and

15211
07:48:37,600 --> 07:48:38,958
then it reloops and thinks about it

15212
07:48:38,958 --> 07:48:41,440
again until it realizes, okay, based on

15213
07:48:41,440 --> 07:48:43,200
the input, I've done my job. Now I'm

15214
07:48:43,200 --> 07:48:44,718
going to spit something out. And so

15215
07:48:44,718 --> 07:48:46,080
here's just a different visualization

15216
07:48:46,080 --> 07:48:48,160
of, you know, an AI agent with an input,

15217
07:48:48,160 --> 07:48:49,840
the agent has decision, and then there's

15218
07:48:49,840 --> 07:48:52,080
an output or this AI workflow where we

15219
07:48:52,080 --> 07:48:54,638
have an input, tool one, LLM call, tool

15220
07:48:54,638 --> 07:48:56,558
two, tool three, output where it's going

15221
07:48:56,558 --> 07:48:58,000
to happen in that process every single

15222
07:48:58,000 --> 07:48:59,680
time. And the truth is that most

15223
07:48:59,680 --> 07:49:02,320
problems don't require true AI agents.

15224
07:49:02,320 --> 07:49:04,080
they can simply be solved with building

15225
07:49:04,080 --> 07:49:07,120
a workflow that is enhanced with AI. And

15226
07:49:07,120 --> 07:49:08,478
a common mistake, and I think it's just

15227
07:49:08,478 --> 07:49:09,680
because of all the hype around AI

15228
07:49:09,680 --> 07:49:11,120
agents, is that people are opting

15229
07:49:11,120 --> 07:49:13,360
straight away to set up an agent. Like

15230
07:49:13,360 --> 07:49:14,638
in this example right here, let's say

15231
07:49:14,638 --> 07:49:16,478
the input is a form trigger where we're

15232
07:49:16,478 --> 07:49:18,080
getting a form response. We're using

15233
07:49:18,080 --> 07:49:19,680
this tool to clean up the data. We're

15234
07:49:19,680 --> 07:49:21,760
using this LLM call. So it's an AI

15235
07:49:21,760 --> 07:49:23,600
enhanced workflow to actually write a

15236
07:49:23,600 --> 07:49:25,360
personalized email. We're using this to

15237
07:49:25,360 --> 07:49:26,958
update the CRM and then we're using this

15238
07:49:26,958 --> 07:49:28,878
to send the email and then we get the

15239
07:49:28,878 --> 07:49:30,958
output back as the human. We could also

15240
07:49:30,958 --> 07:49:33,040
set this up as a AI agent where we're

15241
07:49:33,040 --> 07:49:34,798
getting the form response. We're sending

15242
07:49:34,798 --> 07:49:36,240
this agent the information and it can

15243
07:49:36,240 --> 07:49:37,600
choose, okay, first I'm going to clean

15244
07:49:37,600 --> 07:49:39,120
the data and then I'm going to come back

15245
07:49:39,120 --> 07:49:40,398
here and think about it and then I'm

15246
07:49:40,398 --> 07:49:42,240
going to update the CRM and then I'm

15247
07:49:42,240 --> 07:49:43,520
going to create an email and then I'm

15248
07:49:43,520 --> 07:49:45,120
going to send the email and then I'm

15249
07:49:45,120 --> 07:49:46,558
going to output and respond to the human

15250
07:49:46,558 --> 07:49:48,638
and tell it that, you know, we we did

15251
07:49:48,638 --> 07:49:50,240
that job for you. But because this

15252
07:49:50,240 --> 07:49:51,920
process is pretty linear, it's going to

15253
07:49:51,920 --> 07:49:53,280
be a lot more consistent if we do a

15254
07:49:53,280 --> 07:49:54,478
workflow. It's going to be easier to

15255
07:49:54,478 --> 07:49:56,798
debug. Whereas over here, the agent may

15256
07:49:56,798 --> 07:49:58,958
mess up some tool calls and do things in

15257
07:49:58,958 --> 07:50:00,478
the wrong order. So it's better to just

15258
07:50:00,478 --> 07:50:02,320
structure it out like that. And so if we

15259
07:50:02,320 --> 07:50:03,760
start approaching using these no code

15260
07:50:03,760 --> 07:50:06,000
tools to build AI workflows first, then

15261
07:50:06,000 --> 07:50:07,520
we can start to scale up to agents once

15262
07:50:07,520 --> 07:50:09,920
we need more dynamic decision-m and tool

15263
07:50:09,920 --> 07:50:11,600
calling. Okay, but that's enough of the

15264
07:50:11,600 --> 07:50:13,680
harsh truths. Let's get into the seven

15265
07:50:13,680 --> 07:50:15,200
most important lessons I've learned over

15266
07:50:15,200 --> 07:50:17,280
the six months of building AI agents as

15267
07:50:17,280 --> 07:50:19,760
a non-programmer. So the first one is to

15268
07:50:19,760 --> 07:50:21,600
build workflows first. And notice I

15269
07:50:21,600 --> 07:50:23,680
don't even say AI workflows here, I say

15270
07:50:23,680 --> 07:50:25,840
workflows. So, over the past six months

15271
07:50:25,840 --> 07:50:27,440
of building out these systems and

15272
07:50:27,440 --> 07:50:29,040
hopping on discovery calls with clients

15273
07:50:29,040 --> 07:50:30,478
where I'm trying to help them implement

15274
07:50:30,478 --> 07:50:32,798
AI into their business processes, we

15275
07:50:32,798 --> 07:50:34,320
always start by, you know, having them

15276
07:50:34,320 --> 07:50:36,478
explain to me some of their pain points

15277
07:50:36,478 --> 07:50:38,080
and we talk through processes that are

15278
07:50:38,080 --> 07:50:40,798
repetitive and processes that are a big

15279
07:50:40,798 --> 07:50:42,398
time suck. And a lot of times they'll

15280
07:50:42,398 --> 07:50:43,600
come in, you know, thinking they need an

15281
07:50:43,600 --> 07:50:45,760
AI agent or two. And when we really

15282
07:50:45,760 --> 07:50:47,040
start to break down this process, I

15283
07:50:47,040 --> 07:50:48,080
realize this doesn't need to be an

15284
07:50:48,080 --> 07:50:49,760
agent. This could be an AI workflow. And

15285
07:50:49,760 --> 07:50:51,120
then we break down the process even more

15286
07:50:51,120 --> 07:50:52,718
and I'm like, we don't even need AI

15287
07:50:52,718 --> 07:50:55,440
here. We just need rule-based automation

15288
07:50:55,440 --> 07:50:57,920
and we're going to send data from A to B

15289
07:50:57,920 --> 07:50:59,360
and just do some manipulation in the

15290
07:50:59,360 --> 07:51:01,040
middle. So let's look at this flowchart

15291
07:51:01,040 --> 07:51:02,398
for example. Here we have a form

15292
07:51:02,398 --> 07:51:03,920
submission. We're going to store data.

15293
07:51:03,920 --> 07:51:05,680
We're going to route it based on if it's

15294
07:51:05,680 --> 07:51:07,680
sales, support, or general. We'll have

15295
07:51:07,680 --> 07:51:09,920
that ticket or notification. Send an

15296
07:51:09,920 --> 07:51:11,360
automated acknowledgement. And then

15297
07:51:11,360 --> 07:51:13,440
we'll end the process. So this could be

15298
07:51:13,440 --> 07:51:15,200
a case where we don't even need AI. If

15299
07:51:15,200 --> 07:51:16,878
we're having the forms come through and

15300
07:51:16,878 --> 07:51:18,558
there's already predefined these three

15301
07:51:18,558 --> 07:51:19,920
types which are either sales, support,

15302
07:51:19,920 --> 07:51:21,600
or general, that's a really easy

15303
07:51:21,600 --> 07:51:24,320
rules-based automation. Meaning, does

15304
07:51:24,320 --> 07:51:26,398
inquiry type equal sales? If yes, we'll

15305
07:51:26,398 --> 07:51:28,798
go this way and so on and so forth. Now,

15306
07:51:28,798 --> 07:51:30,558
maybe there's AI we need over here to

15307
07:51:30,558 --> 07:51:32,080
actually send that auto acknowledgement

15308
07:51:32,080 --> 07:51:33,840
or it could be as simple as an automated

15309
07:51:33,840 --> 07:51:35,760
message that we're able to define based

15310
07:51:35,760 --> 07:51:38,240
on the inquiry type. Now, if this the

15311
07:51:38,240 --> 07:51:41,120
form submission is just a a block of

15312
07:51:41,120 --> 07:51:43,600
text and we need an AI to read it,

15313
07:51:43,600 --> 07:51:45,680
understand it and decide if it's sales,

15314
07:51:45,680 --> 07:51:47,600
support, or general, then we would need

15315
07:51:47,600 --> 07:51:49,200
AI right here. And that's where we would

15316
07:51:49,200 --> 07:51:51,440
have to assess what the data looks like

15317
07:51:51,440 --> 07:51:52,798
coming in and then what we need to do

15318
07:51:52,798 --> 07:51:54,320
with the data. So, it's always important

15319
07:51:54,320 --> 07:51:56,320
to think about, do we even need AI here?

15320
07:51:56,320 --> 07:51:57,840
Because a lot of times when we're trying

15321
07:51:57,840 --> 07:51:59,040
to cut off some of that lowhanging

15322
07:51:59,040 --> 07:52:00,478
fruit, when we realize that we're doing

15323
07:52:00,478 --> 07:52:02,240
some of this stuff too manually, we

15324
07:52:02,240 --> 07:52:03,760
don't even need AI yet. We're just going

15325
07:52:03,760 --> 07:52:06,160
to create a few workflow automations and

15326
07:52:06,160 --> 07:52:07,440
then we can start getting more advanced

15327
07:52:07,440 --> 07:52:09,680
with adding AI in certain steps. So

15328
07:52:09,680 --> 07:52:11,120
hopefully this graphic adds a little

15329
07:52:11,120 --> 07:52:12,558
more color here. On the left we're

15330
07:52:12,558 --> 07:52:14,478
looking at a rule-based sort of filter

15331
07:52:14,478 --> 07:52:16,160
and on the right we're looking at an AI

15332
07:52:16,160 --> 07:52:18,718
powered filter. So let's take a look at

15333
07:52:18,718 --> 07:52:20,160
the left one first. We have incoming

15334
07:52:20,160 --> 07:52:21,760
data. So let's just say we're routing

15335
07:52:21,760 --> 07:52:24,718
data off based on if someone's budget is

15336
07:52:24,718 --> 07:52:26,478
greater than 10 or less than 10.

15337
07:52:26,478 --> 07:52:28,958
Hopefully it's greater than 10. Um so

15338
07:52:28,958 --> 07:52:32,478
the filter here is is X greater than 10?

15339
07:52:32,478 --> 07:52:34,080
If yes, we'll send it up towards tool

15340
07:52:34,080 --> 07:52:36,160
one. If no, we're going to send it down

15341
07:52:36,160 --> 07:52:37,840
towards tool two. And those are the only

15342
07:52:37,840 --> 07:52:39,520
two options because those are the only

15343
07:52:39,520 --> 07:52:41,760
two buckets that a number can fit into.

15344
07:52:41,760 --> 07:52:43,680
Unless I guess it's exactly equal to 10.

15345
07:52:43,680 --> 07:52:45,200
I probably should have made this sign a

15346
07:52:45,200 --> 07:52:46,878
greater than or equal to, but anyways,

15347
07:52:46,878 --> 07:52:48,320
you guys get the point. Now, over here,

15348
07:52:48,320 --> 07:52:50,000
if we're looking at an AI powered sort

15349
07:52:50,000 --> 07:52:51,600
of filter right here, we're using a

15350
07:52:51,600 --> 07:52:53,360
large language model to evaluate the

15351
07:52:53,360 --> 07:52:55,200
incoming data, answer some sort of

15352
07:52:55,200 --> 07:52:58,160
question, and then route it off based on

15353
07:52:58,160 --> 07:53:00,718
criteria. So incoming data we have to

15354
07:53:00,718 --> 07:53:02,638
look at or sorry not we the AI is

15355
07:53:02,638 --> 07:53:04,478
looking at what type of email this is

15356
07:53:04,478 --> 07:53:07,040
because this uses some element of

15357
07:53:07,040 --> 07:53:09,600
reasoning or logic or decision-m

15358
07:53:09,600 --> 07:53:10,878
something that actually needs to be able

15359
07:53:10,878 --> 07:53:12,558
to read the context and understand the

15360
07:53:12,558 --> 07:53:14,000
meaning of what's coming through in

15361
07:53:14,000 --> 07:53:15,760
order to make that decision. This is

15362
07:53:15,760 --> 07:53:17,840
where before AI we would have to have a

15363
07:53:17,840 --> 07:53:19,440
human in the loop. We'd have to have a

15364
07:53:19,440 --> 07:53:20,958
human look at this data and analyze

15365
07:53:20,958 --> 07:53:22,718
which way it's going to go rather than

15366
07:53:22,718 --> 07:53:24,878
being able to write some sort of code or

15367
07:53:24,878 --> 07:53:28,000
filter to do so because it's more than

15368
07:53:28,000 --> 07:53:29,760
just like what words exist. It's

15369
07:53:29,760 --> 07:53:31,360
actually like when these words come

15370
07:53:31,360 --> 07:53:33,360
together in sentences and paragraphs,

15371
07:53:33,360 --> 07:53:35,680
what does it mean? So AI is able to read

15372
07:53:35,680 --> 07:53:37,680
that and understand it and now it can

15373
07:53:37,680 --> 07:53:39,200
decide if it's a complaint, if it's

15374
07:53:39,200 --> 07:53:41,040
billing or if it's promotion and then

15375
07:53:41,040 --> 07:53:42,798
based on what type it is, we'll send it

15376
07:53:42,798 --> 07:53:44,718
off to a different tool to take the next

15377
07:53:44,718 --> 07:53:46,878
action. So the big takeaway here is to

15378
07:53:46,878 --> 07:53:49,040
find the simplest approach first. You

15379
07:53:49,040 --> 07:53:51,280
may not even need an agent at all. So

15380
07:53:51,280 --> 07:53:52,878
why would you add more complexity if you

15381
07:53:52,878 --> 07:53:54,878
don't have to? And also if you start to

15382
07:53:54,878 --> 07:53:56,320
learn the fundamentals of workflow

15383
07:53:56,320 --> 07:53:59,280
automation, data flow, logic, creative

15384
07:53:59,280 --> 07:54:00,798
problem solving, all that kind of stuff,

15385
07:54:00,798 --> 07:54:02,160
it's going to make it so much easier

15386
07:54:02,160 --> 07:54:03,680
when you decide to scale up and start

15387
07:54:03,680 --> 07:54:05,120
building out these multi-aggentic

15388
07:54:05,120 --> 07:54:07,120
systems as far as, you know, sending

15389
07:54:07,120 --> 07:54:09,478
data between workflows and understanding

15390
07:54:09,478 --> 07:54:11,360
routing. Your life's going to be a lot

15391
07:54:11,360 --> 07:54:13,600
easier. So only use AI where it actually

15392
07:54:13,600 --> 07:54:15,760
is going to provide value. And also

15393
07:54:15,760 --> 07:54:18,478
using AI and hitting an LLM isn't free

15394
07:54:18,478 --> 07:54:19,840
typically. And I mean if you're

15395
07:54:19,840 --> 07:54:22,000
self-hosting, but anyways, it's not

15396
07:54:22,000 --> 07:54:23,440
free. So why would you want to spend

15397
07:54:23,440 --> 07:54:24,878
that extra money in your workflow if you

15398
07:54:24,878 --> 07:54:26,638
don't have to? You can scale up when you

15399
07:54:26,638 --> 07:54:28,160
need the system to decide the steps on

15400
07:54:28,160 --> 07:54:30,240
its own, when you need it to handle more

15401
07:54:30,240 --> 07:54:32,878
complex multi-step reasoning, and when

15402
07:54:32,878 --> 07:54:34,958
you needed to control usage dynamically.

15403
07:54:34,958 --> 07:54:36,320
And I highlighted those three words

15404
07:54:36,320 --> 07:54:38,320
because that's very like human sounding,

15405
07:54:38,320 --> 07:54:41,680
right? Decide, reason, dynamic. Okay,

15406
07:54:41,680 --> 07:54:43,440
moving on to lesson number two. This is

15407
07:54:43,440 --> 07:54:45,600
to wireframe before you actually get in

15408
07:54:45,600 --> 07:54:46,958
there and start building. One of the

15409
07:54:46,958 --> 07:54:48,160
biggest mistakes that I made early on

15410
07:54:48,160 --> 07:54:49,520
and that I see a ton of people making

15411
07:54:49,520 --> 07:54:51,840
early on is jumping straight into their

15412
07:54:51,840 --> 07:54:53,760
builder, whatever it is, and trying to

15413
07:54:53,760 --> 07:54:56,398
get the idea in their head onto a canvas

15414
07:54:56,398 --> 07:54:58,320
without mapping it out at all. And this

15415
07:54:58,320 --> 07:55:00,398
causes a lot of problems. So, the three

15416
07:55:00,398 --> 07:55:01,840
main ones here are you you start to

15417
07:55:01,840 --> 07:55:03,440
create these messy, over complicated

15418
07:55:03,440 --> 07:55:04,798
workflows because you haven't thought

15419
07:55:04,798 --> 07:55:06,558
out the whole process yet. You're going

15420
07:55:06,558 --> 07:55:08,080
to get confused over where you actually

15421
07:55:08,080 --> 07:55:10,398
need AI and where you don't. and you may

15422
07:55:10,398 --> 07:55:11,958
end up spending hours and hours

15423
07:55:11,958 --> 07:55:15,440
debugging, trying to revise um all this

15424
07:55:15,440 --> 07:55:16,718
kind of stuff because you didn't

15425
07:55:16,718 --> 07:55:18,718
consider either a certain integration up

15426
07:55:18,718 --> 07:55:20,240
front or a certain functionality up

15427
07:55:20,240 --> 07:55:21,760
front or you didn't realize that this

15428
07:55:21,760 --> 07:55:22,958
could be broken down into different

15429
07:55:22,958 --> 07:55:24,398
workflows and it would make the whole

15430
07:55:24,398 --> 07:55:25,920
thing more efficient. I can't tell you

15431
07:55:25,920 --> 07:55:27,120
how many times when I started off

15432
07:55:27,120 --> 07:55:28,878
building these kind of things that I got

15433
07:55:28,878 --> 07:55:31,280
almost near the end and I realized I

15434
07:55:31,280 --> 07:55:33,280
could have done this with like 20 less

15435
07:55:33,280 --> 07:55:34,638
nodes or I could have done this in two

15436
07:55:34,638 --> 07:55:36,240
workflows and made it a lot simpler. So,

15437
07:55:36,240 --> 07:55:37,840
I end up just deleting everything and

15438
07:55:37,840 --> 07:55:39,200
restarting. So what we're looking at

15439
07:55:39,200 --> 07:55:40,798
right here are a different Excalibraw

15440
07:55:40,798 --> 07:55:42,558
wireframes that I had done. As you can

15441
07:55:42,558 --> 07:55:43,920
see, I kind of do them differently each

15442
07:55:43,920 --> 07:55:45,760
time. There's not really a, you know,

15443
07:55:45,760 --> 07:55:47,440
defined way that you need to do this

15444
07:55:47,440 --> 07:55:49,680
correctly or correct color coding or

15445
07:55:49,680 --> 07:55:51,440
shapes. The idea here is just to get

15446
07:55:51,440 --> 07:55:53,760
your thoughts from your head onto a

15447
07:55:53,760 --> 07:55:56,160
paper or onto a screen and map it out

15448
07:55:56,160 --> 07:55:57,680
before you get into your workflow

15449
07:55:57,680 --> 07:56:00,080
builder because then in the process of

15450
07:56:00,080 --> 07:56:01,280
mapping things out, you're going to

15451
07:56:01,280 --> 07:56:02,718
understand, okay, there may be some

15452
07:56:02,718 --> 07:56:04,718
complexities here or I need all of this

15453
07:56:04,718 --> 07:56:05,760
functionality here that I didn't think

15454
07:56:05,760 --> 07:56:07,600
of before. And this isn't really to say

15455
07:56:07,600 --> 07:56:08,958
that there's one correct way to

15456
07:56:08,958 --> 07:56:10,558
wireframe. As you can see, sometimes I

15457
07:56:10,558 --> 07:56:12,160
do it differently. Um, there's not like

15458
07:56:12,160 --> 07:56:14,478
a designated schema or color type or

15459
07:56:14,478 --> 07:56:16,000
shape type that you should be using.

15460
07:56:16,000 --> 07:56:18,080
Whatever makes sense to you really. But

15461
07:56:18,080 --> 07:56:19,680
the idea here is even if you don't want

15462
07:56:19,680 --> 07:56:22,080
to wireframe and visually map stuff out,

15463
07:56:22,080 --> 07:56:23,760
it's just about planning before you

15464
07:56:23,760 --> 07:56:26,958
actually start building. So, how can you

15465
07:56:26,958 --> 07:56:28,478
break this whole project? You know, a

15466
07:56:28,478 --> 07:56:29,920
lot of people ask me, I have an input

15467
07:56:29,920 --> 07:56:31,280
and I know what that looks like and I

15468
07:56:31,280 --> 07:56:33,120
know what I want to get over here, but

15469
07:56:33,120 --> 07:56:34,718
in between I have no idea what that

15470
07:56:34,718 --> 07:56:36,398
looks like. So, how can we break this

15471
07:56:36,398 --> 07:56:39,680
whole project into workflows? And each

15472
07:56:39,680 --> 07:56:40,718
workflow is going to have like

15473
07:56:40,718 --> 07:56:42,478
individual tasks within that workflow.

15474
07:56:42,478 --> 07:56:44,320
So, breaking it down to as many small

15475
07:56:44,320 --> 07:56:46,320
tasks as possible makes it a lot more

15476
07:56:46,320 --> 07:56:48,080
easy to handle. Makes it a lot less

15477
07:56:48,080 --> 07:56:49,680
overwhelming than looking at the entire

15478
07:56:49,680 --> 07:56:51,360
thing at once and thinking, how do I get

15479
07:56:51,360 --> 07:56:53,120
from A to Z? And so, what that looks

15480
07:56:53,120 --> 07:56:55,920
like to either wireframe or to just

15481
07:56:55,920 --> 07:56:57,840
write down the steps is you want to

15482
07:56:57,840 --> 07:56:59,600
think about what triggers this workflow.

15483
07:56:59,600 --> 07:57:01,600
How does this process start? And what

15484
07:57:01,600 --> 07:57:03,200
does the data look like coming in that

15485
07:57:03,200 --> 07:57:05,600
triggers it? From there, how does the

15486
07:57:05,600 --> 07:57:07,520
data move? Where does it go? Am I able

15487
07:57:07,520 --> 07:57:09,360
to send it down one path? Do I have to

15488
07:57:09,360 --> 07:57:11,360
send it off different ways based on some

15489
07:57:11,360 --> 07:57:13,760
conditional logic? Do I need some aspect

15490
07:57:13,760 --> 07:57:15,840
of AI to take decisions based on the

15491
07:57:15,840 --> 07:57:17,760
different types of data coming through?

15492
07:57:17,760 --> 07:57:19,680
You know, what actions have to be taken?

15493
07:57:19,680 --> 07:57:21,920
Where do we need rag or API calls

15494
07:57:21,920 --> 07:57:23,360
involved? Where do we need to go out

15495
07:57:23,360 --> 07:57:26,000
somewhere to get more external data to

15496
07:57:26,000 --> 07:57:27,840
enrich the context going through to the

15497
07:57:27,840 --> 07:57:29,840
next LLM? What integrations are

15498
07:57:29,840 --> 07:57:31,360
involved? So, if you ask yourself these

15499
07:57:31,360 --> 07:57:33,120
kind of questions while you're writing

15500
07:57:33,120 --> 07:57:34,398
down the steps or while you're

15501
07:57:34,398 --> 07:57:36,080
wireframing out the skeleton of the

15502
07:57:36,080 --> 07:57:38,320
build, you are going to answer so many

15503
07:57:38,320 --> 07:57:39,760
more questions, especially if it comes

15504
07:57:39,760 --> 07:57:41,200
to, you know, you're trying to work with

15505
07:57:41,200 --> 07:57:42,878
a client and you're trying to understand

15506
07:57:42,878 --> 07:57:44,398
the scope of work and understand what

15507
07:57:44,398 --> 07:57:46,080
the solution is going to look like. If

15508
07:57:46,080 --> 07:57:47,680
you wireframe it out, you're going to

15509
07:57:47,680 --> 07:57:49,120
have questions for them that they might

15510
07:57:49,120 --> 07:57:50,878
have not have thought of either, rather

15511
07:57:50,878 --> 07:57:52,478
than you guys agree on a scope of work

15512
07:57:52,478 --> 07:57:53,680
and you start building this thing out

15513
07:57:53,680 --> 07:57:54,718
and then all of a sudden there's all

15514
07:57:54,718 --> 07:57:56,398
these complexities. Maybe you priced way

15515
07:57:56,398 --> 07:57:58,120
too low. Maybe you don't know the

15516
07:57:58,120 --> 07:58:01,120
functionality. And the idea here is just

15517
07:58:01,120 --> 07:58:02,958
to completely align on what you're

15518
07:58:02,958 --> 07:58:04,558
trying to build and what the client

15519
07:58:04,558 --> 07:58:06,478
wants or what you're trying to build and

15520
07:58:06,478 --> 07:58:07,520
what you're actually going to do in your

15521
07:58:07,520 --> 07:58:09,840
canvas. So there's multiple use cases,

15522
07:58:09,840 --> 07:58:11,280
but the idea here is that it's just

15523
07:58:11,280 --> 07:58:13,600
going to be so so helpful. And because

15524
07:58:13,600 --> 07:58:15,280
you're able to break down every single

15525
07:58:15,280 --> 07:58:17,280
step and every task involved, you'll

15526
07:58:17,280 --> 07:58:18,958
have a super clear idea on if it's going

15527
07:58:18,958 --> 07:58:20,240
to be an agent or if it's going to be a

15528
07:58:20,240 --> 07:58:21,760
workflow because you'll see if the stuff

15529
07:58:21,760 --> 07:58:23,440
happens in the same order or if there's

15530
07:58:23,440 --> 07:58:26,558
an aspect of decision-m involved. So,

15531
07:58:26,558 --> 07:58:28,000
when I'm approaching a client build or

15532
07:58:28,000 --> 07:58:29,280
an internal automation that I'm trying

15533
07:58:29,280 --> 07:58:31,840
to build for myself, there is no way

15534
07:58:31,840 --> 07:58:33,920
that more than half my time is spent in

15535
07:58:33,920 --> 07:58:36,478
the builder. pretty much upfront I'm

15536
07:58:36,478 --> 07:58:37,680
doing all of the wireframing and

15537
07:58:37,680 --> 07:58:38,718
understanding what this is going to look

15538
07:58:38,718 --> 07:58:40,398
like because the goal here is that we're

15539
07:58:40,398 --> 07:58:42,320
basically creating a step-by-step

15540
07:58:42,320 --> 07:58:43,840
instruction manual of how to put the

15541
07:58:43,840 --> 07:58:45,280
pieces together. You should think of it

15542
07:58:45,280 --> 07:58:46,718
as if you're putting together a Lego

15543
07:58:46,718 --> 07:58:48,638
set. So, you would never grab all the

15544
07:58:48,638 --> 07:58:51,120
pieces from your bag of Legos, rip it

15545
07:58:51,120 --> 07:58:52,478
open, and just start putting them

15546
07:58:52,478 --> 07:58:54,000
together and trying to figure out where

15547
07:58:54,000 --> 07:58:55,440
what goes where. You're always going to

15548
07:58:55,440 --> 07:58:57,120
have right next to you that manual where

15549
07:58:57,120 --> 07:58:58,398
you're looking at like basically the

15550
07:58:58,398 --> 07:58:59,920
step-by-step instructions and flipping

15551
07:58:59,920 --> 07:59:01,440
through. So, that's what I do with my

15552
07:59:01,440 --> 07:59:02,638
two monitors. On the left, I have my

15553
07:59:02,638 --> 07:59:04,478
wireframe. On the right, I have my NADN

15554
07:59:04,478 --> 07:59:06,000
and I'm just looking back and forth and

15555
07:59:06,000 --> 07:59:07,680
connecting the pieces where I know the

15556
07:59:07,680 --> 07:59:09,600
integrations are supposed to be. You

15557
07:59:09,600 --> 07:59:10,958
need a clear plan. Otherwise, you're not

15558
07:59:10,958 --> 07:59:12,000
going to know how everything fits

15559
07:59:12,000 --> 07:59:14,240
together. It's like you were trying to,

15560
07:59:14,240 --> 07:59:16,240
you know, build a 500 piece puzzle, but

15561
07:59:16,240 --> 07:59:17,760
you're not allowed to look at the actual

15562
07:59:17,760 --> 07:59:19,200
picture of a completed puzzle, and

15563
07:59:19,200 --> 07:59:20,558
you're kind of blindly trying to put

15564
07:59:20,558 --> 07:59:22,478
them together. You can do it. It can

15565
07:59:22,478 --> 07:59:24,080
work, but it's going to take a lot

15566
07:59:24,080 --> 07:59:25,600
longer. Moving on to number three, we

15567
07:59:25,600 --> 07:59:27,840
have context is everything. The AI is

15568
07:59:27,840 --> 07:59:29,280
only going to be as good as the

15569
07:59:29,280 --> 07:59:31,280
information that you provide it. It is

15570
07:59:31,280 --> 07:59:32,798
really cool. The tech has come so far.

15571
07:59:32,798 --> 07:59:34,320
These AI models are super super

15572
07:59:34,320 --> 07:59:36,240
intelligent, but they're pre-trained.

15573
07:59:36,240 --> 07:59:37,920
So, they can't just figure things out,

15574
07:59:37,920 --> 07:59:39,440
especially if they're operating within a

15575
07:59:39,440 --> 07:59:41,120
specific domain where there's, you know,

15576
07:59:41,120 --> 07:59:43,120
industry jargon or your specific

15577
07:59:43,120 --> 07:59:45,440
business processes. It needs your

15578
07:59:45,440 --> 07:59:47,040
subject matter expertise in order to

15579
07:59:47,040 --> 07:59:48,958
actually be effective. It doesn't think

15580
07:59:48,958 --> 07:59:50,320
like we do. It doesn't have past

15581
07:59:50,320 --> 07:59:52,478
experiences or intuition, at least right

15582
07:59:52,478 --> 07:59:54,398
away. We can give it stuff like that. It

15583
07:59:54,398 --> 07:59:56,080
only works with the data it's given. So,

15584
07:59:56,080 --> 07:59:58,558
garbage in equals garbage out. So, what

15585
07:59:58,558 --> 07:59:59,840
happens if you don't provide high

15586
07:59:59,840 --> 08:00:02,080
quality context? Hallucination. The AI

15587
08:00:02,080 --> 08:00:03,600
is going to start to make up stuff. Tool

15588
08:00:03,600 --> 08:00:05,200
misuse. It's not going to use the tools

15589
08:00:05,200 --> 08:00:06,638
correctly and it's going to fail to

15590
08:00:06,638 --> 08:00:08,240
achieve your tasks that you need it to

15591
08:00:08,240 --> 08:00:10,080
do. And then vague responses. If it

15592
08:00:10,080 --> 08:00:11,520
doesn't have clear direction and a clear

15593
08:00:11,520 --> 08:00:13,200
sight of like what is the goal? What am

15594
08:00:13,200 --> 08:00:15,200
I trying to do here? It is just not

15595
08:00:15,200 --> 08:00:16,638
going to be useful. It's going to be

15596
08:00:16,638 --> 08:00:18,160
generic and it's going to sound very

15597
08:00:18,160 --> 08:00:20,718
obviously like it came from a chat GBT.

15598
08:00:20,718 --> 08:00:22,558
So, a perfect example here is the

15599
08:00:22,558 --> 08:00:24,558
salesperson analogy. Let's say you hire

15600
08:00:24,558 --> 08:00:27,280
a superstar salesman who is amazing,

15601
08:00:27,280 --> 08:00:29,120
great sales technique. He understands

15602
08:00:29,120 --> 08:00:30,798
how to build rapport, closing

15603
08:00:30,798 --> 08:00:32,958
techniques, communication skills, just

15604
08:00:32,958 --> 08:00:35,200
like maybe you're taking a GPT40 model

15605
08:00:35,200 --> 08:00:36,478
out of the box and you're plugging it

15606
08:00:36,478 --> 08:00:38,638
into your agent. Now, no matter how good

15607
08:00:38,638 --> 08:00:41,520
that model is or the salesperson is,

15608
08:00:41,520 --> 08:00:43,280
there are going to be no closed sales

15609
08:00:43,280 --> 08:00:45,120
without the subject matter expertise,

15610
08:00:45,120 --> 08:00:46,958
the business process knowledge, you

15611
08:00:46,958 --> 08:00:48,478
know, understanding the pricing, the

15612
08:00:48,478 --> 08:00:50,320
features, the examples, all that kind of

15613
08:00:50,320 --> 08:00:52,160
stuff. So, the question becomes, how do

15614
08:00:52,160 --> 08:00:54,320
you actually provide your AI agents with

15615
08:00:54,320 --> 08:00:56,080
better context? And there are three main

15616
08:00:56,080 --> 08:00:57,680
ways here. The first one is within your

15617
08:00:57,680 --> 08:00:59,280
agent you have a system prompt. So this

15618
08:00:59,280 --> 08:01:01,040
is kind of like the fine-tuning of the

15619
08:01:01,040 --> 08:01:03,040
model where we're training it on this is

15620
08:01:03,040 --> 08:01:04,160
your role. This is how you should

15621
08:01:04,160 --> 08:01:05,680
behave. This is what you're supposed to

15622
08:01:05,680 --> 08:01:08,320
do. Then we have the sort of memory of

15623
08:01:08,320 --> 08:01:09,920
the agent which is more of the

15624
08:01:09,920 --> 08:01:11,360
short-term memory we're referring to

15625
08:01:11,360 --> 08:01:13,200
right here where it can understand like

15626
08:01:13,200 --> 08:01:15,120
the past 10 interactions it had with the

15627
08:01:15,120 --> 08:01:17,680
user based on the input stuff like that.

15628
08:01:17,680 --> 08:01:19,520
And then the final aspect which is very

15629
08:01:19,520 --> 08:01:21,520
very powerful is the rag aspect where

15630
08:01:21,520 --> 08:01:22,958
it's able to go retrieve information

15631
08:01:22,958 --> 08:01:24,718
that it doesn't currently have but it's

15632
08:01:24,718 --> 08:01:26,320
able to understand what do I need to go

15633
08:01:26,320 --> 08:01:28,160
get and where can I go get it. So it can

15634
08:01:28,160 --> 08:01:29,680
either hit different APIs to get

15635
08:01:29,680 --> 08:01:31,360
real-time data or it can hit its

15636
08:01:31,360 --> 08:01:33,440
knowledge base that hopefully is syncing

15637
08:01:33,440 --> 08:01:35,760
dynamically and is updated. So either

15638
08:01:35,760 --> 08:01:38,080
way it's reaching outside of its system

15639
08:01:38,080 --> 08:01:40,398
prompt to get more information from

15640
08:01:40,398 --> 08:01:42,718
these external sources. So anyways

15641
08:01:42,718 --> 08:01:44,320
preloaded knowledge. This is basically

15642
08:01:44,320 --> 08:01:46,000
where you tell the agent its job, its

15643
08:01:46,000 --> 08:01:48,638
description, its role. As if on day one

15644
08:01:48,638 --> 08:01:50,478
of a summer internship, you told the

15645
08:01:50,478 --> 08:01:52,240
intern, "Okay, this is what you're going

15646
08:01:52,240 --> 08:01:54,160
to do all summer." You would define its

15647
08:01:54,160 --> 08:01:55,760
job responsibilities. You would give key

15648
08:01:55,760 --> 08:01:57,360
facts about your business, and you would

15649
08:01:57,360 --> 08:01:59,360
give it rules and guidelines to follow.

15650
08:01:59,360 --> 08:02:01,120
And then we move on to the user specific

15651
08:02:01,120 --> 08:02:02,638
context, which is just sort of its

15652
08:02:02,638 --> 08:02:04,160
memory based on the person it's

15653
08:02:04,160 --> 08:02:06,478
interacting with. So, this reminds the

15654
08:02:06,478 --> 08:02:08,398
AI what the customer has already asked,

15655
08:02:08,398 --> 08:02:09,920
previous troubleshooting steps that have

15656
08:02:09,920 --> 08:02:11,520
been taken, maybe information about the

15657
08:02:11,520 --> 08:02:14,000
customer. And without this user context,

15658
08:02:14,000 --> 08:02:16,160
specific memory, the AI is going to ask

15659
08:02:16,160 --> 08:02:17,600
the same questions over and over. It's

15660
08:02:17,600 --> 08:02:19,200
going to forget what's already been

15661
08:02:19,200 --> 08:02:21,280
conversated about, and it'll probably

15662
08:02:21,280 --> 08:02:24,240
just annoy the end user with repetitive

15663
08:02:24,240 --> 08:02:26,160
information and not very tailored

15664
08:02:26,160 --> 08:02:27,760
information. So we're able to store

15665
08:02:27,760 --> 08:02:29,520
these past interactions so that the AI

15666
08:02:29,520 --> 08:02:31,440
can see it before it responds and before

15667
08:02:31,440 --> 08:02:33,120
it takes action so that it's actually

15668
08:02:33,120 --> 08:02:35,360
more seamless like a human conversation.

15669
08:02:35,360 --> 08:02:36,958
It's more natural and efficient. And

15670
08:02:36,958 --> 08:02:38,558
then we have the aspect of the real-time

15671
08:02:38,558 --> 08:02:40,558
context. This is because there's some

15672
08:02:40,558 --> 08:02:42,320
information that's just too dynamically

15673
08:02:42,320 --> 08:02:44,478
changing or too large to fit within the

15674
08:02:44,478 --> 08:02:46,478
actual system prompt of the agent. So

15675
08:02:46,478 --> 08:02:48,080
instead of relying on this predefined

15676
08:02:48,080 --> 08:02:50,000
knowledge, we can retrieve this context

15677
08:02:50,000 --> 08:02:51,920
dynamically. So maybe it's as simple as

15678
08:02:51,920 --> 08:02:53,120
we're asking the agent what the weather

15679
08:02:53,120 --> 08:02:55,200
is. So, it hits that weather API in

15680
08:02:55,200 --> 08:02:56,878
order to go access real-time current

15681
08:02:56,878 --> 08:02:58,320
information about the weather. It pulls

15682
08:02:58,320 --> 08:03:00,320
it back and then it responds to us. Or

15683
08:03:00,320 --> 08:03:01,440
it could be, you know, we're asking

15684
08:03:01,440 --> 08:03:02,798
about product information within a

15685
08:03:02,798 --> 08:03:04,160
database. So, it could go hit that

15686
08:03:04,160 --> 08:03:06,080
knowledge base what that has all of our

15687
08:03:06,080 --> 08:03:07,840
product information and it will search

15688
08:03:07,840 --> 08:03:09,920
through it, look for what it needs, and

15689
08:03:09,920 --> 08:03:11,600
then pull it back and then respond to us

15690
08:03:11,600 --> 08:03:13,440
with it. So, that's the aspect of Rag

15691
08:03:13,440 --> 08:03:15,440
and it's super super powerful. Okay. And

15692
08:03:15,440 --> 08:03:17,360
this is a great segue from Rag. Now,

15693
08:03:17,360 --> 08:03:19,520
we're talking about vector databases and

15694
08:03:19,520 --> 08:03:21,840
when not to use a vector database. So, I

15695
08:03:21,840 --> 08:03:23,120
think something similar happened here

15696
08:03:23,120 --> 08:03:25,200
with vector databases as the same way it

15697
08:03:25,200 --> 08:03:26,958
happened with AI agents is that it was

15698
08:03:26,958 --> 08:03:29,680
just some cool magic buzzword and it

15699
08:03:29,680 --> 08:03:31,760
sounded like almost too good to be true.

15700
08:03:31,760 --> 08:03:33,520
So, everyone just started overusing them

15701
08:03:33,520 --> 08:03:35,600
and overusing the term. And that's

15702
08:03:35,600 --> 08:03:37,520
definitely something that I have to

15703
08:03:37,520 --> 08:03:39,760
admit that I fell victim to because when

15704
08:03:39,760 --> 08:03:41,360
I first started building this stuff, I

15705
08:03:41,360 --> 08:03:42,958
was taking all types of data, no matter

15706
08:03:42,958 --> 08:03:44,558
what it was, and I was just chucking it

15707
08:03:44,558 --> 08:03:46,398
into a vector database and chatting with

15708
08:03:46,398 --> 08:03:48,958
it. And because you know 70% of the time

15709
08:03:48,958 --> 08:03:50,160
I was getting the right answers. I was

15710
08:03:50,160 --> 08:03:52,398
like this is so cool because it's that

15711
08:03:52,398 --> 08:03:53,920
you know as you can see based on this

15712
08:03:53,920 --> 08:03:56,600
illustration it is sort of like that

15713
08:03:56,600 --> 08:03:58,558
multi-dimensional data representation.

15714
08:03:58,558 --> 08:04:00,398
It's a multi-dimensional space where the

15715
08:04:00,398 --> 08:04:02,160
data points that you were storing are

15716
08:04:02,160 --> 08:04:03,600
stored as these little vectors these

15717
08:04:03,600 --> 08:04:05,680
little dots everywhere. And they're not

15718
08:04:05,680 --> 08:04:07,120
just placed in there. They're placed in

15719
08:04:07,120 --> 08:04:09,680
there intelligently because the actual

15720
08:04:09,680 --> 08:04:11,520
context of the chunk that you're putting

15721
08:04:11,520 --> 08:04:13,920
into the vector database it's placed

15722
08:04:13,920 --> 08:04:16,080
based on its meaning. So, it's embedded

15723
08:04:16,080 --> 08:04:17,360
based on all these numerical

15724
08:04:17,360 --> 08:04:19,120
representations of data. As you can see,

15725
08:04:19,120 --> 08:04:21,120
like right up here, this is what the

15726
08:04:21,120 --> 08:04:23,200
sort of um embedding dimensions look

15727
08:04:23,200 --> 08:04:25,600
like. And each point has meaning. And

15728
08:04:25,600 --> 08:04:27,200
so, it's placed somewhere where other

15729
08:04:27,200 --> 08:04:29,280
things are placed that are similar.

15730
08:04:29,280 --> 08:04:30,718
They're placed near them. So, over here

15731
08:04:30,718 --> 08:04:32,320
we have like, you know, animals, cat,

15732
08:04:32,320 --> 08:04:34,240
dog, wolf, those are placed similarly.

15733
08:04:34,240 --> 08:04:35,840
We have like fruits over here, but also

15734
08:04:35,840 --> 08:04:37,600
like tech stuff because Google's here

15735
08:04:37,600 --> 08:04:39,200
and Apple, which isn't the fruit, but

15736
08:04:39,200 --> 08:04:41,600
it's also the tech brand. So, you know,

15737
08:04:41,600 --> 08:04:43,840
it also kind of shifts as as you embed

15738
08:04:43,840 --> 08:04:45,200
more vectors in there. So, it's just

15739
08:04:45,200 --> 08:04:46,638
like multi-changing. It's very

15740
08:04:46,638 --> 08:04:48,478
intelligent and the agent's able to scan

15741
08:04:48,478 --> 08:04:50,080
everything and grab back all the chunks

15742
08:04:50,080 --> 08:04:52,398
that are relevant really quickly. And

15743
08:04:52,398 --> 08:04:53,600
like I said, it's just kind of one of

15744
08:04:53,600 --> 08:04:55,760
those buzzwords that super cool.

15745
08:04:55,760 --> 08:04:58,000
However, even though it sounds cool,

15746
08:04:58,000 --> 08:04:59,520
after building these systems for a

15747
08:04:59,520 --> 08:05:01,600
while, I learned that vector databases

15748
08:05:01,600 --> 08:05:03,600
are not always necessary for most

15749
08:05:03,600 --> 08:05:05,760
business automation needs. If your data

15750
08:05:05,760 --> 08:05:07,360
is structured and it needs exact

15751
08:05:07,360 --> 08:05:09,280
retrieval, which a lot of times company

15752
08:05:09,280 --> 08:05:11,200
data is very structured and you do need

15753
08:05:11,200 --> 08:05:13,440
exact retrieval, a relational database

15754
08:05:13,440 --> 08:05:14,958
is going to be much better for that use

15755
08:05:14,958 --> 08:05:17,760
case. And you know, just because it's a

15756
08:05:17,760 --> 08:05:20,000
buzzword, that's exactly what it is, a

15757
08:05:20,000 --> 08:05:21,600
buzz word. So that doesn't always mean

15758
08:05:21,600 --> 08:05:23,200
it's the best tool for the job. So

15759
08:05:23,200 --> 08:05:24,638
because in college I studied business

15760
08:05:24,638 --> 08:05:26,320
analytics, I've had a little bit of a

15761
08:05:26,320 --> 08:05:28,478
background with like databases,

15762
08:05:28,478 --> 08:05:31,120
relational databases, and analytics. Um,

15763
08:05:31,120 --> 08:05:32,478
but if you don't really understand the

15764
08:05:32,478 --> 08:05:33,440
difference between structured and

15765
08:05:33,440 --> 08:05:35,200
unstructured data and what a relational

15766
08:05:35,200 --> 08:05:37,120
database is, we'll go over it real

15767
08:05:37,120 --> 08:05:39,360
quick. Structured data is basically

15768
08:05:39,360 --> 08:05:41,600
anything that can fit into rows and

15769
08:05:41,600 --> 08:05:44,558
columns because it has an organized sort

15770
08:05:44,558 --> 08:05:46,160
of predictable schema. So in this

15771
08:05:46,160 --> 08:05:47,760
example, we're looking at customer data

15772
08:05:47,760 --> 08:05:49,440
and we have two different tables and

15773
08:05:49,440 --> 08:05:51,440
this is relational data because over

15774
08:05:51,440 --> 08:05:53,520
here we have a customer ID column. So

15775
08:05:53,520 --> 08:05:56,160
customer ID 101 is Alice and we have

15776
08:05:56,160 --> 08:05:58,080
Alice's email right here. Customer ID

15777
08:05:58,080 --> 08:06:00,558
102 is Bob. We have Bob's email and then

15778
08:06:00,558 --> 08:06:02,240
we have a different table that is able

15779
08:06:02,240 --> 08:06:04,320
to relate back to this customer lookup

15780
08:06:04,320 --> 08:06:06,478
table because we match on the fields

15781
08:06:06,478 --> 08:06:08,958
customer ID. Anyways, this is an order

15782
08:06:08,958 --> 08:06:10,240
table it looks like. So we have order

15783
08:06:10,240 --> 08:06:12,718
one by customer ID 101 and the product

15784
08:06:12,718 --> 08:06:14,718
was a laptop. And we may think okay well

15785
08:06:14,718 --> 08:06:16,160
we're looking at order one. Who was

15786
08:06:16,160 --> 08:06:18,000
that? We can relate it back to this

15787
08:06:18,000 --> 08:06:20,240
table based on the customer ID and then

15788
08:06:20,240 --> 08:06:22,398
we can look up who that user was. So

15789
08:06:22,398 --> 08:06:23,680
there's a lot of use cases out there.

15790
08:06:23,680 --> 08:06:24,958
When I said, you know, a lot of business

15791
08:06:24,958 --> 08:06:27,360
data is going to be structured like user

15792
08:06:27,360 --> 08:06:29,200
profiles, sales records, you know,

15793
08:06:29,200 --> 08:06:32,160
invoice details, all this kind of stuff.

15794
08:06:32,160 --> 08:06:33,600
You know, even if it's not a relational

15795
08:06:33,600 --> 08:06:35,360
aspect of linking two tables together,

15796
08:06:35,360 --> 08:06:36,958
if it's structured data, which is going

15797
08:06:36,958 --> 08:06:39,200
to be, you know, a lot of chart stuff,

15798
08:06:39,200 --> 08:06:42,558
number stuff, um, Excel sheets, Google

15799
08:06:42,558 --> 08:06:44,080
Sheets, all that kind of stuff, right?

15800
08:06:44,080 --> 08:06:45,760
And if it's structured data, it's going

15801
08:06:45,760 --> 08:06:47,600
to be a lot more efficient to query it

15802
08:06:47,600 --> 08:06:49,440
using SQL rather than trying to

15803
08:06:49,440 --> 08:06:51,200
vectorize it and put it into a vector

15804
08:06:51,200 --> 08:06:53,878
database for semantic search.

15805
08:06:53,878 --> 08:06:56,638
So we said as a non-programmer, if

15806
08:06:56,638 --> 08:06:57,760
you're, you know, I'm sure you've been

15807
08:06:57,760 --> 08:06:59,200
hearing SQL quering and maybe you don't

15808
08:06:59,200 --> 08:07:01,120
understand exactly what it is. This is

15809
08:07:01,120 --> 08:07:03,520
what it is, right? So we're almost kind

15810
08:07:03,520 --> 08:07:05,520
of using natural language to extract

15811
08:07:05,520 --> 08:07:07,040
information, but we could have, you

15812
08:07:07,040 --> 08:07:09,200
know, half a million records in a table.

15813
08:07:09,200 --> 08:07:10,478
And so it's just a quicker way to

15814
08:07:10,478 --> 08:07:11,680
actually filter through that stuff to

15815
08:07:11,680 --> 08:07:14,160
get what we need. So in this case, let's

15816
08:07:14,160 --> 08:07:16,240
say the SQL query we're doing is based

15817
08:07:16,240 --> 08:07:19,120
on the user question of can you check

15818
08:07:19,120 --> 08:07:21,120
the status of my order for a wireless

15819
08:07:21,120 --> 08:07:23,760
mouse placed on January 10th. On the

15820
08:07:23,760 --> 08:07:25,440
left, we have an orders table. And this

15821
08:07:25,440 --> 08:07:26,638
is the information we need. These are

15822
08:07:26,638 --> 08:07:28,798
the fields, but there may be 500,000

15823
08:07:28,798 --> 08:07:30,320
records. So we have to filter through it

15824
08:07:30,320 --> 08:07:32,080
really quickly. And how we would do this

15825
08:07:32,080 --> 08:07:33,760
is we would say, okay, first we're going

15826
08:07:33,760 --> 08:07:35,040
to do a select statement, which just

15827
08:07:35,040 --> 08:07:36,478
means, okay, we just want to see order

15828
08:07:36,478 --> 08:07:38,000
ID, order date, order status, because

15829
08:07:38,000 --> 08:07:39,120
those are the only columns we care

15830
08:07:39,120 --> 08:07:40,798
about. We want to grab it from the

15831
08:07:40,798 --> 08:07:42,958
orders table. So, this table and then

15832
08:07:42,958 --> 08:07:44,718
now we set up our filters. So, we're

15833
08:07:44,718 --> 08:07:46,798
just looking for only rows where product

15834
08:07:46,798 --> 08:07:48,320
name equals wireless mouse because

15835
08:07:48,320 --> 08:07:50,798
that's the product she bought. And then

15836
08:07:50,798 --> 08:07:54,440
um and the order date is January 10,

15837
08:07:54,440 --> 08:07:57,120
2024. So, we're just saying whenever

15838
08:07:57,120 --> 08:07:59,920
these two conditions are met, that's

15839
08:07:59,920 --> 08:08:01,440
when we want to grab those records and

15840
08:08:01,440 --> 08:08:03,120
actually look at them. So, that's an

15841
08:08:03,120 --> 08:08:04,718
example of like what a SQL query is

15842
08:08:04,718 --> 08:08:06,478
doing. And then on the other side of

15843
08:08:06,478 --> 08:08:08,160
things, we have unstructured data, which

15844
08:08:08,160 --> 08:08:10,160
is usually the best use case for

15845
08:08:10,160 --> 08:08:11,600
unstructured data going into a vector

15846
08:08:11,600 --> 08:08:13,360
database, based on my experience, is

15847
08:08:13,360 --> 08:08:16,000
just vectorizing a ton of text. So big

15848
08:08:16,000 --> 08:08:17,680
walls of text, chunking them up,

15849
08:08:17,680 --> 08:08:19,040
throwing them into a vector database,

15850
08:08:19,040 --> 08:08:20,638
and they're placed, you know, based on

15851
08:08:20,638 --> 08:08:21,920
the meaning of those chunks, and then

15852
08:08:21,920 --> 08:08:23,920
can be grabbed back semantically,

15853
08:08:23,920 --> 08:08:26,160
intelligently by the agent. But anyways,

15854
08:08:26,160 --> 08:08:27,600
this is a quick visualization that I

15855
08:08:27,600 --> 08:08:29,840
made right over here. Let's say we have

15856
08:08:29,840 --> 08:08:31,600
um a ton tons of PDFs, and they're just

15857
08:08:31,600 --> 08:08:33,680
basically policy information. We take

15858
08:08:33,680 --> 08:08:35,600
that text, we chunk it up. So, we're

15859
08:08:35,600 --> 08:08:36,718
just splitting it based on the

15860
08:08:36,718 --> 08:08:38,478
characters within the actual content.

15861
08:08:38,478 --> 08:08:40,320
And then each chunk becomes a ve a

15862
08:08:40,320 --> 08:08:41,760
vector, which is just one of these dots

15863
08:08:41,760 --> 08:08:43,440
in this threedimensional space. And

15864
08:08:43,440 --> 08:08:45,280
they're placed in different areas, like

15865
08:08:45,280 --> 08:08:48,160
I said, based on the actual meaning of

15866
08:08:48,160 --> 08:08:50,398
these chunks. So, super cool stuff,

15867
08:08:50,398 --> 08:08:52,240
right? So then when the agent wants to,

15868
08:08:52,240 --> 08:08:53,600
you know, look in the vector database to

15869
08:08:53,600 --> 08:08:55,440
pull some stuff back, it basically makes

15870
08:08:55,440 --> 08:08:57,280
a query and vectorizes that query

15871
08:08:57,280 --> 08:08:59,200
because it will be placed near other

15872
08:08:59,200 --> 08:09:01,120
things that are related and then it will

15873
08:09:01,120 --> 08:09:02,958
grab like everything that's near it and

15874
08:09:02,958 --> 08:09:04,240
that's how it pulls back if we're doing

15875
08:09:04,240 --> 08:09:05,840
like a nearest neighbor search. But

15876
08:09:05,840 --> 08:09:07,600
don't want to get too technical here. I

15877
08:09:07,600 --> 08:09:09,680
wanted to show an example of like why

15878
08:09:09,680 --> 08:09:12,798
that's beneficial. So on the left we

15879
08:09:12,798 --> 08:09:15,840
have product information about blankets

15880
08:09:15,840 --> 08:09:17,280
and on the right we also have product

15881
08:09:17,280 --> 08:09:18,798
information about blankets and we just

15882
08:09:18,798 --> 08:09:20,080
decided on the right it's a vector

15883
08:09:20,080 --> 08:09:22,040
database on the left it's a relational

15884
08:09:22,040 --> 08:09:25,200
database and so let's say we hooked this

15885
08:09:25,200 --> 08:09:27,280
up to you know a customer chatbot on a

15886
08:09:27,280 --> 08:09:29,920
website and the customer asked I'm

15887
08:09:29,920 --> 08:09:32,958
looking for blankets that are fuzzy now

15888
08:09:32,958 --> 08:09:35,120
if it was a relational database the

15889
08:09:35,120 --> 08:09:36,478
agent would be looking through and

15890
08:09:36,478 --> 08:09:38,240
querying for you know where the

15891
08:09:38,240 --> 08:09:40,160
description contains the word fuzzy or

15892
08:09:40,160 --> 08:09:42,000
Maybe material is contains the word

15893
08:09:42,000 --> 08:09:44,000
fuzzy. And because there's no instances

15894
08:09:44,000 --> 08:09:46,718
of the word fuzzy right here, we may get

15895
08:09:46,718 --> 08:09:49,680
nothing back. But on the other side of

15896
08:09:49,680 --> 08:09:50,680
things, when we have the vector

15897
08:09:50,680 --> 08:09:52,958
database, because each of these vectors

15898
08:09:52,958 --> 08:09:54,638
are placed based on the meaning of their

15899
08:09:54,638 --> 08:09:56,478
description and their material, the

15900
08:09:56,478 --> 08:09:58,000
agent will be able to figure out, okay,

15901
08:09:58,000 --> 08:10:00,160
if I go over here and I pull back these

15902
08:10:00,160 --> 08:10:02,478
vectors, these are probably fuzzy

15903
08:10:02,478 --> 08:10:03,920
because I understand that it's cozy

15904
08:10:03,920 --> 08:10:06,240
fleece or it's um, you know, handwoven

15905
08:10:06,240 --> 08:10:08,478
cotton. So that's like why there's some

15906
08:10:08,478 --> 08:10:10,398
extra benefits there because maybe it's

15907
08:10:10,398 --> 08:10:12,240
not a word for word match, but the agent

15908
08:10:12,240 --> 08:10:14,000
can still intelligently pull back stuff

15909
08:10:14,000 --> 08:10:15,600
that's similar based on the actual

15910
08:10:15,600 --> 08:10:17,920
context of the chunks and the meaning.

15911
08:10:17,920 --> 08:10:20,240
Okay, moving on to number five. Why

15912
08:10:20,240 --> 08:10:22,878
prompting is critical for AI agents. Um,

15913
08:10:22,878 --> 08:10:24,160
we already talked about it a little bit,

15914
08:10:24,160 --> 08:10:26,000
I guess, in the context is everything

15915
08:10:26,000 --> 08:10:28,478
section because prompting is giving it

15916
08:10:28,478 --> 08:10:31,840
more context, but this should be a whole

15917
08:10:31,840 --> 08:10:34,478
lesson in itself because it is truly an

15918
08:10:34,478 --> 08:10:36,958
art. And you have to find that fine line

15919
08:10:36,958 --> 08:10:38,478
between you don't want to over prompt it

15920
08:10:38,478 --> 08:10:39,760
and you want to minimize your token

15921
08:10:39,760 --> 08:10:40,958
usage, but you also want to give it

15922
08:10:40,958 --> 08:10:43,440
enough information. But, um, when people

15923
08:10:43,440 --> 08:10:44,398
think of prompting, they think of

15924
08:10:44,398 --> 08:10:46,398
chatgbt, as you can see right here,

15925
08:10:46,398 --> 08:10:47,920
where you have the luxury of talking to

15926
08:10:47,920 --> 08:10:49,120
chat, it's going to send you something

15927
08:10:49,120 --> 08:10:50,958
back. You can tell it, hey, make that

15928
08:10:50,958 --> 08:10:52,080
shorter, or hey, make it more

15929
08:10:52,080 --> 08:10:53,760
professional. It'll send it back and you

15930
08:10:53,760 --> 08:10:55,440
can keep going back and forth and making

15931
08:10:55,440 --> 08:10:57,120
adjustments until you're happy with it

15932
08:10:57,120 --> 08:10:58,440
and then you can finally accept the

15933
08:10:58,440 --> 08:11:00,958
output. But when we're dealing with AI

15934
08:11:00,958 --> 08:11:02,240
agents and we're trying to make these

15935
08:11:02,240 --> 08:11:04,160
systems autonomous, we only have one

15936
08:11:04,160 --> 08:11:05,840
shot at it. So, we're going to put in a

15937
08:11:05,840 --> 08:11:07,360
system prompts right here that the agent

15938
08:11:07,360 --> 08:11:08,398
will be able to look at every time

15939
08:11:08,398 --> 08:11:10,240
there's like an input and we have to

15940
08:11:10,240 --> 08:11:12,000
trust that the output and the actions

15941
08:11:12,000 --> 08:11:14,478
taken before the output are going to be

15942
08:11:14,478 --> 08:11:16,240
high quality. And so, like I said, this

15943
08:11:16,240 --> 08:11:18,160
is a super interesting topic and if you

15944
08:11:18,160 --> 08:11:19,520
want to see a video where I did more of

15945
08:11:19,520 --> 08:11:20,958
a deep dive on it, you can check it out.

15946
08:11:20,958 --> 08:11:22,478
I'll tag it right here. Um, where I

15947
08:11:22,478 --> 08:11:24,558
talked about like this lesson, but the

15948
08:11:24,558 --> 08:11:26,320
biggest thing I learned building these

15949
08:11:26,320 --> 08:11:28,958
agents over the past six months was

15950
08:11:28,958 --> 08:11:31,360
reactive prompting is way better than

15951
08:11:31,360 --> 08:11:33,520
proactive prompting. Admittedly, when I

15952
08:11:33,520 --> 08:11:35,840
started prompting, I did it all wrong. I

15953
08:11:35,840 --> 08:11:38,478
was lazy and I would just like grab a

15954
08:11:38,478 --> 08:11:40,240
custom GPT that I saw someone use on

15955
08:11:40,240 --> 08:11:42,000
YouTube for, you know, a prompt

15956
08:11:42,000 --> 08:11:43,360
generator that generates the most

15957
08:11:43,360 --> 08:11:45,360
optimized prompts for your AI agents. I

15958
08:11:45,360 --> 08:11:46,478
think that that's honestly a bunch of

15959
08:11:46,478 --> 08:11:49,200
garbage. I even have created my own AI

15960
08:11:49,200 --> 08:11:51,120
agent system prompt architect and I

15961
08:11:51,120 --> 08:11:52,638
posted it in my community and people are

15962
08:11:52,638 --> 08:11:54,638
using it, but I wouldn't recommend to

15963
08:11:54,638 --> 08:11:57,280
use it to be honest. Um, nowadays I

15964
08:11:57,280 --> 08:11:58,718
think that the best practice is to write

15965
08:11:58,718 --> 08:12:01,200
all of your prompts from scratch by hand

15966
08:12:01,200 --> 08:12:02,718
from the beginning and start with

15967
08:12:02,718 --> 08:12:04,000
nothing. So, that's what I meant by

15968
08:12:04,000 --> 08:12:06,240
saying reactive prompting. Because if

15969
08:12:06,240 --> 08:12:07,600
you're grabbing a whole, you know, let's

15970
08:12:07,600 --> 08:12:09,040
say you have 200 lines of prompts and

15971
08:12:09,040 --> 08:12:10,478
you throw it in here into your system

15972
08:12:10,478 --> 08:12:11,840
prompt and then you just start testing

15973
08:12:11,840 --> 08:12:14,558
your agent, you don't know what's going

15974
08:12:14,558 --> 08:12:16,798
on and why the agent's behaving as it

15975
08:12:16,798 --> 08:12:19,280
is. You could have an issue pop up and

15976
08:12:19,280 --> 08:12:20,478
you add a different line in the system

15977
08:12:20,478 --> 08:12:23,200
prompt and the issue that you originally

15978
08:12:23,200 --> 08:12:24,878
were having is fixed, but now a new

15979
08:12:24,878 --> 08:12:26,478
issues popped up and you're just going

15980
08:12:26,478 --> 08:12:28,000
to be banging your head against the wall

15981
08:12:28,000 --> 08:12:30,000
trying to debug this thing by taking out

15982
08:12:30,000 --> 08:12:32,080
lines, testing, adding lines, testing.

15983
08:12:32,080 --> 08:12:34,240
it's just going to be such a painful

15984
08:12:34,240 --> 08:12:36,240
process when in reality what you should

15985
08:12:36,240 --> 08:12:38,878
do is reactive prompt. So start with

15986
08:12:38,878 --> 08:12:40,160
nothing in the system prompt. Give your

15987
08:12:40,160 --> 08:12:42,478
agent a tool and then test it. Throw in

15988
08:12:42,478 --> 08:12:44,240
a couple queries and see if you're

15989
08:12:44,240 --> 08:12:45,680
liking what's coming back. You're going

15990
08:12:45,680 --> 08:12:47,440
to observe that behavior and then you

15991
08:12:47,440 --> 08:12:49,120
have the ability to correct the system

15992
08:12:49,120 --> 08:12:51,520
prompt reactively. So based on what you

15993
08:12:51,520 --> 08:12:53,280
saw, you can add in a line and say,

15994
08:12:53,280 --> 08:12:55,520
"Hey, don't do that." Or, you know, this

15995
08:12:55,520 --> 08:12:57,280
worked. Let's add another tool and add

15996
08:12:57,280 --> 08:12:58,878
another prompt now or another line in

15997
08:12:58,878 --> 08:13:01,200
the prompt. Because what we know right

15998
08:13:01,200 --> 08:13:03,200
now is that it's working based on what

15999
08:13:03,200 --> 08:13:06,320
we have. That way if we do add a line

16000
08:13:06,320 --> 08:13:08,000
and then we test and then we observe the

16001
08:13:08,000 --> 08:13:10,000
behavior and we see that it broke, we

16002
08:13:10,000 --> 08:13:12,080
know exactly what broke this automation

16003
08:13:12,080 --> 08:13:13,920
and we can pinpoint it rather than if we

16004
08:13:13,920 --> 08:13:16,000
threw in a whole pre-generated system

16005
08:13:16,000 --> 08:13:17,920
prompt. So that's the main reason why I

16006
08:13:17,920 --> 08:13:19,360
don't do that anymore. And then it's

16007
08:13:19,360 --> 08:13:22,558
just that loop of test, reprompt, test

16008
08:13:22,558 --> 08:13:24,878
again, reprompt. Um, and what's super

16009
08:13:24,878 --> 08:13:27,398
cool about this is because you can

16010
08:13:27,398 --> 08:13:29,920
basically hard prompt your agent with

16011
08:13:29,920 --> 08:13:31,520
things in the system prompt because

16012
08:13:31,520 --> 08:13:33,520
you're able to show it examples of, you

16013
08:13:33,520 --> 08:13:35,360
know, hey, I just asked you this and you

16014
08:13:35,360 --> 08:13:37,520
took these steps. That was wrong. Don't

16015
08:13:37,520 --> 08:13:39,120
do that again. This is what you should

16016
08:13:39,120 --> 08:13:40,478
have done. And basically, if you give it

16017
08:13:40,478 --> 08:13:42,878
that example within the system prompt,

16018
08:13:42,878 --> 08:13:44,320
you're training this thing to not behave

16019
08:13:44,320 --> 08:13:45,920
like that. And you're only improving the

16020
08:13:45,920 --> 08:13:48,240
consistency of your agent's performance.

16021
08:13:48,240 --> 08:13:50,398
So the the key elements of a strong AI

16022
08:13:50,398 --> 08:13:52,798
agent prompt and this isn't like every

16023
08:13:52,798 --> 08:13:54,080
single time. These are the five things

16024
08:13:54,080 --> 08:13:55,680
you should have because every agent's

16025
08:13:55,680 --> 08:13:57,200
different. For example, if you're

16026
08:13:57,200 --> 08:13:59,680
creating a context creation agent, you

16027
08:13:59,680 --> 08:14:01,200
wouldn't need a tool section really if

16028
08:14:01,200 --> 08:14:02,638
it's not if it doesn't have any tools.

16029
08:14:02,638 --> 08:14:03,840
You' just be prompting it about its

16030
08:14:03,840 --> 08:14:05,920
output and about its role. But anyways,

16031
08:14:05,920 --> 08:14:07,040
the first one that we're talking about

16032
08:14:07,040 --> 08:14:08,878
is role. This is sort of just like

16033
08:14:08,878 --> 08:14:10,398
telling the AI who it is. So this could

16034
08:14:10,398 --> 08:14:12,080
be as simple as like you're a legal

16035
08:14:12,080 --> 08:14:13,920
assistant specializing in corporate law.

16036
08:14:13,920 --> 08:14:16,080
Your job is to summarize contracts in

16037
08:14:16,080 --> 08:14:18,638
simple terms and flag risky clauses.

16038
08:14:18,638 --> 08:14:20,398
Something like that. It gives the AI

16039
08:14:20,398 --> 08:14:22,160
clear purpose and it helps the model

16040
08:14:22,160 --> 08:14:24,080
understand the tone and the scope of its

16041
08:14:24,080 --> 08:14:26,240
job. Without this, the AI is not going

16042
08:14:26,240 --> 08:14:27,600
to know how to frame responses and

16043
08:14:27,600 --> 08:14:28,958
you're going to get either very random

16044
08:14:28,958 --> 08:14:30,160
outputs or you're going to get very

16045
08:14:30,160 --> 08:14:32,718
vague outputs that are very clearly

16046
08:14:32,718 --> 08:14:34,718
generated by AI. Then of course you have

16047
08:14:34,718 --> 08:14:36,080
the context which is going to help the

16048
08:14:36,080 --> 08:14:37,920
agent understand, you know, what is

16049
08:14:37,920 --> 08:14:39,600
actually coming in every time because

16050
08:14:39,600 --> 08:14:40,398
essentially you're going to have

16051
08:14:40,398 --> 08:14:41,920
different inputs every time even though

16052
08:14:41,920 --> 08:14:43,760
the system prompt is the same. So saying

16053
08:14:43,760 --> 08:14:44,718
like this is what you're going to

16054
08:14:44,718 --> 08:14:46,080
receive, this is what you're going to do

16055
08:14:46,080 --> 08:14:48,080
with it, um this is your end goal. So

16056
08:14:48,080 --> 08:14:49,680
that helps tailor the whole process and

16057
08:14:49,680 --> 08:14:51,280
make it more seamless as well. That's

16058
08:14:51,280 --> 08:14:52,638
one common mistake I actually see with

16059
08:14:52,638 --> 08:14:54,000
people's prompting when they start is

16060
08:14:54,000 --> 08:14:55,920
they forget to define what are you going

16061
08:14:55,920 --> 08:14:57,520
to be getting every time? Because the

16062
08:14:57,520 --> 08:14:58,558
agency, they're going to be getting a

16063
08:14:58,558 --> 08:14:59,920
ton of different emails or maybe a ton

16064
08:14:59,920 --> 08:15:01,520
of different articles, but it needs to

16065
08:15:01,520 --> 08:15:02,878
know, okay, this information that you're

16066
08:15:02,878 --> 08:15:04,638
throwing at me, what is it? Why am I

16067
08:15:04,638 --> 08:15:06,240
getting it? Then of course the tool

16068
08:15:06,240 --> 08:15:08,000
instructions. So when you're building a

16069
08:15:08,000 --> 08:15:09,680
tools agent, this is the most important

16070
08:15:09,680 --> 08:15:12,000
thing in my mind. Yes, it's good to add

16071
08:15:12,000 --> 08:15:13,760
rules and show like when you use each

16072
08:15:13,760 --> 08:15:15,840
thing, but having an actual section for

16073
08:15:15,840 --> 08:15:17,760
your tools is going to increase the

16074
08:15:17,760 --> 08:15:19,280
consistency a lot. At least that's what

16075
08:15:19,280 --> 08:15:21,440
I found because this tells the AI

16076
08:15:21,440 --> 08:15:23,360
exactly what tools are available, when

16077
08:15:23,360 --> 08:15:26,160
to use them, how they work. Um, and this

16078
08:15:26,160 --> 08:15:28,080
is really going to ensure correct tool

16079
08:15:28,080 --> 08:15:29,920
usage rather than the AI trying to go

16080
08:15:29,920 --> 08:15:32,240
off of like these sort of guidelines

16081
08:15:32,240 --> 08:15:34,718
because it's a nondeterministic workflow

16082
08:15:34,718 --> 08:15:36,638
and um trying to trying to guess of

16083
08:15:36,638 --> 08:15:39,520
which one will do what and um yeah, have

16084
08:15:39,520 --> 08:15:41,360
a tool section and define your tools.

16085
08:15:41,360 --> 08:15:42,478
Then you've got your rules and

16086
08:15:42,478 --> 08:15:44,080
constraints and this is going to help

16087
08:15:44,080 --> 08:15:45,680
prevent hallucination. It's going to

16088
08:15:45,680 --> 08:15:47,280
help the agent stick to sort of like a

16089
08:15:47,280 --> 08:15:49,040
standard operating procedure. Now, you

16090
08:15:49,040 --> 08:15:50,398
just have to be careful here because you

16091
08:15:50,398 --> 08:15:52,558
don't want to say something like do all

16092
08:15:52,558 --> 08:15:54,638
of these in this order every time

16093
08:15:54,638 --> 08:15:56,000
because then it's like why are you even

16094
08:15:56,000 --> 08:15:57,440
using an agent? You should just be using

16095
08:15:57,440 --> 08:15:59,760
a workflow, right? But anyways, just

16096
08:15:59,760 --> 08:16:02,160
setting some foundational like if X do

16097
08:16:02,160 --> 08:16:06,160
Y, if Z do A, like that sort of thing.

16098
08:16:06,160 --> 08:16:08,240
And then finally, examples, which I

16099
08:16:08,240 --> 08:16:10,160
think are super super important, but I

16100
08:16:10,160 --> 08:16:11,440
would never just put these in here

16101
08:16:11,440 --> 08:16:13,840
blind. I would only use examples to

16102
08:16:13,840 --> 08:16:16,320
directly counter and directly uh correct

16103
08:16:16,320 --> 08:16:18,320
something that's happened. So what I

16104
08:16:18,320 --> 08:16:19,520
alluded to earlier with the hard

16105
08:16:19,520 --> 08:16:20,798
prompting. So let's say you give the

16106
08:16:20,798 --> 08:16:22,878
agent an input. It calls tool one and

16107
08:16:22,878 --> 08:16:24,320
then it gives you an output that's just

16108
08:16:24,320 --> 08:16:26,320
incorrect, completely incorrect. You'd

16109
08:16:26,320 --> 08:16:28,080
want to give it in the example, you

16110
08:16:28,080 --> 08:16:29,360
could show, okay, here's the input I

16111
08:16:29,360 --> 08:16:30,958
just gave you. Now here's what you

16112
08:16:30,958 --> 08:16:33,040
should have done. Call tool two and then

16113
08:16:33,040 --> 08:16:34,798
call tool three and then give me the

16114
08:16:34,798 --> 08:16:36,478
output. And then it knows like, okay,

16115
08:16:36,478 --> 08:16:37,840
that's what I did. This is what I should

16116
08:16:37,840 --> 08:16:39,280
have done. So if I ever get an input

16117
08:16:39,280 --> 08:16:40,798
similar to this, I can just call these

16118
08:16:40,798 --> 08:16:42,160
two tools because I know that's an

16119
08:16:42,160 --> 08:16:44,798
example of like how it should behave. So

16120
08:16:44,798 --> 08:16:46,878
hard prompting is really really going to

16121
08:16:46,878 --> 08:16:48,320
come in handy and not just in the

16122
08:16:48,320 --> 08:16:50,120
examples but also just with the rest of

16123
08:16:50,120 --> 08:16:52,638
your system prompt. All right, moving on

16124
08:16:52,638 --> 08:16:55,600
to number six. We have scaling agents

16125
08:16:55,600 --> 08:16:57,760
can be a nightmare. And this is all part

16126
08:16:57,760 --> 08:16:59,200
of like one of the hard truths I talked

16127
08:16:59,200 --> 08:17:00,638
about earlier where a lot of the stuff

16128
08:17:00,638 --> 08:17:02,320
you see online is a great proof of

16129
08:17:02,320 --> 08:17:04,558
concept, a great MVP, but if you were to

16130
08:17:04,558 --> 08:17:06,000
try to push this into production in your

16131
08:17:06,000 --> 08:17:07,440
own business, you're going to notice

16132
08:17:07,440 --> 08:17:09,200
it's not there yet. Because when you

16133
08:17:09,200 --> 08:17:10,398
first build out these AI agents,

16134
08:17:10,398 --> 08:17:11,920
everything can seem to work fine. It's a

16135
08:17:11,920 --> 08:17:13,840
demo. It's cool. It really opens your

16136
08:17:13,840 --> 08:17:16,398
eyes to, you know, the capabilities, but

16137
08:17:16,398 --> 08:17:17,920
it hasn't usually gone under that

16138
08:17:17,920 --> 08:17:20,638
rigorous testing and evaluation and

16139
08:17:20,638 --> 08:17:23,440
setting up these guard rails um and all

16140
08:17:23,440 --> 08:17:24,798
of that, you know, continuous monitoring

16141
08:17:24,798 --> 08:17:26,558
that you need to do to evaluate its

16142
08:17:26,558 --> 08:17:28,478
performance before you can push it out

16143
08:17:28,478 --> 08:17:30,798
to all, you know, 100 users that you

16144
08:17:30,798 --> 08:17:32,558
want to eventually push it out to. You

16145
08:17:32,558 --> 08:17:34,240
know, on a single user level, if you

16146
08:17:34,240 --> 08:17:35,680
have a few hallucinations every once in

16147
08:17:35,680 --> 08:17:38,240
a while, it's not a huge deal. But as

16148
08:17:38,240 --> 08:17:40,398
you scale the use case, you're just

16149
08:17:40,398 --> 08:17:42,000
going to be scaling hallucinations and

16150
08:17:42,000 --> 08:17:44,000
scaling problems and scaling all these

16151
08:17:44,000 --> 08:17:45,520
failures. So that's where it gets

16152
08:17:45,520 --> 08:17:47,440
tricky. You can start to get retrieval

16153
08:17:47,440 --> 08:17:48,958
issues as your database grows. It's

16154
08:17:48,958 --> 08:17:50,240
going to be harder for your agent to cut

16155
08:17:50,240 --> 08:17:51,600
through the noise and grab what it

16156
08:17:51,600 --> 08:17:53,040
needs. So you're going to get more, you

16157
08:17:53,040 --> 08:17:54,718
know, inaccuracies. You're going to have

16158
08:17:54,718 --> 08:17:56,000
some different performance bottlenecks

16159
08:17:56,000 --> 08:17:57,760
and the agents, you know, latency is

16160
08:17:57,760 --> 08:17:59,360
going to increase. you're going to start

16161
08:17:59,360 --> 08:18:00,958
to get inconsistent outputs and you're

16162
08:18:00,958 --> 08:18:02,478
going to experience all those edge cases

16163
08:18:02,478 --> 08:18:04,080
that you hadn't thought of when you were

16164
08:18:04,080 --> 08:18:05,840
the only one testing because, you know,

16165
08:18:05,840 --> 08:18:06,958
there's just an infinite amount of

16166
08:18:06,958 --> 08:18:08,638
scenarios that an agent could be exposed

16167
08:18:08,638 --> 08:18:10,320
to. So, a good little lesson learned

16168
08:18:10,320 --> 08:18:12,240
here would be to scale vertically before

16169
08:18:12,240 --> 08:18:14,398
you start to try to scale horizontally,

16170
08:18:14,398 --> 08:18:16,398
which um we'll break that down. And I

16171
08:18:16,398 --> 08:18:17,920
made this little visualization so we can

16172
08:18:17,920 --> 08:18:19,840
see what that means. So, let's say we

16173
08:18:19,840 --> 08:18:21,520
want to help this business with their

16174
08:18:21,520 --> 08:18:23,680
customer support, sales, inventory, and

16175
08:18:23,680 --> 08:18:26,558
HR management. Rather than building out

16176
08:18:26,558 --> 08:18:28,478
little building blocks of tools within

16177
08:18:28,478 --> 08:18:30,398
each of these processes, let's try to

16178
08:18:30,398 --> 08:18:33,360
perfect one area first vertically and

16179
08:18:33,360 --> 08:18:34,638
then we'll start to move across the

16180
08:18:34,638 --> 08:18:35,920
organization and look at doing other

16181
08:18:35,920 --> 08:18:37,920
things and scaling to more users. So,

16182
08:18:37,920 --> 08:18:40,240
because we can focus on this one area,

16183
08:18:40,240 --> 08:18:41,760
we can set up a knowledge base and set

16184
08:18:41,760 --> 08:18:43,520
up like the data sources and build that

16185
08:18:43,520 --> 08:18:45,520
automated pipeline. We can set up how

16186
08:18:45,520 --> 08:18:46,878
this kind of stuff gets organized with

16187
08:18:46,878 --> 08:18:48,958
our sub workflows. We can set up, you

16188
08:18:48,958 --> 08:18:50,240
know, an actual agent that's going to

16189
08:18:50,240 --> 08:18:52,398
have different tool calls. And within

16190
08:18:52,398 --> 08:18:55,080
this process, what we have over here are

16191
08:18:55,080 --> 08:18:57,360
evaluations, monitoring performance, and

16192
08:18:57,360 --> 08:18:58,958
then setting up those guard rails

16193
08:18:58,958 --> 08:19:01,120
because we're testing throughout this,

16194
08:19:01,120 --> 08:19:03,280
you know, ecosystem vertically and and

16195
08:19:03,280 --> 08:19:04,638
getting exposure to all these different

16196
08:19:04,638 --> 08:19:06,558
edge cases before we try to move into

16197
08:19:06,558 --> 08:19:08,478
other, you know, areas where we need to

16198
08:19:08,478 --> 08:19:09,600
basically start this whole process

16199
08:19:09,600 --> 08:19:11,200
again. We want to have done the

16200
08:19:11,200 --> 08:19:14,080
endto-end system first, understand you

16201
08:19:14,080 --> 08:19:16,000
know the problems that may arise, how to

16202
08:19:16,000 --> 08:19:18,718
make it robust and how to evaluate and

16203
08:19:18,718 --> 08:19:20,878
you know iterate over it before we start

16204
08:19:20,878 --> 08:19:22,638
making more automations. And so like I

16205
08:19:22,638 --> 08:19:24,000
alluded to earlier, if you try to start

16206
08:19:24,000 --> 08:19:26,000
scaling horizontally too quick before

16207
08:19:26,000 --> 08:19:28,160
you've done all these testing, you are

16208
08:19:28,160 --> 08:19:29,840
going to notice that hallucinations are

16209
08:19:29,840 --> 08:19:31,520
going to increase. Your retrieval

16210
08:19:31,520 --> 08:19:33,120
quality is going to drop as more users

16211
08:19:33,120 --> 08:19:35,200
users come in. The agent's handling more

16212
08:19:35,200 --> 08:19:38,240
memory. it's handling more um more

16213
08:19:38,240 --> 08:19:39,840
knowledge in its database to try to cut

16214
08:19:39,840 --> 08:19:41,280
through your response times are going to

16215
08:19:41,280 --> 08:19:42,398
slow and then you're just going to get

16216
08:19:42,398 --> 08:19:44,160
more inconsistent results. And so you

16217
08:19:44,160 --> 08:19:45,440
can do things like, you know, setting

16218
08:19:45,440 --> 08:19:47,760
strict retrieval rules and guard rails.

16219
08:19:47,760 --> 08:19:49,360
You could do stuff like segmenting your

16220
08:19:49,360 --> 08:19:51,440
data into different vector databases

16221
08:19:51,440 --> 08:19:53,440
based on the context or different name

16222
08:19:53,440 --> 08:19:54,558
spaces or different, you know,

16223
08:19:54,558 --> 08:19:56,478
relational databases. You could use

16224
08:19:56,478 --> 08:19:58,958
stuff like um asynchronous processing or

16225
08:19:58,958 --> 08:20:00,718
caching in order to improve that

16226
08:20:00,718 --> 08:20:02,240
response time. And then you could also

16227
08:20:02,240 --> 08:20:04,638
look at doing stuff like only you know

16228
08:20:04,638 --> 08:20:06,798
um having an agent evaluate and making

16229
08:20:06,798 --> 08:20:08,798
sure that the confidence on these

16230
08:20:08,798 --> 08:20:10,878
responses are above a certain threshold

16231
08:20:10,878 --> 08:20:12,958
otherwise we'll you know request human

16232
08:20:12,958 --> 08:20:14,798
help and not actually respond ourselves

16233
08:20:14,798 --> 08:20:17,200
or the agent wouldn't respond itself. So

16234
08:20:17,200 --> 08:20:19,040
the seventh one is that no code tools

16235
08:20:19,040 --> 08:20:21,520
like nadn have their limits. They're

16236
08:20:21,520 --> 08:20:23,920
super great. They're really empowering

16237
08:20:23,920 --> 08:20:25,760
non-developers to get in here and spin

16238
08:20:25,760 --> 08:20:27,680
up some really cool automations. And

16239
08:20:27,680 --> 08:20:29,280
it's really like the barrier to entry is

16240
08:20:29,280 --> 08:20:30,718
so low. you can learn how to build this

16241
08:20:30,718 --> 08:20:32,240
stuff really quickly, which is why I

16242
08:20:32,240 --> 08:20:33,440
think it's awesome and you know, it's

16243
08:20:33,440 --> 08:20:35,520
the main tool that I use um personally

16244
08:20:35,520 --> 08:20:38,478
and also within my agency. But when you

16245
08:20:38,478 --> 08:20:39,920
start to get into what we just talked

16246
08:20:39,920 --> 08:20:41,920
about with lesson number six, scaling

16247
08:20:41,920 --> 08:20:43,520
and making these things really robust

16248
08:20:43,520 --> 08:20:45,360
and production ready, you may notice

16249
08:20:45,360 --> 08:20:47,920
some limits with no code tools like NE.

16250
08:20:47,920 --> 08:20:49,280
Now, the reason I got into building

16251
08:20:49,280 --> 08:20:51,040
stuff like this is because, you know,

16252
08:20:51,040 --> 08:20:54,080
obviously non-programmer and it has a

16253
08:20:54,080 --> 08:20:55,600
really nice drag and drop interface

16254
08:20:55,600 --> 08:20:57,120
where you can build these workflows very

16255
08:20:57,120 --> 08:20:59,360
visually without writing scripts. So,

16256
08:20:59,360 --> 08:21:01,520
Nen is, you know, basically open source

16257
08:21:01,520 --> 08:21:03,040
because you can self-host it. The code

16258
08:21:03,040 --> 08:21:05,280
is accessible. Um, and it's built on top

16259
08:21:05,280 --> 08:21:07,120
of Langchain, which is just like a

16260
08:21:07,120 --> 08:21:08,718
basically a language that helps connect

16261
08:21:08,718 --> 08:21:10,558
to different things and create these

16262
08:21:10,558 --> 08:21:13,040
like agents. Um, and because of that,

16263
08:21:13,040 --> 08:21:14,478
it's just wrapped up really pretty for

16264
08:21:14,478 --> 08:21:16,798
us in a graphical user interface where

16265
08:21:16,798 --> 08:21:18,878
we can interact with it in that drag and

16266
08:21:18,878 --> 08:21:20,718
drop way without having to get in there

16267
08:21:20,718 --> 08:21:23,680
and hands- on keyboard write code. And

16268
08:21:23,680 --> 08:21:25,120
it has a ton of pre-built integrations

16269
08:21:25,120 --> 08:21:26,398
as you can see right here. Connect

16270
08:21:26,398 --> 08:21:28,080
anything to everything. Um, I think

16271
08:21:28,080 --> 08:21:29,200
there's like a thousand integrations

16272
08:21:29,200 --> 08:21:30,798
right here. And all of these different

16273
08:21:30,798 --> 08:21:33,360
integrations are API calls. They're just

16274
08:21:33,360 --> 08:21:35,280
wrapped up once again in a pretty way

16275
08:21:35,280 --> 08:21:37,440
for us in a user interface. And like I

16276
08:21:37,440 --> 08:21:39,200
talked about earlier, when I started, I

16277
08:21:39,200 --> 08:21:40,638
didn't even know what an API was. So the

16278
08:21:40,638 --> 08:21:42,160
barrier entry was super low. I was able

16279
08:21:42,160 --> 08:21:43,760
to configure this stuff easily. And

16280
08:21:43,760 --> 08:21:45,120
besides these built-in integrations,

16281
08:21:45,120 --> 08:21:46,398
they have these really simple tool

16282
08:21:46,398 --> 08:21:48,320
calls. So development is really fast

16283
08:21:48,320 --> 08:21:49,840
with building workflows compared to

16284
08:21:49,840 --> 08:21:52,000
traditional coding. um the modularity

16285
08:21:52,000 --> 08:21:53,760
aspect because you can basically build

16286
08:21:53,760 --> 08:21:55,520
out a workflow, you can save that as a

16287
08:21:55,520 --> 08:21:57,200
tool and then you can call that tool

16288
08:21:57,200 --> 08:21:58,718
from any other workflow you want. So

16289
08:21:58,718 --> 08:22:00,160
once you build out a function once,

16290
08:22:00,160 --> 08:22:01,600
you've basically got it there forever

16291
08:22:01,600 --> 08:22:03,040
and it can be reused which is really

16292
08:22:03,040 --> 08:22:05,040
cool. And then my favorite aspect about

16293
08:22:05,040 --> 08:22:07,520
n and the visual interface is the visual

16294
08:22:07,520 --> 08:22:09,760
debugging because rather than having 300

16295
08:22:09,760 --> 08:22:11,360
lines of code and you know you're

16296
08:22:11,360 --> 08:22:13,840
getting errors in line 12 and line 45,

16297
08:22:13,840 --> 08:22:15,520
you're going to see it's going to be red

16298
08:22:15,520 --> 08:22:17,120
or it's going to be green and you know

16299
08:22:17,120 --> 08:22:18,558
if it's green you're good and if you see

16300
08:22:18,558 --> 08:22:20,320
red there's an error. So you know

16301
08:22:20,320 --> 08:22:22,398
exactly usually you know exactly where

16302
08:22:22,398 --> 08:22:23,760
the problem's coming from and you're

16303
08:22:23,760 --> 08:22:25,040
able to get in there look at the

16304
08:22:25,040 --> 08:22:26,958
execution data and get to the bottom of

16305
08:22:26,958 --> 08:22:29,040
it pretty quick. But overall these no

16306
08:22:29,040 --> 08:22:30,878
code platforms are great. They allow us

16307
08:22:30,878 --> 08:22:32,398
to connect APIs. We can connect to

16308
08:22:32,398 --> 08:22:33,520
pretty much anything because we have an

16309
08:22:33,520 --> 08:22:37,040
HTTP request within NADN. Um they're

16310
08:22:37,040 --> 08:22:38,080
going to be really really good for

16311
08:22:38,080 --> 08:22:40,558
rulebased decision-m like super solid.

16312
08:22:40,558 --> 08:22:42,160
Um if we're creating workflows that's

16313
08:22:42,160 --> 08:22:43,360
just going to do some data manipulation

16314
08:22:43,360 --> 08:22:45,200
and transferring data around you know

16315
08:22:45,200 --> 08:22:47,600
your typical ETL based on the structured

16316
08:22:47,600 --> 08:22:49,680
logic super robust. you can make some

16317
08:22:49,680 --> 08:22:51,440
really really awesome basic AI powered

16318
08:22:51,440 --> 08:22:52,558
workflows where you're integrating

16319
08:22:52,558 --> 08:22:54,240
different LLMs. You've got all the

16320
08:22:54,240 --> 08:22:55,520
different chat models basically that you

16321
08:22:55,520 --> 08:22:57,440
can connect to um for you know different

16322
08:22:57,440 --> 08:22:59,600
classification or content generation or

16323
08:22:59,600 --> 08:23:01,760
outreach anything like that. Um your

16324
08:23:01,760 --> 08:23:03,680
multi-agentic workflows because like I

16325
08:23:03,680 --> 08:23:05,280
said earlier you have the aspect of

16326
08:23:05,280 --> 08:23:07,840
creating different tools um as workflows

16327
08:23:07,840 --> 08:23:09,440
as well as creating agents as workflows

16328
08:23:09,440 --> 08:23:10,798
that you can call on from multiple

16329
08:23:10,798 --> 08:23:12,240
agents. So you can really get into some

16330
08:23:12,240 --> 08:23:14,958
cool multi-agentic inception thing going

16331
08:23:14,958 --> 08:23:16,558
on with with agents calling agents

16332
08:23:16,558 --> 08:23:19,440
calling agents. um and passing data

16333
08:23:19,440 --> 08:23:21,200
between different workflows and then

16334
08:23:21,200 --> 08:23:23,680
just the orchestration of AI services,

16335
08:23:23,680 --> 08:23:25,840
coordinating multiple AI tools within a

16336
08:23:25,840 --> 08:23:27,120
single process. So that's the kind of

16337
08:23:27,120 --> 08:23:29,120
stuff that NN is going to be super super

16338
08:23:29,120 --> 08:23:31,200
good at. And now the hidden limitations

16339
08:23:31,200 --> 08:23:34,558
of these noode AI workflow/ aent

16340
08:23:34,558 --> 08:23:36,798
builders. Let's get into it. Now, in my

16341
08:23:36,798 --> 08:23:38,080
opinion, this stuff really just comes

16342
08:23:38,080 --> 08:23:40,000
down to when we're trying to get into

16343
08:23:40,000 --> 08:23:41,920
like enterprise solutions at scale with

16344
08:23:41,920 --> 08:23:43,120
a ton of users and a ton of

16345
08:23:43,120 --> 08:23:44,798
authentication and a ton of data.

16346
08:23:44,798 --> 08:23:46,160
Because if you're building out your own

16347
08:23:46,160 --> 08:23:48,478
internal automations, you're going to be

16348
08:23:48,478 --> 08:23:49,520
solid. Like there's not going to be

16349
08:23:49,520 --> 08:23:50,798
limitations. If you're building out, you

16350
08:23:50,798 --> 08:23:53,440
know, proof of concepts and MVPs, um,

16351
08:23:53,440 --> 08:23:55,440
YouTube videos, creating content, like

16352
08:23:55,440 --> 08:23:57,280
you can do it all, I would say. But when

16353
08:23:57,280 --> 08:23:58,718
you need to start processing, you know,

16354
08:23:58,718 --> 08:24:00,478
massive data sets that are going to

16355
08:24:00,478 --> 08:24:03,040
scale to thousands or millions of users,

16356
08:24:03,040 --> 08:24:04,958
your performance can slow down or even

16357
08:24:04,958 --> 08:24:06,558
fail. And that's maybe where you'd want

16358
08:24:06,558 --> 08:24:08,958
to rely on some custom code backend to

16359
08:24:08,958 --> 08:24:11,080
actually spin up these more robust

16360
08:24:11,080 --> 08:24:13,040
functionalities. In these agentic

16361
08:24:13,040 --> 08:24:14,718
systems, tool calling is really, really

16362
08:24:14,718 --> 08:24:16,320
critical. The agent needs to be able to

16363
08:24:16,320 --> 08:24:18,398
decide which one to use and do it

16364
08:24:18,398 --> 08:24:20,080
efficiently. And like I talked about,

16365
08:24:20,080 --> 08:24:22,398
Nen is built on top of lang chain. It

16366
08:24:22,398 --> 08:24:24,000
provides a structured way to call AI

16367
08:24:24,000 --> 08:24:26,240
models and APIs, but it lacks some of

16368
08:24:26,240 --> 08:24:28,000
that flexibility of writing that really

16369
08:24:28,000 --> 08:24:30,398
custom code within there for complex

16370
08:24:30,398 --> 08:24:32,398
decision-m. And then when it comes to

16371
08:24:32,398 --> 08:24:34,718
authentication at scale, it can struggle

16372
08:24:34,718 --> 08:24:36,240
with like secure large scale

16373
08:24:36,240 --> 08:24:38,320
authentication and data access control.

16374
08:24:38,320 --> 08:24:40,160
Obviously, you can hook up to external

16375
08:24:40,160 --> 08:24:41,680
systems to help with some of that

16376
08:24:41,680 --> 08:24:43,440
processing, but when it comes to maybe

16377
08:24:43,440 --> 08:24:45,440
like handling OOTH tokens and all these

16378
08:24:45,440 --> 08:24:47,280
encrypted credentials and session

16379
08:24:47,280 --> 08:24:49,440
management, not that it's not doable

16380
08:24:49,440 --> 08:24:52,798
with NN, um it just seems like getting

16381
08:24:52,798 --> 08:24:54,798
in there with some custom code, it could

16382
08:24:54,798 --> 08:24:57,440
be quicker and more robust. And also,

16383
08:24:57,440 --> 08:24:59,200
that's coming from someone who doesn't

16384
08:24:59,200 --> 08:25:01,760
actually do that myself. Um, just some

16385
08:25:01,760 --> 08:25:03,600
stuff I've heard and you know, with

16386
08:25:03,600 --> 08:25:05,440
what's going on within the agency. Now

16387
08:25:05,440 --> 08:25:06,958
ultimately it seems like if you are

16388
08:25:06,958 --> 08:25:08,878
delivering this stuff at scale for some

16389
08:25:08,878 --> 08:25:10,878
big clients um the best approach is

16390
08:25:10,878 --> 08:25:13,440
going to be a mix a hybrid of no code

16391
08:25:13,440 --> 08:25:15,920
and custom code because you can use NN

16392
08:25:15,920 --> 08:25:17,200
to spin up stuff really quick. You've

16393
08:25:17,200 --> 08:25:20,080
got that modularity you can orchestrate

16394
08:25:20,080 --> 08:25:22,080
automate you know connect to anything

16395
08:25:22,080 --> 08:25:23,840
you need but then working in every once

16396
08:25:23,840 --> 08:25:26,000
in a while some custom Python script for

16397
08:25:26,000 --> 08:25:27,680
some of that complex you know large

16398
08:25:27,680 --> 08:25:30,080
scale processing and data handling. And

16399
08:25:30,080 --> 08:25:31,440
when you combine these two together,

16400
08:25:31,440 --> 08:25:32,478
you're going to be able to spin some

16401
08:25:32,478 --> 08:25:34,478
stuff up a lot quicker, and that's going

16402
08:25:34,478 --> 08:25:37,040
to be pretty robust and powerful. Thanks

16403
08:25:37,040 --> 08:25:38,558
so much for making it all the way to the

16404
08:25:38,558 --> 08:25:40,240
end of this course. I know it's pretty

16405
08:25:40,240 --> 08:25:42,080
massive, but I wanted to pack it with a

16406
08:25:42,080 --> 08:25:43,600
ton of value, and hopefully you guys did

16407
08:25:43,600 --> 08:25:45,280
find it valuable as well, and you feel a

16408
08:25:45,280 --> 08:25:46,798
lot more comfortable right now building

16409
08:25:46,798 --> 08:25:49,200
AI workflows and AI agents than when you

16410
08:25:49,200 --> 08:25:51,520
started this course. If you enjoyed or

16411
08:25:51,520 --> 08:25:52,638
if you learned something new, please

16412
08:25:52,638 --> 08:25:54,000
give it a like and a subscribe. It

16413
08:25:54,000 --> 08:25:55,760
definitely helps me out a ton. Um, like

16414
08:25:55,760 --> 08:25:57,440
I said, super happy that you made it to

16415
08:25:57,440 --> 08:25:59,120
the end of the course. And if you did

16416
08:25:59,120 --> 08:26:01,040
and if you appreciate my teaching style

16417
08:26:01,040 --> 08:26:02,958
or you want to even go more in depth

16418
08:26:02,958 --> 08:26:04,160
than this course right here, then

16419
08:26:04,160 --> 08:26:05,440
definitely check out my paid community.

16420
08:26:05,440 --> 08:26:06,478
The link for that is down in the

16421
08:26:06,478 --> 08:26:08,478
description. It's a community full of

16422
08:26:08,478 --> 08:26:10,080
people who are learning how to build and

16423
08:26:10,080 --> 08:26:12,478
are building a automations using naden

16424
08:26:12,478 --> 08:26:13,920
and a lot of them are coming from no

16425
08:26:13,920 --> 08:26:15,760
code backgrounds as well. So great place

16426
08:26:15,760 --> 08:26:17,040
to get some questions answered,

16427
08:26:17,040 --> 08:26:19,200
brainstorm people, collaborate on

16428
08:26:19,200 --> 08:26:21,200
projects, stuff like that. And we also

16429
08:26:21,200 --> 08:26:22,718
have five live calls per week. So, make

16430
08:26:22,718 --> 08:26:23,920
sure you jump in there and meet other

16431
08:26:23,920 --> 08:26:25,360
people in the space as well as make sure

16432
08:26:25,360 --> 08:26:26,718
you're not getting stuck and you can get

16433
08:26:26,718 --> 08:26:28,478
your questions answered on a call. Like

16434
08:26:28,478 --> 08:26:29,840
I said, would be great to see you in the

16435
08:26:29,840 --> 08:26:31,520
community. But anyways, thanks so much

16436
08:26:31,520 --> 08:26:33,200
for making it to the very end of this

16437
08:26:33,200 --> 08:26:35,200
huge course. Appreciate you guys and I

16438
08:26:35,200 --> 08:26:36,878
will see you in the next video. Thanks

16439
08:26:36,878 --> 08:26:39,920
so much everyone.

